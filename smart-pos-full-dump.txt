
===== C:\Users\Ibnu\Project\smart-pos\.gitignore =====

# Dependencies
/node_modules
/backend/node_modules
/frontend/node_modules

# Build files
/frontend/dist
/backend/build

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE / Editor specific
.vscode/
.idea/

# OS generated files
.DS_Store
Thumbs.db
/vendor/

===== C:\Users\Ibnu\Project\smart-pos\LICENSE =====

MIT License

Copyright (c) [2025] [Ibnu Fauzi]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===== C:\Users\Ibnu\Project\smart-pos\package-lock.json =====

{
  "name": "smart-pos",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "smart-pos",
      "version": "1.0.0",
      "dependencies": {
        "axios": "^1.7.7",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-icons": "^5.3.0",
        "react-loading-skeleton": "^3.5.0",
        "react-router-dom": "^6.27.0",
        "recharts": "^2.13.0",
        "styled-components": "^6.1.13"
      },
      "devDependencies": {
        "@vitejs/plugin-react": "^4.3.2",
        "eslint": "^9.12.0",
        "vite": "^5.4.8"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.6",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.0",
        "@babel/types": "^7.28.0",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.0",
        "@babel/types": "^7.28.0",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.2.tgz",
      "integrity": "sha512-/V9771t+EgXz62aCcyofnQhGM8DQACbRhvzKFsXKC9QM+5MadF8ZmIm0crDMaz3+o0h0zXfJnd4EhbYbxsrcFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.28.2.tgz",
      "integrity": "sha512-KHp2IflsnGywDjBWDkR9iEqiWSpc8GIi0lgTT3mOElT0PP1tG26P4tmFI2YvAdzgq9RGyoHZQEIEdZy6Ec5xCA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.0",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.2.tgz",
      "integrity": "sha512-ruv7Ae4J5dUYULmeXw1gmb7rYRz57OWCPM57pHojnLq/3Z1CK2lNSLTCVjxVk1F/TZHwOZZrOWi0ur95BbLxNQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@emotion/is-prop-valid": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.2.tgz",
      "integrity": "sha512-uNsoYd37AFmaCdXlg6EYD1KaPOaRWRByMCYzbKUX4+hhMfrxdVSelShywL4JVaAeM/eHUOSprYBQls+/neX3pw==",
      "license": "MIT",
      "dependencies": {
        "@emotion/memoize": "^0.8.1"
      }
    },
    "node_modules/@emotion/memoize": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.1.tgz",
      "integrity": "sha512-W2P2c/VRW1/1tLox0mVUalvnWXxavmv/Oum2aPsRcoDJuob75FC3Y8FbpfLwUegRcxINtGUMPq0tFCvYNTBXNA==",
      "license": "MIT"
    },
    "node_modules/@emotion/unitless": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.8.1.tgz",
      "integrity": "sha512-KOEGMu6dmJZtpadb476IsZBclKvILjopjUii3V+7MnXIQCYh8W3NgNcgwo21n9LXZX6EDIKvqfjYxXebDwxKmQ==",
      "license": "MIT"
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.21.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.0.tgz",
      "integrity": "sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.3.0.tgz",
      "integrity": "sha512-ViuymvFmcJi04qdZeDc2whTHryouGcDlaxPqarTD0ZE10ISpxGUVZGZDx4w01upyIynL3iu6IXH2bS1NhclQMw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.15.1",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.15.1.tgz",
      "integrity": "sha512-bkOp+iumZCCbt1K1CmWf0R9pM5yKpDv+ZXtvSyQpudrI9kuFLp+bM2WOPXImuD/ceQuaa8f5pj93Y7zyECIGNA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.31.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.31.0.tgz",
      "integrity": "sha512-LOm5OVt7D4qiKCqoiPbA7LWmI+tbw1VbTUowBcUMgQSuM6poJufkFkYDcQpo5KfgD39TnNySV26QjOh7VFpSyw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.3.4",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.3.4.tgz",
      "integrity": "sha512-Ul5l+lHEcw3L5+k8POx6r74mxEYKG5kOb6Xpy2gCRW6zweT6TEhAf8vhxGgjhqrd/VO/Dirhsb+1hNpD1ue9hw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.15.1",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
      "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.12",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.29",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.23.0",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.27",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.27.tgz",
      "integrity": "sha512-+d0F4MKMCbeVUJwG96uQ4SgAznZNSq93I3V+9NHA4OpvqG8mRCpGdKmK8l/dl02h2CCDHwW2FqilnTyDcAnqjA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.45.1.tgz",
      "integrity": "sha512-NEySIFvMY0ZQO+utJkgoMiCAjMrGvnbDLHvcmlA33UXJpYBCvlBEbMMtV837uCkS+plG2umfhn0T5mMAxGrlRA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.45.1.tgz",
      "integrity": "sha512-ujQ+sMXJkg4LRJaYreaVx7Z/VMgBBd89wGS4qMrdtfUFZ+TSY5Rs9asgjitLwzeIbhwdEhyj29zhst3L1lKsRQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.45.1.tgz",
      "integrity": "sha512-FSncqHvqTm3lC6Y13xncsdOYfxGSLnP+73k815EfNmpewPs+EyM49haPS105Rh4aF5mJKywk9X0ogzLXZzN9lA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.45.1.tgz",
      "integrity": "sha512-2/vVn/husP5XI7Fsf/RlhDaQJ7x9zjvC81anIVbr4b/f0xtSmXQTFcGIQ/B1cXIYM6h2nAhJkdMHTnD7OtQ9Og==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.45.1.tgz",
      "integrity": "sha512-4g1kaDxQItZsrkVTdYQ0bxu4ZIQ32cotoQbmsAnW1jAE4XCMbcBPDirX5fyUzdhVCKgPcrwWuucI8yrVRBw2+g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.45.1.tgz",
      "integrity": "sha512-L/6JsfiL74i3uK1Ti2ZFSNsp5NMiM4/kbbGEcOCps99aZx3g8SJMO1/9Y0n/qKlWZfn6sScf98lEOUe2mBvW9A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.45.1.tgz",
      "integrity": "sha512-RkdOTu2jK7brlu+ZwjMIZfdV2sSYHK2qR08FUWcIoqJC2eywHbXr0L8T/pONFwkGukQqERDheaGTeedG+rra6Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.45.1.tgz",
      "integrity": "sha512-3kJ8pgfBt6CIIr1o+HQA7OZ9mp/zDk3ctekGl9qn/pRBgrRgfwiffaUmqioUGN9hv0OHv2gxmvdKOkARCtRb8Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.45.1.tgz",
      "integrity": "sha512-k3dOKCfIVixWjG7OXTCOmDfJj3vbdhN0QYEqB+OuGArOChek22hn7Uy5A/gTDNAcCy5v2YcXRJ/Qcnm4/ma1xw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.45.1.tgz",
      "integrity": "sha512-PmI1vxQetnM58ZmDFl9/Uk2lpBBby6B6rF4muJc65uZbxCs0EA7hhKCk2PKlmZKuyVSHAyIw3+/SiuMLxKxWog==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.45.1.tgz",
      "integrity": "sha512-9UmI0VzGmNJ28ibHW2GpE2nF0PBQqsyiS4kcJ5vK+wuwGnV5RlqdczVocDSUfGX/Na7/XINRVoUgJyFIgipoRg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.45.1.tgz",
      "integrity": "sha512-7nR2KY8oEOUTD3pBAxIBBbZr0U7U+R9HDTPNy+5nVVHDXI4ikYniH1oxQz9VoB5PbBU1CZuDGHkLJkd3zLMWsg==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.45.1.tgz",
      "integrity": "sha512-nlcl3jgUultKROfZijKjRQLUu9Ma0PeNv/VFHkZiKbXTBQXhpytS8CIj5/NfBeECZtY2FJQubm6ltIxm/ftxpw==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.45.1.tgz",
      "integrity": "sha512-HJV65KLS51rW0VY6rvZkiieiBnurSzpzore1bMKAhunQiECPuxsROvyeaot/tcK3A3aGnI+qTHqisrpSgQrpgA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.45.1.tgz",
      "integrity": "sha512-NITBOCv3Qqc6hhwFt7jLV78VEO/il4YcBzoMGGNxznLgRQf43VQDae0aAzKiBeEPIxnDrACiMgbqjuihx08OOw==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.45.1.tgz",
      "integrity": "sha512-+E/lYl6qu1zqgPEnTrs4WysQtvc/Sh4fC2nByfFExqgYrqkKWp1tWIbe+ELhixnenSpBbLXNi6vbEEJ8M7fiHw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.45.1.tgz",
      "integrity": "sha512-a6WIAp89p3kpNoYStITT9RbTbTnqarU7D8N8F2CV+4Cl9fwCOZraLVuVFvlpsW0SbIiYtEnhCZBPLoNdRkjQFw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.45.1.tgz",
      "integrity": "sha512-T5Bi/NS3fQiJeYdGvRpTAP5P02kqSOpqiopwhj0uaXB6nzs5JVi2XMJb18JUSKhCOX8+UE1UKQufyD6Or48dJg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.45.1.tgz",
      "integrity": "sha512-lxV2Pako3ujjuUe9jiU3/s7KSrDfH6IgTSQOnDWr9aJ92YsFd7EurmClK0ly/t8dzMkDtd04g60WX6yl0sGfdw==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.45.1.tgz",
      "integrity": "sha512-M/fKi4sasCdM8i0aWJjCSFm2qEnYRR8AMLG2kxp6wD13+tMGA4Z1tVAuHkNRjud5SW2EM3naLuK35w9twvf6aA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/d3-array": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-color": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
      "license": "MIT"
    },
    "node_modules/@types/d3-ease": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
      "license": "MIT"
    },
    "node_modules/@types/d3-interpolate": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-color": "*"
      }
    },
    "node_modules/@types/d3-path": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-scale": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-time": "*"
      }
    },
    "node_modules/@types/d3-shape": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-path": "*"
      }
    },
    "node_modules/@types/d3-time": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
      "license": "MIT"
    },
    "node_modules/@types/d3-timer": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
      "license": "MIT"
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/stylis": {
      "version": "4.2.5",
      "resolved": "https://registry.npmjs.org/@types/stylis/-/stylis-4.2.5.tgz",
      "integrity": "sha512-1Xve+NMN7FWjY14vLoY5tL3BVEQ/n42YLwaqJIPYhotZ9uBHt87VceMwWQpzmdEt2TNXIorIFG+YeCUUW7RInw==",
      "license": "MIT"
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.7.0.tgz",
      "integrity": "sha512-gUu9hwfWvvEDBBmgtAowQCojwZmJ5mcLn3aufeCsitijs3+f2NsrPtlAWIR6OPiqljl96GVCUbLe0HyqIpVaoA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.28.0",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.27",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.11.0.tgz",
      "integrity": "sha512-1Lx3WLFQWm3ooKDYZD1eXmoGO9fxYQjrycfHFC8P0sCfQVXyROp0p9PFWBehewBOdCwHc+f/b8I0fMto5eSfwA==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.4",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.1",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001726",
        "electron-to-chromium": "^1.5.173",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelize": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/camelize/-/camelize-1.0.1.tgz",
      "integrity": "sha512-dU+Tx2fsypxTgtLoE36npi3UqcjSSMNYfkqgmoEhtZrraP5VWq0K7FkWVTYa8eMPtnU/G2txVsfdCJTn9uzpuQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001727",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/css-color-keywords": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/css-color-keywords/-/css-color-keywords-1.0.0.tgz",
      "integrity": "sha512-FyyrDHZKEjXDpNJYvVsV960FiqQyXc/LlYmsxl2BcdMb2WPx0OGRVgTg55rPSyLSNMqP52R9r8geSp7apN3Ofg==",
      "license": "ISC",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/css-to-react-native": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/css-to-react-native/-/css-to-react-native-3.2.0.tgz",
      "integrity": "sha512-e8RKaLXMOFii+02mOlqwjbD00KSEKqblnpO9e++1aXS1fPQOpS1YoqdVHBqPjHNoxeF2mimzVqawm2KCbEdtHQ==",
      "license": "MIT",
      "dependencies": {
        "camelize": "^1.0.0",
        "css-color-keywords": "^1.0.0",
        "postcss-value-parser": "^4.0.2"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js-light": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/dom-helpers": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.8.7",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.191",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.191.tgz",
      "integrity": "sha512-xcwe9ELcuxYLUFqZZxL19Z6HVKcvNkIwhbHUz7L3us6u12yR+7uY89dSl570f/IqNthx8dAw3tojG7i4Ni4tDA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.21.5",
        "@esbuild/android-arm": "0.21.5",
        "@esbuild/android-arm64": "0.21.5",
        "@esbuild/android-x64": "0.21.5",
        "@esbuild/darwin-arm64": "0.21.5",
        "@esbuild/darwin-x64": "0.21.5",
        "@esbuild/freebsd-arm64": "0.21.5",
        "@esbuild/freebsd-x64": "0.21.5",
        "@esbuild/linux-arm": "0.21.5",
        "@esbuild/linux-arm64": "0.21.5",
        "@esbuild/linux-ia32": "0.21.5",
        "@esbuild/linux-loong64": "0.21.5",
        "@esbuild/linux-mips64el": "0.21.5",
        "@esbuild/linux-ppc64": "0.21.5",
        "@esbuild/linux-riscv64": "0.21.5",
        "@esbuild/linux-s390x": "0.21.5",
        "@esbuild/linux-x64": "0.21.5",
        "@esbuild/netbsd-x64": "0.21.5",
        "@esbuild/openbsd-x64": "0.21.5",
        "@esbuild/sunos-x64": "0.21.5",
        "@esbuild/win32-arm64": "0.21.5",
        "@esbuild/win32-ia32": "0.21.5",
        "@esbuild/win32-x64": "0.21.5"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.31.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.31.0.tgz",
      "integrity": "sha512-QldCVh/ztyKJJZLr4jXNUByx3gR+TDYZCRXEktiZoUR3PGy4qCmSbkxcIle8GEwGpb5JBZazlaJ/CxLidXdEbQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.21.0",
        "@eslint/config-helpers": "^0.3.0",
        "@eslint/core": "^0.15.0",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.31.0",
        "@eslint/plugin-kit": "^0.3.1",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.4.0",
        "eslint-visitor-keys": "^4.2.1",
        "espree": "^10.4.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.4.0.tgz",
      "integrity": "sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.4.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.4.0.tgz",
      "integrity": "sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.15.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-equals": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/fast-equals/-/fast-equals-5.2.2.tgz",
      "integrity": "sha512-V7/RktU11J3I36Nwq2JnZEM7tNm17eBJz+u25qdxBZeCKiX6BkVSZQjwWIr+IobgnZy+ag73tTZgZi7tr0LrBw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/postcss": {
      "version": "8.4.49",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.49.tgz",
      "integrity": "sha512-OCVPnIObs4N29kxTjzLfUryOkvZEq+pf8jTF0lg8E7uETuWHA+v7j3c/xJmiqpX450191LlmZfUKkXxkTry7nA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.7",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "license": "MIT"
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/prop-types/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-icons": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/react-icons/-/react-icons-5.5.0.tgz",
      "integrity": "sha512-MEFcXdkP3dLo8uumGI5xN3lDFNsRtrjbOEKDLD7yv76v4wpnEq2Lt2qeHaQOr34I/wPN3s3+N08WkQ+CW37Xiw==",
      "license": "MIT",
      "peerDependencies": {
        "react": "*"
      }
    },
    "node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "license": "MIT"
    },
    "node_modules/react-loading-skeleton": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/react-loading-skeleton/-/react-loading-skeleton-3.5.0.tgz",
      "integrity": "sha512-gxxSyLbrEAdXTKgfbpBEFZCO/P153DnqSCQau2+o6lNy1jgMRr2MmRmOzMmyrwSaSYLRB8g7b0waYPmUjz7IhQ==",
      "license": "MIT",
      "peerDependencies": {
        "react": ">=16.8.0"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.1.tgz",
      "integrity": "sha512-X1m21aEmxGXqENEPG3T6u0Th7g0aS4ZmoNynhbs+Cn+q+QGTLt+d5IQ2bHAXKzKcxGJjxACpVbnYQSCRcfxHlQ==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.1.tgz",
      "integrity": "sha512-llKsgOkZdbPU1Eg3zK8lCn+sjD9wMRZZPuzmdWWX5SUs8OFkN5HnFVC0u5KMeMaC9aoancFI/KoLuKPqN+hxHw==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0",
        "react-router": "6.30.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/react-smooth": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/react-smooth/-/react-smooth-4.0.4.tgz",
      "integrity": "sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==",
      "license": "MIT",
      "dependencies": {
        "fast-equals": "^5.0.1",
        "prop-types": "^15.8.1",
        "react-transition-group": "^4.4.5"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/react-transition-group": {
      "version": "4.4.5",
      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/runtime": "^7.5.5",
        "dom-helpers": "^5.0.1",
        "loose-envify": "^1.4.0",
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": ">=16.6.0",
        "react-dom": ">=16.6.0"
      }
    },
    "node_modules/recharts": {
      "version": "2.15.4",
      "resolved": "https://registry.npmjs.org/recharts/-/recharts-2.15.4.tgz",
      "integrity": "sha512-UT/q6fwS3c1dHbXv2uFgYJ9BMFHu3fwnd7AYZaEQhXuYQ4hgsxLvsUXzGdKeZrW5xopzDCvuA2N41WJ88I7zIw==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.0.0",
        "eventemitter3": "^4.0.1",
        "lodash": "^4.17.21",
        "react-is": "^18.3.1",
        "react-smooth": "^4.0.4",
        "recharts-scale": "^0.4.4",
        "tiny-invariant": "^1.3.1",
        "victory-vendor": "^36.6.8"
      },
      "engines": {
        "node": ">=14"
      },
      "peerDependencies": {
        "react": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/recharts-scale": {
      "version": "0.4.5",
      "resolved": "https://registry.npmjs.org/recharts-scale/-/recharts-scale-0.4.5.tgz",
      "integrity": "sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==",
      "license": "MIT",
      "dependencies": {
        "decimal.js-light": "^2.4.1"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/rollup": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.45.1.tgz",
      "integrity": "sha512-4iya7Jb76fVpQyLoiVpzUrsjQ12r3dM7fIVz+4NwoYvZOShknRmiv+iu9CClZml5ZLGb0XMcYLutK6w9tgxHDw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.45.1",
        "@rollup/rollup-android-arm64": "4.45.1",
        "@rollup/rollup-darwin-arm64": "4.45.1",
        "@rollup/rollup-darwin-x64": "4.45.1",
        "@rollup/rollup-freebsd-arm64": "4.45.1",
        "@rollup/rollup-freebsd-x64": "4.45.1",
        "@rollup/rollup-linux-arm-gnueabihf": "4.45.1",
        "@rollup/rollup-linux-arm-musleabihf": "4.45.1",
        "@rollup/rollup-linux-arm64-gnu": "4.45.1",
        "@rollup/rollup-linux-arm64-musl": "4.45.1",
        "@rollup/rollup-linux-loongarch64-gnu": "4.45.1",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.45.1",
        "@rollup/rollup-linux-riscv64-gnu": "4.45.1",
        "@rollup/rollup-linux-riscv64-musl": "4.45.1",
        "@rollup/rollup-linux-s390x-gnu": "4.45.1",
        "@rollup/rollup-linux-x64-gnu": "4.45.1",
        "@rollup/rollup-linux-x64-musl": "4.45.1",
        "@rollup/rollup-win32-arm64-msvc": "4.45.1",
        "@rollup/rollup-win32-ia32-msvc": "4.45.1",
        "@rollup/rollup-win32-x64-msvc": "4.45.1",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/shallowequal": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/shallowequal/-/shallowequal-1.1.0.tgz",
      "integrity": "sha512-y0m1JoUZSlPAjXVtPPW70aZWfIL/dSP7AFkRnniLCrK/8MDKog3TySTBmckD+RObVxH0v4Tox67+F14PdED2oQ==",
      "license": "MIT"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/styled-components": {
      "version": "6.1.19",
      "resolved": "https://registry.npmjs.org/styled-components/-/styled-components-6.1.19.tgz",
      "integrity": "sha512-1v/e3Dl1BknC37cXMhwGomhO8AkYmN41CqyX9xhUDxry1ns3BFQy2lLDRQXJRdVVWB9OHemv/53xaStimvWyuA==",
      "license": "MIT",
      "dependencies": {
        "@emotion/is-prop-valid": "1.2.2",
        "@emotion/unitless": "0.8.1",
        "@types/stylis": "4.2.5",
        "css-to-react-native": "3.2.0",
        "csstype": "3.1.3",
        "postcss": "8.4.49",
        "shallowequal": "1.1.0",
        "stylis": "4.3.2",
        "tslib": "2.6.2"
      },
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/styled-components"
      },
      "peerDependencies": {
        "react": ">= 16.8.0",
        "react-dom": ">= 16.8.0"
      }
    },
    "node_modules/styled-components/node_modules/tslib": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
      "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==",
      "license": "0BSD"
    },
    "node_modules/stylis": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.3.2.tgz",
      "integrity": "sha512-bhtUjWd/z6ltJiQwg0dUfxEJ+W+jdqQd8TbWLWyeIJHlnsqmGLRFFd8e5mA0AZi/zx90smXRlN66YMTcaSFifg==",
      "license": "MIT"
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
      "license": "MIT"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/victory-vendor": {
      "version": "36.9.2",
      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-36.9.2.tgz",
      "integrity": "sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==",
      "license": "MIT AND ISC",
      "dependencies": {
        "@types/d3-array": "^3.0.3",
        "@types/d3-ease": "^3.0.0",
        "@types/d3-interpolate": "^3.0.1",
        "@types/d3-scale": "^4.0.2",
        "@types/d3-shape": "^3.1.0",
        "@types/d3-time": "^3.0.0",
        "@types/d3-timer": "^3.0.0",
        "d3-array": "^3.1.6",
        "d3-ease": "^3.0.1",
        "d3-interpolate": "^3.0.1",
        "d3-scale": "^4.0.2",
        "d3-shape": "^3.1.0",
        "d3-time": "^3.0.0",
        "d3-timer": "^3.0.1"
      }
    },
    "node_modules/vite": {
      "version": "5.4.19",
      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.19.tgz",
      "integrity": "sha512-qO3aKv3HoQC8QKiNSTuUM1l9o/XX3+c+VTgLHbJWHZGeTPVAg2XwazI9UWzoxjIJCGCV2zU60uqMzjeLZuULqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.21.3",
        "postcss": "^8.4.43",
        "rollup": "^4.20.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || >=20.0.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}


===== C:\Users\Ibnu\Project\smart-pos\package.json =====

{
  "name": "smart-pos",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "format": "prettier --write ."
  },
  "dependencies": {
    "axios": "^1.7.7",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "react-loading-skeleton": "^3.5.0",
    "react-router-dom": "^6.27.0",
    "recharts": "^2.13.0",
    "styled-components": "^6.1.13"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.3.2",
    "eslint": "^9.12.0",
    "vite": "^5.4.8"
  }
}


===== C:\Users\Ibnu\Project\smart-pos\README.md =====

# 🚀 Smart Point of Sale (POS)

[![Lisensi: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)
[![Status: Dalam Pengembangan](https://img.shields.io/badge/status-in%20development-yellow.svg)](https://github.com/ifauzeee/Point-of-Sale)

Aplikasi web *full-stack* Point of Sale (POS) modern yang dibangun menggunakan stack MERN (MySQL, Express.js, React.js, Node.js). Proyek ini dirancang sebagai sistem kasir yang intuitif, cepat, dan kaya fitur untuk berbagai jenis bisnis ritel atau F&B.

**(Disarankan: Ambil screenshot baru dari halaman Produk atau Pemasok dan ganti link di bawah ini)**
![Smart POS Preview](https://i.postimg.cc/MKQQhTb8/gambar.png)

## ✨ Fitur Utama

-   **Otentikasi & Otorisasi:**
    -   Sistem Login & Registrasi aman (hashing password & JWT).
    -   Hak akses berbasis peran (Admin & Kasir) dengan menu dinamis.

-   **Manajemen Inventaris & Produk:**
    -   CRUD (Create, Read, Update, Delete) lengkap untuk **Produk**.
    -   Penambahan **Harga Beli (Modal)** untuk kalkulasi laba.
    -   **Ambang Batas Stok Rendah** untuk setiap produk.
    -   Peringatan visual di **Dashboard** untuk produk yang stoknya menipis.

-   **Manajemen Toko:**
    -   CRUD lengkap untuk **Pemasok (Supplier)**.
    -   Menghubungkan produk ke pemasoknya.
    -   Manajemen **Kategori & Sub-kategori** untuk pengelompokan produk.
    -   Admin dapat mengelola akun **Pengguna** lain (CRUD).

-   **Operasional Kasir:**
    -   Tampilan kasir (POS) dengan grid produk visual.
    -   Pencarian produk secara *real-time*.
    -   Keranjang belanja dinamis (tambah, kurang, hapus item).
    -   Proses checkout dengan kalkulasi kembalian.

-   **Fitur Pasca-Transaksi:**
    -   **Riwayat Transaksi** dengan detail per item.
    -   Admin dapat menghapus transaksi.
    -   Kirim **Struk Digital** ke email pelanggan (via Nodemailer & Gmail).
    -   Fungsionalitas untuk **Cetak Struk Fisik**.

-   **Analitik & Laporan:**
    -   Dashboard analitik dengan statistik penjualan harian.
    -   Visualisasi data penjualan & produk terlaris dengan grafik.

-   **Pengalaman Pengguna (UX):**
    -   **Theme Switcher**: Pilihan tema Terang (Light) dan Gelap (Dark).
    -   Notifikasi *Toast* yang informatif untuk semua aksi.
    -   *Loading skeleton* untuk pengalaman memuat data yang lebih baik.
    -   Desain responsif.

## 💻 Tumpukan Teknologi (Tech Stack)

-   **Frontend:** React.js, Styled-Components, Framer Motion, React Router, Axios, Recharts, React-Toastify
-   **Backend:** Node.js, Express.js, MySQL (MariaDB), JWT, Bcrypt.js, Nodemailer
-   **Database:** MySQL / MariaDB
-   **Development:** Git, VS Code, Vite, Nodemon

## 🛠️ Panduan Instalasi & Menjalankan Lokal

### **Prasyarat**
-   [Node.js](https://nodejs.org/) (v18 atau lebih baru)
-   [Git](https://git-scm.com/)
-   [XAMPP](https://www.apachefriends.org/) (atau server MySQL/MariaDB lainnya)

### **Langkah 1: Clone Repository**
```bash
git clone [https://github.com/ifauzeee/Point-of-Sale.git](https://github.com/ifauzeee/Point-of-Sale.git)
cd Point-of-Sale
```

### **Langkah 2: Setup Database**
1.  Nyalakan **Apache** dan **MySQL** dari XAMPP Control Panel.
2.  Buka **phpMyAdmin** (`http://localhost/phpmyadmin`).
3.  Buat database baru dengan nama `smart_pos_db`.
4.  Pilih database `smart_pos_db`, lalu klik tab **"Import"**.
5.  Klik "Choose File" dan pilih file `database.sql` yang ada di dalam proyek ini.
6.  Klik **"Go"** atau **"Import"**.

### **Langkah 3: Setup Backend**
1.  Buka terminal baru dan masuk ke folder backend:
    ```bash
    cd backend
    ```
2.  Install semua dependensi:
    ```bash
    npm install
    ```
3.  Buat file `.env` di dalam folder `backend` dan isi seperti contoh di bawah (sesuaikan dengan konfigurasi Anda):
    ```env
    # Konfigurasi Database
    DB_HOST=localhost
    DB_USER=root
    DB_PASSWORD=
    DB_NAME=smart_pos_db

    # Kunci Rahasia Enkripsi & JWT (Ganti dengan teks acak yang panjang)
    ENCRYPTION_KEY=iniadalahkuncirahasia32karakter!!
    JWT_SECRET=INI_ADALAH_KUNCI_SANGAT_RAHASIA_DAN_HARUS_DIGANTI

    # Konfigurasi Email (Opsional, untuk kirim struk)
    EMAIL_USER=emailanda@gmail.com
    EMAIL_PASS=16karakterapppasswordgoogleanda
    ```
4.  Jalankan server backend:
    ```bash
    npm start
    ```
    Server akan berjalan di `http://localhost:5000`.

### **Langkah 4: Setup Frontend**
1.  Buka terminal baru dan masuk ke folder frontend:
    ```bash
    cd frontend
    ```
2.  Install semua dependensi:
    ```bash
    npm install
    ```
3.  Jalankan server development frontend:
    ```bash
    npm run dev
    ```
    Aplikasi akan berjalan di `http://localhost:5173`.

### **Langkah 5: Akun Pertama**
- Buka aplikasi dan pergi ke halaman registrasi untuk membuat akun pertama. **Akun pertama yang dibuat akan otomatis menjadi Admin.**

## 🗺️ Roadmap (Rencana Pengembangan)

Berikut adalah beberapa fitur yang direncanakan untuk pengembangan selanjutnya:
-   [ ] **Manajemen Pelanggan (CRM)**: Menyimpan data pelanggan dan melacak riwayat transaksi mereka.
-   [ ] **Laporan Lanjutan**: Filter laporan berdasarkan tanggal dan ekspor data ke CSV/PDF.
-   [ ] **Dukungan Barcode Scanner**: Mempercepat input produk di halaman kasir.
-   [ ] **Manajemen Varian Produk**: Mengelola produk dengan berbagai ukuran, warna, atau tipe.

## 📜 Lisensi

Proyek ini dilisensikan di bawah Lisensi MIT. Lihat file [LICENSE](LICENSE) untuk detailnya.

===== C:\Users\Ibnu\Project\smart-pos\backend\.env =====

# --- Konfigurasi Database ---
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=
DB_NAME=smart_pos_db

# --- Kunci Rahasia JWT (Ganti dengan teks acak yang panjang!) ---
JWT_SECRET=INI_KUNCI_RAHASIA_YANG_SANGAT_PANJANG_DAN_AMAN_HARUS_DIGANTI

# --- Kunci Registrasi Admin Pertama ---
# Pastikan ini sangat rahasia. Hanya untuk pendaftaran admin pertama kali.
ADMIN_REGISTRATION_KEY="KODE_RAHASIA_UNTUK_REGISTRASI_ADMIN_PERTAMA"

# --- Kunci Enkripsi (Ganti dengan 32 karakter acak!) ---
# Gunakan tool seperti https://randomkeygen.com/ untuk membuat string acak.
# Contoh: 9s5Gq7Z2kHjX1cD8bP3fV4nM6yT0wU9xY
ENCRYPTION_KEY=ganti_dengan_32_karakter_acak__

# --- Konfigurasi Email (untuk Kirim Struk) ---
EMAIL_USER=emailanda@gmail.com
EMAIL_PASS=sandi16karaktergoogleapp

===== C:\Users\Ibnu\Project\smart-pos\backend\index.js =====

// backend/index.js

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');

// Import all route files
const userRoutes = require('./routes/userRoutes');
const productRoutes = require('./routes/productRoutes');
const orderRoutes = require('./routes/orderRoutes');
const analyticsRoutes = require('./routes/analyticsRoutes');
const settingsRoutes = require('./routes/settingsRoutes');
const categoryRoutes = require('./routes/categoryRoutes');
const supplierRoutes = require('./routes/supplierRoutes');
const customerRoutes = require('./routes/customerRoutes');
const uploadRoutes = require('./routes/uploadRoutes');
const expenseRoutes = require('./routes/expenseRoutes');
const reportRoutes = require('./routes/reportRoutes');
const shiftRoutes = require('./routes/shiftRoutes');
const promotionRoutes = require('./routes/promotionRoutes');
const stockRoutes = require('./routes/stockRoutes');

const app = express();

// Configure CORS to expose the Content-Disposition header
app.use(cors({
    origin: 'http://localhost:5173',
    exposedHeaders: ['Content-Disposition'],
}));

// Middleware to read JSON
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Optional: Basic error handling for body-parser (useful for debugging malformed JSON)
app.use((err, req, res, next) => {
    if (err instanceof SyntaxError && err.status === 400 && 'body' in err) {
        console.error('Bad JSON:', err.message);
        return res.status(400).send({ message: 'Permintaan tidak valid: JSON salah format.' });
    }
    next();
});
// Middleware to serve static files (uploaded images)
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Register all API routes
app.use('/api/users', userRoutes);
app.use('/api/products', productRoutes);
app.use('/api/orders', orderRoutes);
app.use('/api/analytics', analyticsRoutes);
app.use('/api/settings', settingsRoutes);
app.use('/api/categories', categoryRoutes);
app.use('/api/suppliers', supplierRoutes);
app.use('/api/customers', customerRoutes);
app.use('/api/upload', uploadRoutes);
app.use('/api/expenses', expenseRoutes);
app.use('/api/reports', reportRoutes);
app.use('/api/shifts', shiftRoutes);
app.use('/api/promotions', promotionRoutes);
app.use('/api/stock', stockRoutes);

// NEW: Add a basic root route for the backend server
// This helps in testing if the backend server is actually running
app.get('/', (req, res) => {
    res.status(200).send('Smart POS Backend API is running!');
});

const port = process.env.PORT || 5000;

app.listen(port, () => {
    console.log(`🚀 Backend server running at http://localhost:${port}`);
});

===== C:\Users\Ibnu\Project\smart-pos\backend\package-lock.json =====

{
  "name": "backend",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "backend",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "bcrypt": "^5.1.1",
        "body-parser": "^2.2.0",
        "cors": "^2.8.5",
        "csv-writer": "^1.6.0",
        "dotenv": "^17.2.0",
        "express": "^5.1.0",
        "jsonwebtoken": "^9.0.2",
        "multer": "^2.0.2",
        "mysql2": "^3.14.2",
        "nodemailer": "^7.0.5",
        "pdfkit": "^0.15.0"
      },
      "devDependencies": {
        "nodemon": "^3.1.10"
      }
    },
    "node_modules/@mapbox/node-pre-gyp": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
      "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "detect-libc": "^2.0.0",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.7",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      },
      "bin": {
        "node-pre-gyp": "bin/node-pre-gyp"
      }
    },
    "node_modules/@swc/helpers": {
      "version": "0.3.17",
      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.3.17.tgz",
      "integrity": "sha512-tb7Iu+oZ+zWJZ3HJqwx8oNwSDIU440hmVMDPhpACWQWnrZHK99Bxs70gT1L2dnr5Hg50ZRWEFkQCAnOVVV0z1Q==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
      "license": "ISC"
    },
    "node_modules/accepts": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-2.0.0.tgz",
      "integrity": "sha512-5cvg6CtKwfgdmVqY1WIiXKc3Q1bkRqGLi+2W/6ao+6Y7gu/RCwRuAhGEzh5B4KlszSuTLgZYuqFqo5bImjNKng==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "^3.0.0",
        "negotiator": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/append-field": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
      "integrity": "sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw==",
      "license": "MIT"
    },
    "node_modules/aproba": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.1.0.tgz",
      "integrity": "sha512-tLIEcj5GuR2RSTnxNKdkK0dJ/GrC7P38sUkiDmDuHfsHmbagTFAxDVIBltoklXEVIQ/f14IL8IMJ5pn9Hez1Ew==",
      "license": "ISC"
    },
    "node_modules/are-we-there-yet": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/aws-ssl-profiles": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/aws-ssl-profiles/-/aws-ssl-profiles-1.1.2.tgz",
      "integrity": "sha512-NZKeq9AfyQvEeNlN0zSYAaWrmBffJh3IELMZfRpJVWgrpEbtEpnjvzqBPf+mxoI287JohRDoa+/nsfqqiZmF6g==",
      "license": "MIT",
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "license": "MIT"
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/bcrypt": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.1.tgz",
      "integrity": "sha512-AGBHOG5hPYZ5Xl9KXzU5iKq9516yEmvCKDg3ecP5kX2aB6UqTeXZxk2ELnDgDm6BQSMlLt9rDB4LoSMx0rYwww==",
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "@mapbox/node-pre-gyp": "^1.0.11",
        "node-addon-api": "^5.0.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/body-parser": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-2.2.0.tgz",
      "integrity": "sha512-02qvAaxv8tp7fBa/mw1ga98OGm+eCbqzJOKoRt70sLmfEEi+jyBYVTDGfCL/k06/4EMk/z01gCe7HoCH/f2LTg==",
      "license": "MIT",
      "dependencies": {
        "bytes": "^3.1.2",
        "content-type": "^1.0.5",
        "debug": "^4.4.0",
        "http-errors": "^2.0.0",
        "iconv-lite": "^0.6.3",
        "on-finished": "^2.4.1",
        "qs": "^6.14.0",
        "raw-body": "^3.0.0",
        "type-is": "^2.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/brotli": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/brotli/-/brotli-1.3.3.tgz",
      "integrity": "sha512-oTKjJdShmDuGW94SyyaoQvAjf30dZaHnjJ8uAF+u2/vGJkJbJPJAT1gDiOJP5v1Zb6f9KEyW/1HpuaWIXtGHPg==",
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.1.2"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "license": "MIT"
    },
    "node_modules/busboy": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.16.0"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/clone": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/clone/-/clone-2.1.2.tgz",
      "integrity": "sha512-3Pe/CF1Nn94hyhIYpjtiLhdCoEoz0DqQ+988E9gmeEdQZlojxnOb74wctFyuwWQHzqyf9X7C7MG8juUpqBJT8w==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
      "license": "ISC",
      "bin": {
        "color-support": "bin.js"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "license": "MIT"
    },
    "node_modules/concat-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-2.0.0.tgz",
      "integrity": "sha512-MWufYdFw53ccGjCA+Ol7XJYpAlW6/prSMzuPOTRnJGcGzuhLn4Scrz7qf6o8bROZ514ltazcIFJZevcfbo0x7A==",
      "engines": [
        "node >= 6.0"
      ],
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^3.0.2",
        "typedarray": "^0.0.6"
      }
    },
    "node_modules/console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ==",
      "license": "ISC"
    },
    "node_modules/content-disposition": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-1.0.0.tgz",
      "integrity": "sha512-Au9nRL8VNUut/XSzbQA38+M78dzP4D+eqg3gfJHMIHHYa3bg067xj1KxMUWj+VULbiZMowKngFFbKczUrNJ1mg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.7.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.2.2.tgz",
      "integrity": "sha512-D76uU73ulSXrD1UXF4KE2TMxVVwhsnCgfAyTg9k8P6KGZjlXKrOLe4dJQKI3Bxi5wjesZoFXJWElNWBjPZMbhg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.6.0"
      }
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/crypto-js": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-4.2.0.tgz",
      "integrity": "sha512-KALDyEYgpY+Rlob/iriUtjV6d5Eq+Y191A5g4UqLAi8CyGP9N1+FdVbkc1SxKc2r4YAYqG8JzO2KGL+AizD70Q==",
      "license": "MIT"
    },
    "node_modules/csv-writer": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/csv-writer/-/csv-writer-1.6.0.tgz",
      "integrity": "sha512-NOx7YDFWEsM/fTRAJjRpPp8t+MKRVvniAg9wQlUKx20MFrPs73WLJhFf5iteqrxNYnsy924K3Iroh3yNHeYd2g==",
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-equal": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/deep-equal/-/deep-equal-2.2.3.tgz",
      "integrity": "sha512-ZIwpnevOurS8bpT4192sqAowWM76JDKSHYzMLty3BZGSswgq6pBaH3DhCSW5xVAZICZyKdOBPjwww5wfgT/6PA==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.0",
        "call-bind": "^1.0.5",
        "es-get-iterator": "^1.1.3",
        "get-intrinsic": "^1.2.2",
        "is-arguments": "^1.1.1",
        "is-array-buffer": "^3.0.2",
        "is-date-object": "^1.0.5",
        "is-regex": "^1.1.4",
        "is-shared-array-buffer": "^1.0.2",
        "isarray": "^2.0.5",
        "object-is": "^1.1.5",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.4",
        "regexp.prototype.flags": "^1.5.1",
        "side-channel": "^1.0.4",
        "which-boxed-primitive": "^1.0.2",
        "which-collection": "^1.0.1",
        "which-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ==",
      "license": "MIT"
    },
    "node_modules/denque": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dfa": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/dfa/-/dfa-1.2.0.tgz",
      "integrity": "sha512-ED3jP8saaweFTjeGX8HQPjeC1YYyZs98jGNZx6IiBvxW7JG5v492kamAQB3m2wop07CvU/RQmzcKr6bgcC5D/Q==",
      "license": "MIT"
    },
    "node_modules/dotenv": {
      "version": "17.2.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-17.2.1.tgz",
      "integrity": "sha512-kQhDYKZecqnM0fCnzI5eIv5L4cAe/iRI+HqMbO/hbRdTAeXDG+M9FjipUxNfbARuEg4iHIbhnhs78BCHNbSxEQ==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-get-iterator": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/es-get-iterator/-/es-get-iterator-1.1.3.tgz",
      "integrity": "sha512-sPZmqHBe6JIiTfN5q2pEi//TwxmAFHwj/XEuYjTuse78i8KxaqMTTzxPoFKuzRpDpTJ+0NAbpfenkmH2rePtuw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "get-intrinsic": "^1.1.3",
        "has-symbols": "^1.0.3",
        "is-arguments": "^1.1.1",
        "is-map": "^2.0.2",
        "is-set": "^2.0.2",
        "is-string": "^1.0.7",
        "isarray": "^2.0.5",
        "stop-iteration-iterator": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/express/-/express-5.1.0.tgz",
      "integrity": "sha512-DT9ck5YIRU+8GYzzU5kT3eHGA5iL+1Zd0EutOmTE9Dtk+Tvuzd23VBU+ec7HPNSTxXYO55gPV/hq4pSBJDjFpA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "^2.0.0",
        "body-parser": "^2.2.0",
        "content-disposition": "^1.0.0",
        "content-type": "^1.0.5",
        "cookie": "^0.7.1",
        "cookie-signature": "^1.2.1",
        "debug": "^4.4.0",
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "etag": "^1.8.1",
        "finalhandler": "^2.1.0",
        "fresh": "^2.0.0",
        "http-errors": "^2.0.0",
        "merge-descriptors": "^2.0.0",
        "mime-types": "^3.0.0",
        "on-finished": "^2.4.1",
        "once": "^1.4.0",
        "parseurl": "^1.3.3",
        "proxy-addr": "^2.0.7",
        "qs": "^6.14.0",
        "range-parser": "^1.2.1",
        "router": "^2.2.0",
        "send": "^1.1.0",
        "serve-static": "^2.2.0",
        "statuses": "^2.0.1",
        "type-is": "^2.0.1",
        "vary": "^1.1.2"
      },
      "engines": {
        "node": ">= 18"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-2.1.0.tgz",
      "integrity": "sha512-/t88Ty3d5JWQbWYgaOGCCYfXRwV1+be02WqYYlL6h0lEiUAMPM8o8qKGO01YIkOHzka2up08wvgYD0mDiI+q3Q==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.4.0",
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "on-finished": "^2.4.1",
        "parseurl": "^1.3.3",
        "statuses": "^2.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/fontkit": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/fontkit/-/fontkit-1.9.0.tgz",
      "integrity": "sha512-HkW/8Lrk8jl18kzQHvAw9aTHe1cqsyx5sDnxncx652+CIfhawokEPkeM3BoIC+z/Xv7a0yMr0f3pRRwhGH455g==",
      "license": "MIT",
      "dependencies": {
        "@swc/helpers": "^0.3.13",
        "brotli": "^1.3.2",
        "clone": "^2.1.2",
        "deep-equal": "^2.0.5",
        "dfa": "^1.2.0",
        "restructure": "^2.0.1",
        "tiny-inflate": "^1.0.3",
        "unicode-properties": "^1.3.1",
        "unicode-trie": "^2.0.0"
      }
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-2.0.0.tgz",
      "integrity": "sha512-Rx/WycZ60HOaqLKAi6cHRKKI7zxWbJ31MhntmtwMoaTeF7XFH9hhBp8vITaMidfljRQ6eYWCKkaTK+ykVJHP2A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "license": "ISC",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs-minipass/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gauge": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/generate-function": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/generate-function/-/generate-function-2.3.1.tgz",
      "integrity": "sha512-eeB5GfMNeevm/GRYq20ShmsaGcmI81kIX2K9XQx5miC8KdHaC6Jm0qQ8ZNeGOi7wYB8OsdxKs+Y2oVuTFuVwKQ==",
      "license": "MIT",
      "dependencies": {
        "is-property": "^1.0.2"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ==",
      "license": "ISC"
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-errors/node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-arguments": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/is-arguments/-/is-arguments-1.2.0.tgz",
      "integrity": "sha512-7bVbi0huj/wrIAOzb8U1aszg9kdi3KN/CyU19CTI7tAoZYEZoL9yCDXpbXN+uPsuWnP02cyug1gleqq+TU+YCA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-promise": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-4.0.0.tgz",
      "integrity": "sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==",
      "license": "MIT"
    },
    "node_modules/is-property": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz",
      "integrity": "sha512-Ks/IoX00TtClbGQr4TWXemAnktAQvYB7HzcCxDGqEZU6oCmb2INHuOoKxbtR+HFkmYWBKv/dOZtGRiAjDhj92g==",
      "license": "MIT"
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "license": "MIT"
    },
    "node_modules/jpeg-exif": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/jpeg-exif/-/jpeg-exif-1.1.4.tgz",
      "integrity": "sha512-a+bKEcCjtuW5WTdgeXFzswSrdqi0jk4XlEtZlx5A94wCoBpFjfFTbo/Tra5SpNCl/YFZPvcV1dJc+TAYeg6ROQ==",
      "license": "MIT"
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jwa": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/linebreak": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/linebreak/-/linebreak-1.1.0.tgz",
      "integrity": "sha512-MHp03UImeVhB7XZtjd0E4n6+3xr5Dq/9xI/5FptGk5FrbDR3zagPa2DS6U8ks/3HjbKWG9Q1M2ufOzxV2qLYSQ==",
      "license": "MIT",
      "dependencies": {
        "base64-js": "0.0.8",
        "unicode-trie": "^2.0.0"
      }
    },
    "node_modules/linebreak/node_modules/base64-js": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-0.0.8.tgz",
      "integrity": "sha512-3XSA2cR/h/73EzlXXdU6YNycmYI7+kicTxks4eJg2g39biHR84slg2+des+p7iHYhbRg/udIS4TD53WabcOUkw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT"
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT"
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT"
    },
    "node_modules/long": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/long/-/long-5.3.2.tgz",
      "integrity": "sha512-mNAgZ1GmyNhD7AuqnTG3/VQ26o760+ZYBPKjPvugO8+nLbYfX6TVpJPseBvopbdY+qpZ/lKUnmEc1LeZYS3QAA==",
      "license": "Apache-2.0"
    },
    "node_modules/lru-cache": {
      "version": "7.18.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-7.18.3.tgz",
      "integrity": "sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/lru.min": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/lru.min/-/lru.min-1.1.2.tgz",
      "integrity": "sha512-Nv9KddBcQSlQopmBHXSsZVY5xsdlZkdH/Iey0BlcBYggMd4two7cZnKOK9vmy3nY0O5RGH99z1PCeTpPqszUYg==",
      "license": "MIT",
      "engines": {
        "bun": ">=1.0.0",
        "deno": ">=1.30.0",
        "node": ">=8.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wellwelwel"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "license": "MIT",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-1.1.0.tgz",
      "integrity": "sha512-aisnrDP4GNe06UcKFnV5bfMNPBUw4jsLGaWwWfnH3v02GnBuXX2MCVn5RbrWo0j3pczUilYblq7fQ7Nw2t5XKw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-2.0.0.tgz",
      "integrity": "sha512-Snk314V5ayFLhp3fkUREub6WtjBfPdCPY1Ln8/8munuLuiYhsABgBVWsozAG+MWMbVEvcdcpbi9R7ww22l9Q3g==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/mime-db": {
      "version": "1.54.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.54.0.tgz",
      "integrity": "sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-3.0.1.tgz",
      "integrity": "sha512-xRc4oEhT6eaBpU1XF7AjpOFD+xQmXNB5OVKwp4tqCuBpHLS/ZbBDrc07mYTDqVMg6PfxUjjNp85O6Cd2Z/5HWA==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "^1.54.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "license": "MIT",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minizlib/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.6"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/multer": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/multer/-/multer-2.0.2.tgz",
      "integrity": "sha512-u7f2xaZ/UG8oLXHvtF/oWTRvT44p9ecwBBqTwgJVq0+4BW1g8OW01TyMEGWBHbyMOYVHXslaut7qEQ1meATXgw==",
      "license": "MIT",
      "dependencies": {
        "append-field": "^1.0.0",
        "busboy": "^1.6.0",
        "concat-stream": "^2.0.0",
        "mkdirp": "^0.5.6",
        "object-assign": "^4.1.1",
        "type-is": "^1.6.18",
        "xtend": "^4.0.2"
      },
      "engines": {
        "node": ">= 10.16.0"
      }
    },
    "node_modules/multer/node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/multer/node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/multer/node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/multer/node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mysql2": {
      "version": "3.14.2",
      "resolved": "https://registry.npmjs.org/mysql2/-/mysql2-3.14.2.tgz",
      "integrity": "sha512-YD6mZMeoypmheHT6b2BrVmQFvouEpRICuvPIREulx2OvP1xAxxeqkMQqZSTBefv0PiOBKGYFa2zQtY+gf/4eQw==",
      "license": "MIT",
      "dependencies": {
        "aws-ssl-profiles": "^1.1.1",
        "denque": "^2.1.0",
        "generate-function": "^2.3.1",
        "iconv-lite": "^0.6.3",
        "long": "^5.2.1",
        "lru.min": "^1.0.0",
        "named-placeholders": "^1.1.3",
        "seq-queue": "^0.0.5",
        "sqlstring": "^2.3.2"
      },
      "engines": {
        "node": ">= 8.0"
      }
    },
    "node_modules/named-placeholders": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/named-placeholders/-/named-placeholders-1.1.3.tgz",
      "integrity": "sha512-eLoBxg6wE/rZkJPhU/xRX1WTpkFEwDJEN96oxFrTsqBdbT5ec295Q+CoHrL9IT0DipqKhmGcaZmwOt8OON5x1w==",
      "license": "MIT",
      "dependencies": {
        "lru-cache": "^7.14.1"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/negotiator": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-1.0.0.tgz",
      "integrity": "sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-addon-api": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA==",
      "license": "MIT"
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/nodemailer": {
      "version": "7.0.5",
      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-7.0.5.tgz",
      "integrity": "sha512-nsrh2lO3j4GkLLXoeEksAMgAOqxOv6QumNRVQTJwKH4nuiww6iC2y7GyANs9kRAxCexg3+lTWM3PZ91iLlVjfg==",
      "license": "MIT-0",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/nodemon": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.10.tgz",
      "integrity": "sha512-WDjw3pJ0/0jMFmyNDp3gvY2YizjLmmOUQo6DEBY+JgdvW/yQ9mEeSw6H5ythl5Ny2ytb7f9C2nIbjSxMNzbJXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^4",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^7.5.3",
        "simple-update-notifier": "^2.0.0",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "license": "ISC",
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/npmlog": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-is": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/object-is/-/object-is-1.1.6.tgz",
      "integrity": "sha512-F8cZ+KfGlSGi09lJT7/Nd6KJZ9ygtvYC0/UYYLI9nmQKLMnydpB9yvbv9K1uSkEu7FU9vYPmVwLg328tX+ot3Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/pako": {
      "version": "0.2.9",
      "resolved": "https://registry.npmjs.org/pako/-/pako-0.2.9.tgz",
      "integrity": "sha512-NUcwaKxUxWrZLpDG+z/xZaCgQITkA/Dv4V/T6bw7VON6l1Xz/VnrBqrYjZQ12TamKHzITTfOEIYUj48y2KXImA==",
      "license": "MIT"
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-8.2.0.tgz",
      "integrity": "sha512-TdrF7fW9Rphjq4RjrW0Kp2AW0Ahwu9sRGTkS6bvDi0SCwZlEZYmcfDbEsTz8RVk0EHIS/Vd1bv3JhG+1xZuAyQ==",
      "license": "MIT",
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/pdfkit": {
      "version": "0.15.2",
      "resolved": "https://registry.npmjs.org/pdfkit/-/pdfkit-0.15.2.tgz",
      "integrity": "sha512-s3GjpdBFSCaeDSX/v73MI5UsPqH1kjKut2AXCgxQ5OH10lPVOu5q5vLAG0OCpz/EYqKsTSw1WHpENqMvp43RKg==",
      "license": "MIT",
      "dependencies": {
        "crypto-js": "^4.2.0",
        "fontkit": "^1.8.1",
        "jpeg-exif": "^1.1.4",
        "linebreak": "^1.0.2",
        "png-js": "^1.0.0"
      }
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/png-js": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/png-js/-/png-js-1.0.0.tgz",
      "integrity": "sha512-k+YsbhpA9e+EFfKjTCH3VW6aoKlyNYI6NYdTfDL4CIvFnvsuO84ttonmZE7rc+v23SLTH8XX+5w/Ak9v0xGY4g=="
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/qs": {
      "version": "6.14.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.14.0.tgz",
      "integrity": "sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-3.0.0.tgz",
      "integrity": "sha512-RmkhL8CAyCRPXCE28MMH0z2PNWQBNk2Q09ZdxM9IOOXwxwZbN+qbWaatPkdkWIKL2ZVDImrN/pK5HTRz2PcS4g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.6.3",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/restructure": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/restructure/-/restructure-2.0.1.tgz",
      "integrity": "sha512-e0dOpjm5DseomnXx2M5lpdZ5zoHqF1+bqdMJUohoYVVQa7cBdnk7fdmeI6byNWP/kiME72EeTiSypTCVnpLiDg==",
      "license": "MIT"
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/router": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/router/-/router-2.2.0.tgz",
      "integrity": "sha512-nLTrUKm2UyiL7rlhapu/Zl45FwNgkZGaCpZbIHajDYgwlJCOzLSk+cIPAnsEqV955GjILJnKbdQC1nVPz+gAYQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.4.0",
        "depd": "^2.0.0",
        "is-promise": "^4.0.0",
        "parseurl": "^1.3.3",
        "path-to-regexp": "^8.0.0"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/send/-/send-1.2.0.tgz",
      "integrity": "sha512-uaW0WwXKpL9blXE2o0bRhoL2EGXIrZxQ2ZQ4mgcfoBxdFmQold+qWsD2jLrfZ0trjKL6vOw0j//eAwcALFjKSw==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.3.5",
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "etag": "^1.8.1",
        "fresh": "^2.0.0",
        "http-errors": "^2.0.0",
        "mime-types": "^3.0.1",
        "ms": "^2.1.3",
        "on-finished": "^2.4.1",
        "range-parser": "^1.2.1",
        "statuses": "^2.0.1"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/seq-queue": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/seq-queue/-/seq-queue-0.0.5.tgz",
      "integrity": "sha512-hr3Wtp/GZIc/6DAGPDcV4/9WoZhjrkXsi5B/07QgX8tsdc6ilr7BFM6PM6rbdAX1kFSDYeZGLipIZZKyQP0O5Q=="
    },
    "node_modules/serve-static": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-2.2.0.tgz",
      "integrity": "sha512-61g9pCh0Vnh7IutZjtLGGpTA355+OPn2TyDv/6ivP2h/AdAVX9azsoxmg2/M6nZeQZNYBEwIcsne1mJd9oQItQ==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "parseurl": "^1.3.3",
        "send": "^1.2.0"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==",
      "license": "ISC"
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "license": "ISC"
    },
    "node_modules/simple-update-notifier": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
      "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/sqlstring": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.3.tgz",
      "integrity": "sha512-qC9iz2FlN7DQl3+wjwn3802RTyjCx7sDvfQEXchwa6CWOx07/WVfh91gBmQ9fahw8snwGEWU3xGzOt4tFyHLxg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.2.tgz",
      "integrity": "sha512-DvEy55V3DB7uknRo+4iOGT5fP1slR8wQohVdknigZPMpMstaKJQWhwiYBACJE3Ul2pTnATihhBYnRhZQHGBiRw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/tar": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.2.1.tgz",
      "integrity": "sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==",
      "license": "ISC",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/tar/node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "license": "MIT",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/tiny-inflate": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tiny-inflate/-/tiny-inflate-1.0.3.tgz",
      "integrity": "sha512-pkY1fj1cKHb2seWDy0B16HeWyczlJA9/WW3u3c4z/NiWDsO3DOU5D7nhTLE9CF0yXv/QZFY7sEJmj24dK+Rrqw==",
      "license": "MIT"
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/type-is": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-2.0.1.tgz",
      "integrity": "sha512-OZs6gsjF4vMp32qrCbiVSkrFmXtG/AZhY3t0iAMrMBiAZyV9oALtXO8hsrHbMXF9x6L3grlFuwW2oAz7cav+Gw==",
      "license": "MIT",
      "dependencies": {
        "content-type": "^1.0.5",
        "media-typer": "^1.1.0",
        "mime-types": "^3.0.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typedarray": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
      "integrity": "sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA==",
      "license": "MIT"
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/unicode-properties": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/unicode-properties/-/unicode-properties-1.4.1.tgz",
      "integrity": "sha512-CLjCCLQ6UuMxWnbIylkisbRj31qxHPAurvena/0iwSVbQ2G1VY5/HjV0IRabOEbDHlzZlRdCrD4NhB0JtU40Pg==",
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.0",
        "unicode-trie": "^2.0.0"
      }
    },
    "node_modules/unicode-trie": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unicode-trie/-/unicode-trie-2.0.0.tgz",
      "integrity": "sha512-x7bc76x0bm4prf1VLg79uhAzKw8DVboClSN5VxJuQ+LKDOVEW9CdH+VY7SP+vX7xCYQqzzgQpFqz15zeLvAtZQ==",
      "license": "MIT",
      "dependencies": {
        "pako": "^0.2.5",
        "tiny-inflate": "^1.0.0"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    }
  }
}


===== C:\Users\Ibnu\Project\smart-pos\backend\package.json =====

{
  "name": "backend",
  "version": "1.0.0",
  "description": "Smart POS Backend",
  "main": "index.js",
  "scripts": {
    "start": "nodemon index.js",
    "test": "echo \"Error: no test specified && exit 1"
  },
  "author": "Muhammad Ibnu Fauzi",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "body-parser": "^2.2.0",
    "cors": "^2.8.5",
    "csv-writer": "^1.6.0",
    "dotenv": "^17.2.0",
    "express": "^5.1.0",
    "jsonwebtoken": "^9.0.2",
    "multer": "^2.0.2",
    "mysql2": "^3.14.2",
    "nodemailer": "^7.0.5",
    "pdfkit": "^0.15.0"
  },
  "devDependencies": {
    "nodemon": "^3.1.10"
  }
}

===== C:\Users\Ibnu\Project\smart-pos\backend\config\db.js =====

// backend/config/db.js
const mysql = require('mysql2/promise');
require('dotenv').config();

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
  timezone: 'local', // Pastikan timezone disetel agar sesuai dengan server MySQL Anda
  dateStrings: true // Mengembalikan tipe DATETIME sebagai string, bukan objek Date
});

module.exports = pool;

===== C:\Users\Ibnu\Project\smart-pos\backend\middleware\authMiddleware.js =====

const jwt = require('jsonwebtoken');

const protect = (req, res, next) => {
    let token;
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
        try {
            token = req.headers.authorization.split(' ')[1];
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            
            req.user = decoded;
            next();
        } catch (error) {
            return res.status(401).json({ message: 'Token tidak valid atau kedaluwarsa.' });
        }
    }
    if (!token) {
        return res.status(401).json({ message: 'Tidak ada token, otorisasi gagal.' });
    }
};

module.exports = { protect };

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\analyticsRoutes.js =====

const express = require('express');
const db = require('../config/db');
const { protect } = require('../middleware/authMiddleware');
const { getValidDateRange } = require('../utils/dateUtils');

const router = express.Router();

const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: "Akses ditolak. Memerlukan peran admin." });
    }
    next();
};

// ENDPOINT STATS (Total Pendapatan, Transaksi, Laba, dll.)
router.get('/stats', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;
        
        if (!businessId) {
            return res.status(400).json({ message: 'Invalid business ID' });
        }
        
        if (!startDate || !endDate) {
            return res.status(400).json({ message: "Invalid date range provided" });
        }
        
        const statsQuery = `
            SELECT
                (SELECT CAST(COALESCE(SUM(total_amount), 0) AS DECIMAL(15,2)) FROM orders WHERE business_id = ? AND created_at BETWEEN ? AND ?) as totalRevenue,
                (SELECT COUNT(id) FROM orders WHERE business_id = ? AND created_at BETWEEN ? AND ?) as totalTransactions,
                CAST(
                    COALESCE(
                        (SELECT SUM((oi.price - COALESCE(oi.cost_price, 0)) * oi.quantity)
                        FROM order_items oi
                        JOIN orders o2 ON oi.order_id = o2.id
                        WHERE o2.business_id = ? AND o2.created_at BETWEEN ? AND ?)
                    , 0) 
                AS DECIMAL(15,2)) as totalProfit,
                COALESCE((
                    SELECT SUM(oi.quantity)
                    FROM order_items oi
                    JOIN orders o2 ON oi.order_id = o2.id
                    WHERE o2.business_id = ? AND o2.created_at BETWEEN ? AND ?
                ), 0) as totalSoldUnits,
                (SELECT COALESCE(COUNT(id), 0) FROM customers WHERE business_id = ? AND created_at BETWEEN ? AND ?) as newCustomers,
                (SELECT COALESCE(SUM(amount), 0) FROM expenses WHERE business_id = ? AND created_at BETWEEN ? AND ?) as totalExpenses
        `;

        const [[stats]] = await db.query(statsQuery, [
            businessId, startDate, endDate,
            businessId, startDate, endDate,
            businessId, startDate, endDate,
            businessId, startDate, endDate,
            businessId, startDate, endDate,
            businessId, startDate, endDate
        ]);

        const transformedStats = {
            totalRevenue: Number(stats.totalRevenue),
            totalTransactions: Number(stats.totalTransactions),
            totalProfit: Number(stats.totalProfit),
            totalSoldUnits: Number(stats.totalSoldUnits),
            newCustomers: Number(stats.newCustomers),
            totalExpenses: Number(stats.totalExpenses),
        };

        res.json(transformedStats);

    } catch (error) {
        console.error("Error fetching stats:", error);
        res.status(500).json({ 
            message: "Failed to fetch stats data.",
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// ENDPOINT GRAFIK PENJUALAN HARIAN
router.get('/daily-sales', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;

        const dailySalesQuery = `
            WITH RECURSIVE dates AS (
                SELECT ? as date
                UNION ALL
                SELECT DATE_ADD(date, INTERVAL 1 DAY)
                FROM dates
                WHERE date < ?
            )
            SELECT 
                dates.date,
                COALESCE(SUM(o.total_amount), 0) as sales
            FROM dates
            LEFT JOIN orders o ON DATE(o.created_at) = dates.date AND o.business_id = ?
            GROUP BY dates.date
            ORDER BY date ASC
        `;
        const [dailySales] = await db.query(dailySalesQuery, [startDate, endDate, businessId]);
        
        const formattedSales = dailySales.map(item => ({
            ...item,
            sales: parseFloat(item.sales),
            date: new Date(item.date).toLocaleDateString('id-ID', { day: 'numeric', month: 'short' })
        }));
        res.json(formattedSales);

    } catch (error) {
        console.error("Error fetching daily sales:", error);
        res.status(500).json({ message: "Failed to fetch daily sales data." });
    }
});

// ENDPOINT PRODUK TERLARIS
router.get('/top-products', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;

        const topProductsQuery = `
            SELECT 
                p.name,
                COALESCE(SUM(oi.quantity), 0) as totalSold
            FROM products p
            LEFT JOIN product_variants pv ON p.id = pv.product_id
            LEFT JOIN order_items oi ON pv.id = oi.variant_id
            LEFT JOIN orders o ON oi.order_id = o.id AND o.created_at BETWEEN ? AND ?
            WHERE p.business_id = ? AND p.is_archived = 0
            GROUP BY p.id, p.name
            ORDER BY totalSold DESC
            LIMIT 5
        `;
        const [topProducts] = await db.query(topProductsQuery, [startDate, endDate, businessId]);
        res.json(topProducts);
    } catch (error) {
        console.error("Error fetching top products:", error);
        res.status(500).json({ message: "Failed to fetch top products data." });
    }
});

// ENDPOINT PERFORMA PENJUALAN SEMUA PRODUK
router.get('/product-sales-performance', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;

        const query = `
            SELECT
                p.id, p.name, COALESCE(SUM(oi.quantity), 0) as totalSold
            FROM products p
            LEFT JOIN product_variants pv ON p.id = pv.product_id
            LEFT JOIN order_items oi ON pv.id = oi.variant_id AND oi.order_id IN (
                SELECT id FROM orders WHERE business_id = ? AND created_at BETWEEN ? AND ?
            )
            WHERE p.business_id = ? AND p.is_archived = 0
            GROUP BY p.id, p.name
            ORDER BY totalSold DESC, p.name ASC;
        `;
        
        const [productPerformance] = await db.query(query, [businessId, startDate, endDate, businessId]);
        res.json(productPerformance);
    } catch (error) {
        console.error("Error fetching product sales performance:", error);
        res.status(500).json({ message: "Failed to fetch product sales performance." });
    }
});

// ENDPOINT Performa Kasir
router.get('/cashier-performance', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;

        const query = `
            SELECT 
                u.id, u.name, 
                COALESCE(COUNT(o.id), 0) as totalTransactions,
                COALESCE(SUM(o.total_amount), 0) as totalSales
            FROM users u
            LEFT JOIN orders o ON u.id = o.user_id AND o.business_id = u.business_id AND o.created_at BETWEEN ? AND ?
            WHERE u.business_id = ?
            GROUP BY u.id, u.name
            ORDER BY totalSales DESC
        `;
        const [cashierPerformance] = await db.query(query, [startDate, endDate, businessId]);
        res.json(cashierPerformance);
    } catch (error) {
        console.error("Error fetching cashier performance:", error);
        res.status(500).json({ message: "Failed to fetch cashier performance." });
    }
});

// ENDPOINT: NOTIFIKASI STOK (diaktifkan kembali)
router.get('/notifications', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        let notifications = [];

        // 1. Notifikasi Stok Habis (stock = 0)
        const [outOfStockProducts] = await db.query(
            `SELECT id, name FROM products WHERE business_id = ? AND stock = 0 AND is_archived = 0`,
            [businessId]
        );
        outOfStockProducts.forEach(p => {
            notifications.push({
                id: `oos-${p.id}`,
                type: 'danger',
                icon: 'FiPackage',
                text: `Stok produk "${p.name}" telah habis.`,
            });
        });

        // 2. Notifikasi Stok Menipis (stock <= low_stock_threshold)
        const [lowStockProducts] = await db.query(
            `SELECT id, name, stock, low_stock_threshold FROM products WHERE business_id = ? AND stock > 0 AND stock <= low_stock_threshold AND is_archived = 0`,
            [businessId]
        );
        lowStockProducts.forEach(p => {
            notifications.push({
                id: `low-${p.id}`,
                type: 'warning',
                icon: 'FiAlertTriangle',
                text: `Stok produk "${p.name}" menipis. Sisa ${p.stock} unit (Batas: ${p.low_stock_threshold}).`,
            });
        });

        res.json(notifications);

    } catch (error) {
        console.error("Error fetching notifications:", error);
        res.status(500).json({ message: "Failed to fetch notifications." });
    }
});

// ENDPOINT: STOCK INFO
router.get('/stock-info', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [products] = await db.query(
            `SELECT p.id, p.name, p.stock, p.image_url FROM products p WHERE p.business_id = ? AND p.is_archived = 0 ORDER BY p.stock ASC, p.name ASC`,
            [businessId]
        );
        res.json(products);
    } catch (error) {
        console.error("Failed to fetch all product stock info", error);
        res.status(500).json({ message: "Server Error" });
    }
});

// ENDPOINT: Get Stale Products
router.get('/stale-products', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const days = parseInt(req.query.days) || 30;

        const query = `
            SELECT 
                p.id, p.name, p.stock, MAX(o.created_at) AS lastSoldDate
            FROM products p
            LEFT JOIN product_variants pv ON p.id = pv.product_id
            LEFT JOIN order_items oi ON pv.id = oi.variant_id
            LEFT JOIN orders o ON oi.order_id = o.id AND o.business_id = p.business_id
            WHERE p.business_id = ? AND p.is_archived = 0
            GROUP BY p.id, p.name, p.stock
            HAVING (lastSoldDate IS NULL AND p.stock > 0) OR (DATEDIFF(NOW(), lastSoldDate) > ? AND p.stock > 0)
            ORDER BY lastSoldDate ASC, p.name ASC;
        `;
        const [staleProducts] = await db.query(query, [businessId, days]);
        res.json(staleProducts);
    } catch (error) {
        console.error("Error fetching stale products:", error);
        res.status(500).json({ message: "Failed to fetch stale products data." });
    }
});

// ENDPOINT: Get Expired Products
router.get('/expired-products', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const days = parseInt(req.query.days) || 30;
        
        const query = `
            SELECT id, name, stock, expiration_date FROM products 
            WHERE business_id = ? AND expiration_date IS NOT NULL AND expiration_date <= DATE_ADD(NOW(), INTERVAL ? DAY) AND is_archived = 0
            ORDER BY expiration_date ASC;
        `;
        const [expiredProducts] = await db.query(query, [businessId, days]);
        res.json(expiredProducts);
    } catch (error) {
        console.error("Error fetching expired products:", error);
        res.status(500).json({ message: "Failed to fetch expired products data." });
    }
});

// ENDPOINT: Top Customers
router.get('/top-customers', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;

        const query = `
            SELECT 
                c.id, c.name, 
                COALESCE(SUM(o.total_amount), 0) as totalSpent,
                COALESCE(COUNT(o.id), 0) as totalOrders
            FROM customers c
            LEFT JOIN orders o ON c.id = o.customer_id AND o.business_id = c.business_id AND o.created_at BETWEEN ? AND ?
            WHERE c.business_id = ?
            GROUP BY c.id, c.name
            ORDER BY totalSpent DESC
            LIMIT 5;
        `;
        const [topCustomers] = await db.query(query, [startDate, endDate, businessId]);
        res.json(topCustomers);
    } catch (error) {
        console.error("Error fetching top customers:", error);
        res.status(500).json({ message: "Failed to fetch top customers data." });
    }
});

// ENDPOINT: Recent Suppliers
router.get('/recent-suppliers', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const limit = parseInt(req.query.limit) || 5;

        const query = `
            SELECT id, name, created_at FROM suppliers 
            WHERE business_id = ? AND is_archived = 0
            ORDER BY created_at DESC
            LIMIT ?;
        `;
        const [recentSuppliers] = await db.query(query, [businessId, limit]);
        res.json(recentSuppliers);
    } catch (error) {
        console.error("Error fetching recent suppliers:", error);
        res.status(500).json({ message: "Failed to fetch recent suppliers data." });
    }
});

// ENDPOINT: Insights
router.get('/insights', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const insights = [];

        const [[revenueTarget]] = await db.query('SELECT monthly_revenue_target FROM businesses WHERE id = ?', [businessId]);
        const [[currentMonthSales]] = await db.query(
            `SELECT COALESCE(SUM(total_amount), 0) as totalSales FROM orders WHERE business_id = ? AND created_at BETWEEN ? AND ?`,
            [businessId, startDate, endDate]
        );

        if (revenueTarget && revenueTarget.monthly_revenue_target > 0) {
            if (currentMonthSales.totalSales >= revenueTarget.monthly_revenue_target) {
                insights.push({ id: 'insight-sales-target-met', type: 'success', icon: 'FiTrendingUp', text: 'Target pendapatan bulanan tercapai!' });
            } else {
                const remaining = revenueTarget.monthly_revenue_target - currentMonthSales.totalSales;
                if (remaining > 0) {
                    insights.push({ id: 'insight-sales-target-remaining', type: 'info', icon: 'FiBarChart', text: `Perlu Rp ${new Intl.NumberFormat('id-ID').format(remaining)} lagi untuk mencapai target.` });
                }
            }
        }

        const [[topDay]] = await db.query(
            `SELECT DATE(created_at) as date, SUM(total_amount) as sales 
            FROM orders WHERE business_id = ? AND created_at BETWEEN ? AND ?
            GROUP BY DATE(created_at) ORDER BY sales DESC LIMIT 1`,
            [businessId, startDate, endDate]
        );
        if (topDay && topDay.sales > 0) {
            insights.push({ id: 'insight-high-sales-day', type: 'info', icon: 'FiDollarSign', text: `Hari penjualan tertinggi Anda adalah ${new Date(topDay.date).toLocaleDateString('id-ID')}: Rp ${new Intl.NumberFormat('id-ID').format(topDay.sales)}.` });
        }

        const [[newCustCount]] = await db.query(`SELECT COALESCE(COUNT(id), 0) as count FROM customers WHERE business_id = ? AND created_at BETWEEN ? AND ?`, [businessId, startDate, endDate]);
        if (newCustCount.count === 0) {
            insights.push({ id: 'insight-no-new-customers', type: 'info', icon: 'FiUsers', text: 'Tidak ada pelanggan baru dalam periode ini. Coba program loyalitas!' });
        }

        res.json(insights);
    } catch (error) {
        console.error("Error fetching insights:", error);
        res.status(500).json({ message: "Failed to fetch insights data." });
    }
});

module.exports = router;

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\categoryRoutes.js =====

// backend/routes/categoryRoutes.js
const express = require('express');
const db = require('../config/db');
const { protect } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const router = express.Router();

const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: "Access denied. Admin role required." });
    }
    next();
};

// CREATE Category
router.post('/', protect, isAdmin, async (req, res) => {
    const { name } = req.body;
    const businessId = req.user.business_id;

    if (!name) {
        return res.status(400).json({ message: 'Nama kategori harus diisi.' });
    }

    try {
        const [result] = await db.query('INSERT INTO categories (business_id, name) VALUES (?, ?)', [businessId, name]);
        const categoryId = result.insertId;
        await logActivity(businessId, req.user.id, 'CREATE_CATEGORY', `Created category: ${name} (ID: ${categoryId}).`);
        res.status(201).json({ message: 'Kategori berhasil ditambahkan!', categoryId });
    } catch (error) {
        console.error('Error creating category:', error);
        await logActivity(businessId, req.user.id, 'CREATE_CATEGORY_FAILED', `Failed to create category ${name}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

// READ All Categories
router.get('/', protect, async (req, res) => {
    const businessId = req.user.business_id;
    try {
        const [categories] = await db.query('SELECT id, name FROM categories WHERE business_id = ? ORDER BY name ASC', [businessId]);
        res.json(categories);
    } catch (error) {
        console.error('Error fetching categories:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// DELETE Category
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const categoryId = req.params.id;
    const businessId = req.user.business_id;
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const [[categoryName]] = await connection.query('SELECT name FROM categories WHERE id = ? AND business_id = ?', [categoryId, businessId]);
        if (!categoryName) {
            await logActivity(businessId, req.user.id, 'DELETE_CATEGORY_FAILED', `Attempted to delete non-existent or unauthorized category ID ${categoryId}.`);
            await connection.rollback();
            return res.status(404).json({ message: 'Kategori tidak ditemukan atau Anda tidak punya akses.' });
        }
        
        await connection.query('UPDATE products SET category_id = NULL WHERE category_id = ? AND business_id = ?', [categoryId, businessId]);
        await connection.query('UPDATE products SET sub_category_id = NULL WHERE sub_category_id IN (SELECT id FROM sub_categories WHERE category_id = ?) AND business_id = ?', [categoryId, businessId]);
        
        await connection.query('DELETE FROM sub_categories WHERE category_id = ? AND business_id = ?', [categoryId, businessId]);
        
        const [result] = await connection.query('DELETE FROM categories WHERE id = ? AND business_id = ?', [categoryId, businessId]);
        
        if (result.affectedRows === 0) {
            throw new Error('Failed to delete category, possibly concurrency issue.');
        }

        await connection.commit();
        await logActivity(businessId, req.user.id, 'DELETE_CATEGORY', `Deleted category: ${categoryName.name} (ID: ${categoryId}).`);
        res.json({ message: 'Kategori dan sub-kategorinya berhasil dihapus.' });
    } catch (error) {
        await connection.rollback();
        console.error('Error deleting category:', error);
        await logActivity(businessId, req.user.id, 'DELETE_CATEGORY_FAILED', `Failed to delete category ID ${categoryId}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    } finally {
        connection.release();
    }
});


// READ Sub-categories by Category ID
router.get('/:categoryId/subcategories', protect, async (req, res) => {
    const categoryId = req.params.categoryId;
    const businessId = req.user.business_id;
    try {
        const [subCategories] = await db.query(
            'SELECT id, name FROM sub_categories WHERE category_id = ? AND business_id = ? ORDER BY name ASC',
            [categoryId, businessId]
        );
        res.json(subCategories);
    } catch (error) {
        console.error('Error fetching subcategories:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// CREATE Sub-category
router.post('/:categoryId/subcategories', protect, isAdmin, async (req, res) => {
    const categoryId = req.params.categoryId;
    const { name } = req.body;
    const businessId = req.user.business_id;

    if (!name) {
        return res.status(400).json({ message: 'Nama sub-kategori harus diisi.' });
    }

    try {
        const [[category]] = await db.query('SELECT id FROM categories WHERE id = ? AND business_id = ?', [categoryId, businessId]);
        if (!category) {
            return res.status(404).json({ message: 'Kategori tidak ditemukan atau Anda tidak memiliki akses.' });
        }

        const [result] = await db.query(
            'INSERT INTO sub_categories (category_id, business_id, name) VALUES (?, ?, ?)',
            [categoryId, businessId, name]
        );
        const subCategoryId = result.insertId;
        await logActivity(businessId, req.user.id, 'CREATE_SUB_CATEGORY', `Created sub-category: ${name} (Category ID: ${categoryId}, Sub-category ID: ${subCategoryId}).`);
        res.status(201).json({ message: 'Sub-kategori berhasil ditambahkan!', subCategoryId });
    } catch (error) {
        console.error('Error creating sub-category:', error);
        await logActivity(businessId, req.user.id, 'CREATE_SUB_CATEGORY_FAILED', `Failed to create sub-category ${name} for category ID ${categoryId}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

// DELETE Sub-category
router.delete('/subcategories/:id', protect, isAdmin, async (req, res) => {
    const subCategoryId = req.params.id;
    const businessId = req.user.business_id;
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const [[subCategoryName]] = await connection.query('SELECT name FROM sub_categories WHERE id = ? AND business_id = ?', [subCategoryId, businessId]);
        if (!subCategoryName) {
            await logActivity(businessId, req.user.id, 'DELETE_SUB_CATEGORY_FAILED', `Attempted to delete non-existent or unauthorized sub-category ID ${subCategoryId}.`);
            await connection.rollback();
            return res.status(404).json({ message: 'Sub-kategori tidak ditemukan atau Anda tidak punya akses.' });
        }

        await connection.query('UPDATE products SET sub_category_id = NULL WHERE sub_category_id = ? AND business_id = ?', [subCategoryId, businessId]);
        
        const [result] = await connection.query('DELETE FROM sub_categories WHERE id = ? AND business_id = ?', [subCategoryId, businessId]);

        if (result.affectedRows === 0) {
            throw new Error('Failed to delete sub-category, possibly concurrency issue.');
        }

        await connection.commit();
        await logActivity(businessId, req.user.id, 'DELETE_SUB_CATEGORY', `Deleted sub-category: ${subCategoryName.name} (ID: ${subCategoryId}).`);
        res.json({ message: 'Sub-kategori berhasil dihapus.' });
    } catch (error) {
        await connection.rollback();
        console.error('Error deleting sub-category:', error);
        await logActivity(businessId, req.user.id, 'DELETE_SUB_CATEGORY_FAILED', `Failed to delete sub-category ID ${subCategoryId}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    } finally {
        connection.release();
    }
});


module.exports = router;

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\customerRoutes.js =====

// backend/routes/customerRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const router = express.Router();

// GET semua pelanggan berdasarkan business_id
router.get('/', protect, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const searchTerm = req.query.search || '';
        const query = 'SELECT id, name, email, phone, address, points, created_at FROM customers WHERE business_id = ? AND (name LIKE ? OR email LIKE ? OR phone LIKE ?) ORDER BY name ASC';
        const [customers] = await db.query(query, [businessId, `%${searchTerm}%`, `%${searchTerm}%`, `%${searchTerm}%`]);
        res.json(customers);
    } catch (error) {
        console.error('Error fetching customers:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// GET detail satu pelanggan
router.get('/:id', protect, async (req, res) => {
    try {
        const { id } = req.params;
        const businessId = req.user.business_id;
        const query = 'SELECT id, name, email, phone, address, points, created_at FROM customers WHERE id = ? AND business_id = ?';
        const [[customer]] = await db.query(query, [id, businessId]);
        if (!customer) {
            return res.status(404).json({ message: 'Pelanggan tidak ditemukan.' });
        }
        res.json(customer);
    } catch (error) {
        console.error('Error fetching customer details:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// GET riwayat transaksi satu pelanggan
router.get('/:id/history', protect, async (req, res) => {
    try {
        const { id } = req.params;
        const businessId = req.user.business_id;
        const query = `
            SELECT id, created_at, total_amount, points_earned 
            FROM orders 
            WHERE customer_id = ? AND business_id = ? 
            ORDER BY created_at DESC
        `;
        const [history] = await db.query(query, [id, businessId]);
        res.json(history);
    } catch (error) {
        console.error('Error fetching customer history:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// POST untuk menukarkan poin
router.post('/:id/redeem', protect, async (req, res) => {
    const { id } = req.params;
    const { pointsToRedeem, description } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    if (!pointsToRedeem || pointsToRedeem <= 0 || !description) {
        return res.status(400).json({ message: 'Jumlah poin dan deskripsi penukaran harus diisi.' });
    }

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();
        const [[customer]] = await connection.query(
            'SELECT points, name FROM customers WHERE id = ? AND business_id = ? FOR UPDATE',
            [id, businessId]
        );

        if (!customer) {
            throw new Error('Pelanggan tidak ditemukan.');
        }
        if (customer.points < pointsToRedeem) {
            throw new Error('Poin pelanggan tidak mencukupi.');
        }

        // Kurangi poin pelanggan
        await connection.query(
            'UPDATE customers SET points = points - ? WHERE id = ?',
            [pointsToRedeem, id]
        );

        // Catat di log poin
        await connection.query(
            'INSERT INTO customer_points_log (customer_id, points_change, description) VALUES (?, ?, ?)',
            [id, -pointsToRedeem, description]
        );
        await connection.commit();
        await logActivity(businessId, userId, 'REDEEM_POINTS', `Redeemed ${pointsToRedeem} points for customer ${customer.name} (ID: ${id}). Reason: ${description}`);
        res.json({ message: 'Poin berhasil ditukarkan.' });

    } catch (error) {
        await connection.rollback();
        console.error("Error redeeming points:", error);
        res.status(500).json({ message: error.message || 'Gagal menukarkan poin.' });
    } finally {
        connection.release();
    }
});


// POST buat pelanggan baru
router.post('/', protect, async (req, res) => {
    const { name, phone, email, address } = req.body;
    const businessId = req.user.business_id;
    try {
        const [result] = await db.query(
            'INSERT INTO customers (business_id, name, phone, email, address, points) VALUES (?, ?, ?, ?, ?, 0)',
            [businessId, name, phone || null, email || null, address || null]
        );
        const customerId = result.insertId;
        await logActivity(businessId, req.user.id, 'CREATE_CUSTOMER', `Created customer: ${name} (ID: ${customerId}).`);
        res.status(201).json({ message: 'Pelanggan berhasil ditambahkan.', customerId: customerId });
    } catch (error) {
        console.error('Error creating customer:', error);
        await logActivity(businessId, req.user.id, 'CREATE_CUSTOMER_FAILED', `Failed to create customer ${name}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error' });
    }
});

// PUT update pelanggan
router.put('/:id', protect, async (req, res) => {
    const { name, phone, email, address } = req.body;
    const businessId = req.user.business_id;
    try {
        const [result] = await db.query(
            'UPDATE customers SET name = ?, phone = ?, email = ?, address = ? WHERE id = ? AND business_id = ?',
            [name, phone || null, email || null, address || null, req.params.id, businessId]
        );
        if (result.affectedRows === 0) {
            await logActivity(businessId, req.user.id, 'UPDATE_CUSTOMER_FAILED', `Attempted to update non-existent or unauthorized customer ID ${req.params.id}.`);
            return res.status(404).json({ message: 'Pelanggan tidak ditemukan atau Anda tidak punya akses.' });
        }
        await logActivity(businessId, req.user.id, 'UPDATE_CUSTOMER', `Updated customer ID ${req.params.id} to name ${name}.`);
        res.json({ message: 'Data pelanggan berhasil diperbarui.' });
    } catch (error) {
        console.error('Error updating customer:', error);
        await logActivity(businessId, req.user.id, 'UPDATE_CUSTOMER_ERROR', `Error updating customer ID ${req.params.id}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error' });
    }
});

// DELETE pelanggan
router.delete('/:id', protect, async (req, res) => {
    const customerId = req.params.id;
    const businessId = req.user.business_id;
    try {
        await db.query('UPDATE orders SET customer_id = NULL WHERE customer_id = ? AND business_id = ?', [customerId, businessId]);
        
        const [result] = await db.query('DELETE FROM customers WHERE id = ? AND business_id = ?', [customerId, businessId]);
        if (result.affectedRows === 0) {
            await logActivity(businessId, req.user.id, 'DELETE_CUSTOMER_FAILED', `Attempted to delete non-existent or unauthorized customer ID ${customerId}.`);
            return res.status(404).json({ message: 'Pelanggan tidak ditemukan atau Anda tidak punya akses.' });
        }
        await logActivity(businessId, req.user.id, 'DELETE_CUSTOMER', `Deleted customer ID ${customerId}.`);
        res.json({ message: 'Pelanggan berhasil dihapus.' });
    } catch (error) {
        console.error('Error deleting customer:', error);
        await logActivity(businessId, req.user.id, 'DELETE_CUSTOMER_ERROR', `Error deleting customer ID ${customerId}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error' });
    }
});

module.exports = router;

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\expenseRoutes.js =====

// backend/routes/expenses.js
const express = require('express');
const db = require('../config/db'); // Assuming this connects to your database
const { protect } = require('../middleware/authMiddleware'); // Your authentication middleware
const { logActivity } = require('../utils/logUtils'); // Your activity logging utility
const router = express.Router();

// Middleware to check if the user is an admin
const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: "Akses ditolak. Memerlukan peran admin." });
    }
    next();
};

// GET all expenses
// Route: GET /api/expenses
router.get('/', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [expenses] = await db.query(
            `SELECT e.id, e.description, e.amount, e.created_at, u.name as user_name
             FROM expenses e
             JOIN users u ON e.created_by = u.id
             WHERE e.business_id = ? ORDER BY e.created_at DESC`,
            [businessId]
        );
        res.json(expenses);
    } catch (error) {
        console.error("Error fetching expenses:", error);
        res.status(500).json({ message: "Server Error" });
    }
});

// POST new expense
// Route: POST /api/expenses
router.post('/', protect, isAdmin, async (req, res) => {
    const { description, amount } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    // Basic validation
    if (!description || !amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
        return res.status(400).json({ message: 'Deskripsi dan jumlah pengeluaran yang valid harus diisi.' });
    }

    try {
        const [result] = await db.query(
            'INSERT INTO expenses (business_id, created_by, description, amount) VALUES (?, ?, ?, ?)',
            [businessId, userId, description, parseFloat(amount)] // Ensure amount is stored as a float/decimal
        );
        const expenseId = result.insertId;
        await logActivity(businessId, userId, 'CREATE_EXPENSE', `Created expense: ${description} for Rp ${amount} (ID: ${expenseId}).`);
        res.status(201).json({ message: 'Pengeluaran berhasil dicatat!', id: expenseId });
    } catch (error) {
        console.error("Error creating expense:", error);
        await logActivity(businessId, userId, 'CREATE_EXPENSE_FAILED', `Failed to create expense. Error: ${error.message}`);
        res.status(500).json({ message: "Server Error" });
    }
});

// PUT (Update) an expense by ID
// Route: PUT /api/expenses/:id
router.put('/:id', protect, isAdmin, async (req, res) => {
    const { id } = req.params; // Get expense ID from URL parameters
    const { description, amount } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id; // User who is performing the update

    // Validation
    if (!description || !amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
        return res.status(400).json({ message: 'Deskripsi dan jumlah pengeluaran yang valid harus diisi.' });
    }

    try {
        // Verify expense belongs to the current business_id for security
        const [existingExpense] = await db.query('SELECT * FROM expenses WHERE id = ? AND business_id = ?', [id, businessId]);
        if (existingExpense.length === 0) {
            return res.status(404).json({ message: 'Pengeluaran tidak ditemukan atau Anda tidak memiliki izin untuk mengeditnya.' });
        }

        const [result] = await db.query(
            'UPDATE expenses SET description = ?, amount = ? WHERE id = ? AND business_id = ?',
            [description, parseFloat(amount), id, businessId]
        );

        if (result.affectedRows === 0) {
            return res.status(200).json({ message: 'Pengeluaran ditemukan tetapi tidak ada perubahan yang dibuat.' });
        }

        await logActivity(businessId, userId, 'UPDATE_EXPENSE', `Updated expense: ${description} (ID: ${id}).`);
        res.status(200).json({ message: 'Pengeluaran berhasil diperbarui!' });
    } catch (error) {
        console.error("Error updating expense:", error);
        await logActivity(businessId, userId, 'UPDATE_EXPENSE_FAILED', `Failed to update expense (ID: ${id}). Error: ${error.message}`);
        res.status(500).json({ message: "Server Error" });
    }
});

// DELETE an expense by ID
// Route: DELETE /api/expenses/:id
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const { id } = req.params; // Get expense ID from URL parameters
    const businessId = req.user.business_id;
    const userId = req.user.id; // User who is performing the deletion

    try {
        // Verify expense belongs to the current business_id for security
        const [existingExpense] = await db.query('SELECT * FROM expenses WHERE id = ? AND business_id = ?', [id, businessId]);
        if (existingExpense.length === 0) {
            return res.status(404).json({ message: 'Pengeluaran tidak ditemukan atau Anda tidak memiliki izin untuk menghapusnya.' });
        }

        const [result] = await db.query(
            'DELETE FROM expenses WHERE id = ? AND business_id = ?',
            [id, businessId]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Pengeluaran tidak ditemukan.' });
        }

        await logActivity(businessId, userId, 'DELETE_EXPENSE', `Deleted expense (ID: ${id}).`);
        res.status(200).json({ message: 'Pengeluaran berhasil dihapus!' });
    } catch (error) {
        console.error("Error deleting expense:", error);
        await logActivity(businessId, userId, 'DELETE_EXPENSE_FAILED', `Failed to delete expense (ID: ${id}). Error: ${error.message}`);
        res.status(500).json({ message: "Server Error" });
    }
});

module.exports = router;

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\orderRoutes.js =====

// backend/routes/orderRoutes.js
const express = require('express');
const db = require('../config/db');
const { protect } = require('../middleware/authMiddleware');
const { getValidDateRange } = require('../utils/dateUtils');
const { sendReceiptEmail } = require('../utils/emailService'); // Updated import
const { logActivity } = require('../utils/logUtils');
const createCsvWriter = require('csv-writer').createObjectCsvWriter;
const path = require('path');
const fs = require('fs');

const router = express.Router();

const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: "Akses ditolak." });
    }
    next();
};

const formatRupiah = (number) => {
    return new Intl.NumberFormat('id-ID', {
        style: 'currency',
        currency: 'IDR',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
    }).format(number);
};

// POST /api/orders - Membuat pesanan baru
router.post('/', protect, async (req, res) => {
    const { items, customer_id, payment_method, amount_paid, subtotal_amount, tax_amount, total_amount, promotion_id, discount_amount } = req.body;
    const userId = req.user.id;
    const businessId = req.user.business_id;

    if (!items || items.length === 0) {
        return res.status(400).json({ message: 'Keranjang belanja tidak boleh kosong.' });
    }

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const productQuantities = {};
        for (const item of items) {
            const [variants] = await connection.query('SELECT product_id FROM product_variants WHERE id = ?', [item.variantId]);
            if (variants.length === 0) throw new Error(`Varian produk dengan ID ${item.variantId} tidak ditemukan.`);
            const variant = variants[0];
            productQuantities[variant.product_id] = (productQuantities[variant.product_id] || 0) + item.quantity;
        }

        for (const productId in productQuantities) {
            const [[product]] = await connection.query('SELECT stock, name FROM products WHERE id = ? AND business_id = ? FOR UPDATE', [productId, businessId]);
            if (!product) throw new Error(`Produk dengan ID ${productId} tidak ditemukan.`);
            if (product.stock < productQuantities[productId]) {
                throw new Error(`Stok untuk produk ${product.name} tidak mencukupi.`);
            }
        }
        
        const pointsEarned = Math.floor(total_amount / 10000);

        const orderSql = 'INSERT INTO orders (business_id, user_id, customer_id, subtotal_amount, tax_amount, total_amount, payment_method, amount_paid, promotion_id, discount_amount, points_earned) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
        const [orderResult] = await connection.execute(orderSql, [businessId, userId, customer_id || null, subtotal_amount, tax_amount || 0, total_amount, payment_method || 'Tunai', amount_paid, promotion_id || null, discount_amount || 0, pointsEarned]);
        const orderId = orderResult.insertId;

        for (const item of items) {
            const [variants] = await connection.query('SELECT product_id, price, cost_price FROM product_variants WHERE id = ?', [item.variantId]);
            const variant = variants[0];
            const orderItemSql = 'INSERT INTO order_items (order_id, product_id, variant_id, quantity, price, cost_price) VALUES (?, ?, ?, ?, ?, ?)';
            await connection.execute(orderItemSql, [orderId, variant.product_id, item.variantId, item.quantity, variant.price, variant.cost_price]);
        }
        
        for (const productId in productQuantities) {
            await connection.execute('UPDATE products SET stock = stock - ? WHERE id = ?', [productQuantities[productId], productId]);
        }

        if (customer_id && pointsEarned > 0) {
            await connection.execute('UPDATE customers SET points = points + ? WHERE id = ? AND business_id = ?', [pointsEarned, customer_id, businessId]);
            await connection.execute(
                'INSERT INTO customer_points_log (customer_id, order_id, points_change, description) VALUES (?, ?, ?, ?)',
                [customer_id, orderId, pointsEarned, `Poin dari Transaksi #${orderId}`]
            );
        }

        await connection.commit();
        await logActivity(businessId, userId, 'CREATE_ORDER', `Created order ID ${orderId} for total ${formatRupiah(total_amount)}.`);
        res.status(201).json({ message: 'Transaksi berhasil dibuat!', orderId: orderId });

    } catch (error) {
        await connection.rollback();
        console.error("Create Order Error:", error);
        await logActivity(businessId, userId, 'CREATE_ORDER_FAILED', `Failed to create order. Error: ${error.message}`);
        res.status(500).json({ message: error.message || 'Transaksi gagal.' });
    } finally {
        connection.release();
    }
});

router.get('/', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        
        const sql = `
            SELECT
                o.id,
                o.created_at,
                o.subtotal_amount,
                o.tax_amount,
                o.total_amount,
                o.payment_method,
                u.name as cashier_name,
                c.name as customer_name
            FROM orders o
            JOIN users u ON o.user_id = u.id
            LEFT JOIN customers c ON o.customer_id = c.id
            WHERE o.business_id = ? AND o.created_at BETWEEN ? AND ?
            ORDER BY o.created_at DESC
        `;

        const [orders] = await db.query(sql, [businessId, startDate, endDate]);
        res.json(orders);
    } catch (error) {
        console.error("Error fetching orders:", error);
        if (error.response && error.response.status === 401) {
            return res.status(401).json({ message: 'Otorisasi gagal, silakan login kembali.' });
        }
        res.status(500).json({ message: 'Server Error' });
    }
});

router.get('/export', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;
        
        const exportsDir = path.join(__dirname, '..', 'exports');
        if (!fs.existsSync(exportsDir)) {
            fs.mkdirSync(exportsDir, { recursive: true });
        }

        const query = `
            SELECT 
                o.id, 
                o.created_at, 
                u.name as cashier_name,
                c.name as customer_name,
                o.payment_method,
                oi.quantity,
                p.name as product_name,
                pv.name as variant_name,
                oi.price as price_per_item,
                (oi.price * oi.quantity) as subtotal
            FROM orders o
            JOIN users u ON o.user_id = u.id
            JOIN order_items oi ON o.id = oi.order_id
            JOIN products p ON oi.product_id = p.id
            JOIN product_variants pv ON oi.variant_id = pv.id
            LEFT JOIN customers c ON o.customer_id = c.id
            WHERE o.business_id = ? AND o.created_at BETWEEN ? AND ?
            ORDER BY o.created_at DESC
        `;
        const [transactions] = await db.query(query, [businessId, startDate, endDate]);

        if (transactions.length === 0) {
            return res.status(404).json({ message: "Tidak ada data transaksi untuk diekspor pada rentang tanggal ini." });
        }

        const filePath = path.join(exportsDir, `transactions-${Date.now()}.csv`);
        const csvWriter = createCsvWriter({
            path: filePath,
            header: [
                {id: 'id', title: 'ORDER_ID'},
                {id: 'created_at', title: 'TANGGAL'},
                {id: 'cashier_name', title: 'KASIR'},
                {id: 'customer_name', title: 'PELANGGAN'},
                {id: 'payment_method', title: 'METODE_BAYAR'},
                {id: 'product_name', title: 'PRODUK'},
                {id: 'variant_name', title: 'VARIAN'},
                {id: 'quantity', title: 'JUMLAH'},
                {id: 'price_per_item', title: 'HARGA_SATUAN'},
                {id: 'subtotal', title: 'SUBTOTAL'},
            ]
        });
        await csvWriter.writeRecords(transactions);

        res.download(filePath, (err) => {
            if (err) {
                console.error("Error sending file:", err);
            }
            fs.unlink(filePath, (unlinkErr) => {
                if (unlinkErr) console.error("Error deleting file:", unlinkErr);
            });
        });
    } catch (error) {
        console.error("Error exporting transactions:", error);
        res.status(500).json({ message: "Gagal mengekspor data." });
    }
});


router.get('/:id', protect, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const orderId = req.params.id;

        const orderSql = `
            SELECT
                o.id, o.created_at,
                o.subtotal_amount,
                o.tax_amount,
                o.total_amount,
                o.payment_method,
                u.name as cashier_name, c.name as customer_name,
                o.amount_paid
            FROM orders o
            JOIN users u ON o.user_id = u.id
            LEFT JOIN customers c ON o.customer_id = c.id
            WHERE o.id = ? AND o.business_id = ?
        `;
        const [[order]] = await db.query(orderSql, [orderId, businessId]);

        if (!order) {
            return res.status(404).json({ message: 'Pesanan tidak ditemukan.' });
        }

        const itemsSql = `
            SELECT oi.quantity, oi.price, p.name as product_name, pv.name as variant_name
            FROM order_items oi
            JOIN products p ON oi.product_id = p.id
            LEFT JOIN product_variants pv ON oi.variant_id = pv.id
            WHERE oi.order_id = ?
        `;
        const [items] = await db.query(itemsSql, [orderId]);
        order.items = items;
        
        res.json({ ...order, items });
    } catch (error) {
        console.error("Error fetching single order:", error);
        res.status(500).json({ message: 'Server Error' });
    }
});

router.post('/:id/send-receipt', protect, async (req, res) => {
    const orderId = req.params.id;
    const { email: recipientEmail } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    if (!recipientEmail) {
        return res.status(400).json({ message: 'Alamat email penerima diperlukan.' });
    }

    try {
        // Ambil data order dan bisnis
        const orderSql = `
            SELECT o.*, u.name as cashier_name, c.name as customer_name
            FROM orders o
            JOIN users u ON o.user_id = u.id
            LEFT JOIN customers c ON o.customer_id = c.id
            WHERE o.id = ? AND o.business_id = ?`;
        const [[order]] = await db.query(orderSql, [orderId, businessId]);

        if (!order) {
            await logActivity(businessId, userId, 'SEND_RECEIPT_FAILED', `Order ID ${orderId} not found.`);
            return res.status(404).json({ message: 'Pesanan tidak ditemukan.' });
        }

        const itemsSql = `SELECT oi.quantity, oi.price, p.name as product_name, pv.name as variant_name FROM order_items oi JOIN products p ON oi.product_id = p.id LEFT JOIN product_variants pv ON oi.variant_id = pv.id WHERE oi.order_id = ?`;
        const [items] = await db.query(itemsSql, [orderId]);
        order.items = items;

        const [[businessInfo]] = await db.query('SELECT id, business_name, receipt_footer_text, receipt_logo_url FROM businesses WHERE id = ?', [businessId]);

        // Panggil service email dengan data yang sudah siap
        await sendReceiptEmail(recipientEmail, order, businessInfo);

        await logActivity(businessId, userId, 'SEND_RECEIPT_SUCCESS', `Receipt for order ID ${orderId} sent to ${recipientEmail}.`);
        res.status(200).json({ message: 'Struk berhasil dikirim.' });

    } catch (error) {
        console.error("Error sending receipt:", error);
        await logActivity(businessId, userId, 'SEND_RECEIPT_FAILED', `Failed to send receipt for order ID ${orderId}. Error: ${error.message}`);

        if (error.responseCode === 535) {
            return res.status(500).json({ message: 'Gagal mengirim struk: Kesalahan otentikasi. Periksa setelan email Anda.' });
        }
        res.status(500).json({ message: error.message || 'Gagal mengirim struk.' });
    }
});


router.delete('/clear-history', protect, isAdmin, async (req, res) => {
    const connection = await db.getConnection();
    const businessId = req.user.business_id;
    const userId = req.user.id;

    try {
        await connection.beginTransaction();
        console.log(`Mencoba menghapus seluruh riwayat untuk business_id: ${businessId}`);

        const [ordersInBusiness] = await connection.query('SELECT id FROM orders WHERE business_id = ?', [businessId]);
        
        if (ordersInBusiness.length > 0) {
            const orderIdsToDelete = ordersInBusiness.map(order => order.id);

            console.log(`Menghapus ${orderIdsToDelete.length} item pesanan terkait...`);
            await connection.query('DELETE FROM order_items WHERE order_id IN (?)', [orderIdsToDelete]);

            console.log(`Menghapus ${orderIdsToDelete.length} pesanan...`);
            const [ordersDeleteResult] = await connection.query('DELETE FROM orders WHERE id IN (?)', [orderIdsToDelete]);
            
            await connection.commit();
            console.log("Seluruh riwayat transaksi untuk bisnis ini berhasil dihapus.");
            await logActivity(businessId, userId, 'CLEAR_ORDER_HISTORY', `Cleared ${ordersDeleteResult.affectedRows} orders.`);

            // Reset auto-increment ID for orders table
            try {
                await db.query('ALTER TABLE orders AUTO_INCREMENT = 1');
                console.log("Auto-increment ID for 'orders' table reset to 1.");
                await logActivity(businessId, userId, 'RESET_ORDER_ID_COUNTER', 'Order ID counter reset to 1 after clearing history.');
            } catch (resetError) {
                console.error("Failed to reset auto-increment ID:", resetError);
                await logActivity(businessId, userId, 'RESET_ORDER_ID_COUNTER_FAILED', `Failed to reset order ID counter. Error: ${resetError.message}`);
                // You can choose to send this error to the frontend
                // or just log it. For now, we'll continue.
            }

            // --- ADDED CODE START ---
            // Reset loyalty points for all customers for this business
            // Assuming the customers table has a loyalty_points column and business_id
            try {
                const [resetPointsResult] = await connection.query(
                    'UPDATE customers SET points = 0 WHERE business_id = ?',
                    [businessId]
                );
                console.log(`Loyalty points for ${resetPointsResult.affectedRows} customers reset to 0.`);
                await logActivity(businessId, userId, 'RESET_LOYALTY_POINTS', `Reset loyalty points for ${resetPointsResult.affectedRows} customers after clearing order history.`);
            } catch (resetPointsError) {
                console.error("Failed to reset loyalty points:", resetPointsError);
                await logActivity(businessId, userId, 'RESET_LOYALTY_POINTS_FAILED', `Failed to reset loyalty points after clearing history. Error: ${resetPointsError.message}`);
                // Can choose to send this error to the frontend or just log
                // For now, we log and continue with the successful deletion response
            }
            // --- ADDED CODE END ---

            res.status(200).json({ message: 'Semua riwayat transaksi dan poin loyalitas pelanggan untuk bisnis Anda telah direset.' });

        } else {
            await connection.commit();
            console.log("No orders found to delete in this business.");
            res.status(200).json({ message: 'Tidak ada riwayat transaksi untuk dihapus.' });
        }
    } catch (error) {
        await connection.rollback();
        console.error("Error clearing history:", error);
        await logActivity(businessId, userId, 'CLEAR_ORDER_HISTORY_FAILED', `Failed to clear order history. Error: ${error.message}`);
        res.status(500).json({ message: error.message || 'Gagal menghapus riwayat.' });
    } finally {
        connection.release();
    }
});

router.delete('/:id', protect, isAdmin, async (req, res) => {
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();
        const businessId = req.user.business_id;
        const userId = req.user.id;
        console.log(`Attempting to delete order ID: ${req.params.id} for business: ${businessId}`);

        const [orderItemsToRevert] = await connection.query(
             `SELECT oi.product_id, oi.quantity
             FROM order_items oi
             JOIN orders o ON o.id = oi.order_id
             WHERE o.id = ? AND o.business_id = ?`,
            [req.params.id, businessId]
        );

        if (orderItemsToRevert.length === 0) {
            await logActivity(businessId, userId, 'DELETE_ORDER_FAILED', `Attempted to delete non-existent or unauthorized order ID ${req.params.id}.`);
            return res.status(404).json({ message: 'Pesanan tidak ditemukan atau Anda tidak memiliki akses.' });
        }

        for (const item of orderItemsToRevert) {
            await connection.query('UPDATE products SET stock = stock + ? WHERE id = ?', [item.quantity, item.product_id]);
        }
        
        await connection.query('DELETE FROM order_items WHERE order_id = ?', [req.params.id]);
        
        const [result] = await connection.query('DELETE FROM orders WHERE id = ? AND business_id = ?', [req.params.id, businessId]);
        if (result.affectedRows === 0) {
            throw new Error('Pesanan tidak ditemukan atau Anda tidak memiliki akses setelah mencoba menghapus item.');
        }
        await connection.commit();
        await logActivity(businessId, userId, 'DELETE_ORDER', `Deleted order ID ${req.params.id}. Stock reverted. (Affected rows: ${result.affectedRows})`);
        res.json({ message: 'Pesanan berhasil dihapus.' });
    } catch (error) {
        await connection.rollback();
        console.error("Error deleting order:", error);
        await logActivity(businessId, req.user.id, 'DELETE_ORDER_ERROR', `Error deleting order ID ${req.params.id}. Error: ${error.message}`);
        res.status(500).json({ message: error.message || 'Gagal menghapus pesanan.' });
    } finally {
        connection.release();
    }
});

module.exports = router;

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\productRoutes.js =====

// backend/routes/productRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const router = express.Router();

const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: 'Akses ditolak.' });
    }
    next();
};

// CREATE: Menambah produk baru dengan stok terpusat dan ambang batas
router.post('/', protect, isAdmin, async (req, res) => {
    // Tambahkan low_stock_threshold dari req.body
    const { name, description, category_id, sub_category_id, supplier_id, stock, image_url, expiration_date, variants, low_stock_threshold } = req.body;
    const businessId = req.user.business_id;

    if (!name || !variants || variants.length === 0) {
        return res.status(400).json({ message: 'Nama produk dan setidaknya satu varian harus diisi.' });
    }
    if (stock === undefined || stock === null || isNaN(parseInt(stock))) {
        return res.status(400).json({ message: 'Total stok harus diisi dengan angka yang valid.' });
    }

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const finalCategoryId = category_id || null;
        const finalSubCategoryId = sub_category_id || null;
        const finalSupplierId = supplier_id || null;
        const finalExpirationDate = expiration_date || null;

        // Tambahkan kolom dan placeholder baru di query SQL
        const productSql = 'INSERT INTO products (business_id, name, description, category_id, sub_category_id, supplier_id, stock, image_url, expiration_date, low_stock_threshold) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
        // Tambahkan variabel baru ke array parameter, beri default 5 jika tidak diisi
        const [productResult] = await connection.query(productSql, [businessId, name, description || null, finalCategoryId, finalSubCategoryId, finalSupplierId, stock, image_url || null, finalExpirationDate, low_stock_threshold || 5]);
        const productId = productResult.insertId;

        for (const variant of variants) {
            if (!variant.name || variant.price === undefined || variant.cost_price === undefined) {
                throw new Error('Setiap varian harus memiliki nama, harga, dan harga beli.');
            }
            const variantSql = 'INSERT INTO product_variants (product_id, name, price, cost_price, barcode) VALUES (?, ?, ?, ?, ?)';
            await connection.query(variantSql, [productId, variant.name, variant.price, variant.cost_price, variant.barcode || null]);
        }

        await connection.commit();
        await logActivity(businessId, req.user.id, 'CREATE_PRODUCT', `Created product: ${name} (ID: ${productId}).`);
        res.status(201).json({ message: 'Produk berhasil ditambahkan!', productId });

    } catch (error) {
        await connection.rollback();
        console.error('Error creating product:', error);
        await logActivity(businessId, req.user.id, 'CREATE_PRODUCT_FAILED', `Failed to create product ${name}. Error: ${error.message}`);
        res.status(500).json({ message: error.message || 'Server Error' });
    } finally {
        connection.release();
    }
});

// READ ALL: Mengambil semua produk (sudah dimodifikasi untuk soft delete)
router.get('/', protect, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const { barcode } = req.query;

        let productsSql;
        let params = [];

        if (barcode) {
            productsSql = `
                SELECT p.* FROM products p 
                JOIN product_variants pv ON p.id = pv.product_id 
                WHERE pv.barcode = ? AND p.business_id = ? AND p.is_archived = 0
            `;
            params = [barcode, businessId];
        } else {
            productsSql = `
                SELECT 
                    p.id, p.name, p.description, p.image_url, p.category_id, p.sub_category_id, p.supplier_id, p.stock, p.expiration_date, p.low_stock_threshold,
                    c.name AS category_name,
                    sc.name AS sub_category_name,
                    s.name as supplier_name
                FROM products AS p
                LEFT JOIN categories AS c ON p.category_id = c.id
                LEFT JOIN sub_categories AS sc ON p.sub_category_id = sc.id
                LEFT JOIN suppliers AS s ON p.supplier_id = s.id
                WHERE p.business_id = ? AND p.is_archived = 0
                ORDER BY p.created_at DESC
            `;
            params = [businessId];
        }
        
        const [products] = await db.query(productsSql, params);

        if (products.length > 0) {
            const productIds = products.map(p => p.id);
            const variantsSql = `SELECT id, product_id, name, price, cost_price, barcode FROM product_variants WHERE product_id IN (?)`;
            const [variants] = await db.query(variantsSql, [productIds]);
            products.forEach(p => {
                p.variants = variants.filter(v => v.product_id === p.id);
            });
        }
        res.json(products);
    } catch (error) {
        console.error('Error fetching products:', error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

// READ ONE: Mengambil satu produk berdasarkan ID
router.get('/:id', protect, async (req, res) => {
    try {
        const productId = req.params.id;
        const businessId = req.user.business_id;
        const productSql = `
            SELECT 
                p.id, p.name, p.description, p.image_url, p.category_id, p.sub_category_id, p.supplier_id, p.stock, p.expiration_date, p.low_stock_threshold,
                c.name AS category_name,
                sc.name AS sub_category_name,
                s.name as supplier_name
            FROM products AS p
            LEFT JOIN categories AS c ON p.category_id = c.id
            LEFT JOIN sub_categories AS sc ON p.sub_category_id = sc.id
            LEFT JOIN suppliers AS s ON p.supplier_id = s.id
            WHERE p.id = ? AND p.business_id = ? AND p.is_archived = 0
        `;
        const [[product]] = await db.query(productSql, [productId, businessId]);

        if (!product) { 
            return res.status(404).json({ message: 'Produk tidak ditemukan atau Anda tidak memiliki akses.' });
        }

        const variantsSql = `SELECT id, product_id, name, price, cost_price, barcode FROM product_variants WHERE product_id = ?`;
        const [variants] = await db.query(variantsSql, [productId]);
        product.variants = variants;

        res.json(product);

    } catch (error) {
        console.error('Error fetching single product:', error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

// UPDATE: Memperbarui produk dengan stok terpusat dan ambang batas
router.put('/:id', protect, isAdmin, async (req, res) => {
    const productId = req.params.id;
    // Tambahkan low_stock_threshold dari req.body
    const { name, description, category_id, sub_category_id, supplier_id, stock, image_url, expiration_date, variants, low_stock_threshold } = req.body;
    const businessId = req.user.business_id;

    if (!name || !variants || variants.length === 0 || stock === undefined) {
        return res.status(400).json({ message: 'Data produk tidak lengkap.' });
    }

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const finalCategoryId = category_id || null;
        const finalSubCategoryId = sub_category_id || null;
        const finalSupplierId = supplier_id || null;
        const finalExpirationDate = expiration_date || null;

        // Tambahkan kolom baru di query SQL UPDATE
        const productSql = 'UPDATE products SET name = ?, description = ?, category_id = ?, sub_category_id = ?, supplier_id = ?, stock = ?, image_url = ?, expiration_date = ?, low_stock_threshold = ? WHERE id = ? AND business_id = ?';
        // Tambahkan variabel baru ke array parameter
        await connection.query(productSql, [name, description || null, finalCategoryId, finalSubCategoryId, finalSupplierId, stock, image_url || null, finalExpirationDate, low_stock_threshold || 5, productId, businessId]);

        await connection.query('DELETE FROM product_variants WHERE product_id = ?', [productId]);

        for (const variant of variants) {
            if (!variant.name || variant.price === undefined || variant.cost_price === undefined) {
                throw new Error('Setiap varian harus memiliki nama, harga, dan harga beli.');
            }
            const variantSql = 'INSERT INTO product_variants (product_id, name, price, cost_price, barcode) VALUES (?, ?, ?, ?, ?)';
            await connection.query(variantSql, [productId, variant.name, variant.price, variant.cost_price, variant.barcode || null]);
        }

        await connection.commit();
        await logActivity(businessId, req.user.id, 'UPDATE_PRODUCT', `Updated product: ${name} (ID: ${productId}).`);
        res.json({ message: 'Produk berhasil diperbarui!' });

    } catch (error) {
        await connection.rollback();
        console.error("Error updating product:", error);
        await logActivity(businessId, req.user.id, 'UPDATE_PRODUCT_FAILED', `Failed to update product ID ${productId}. Error: ${error.message}`);
        res.status(500).json({ message: error.message || 'Server Error' });
    } finally {
        connection.release();
    }
});

// DELETE: Mengarsipkan produk (Soft Delete)
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const productId = req.params.id;
    const businessId = req.user.business_id;
    try {
        const [result] = await db.query('UPDATE products SET is_archived = 1 WHERE id = ? AND business_id = ?', [productId, businessId]);
        
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Produk tidak ditemukan atau Anda tidak punya akses.' });
        }
        
        await logActivity(businessId, req.user.id, 'DELETE_PRODUCT', `Archived product ID: ${productId}`);
        res.json({ message: 'Produk berhasil diarsipkan.' });
    } catch (error) {
        console.error('Error archiving product:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// CREATE: Menambah stok ke produk yang ada
router.post('/receive-stock', protect, isAdmin, async (req, res) => {
    const { items } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    if (!items || !Array.isArray(items) || items.length === 0) {
        return res.status(400).json({ message: 'Daftar item untuk penambahan stok harus diisi.' });
    }

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        for (const item of items) {
            const { productId, quantity } = item;
            if (!productId || !quantity || parseInt(quantity) <= 0) {
                throw new Error(`Data tidak valid untuk produk ID ${productId}. Kuantitas harus lebih dari 0.`);
            }
            
            await connection.query(
                'UPDATE products SET stock = stock + ? WHERE id = ? AND business_id = ?',
                [parseInt(quantity), productId, businessId]
            );
        }

        await connection.commit();

        const itemDetails = items.map(i => `(ID: ${i.productId}, Qty: ${i.quantity})`).join(', ');
        await logActivity(businessId, userId, 'RECEIVE_STOCK', `Stock received for items: ${itemDetails}`);

        res.status(200).json({ message: 'Stok berhasil diperbarui untuk semua produk.' });

    } catch (error) {
        await connection.rollback();
        console.error('Error receiving stock:', error);
        await logActivity(businessId, userId, 'RECEIVE_STOCK_FAILED', `Error: ${error.message}`);
        res.status(500).json({ message: error.message || 'Gagal memperbarui stok.' });
    } finally {
        connection.release();
    }
});

module.exports = router;

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\promotionRoutes.js =====

// backend/routes/promotionRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const router = express.Router();

const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: "Akses ditolak." });
    }
    next();
};

// GET semua promosi
router.get('/', protect, isAdmin, async (req, res) => {
    try {
        const [promotions] = await db.query(
            'SELECT * FROM promotions WHERE business_id = ? ORDER BY created_at DESC',
            [req.user.business_id]
        );
        res.json(promotions);
    } catch (error) {
        res.status(500).json({ message: "Server Error" });
    }
});

// POST promosi baru
router.post('/', protect, isAdmin, async (req, res) => {
    const { name, description, type, value, code, start_date, end_date, is_active } = req.body;
    const businessId = req.user.business_id;

    try {
        const [result] = await db.query(
            'INSERT INTO promotions (business_id, name, description, type, value, code, start_date, end_date, is_active) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [businessId, name, description, type, value, code || null, start_date || null, end_date || null, is_active]
        );
        await logActivity(businessId, req.user.id, 'CREATE_PROMOTION', `Membuat promosi: ${name}`);
        res.status(201).json({ message: 'Promosi berhasil dibuat.', id: result.insertId });
    } catch (error) {
        if (error.code === 'ER_DUP_ENTRY') {
            return res.status(400).json({ message: 'Kode promo sudah digunakan.' });
        }
        res.status(500).json({ message: "Server Error" });
    }
});

// GET validasi kode promo untuk kasir
router.get('/validate/:code', protect, async (req, res) => {
    const { code } = req.params;
    try {
        const query = `
            SELECT * FROM promotions 
            WHERE code = ? AND business_id = ? AND is_active = true 
            AND (start_date IS NULL OR NOW() >= start_date) 
            AND (end_date IS NULL OR NOW() <= end_date)
        `;
        const [[promotion]] = await db.query(query, [code, req.user.business_id]);

        if (!promotion) {
            return res.status(404).json({ message: 'Kode promo tidak valid atau sudah kedaluwarsa.' });
        }
        res.json(promotion);
    } catch (error) {
        res.status(500).json({ message: 'Server Error' });
    }
});

// DELETE promosi
router.delete('/:id', protect, isAdmin, async (req, res) => {
    try {
        const [result] = await db.query(
            'DELETE FROM promotions WHERE id = ? AND business_id = ?',
            [req.params.id, req.user.business_id]
        );
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Promosi tidak ditemukan.' });
        }
        await logActivity(req.user.business_id, req.user.id, 'DELETE_PROMOTION', `Menghapus promosi ID: ${req.params.id}`);
        res.json({ message: 'Promosi berhasil dihapus.' });
    } catch (error) {
        res.status(500).json({ message: 'Server Error' });
    }
});

module.exports = router;

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\reportRoutes.js =====

// backend/routes/reportRoutes.js

const express = require('express');
const db = require('../config/db');
const PDFDocument = require('pdfkit');
const { protect } = require('../middleware/authMiddleware');
const { getValidDateRange } = require('../utils/dateUtils');

const router = express.Router();

const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: "Akses ditolak." });
    }
    next();
};

// Helper function untuk format Rupiah
const formatCurrency = (number) => {
    return new Intl.NumberFormat('id-ID', {
        style: 'currency',
        currency: 'IDR',
        minimumFractionDigits: 0
    }).format(number || 0);
};

// Endpoint utama untuk generate laporan penjualan PDF
router.get('/sales-summary', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate, userId, customerId } = req.query;
        const businessId = req.user.business_id;
        const { startDate: validStartDate, endDate: validEndDate } = getValidDateRange(startDate, endDate);

        let params = [businessId, validStartDate, validEndDate];
        let whereClauses = [];

        if (userId && userId !== 'all') {
            whereClauses.push('o.user_id = ?');
            params.push(userId);
        }
        if (customerId && customerId !== 'all') {
            whereClauses.push('o.customer_id = ?');
            params.push(customerId);
        }

        const whereString = whereClauses.length > 0 ? `AND ${whereClauses.join(' AND ')}` : '';

        const query = `
            SELECT 
                o.id, o.created_at, o.total_amount, o.discount_amount,
                (SELECT SUM(oi.price * oi.quantity) - SUM(oi.cost_price * oi.quantity) FROM order_items oi WHERE oi.order_id = o.id) as profit,
                u.name as cashier_name,
                c.name as customer_name
            FROM orders o
            JOIN users u ON o.user_id = u.id
            LEFT JOIN customers c ON o.customer_id = c.id
            WHERE o.business_id = ? AND o.created_at BETWEEN ? AND ? ${whereString}
            ORDER BY o.created_at ASC
        `;
        
        const [transactions] = await db.query(query, params);

        let totalRevenue = 0;
        let totalProfit = 0;
        let totalDiscount = 0;
        transactions.forEach(t => {
            totalRevenue += parseFloat(t.total_amount);
            totalProfit += parseFloat(t.profit) || 0;
            totalDiscount += parseFloat(t.discount_amount) || 0;
        });

        // --- PDF Generation ---
        const doc = new PDFDocument({ margin: 50, size: 'A4' });
        
        const filename = `Laporan-Penjualan-${Date.now()}.pdf`;
        res.setHeader('Content-disposition', `attachment; filename="${filename}"`);
        res.setHeader('Content-type', 'application/pdf');

        doc.pipe(res);

        // Header
        doc.fontSize(20).text('Laporan Penjualan', { align: 'center' });
        doc.moveDown();
        doc.fontSize(12).text(`Periode: ${new Date(validStartDate).toLocaleDateString('id-ID')} - ${new Date(validEndDate).toLocaleDateString('id-ID')}`);
        doc.moveDown();

        // Summary
        doc.fontSize(14).text('Ringkasan', { underline: true });
        doc.moveDown(0.5);
        doc.fontSize(10).text(`Total Pendapatan: ${formatCurrency(totalRevenue)}`);
        doc.fontSize(10).text(`Total Laba Kotor: ${formatCurrency(totalProfit)}`);
        doc.fontSize(10).text(`Total Transaksi: ${transactions.length}`);
        doc.fontSize(10).text(`Total Diskon Diberikan: ${formatCurrency(totalDiscount)}`);
        doc.moveDown();
        
        // Table Header
        doc.fontSize(14).text('Detail Transaksi', { underline: true });
        doc.moveDown(0.5);
        
        const tableTop = doc.y;
        const itemX = 50;
        const dateX = 100;
        const cashierX = 220;
        const customerX = 320;
        const totalX = 450;

        doc.fontSize(10)
            .text('ID', itemX, tableTop)
            .text('Tanggal', dateX, tableTop)
            .text('Kasir', cashierX, tableTop)
            .text('Pelanggan', customerX, tableTop)
            .text('Total', totalX, tableTop, { width: 90, align: 'right' });
        
        doc.moveTo(itemX - 5, doc.y + 5).lineTo(totalX + 95, doc.y + 5).stroke();
        doc.moveDown();

        // Table Rows
        transactions.forEach(t => {
            const rowY = doc.y;
            doc.fontSize(9)
               .text(t.id, itemX, rowY)
               .text(new Date(t.created_at).toLocaleDateString('id-ID'), dateX, rowY)
               .text(t.cashier_name, cashierX, rowY, {width: 90, ellipsis: true})
               .text(t.customer_name || 'Umum', customerX, rowY, {width: 90, ellipsis: true})
               .text(formatCurrency(t.total_amount), totalX, rowY, { width: 90, align: 'right' });
            doc.moveDown(1.5);
        });

        doc.end();

    } catch (error) {
        console.error("Error generating PDF report:", error);
        res.status(500).json({ message: "Gagal membuat laporan." });
    }
});

module.exports = router;

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\settingsRoutes.js =====

// backend/routes/settingsRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect } = require('../middleware/authMiddleware');
const { encrypt, decrypt } = require('../utils/encryption');
const { logActivity } = require('../utils/logUtils');
const router = express.Router();

const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: "Akses ditolak. Memerlukan peran admin." });
    }
    next();
};

// --- RUTE UNTUK SETELAN EMAIL ---
router.get('/email', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [[settings]] = await db.query(
            'SELECT sender_email, sender_name FROM email_settings WHERE business_id = ?',
            [businessId]
        );
        res.json({
            sender_email: settings ? settings.sender_email : null,
            sender_name: settings ? settings.sender_name : null
        });
    } catch (error) {
        console.error("Error fetching email settings:", error);
        res.status(500).json({ message: 'Server Error' });
    }
});

router.post('/email', protect, isAdmin, async (req, res) => {
    const { email, appPassword, sender_name } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    if (!email || !appPassword) {
        return res.status(400).json({ message: 'Email pengirim dan Sandi Aplikasi harus diisi.' });
    }

    try {
        const encryptedPassword = encrypt(appPassword);
        const [[existing]] = await db.query('SELECT id FROM email_settings WHERE business_id = ?', [businessId]);

        if (existing) {
            await db.query(
                'UPDATE email_settings SET sender_email = ?, app_password = ?, sender_name = ? WHERE business_id = ?',
                [email, encryptedPassword, sender_name || null, businessId]
            );
        } else {
            await db.query(
                'INSERT INTO email_settings (business_id, sender_email, app_password, sender_name) VALUES (?, ?, ?, ?)',
                [businessId, email, encryptedPassword, sender_name || null]
            );
        }
        await logActivity(businessId, userId, 'UPDATE_EMAIL_SETTINGS', `Email settings updated.`);
        res.status(200).json({ message: 'Setelan email berhasil disimpan.' });
    } catch (error) {
        console.error("Error saving email settings:", error);
        await logActivity(businessId, userId, 'SAVE_EMAIL_SETTINGS_FAILED', `Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error' });
    }
});

// --- RUTE UNTUK SETELAN BISNIS ---
router.get('/business', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        // Removed low_stock_threshold from query
        const [[settings]] = await db.query(
            'SELECT payment_methods, receipt_logo_url, receipt_footer_text, tax_rate FROM businesses WHERE id = ?',
            [businessId]
        );

        if (!settings) {
            return res.status(404).json({ message: 'Pengaturan bisnis tidak ditemukan.' });
        }
        res.json(settings);
    } catch (error) {
        console.error("Error fetching business settings:", error);
        res.status(500).json({ message: "Server Error" });
    }
});

router.post('/business', protect, isAdmin, async (req, res) => {
    // Removed low_stock_threshold from request body
    const { payment_methods, receipt_logo_url, receipt_footer_message, tax_rate } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    if (!Array.isArray(payment_methods) || payment_methods.length === 0) {
        return res.status(400).json({ message: 'Metode pembayaran harus berupa array dan tidak boleh kosong.' });
    }
    // Frontend sekarang akan mengirimkan nilai desimal, validasi ini untuk desimal
    if (tax_rate === undefined || isNaN(parseFloat(tax_rate)) || parseFloat(tax_rate) < 0) {
        return res.status(400).json({ message: 'Tarif pajak tidak valid.' });
    }
    // Removed validation for low_stock_threshold


    try {
        // Removed low_stock_threshold from query UPDATE
        await db.query(
            'UPDATE businesses SET payment_methods = ?, receipt_logo_url = ?, receipt_footer_text = ?, tax_rate = ? WHERE id = ?',
            [JSON.stringify(payment_methods), receipt_logo_url, receipt_footer_message, parseFloat(tax_rate), businessId]
        );

        await logActivity(businessId, userId, 'UPDATE_BUSINESS_SETTINGS', 'Business settings updated.');
        res.status(200).json({ message: 'Setelan bisnis berhasil diperbarui.' });
    } catch (error) {
        console.error("Error saving business settings:", error);
        await logActivity(businessId, userId, 'UPDATE_BUSINESS_SETTINGS_FAILED', `Error: ${error.message}`);
        res.status(500).json({ message: "Server Error" });
    }
});

// --- RUTE UNTUK TARGET PENDAPATAN ---
router.get('/revenue-target', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [[settings]] = await db.query(
            'SELECT monthly_revenue_target FROM businesses WHERE id = ?',
            [businessId]
        );
        res.json({ monthly_revenue_target: settings?.monthly_revenue_target || 0 });
    } catch (error) {
        console.error("Error fetching revenue target:", error);
        res.status(500).json({ message: "Server Error" });
    }
});

router.post('/revenue-target', protect, isAdmin, async (req, res) => {
    const { target } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    if (target === undefined || isNaN(parseFloat(target)) || parseFloat(target) < 0) {
        return res.status(400).json({ message: 'Target pendapatan tidak valid.' });
    }

    try {
        await db.query(
            'UPDATE businesses SET monthly_revenue_target = ? WHERE id = ?',
            [parseFloat(target), businessId]
        );

        await logActivity(businessId, userId, 'UPDATE_REVENUE_TARGET', `Revenue target updated to ${target}.`);
        res.status(200).json({ message: 'Target pendapatan berhasil diperbarui.' });
    } catch (error) {
        console.error("Error saving revenue target:", error);
        await logActivity(businessId, userId, 'UPDATE_REVENUE_TARGET_FAILED', `Error: ${error.message}`);
        res.status(500).json({ message: "Server Error" });
    }
});


module.exports = router;

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\shiftRoutes.js =====

// backend/routes/shiftRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const router = express.Router();

const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: "Akses ditolak. Memerlukan peran admin." });
    }
    next();
};

// POST /api/shifts/start - Memulai shift baru
router.post('/start', protect, async (req, res) => {
    const { starting_cash } = req.body;
    const { id: userId, business_id: businessId } = req.user;

    if (starting_cash == null || isNaN(parseFloat(starting_cash))) {
        return res.status(400).json({ message: 'Jumlah kas awal harus diisi.' });
    }

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const [[existingShift]] = await connection.query(
            'SELECT id FROM cashier_shifts WHERE user_id = ? AND status = "open"',
            [userId]
        );

        if (existingShift) {
            await connection.rollback();
            return res.status(400).json({ message: 'Anda sudah memiliki shift yang aktif.' });
        }

        const [result] = await connection.query(
            'INSERT INTO cashier_shifts (business_id, user_id, start_time, starting_cash, status) VALUES (?, ?, NOW(), ?, "open")',
            [businessId, userId, parseFloat(starting_cash)]
        );
        
        await connection.commit();
        await logActivity(businessId, userId, 'START_SHIFT', `Shift dimulai dengan kas awal Rp ${starting_cash}`);
        res.status(201).json({ message: 'Shift berhasil dimulai!', shiftId: result.insertId });

    } catch (error) {
        await connection.rollback();
        console.error("Error starting shift:", error);
        res.status(500).json({ message: "Gagal memulai shift." });
    } finally {
        connection.release();
    }
});

// GET /api/shifts/current - Cek shift aktif untuk pengguna saat ini
router.get('/current', protect, async (req, res) => {
    const { id: userId } = req.user;
    try {
        const [[currentShift]] = await db.query(
            'SELECT * FROM cashier_shifts WHERE user_id = ? AND status = "open"',
            [userId]
        );

        if (currentShift) {
            res.json({ active: true, shift: currentShift });
        } else {
            res.json({ active: false, shift: null });
        }
    } catch (error) {
        console.error("Error checking current shift:", error);
        res.status(500).json({ message: "Gagal memeriksa shift." });
    }
});

// POST /api/shifts/close/:id - Menutup shift
router.post('/close/:id', protect, async (req, res) => {
    const { id: shiftId } = req.params;
    const { ending_cash } = req.body;
    const { id: userId, business_id: businessId } = req.user;
    
    if (ending_cash == null || isNaN(parseFloat(ending_cash))) {
        return res.status(400).json({ message: 'Jumlah kas akhir harus diisi.' });
    }

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();
        const endTime = new Date();

        const [[shift]] = await connection.query(
            'SELECT * FROM cashier_shifts WHERE id = ? AND user_id = ? AND status = "open" FOR UPDATE',
            [shiftId, userId]
        );

        if (!shift) {
            throw new Error('Shift aktif tidak ditemukan untuk ditutup.');
        }

        const salesQuery = `
            SELECT payment_method, SUM(total_amount) as total
            FROM orders
            WHERE user_id = ? AND business_id = ? AND created_at BETWEEN ? AND ?
            GROUP BY payment_method
        `;
        const [salesData] = await connection.query(salesQuery, [userId, businessId, shift.start_time, endTime]);

        let cash_sales = 0, card_sales = 0, qris_sales = 0, other_sales = 0;
        salesData.forEach(sale => {
            const paymentMethod = sale.payment_method.toLowerCase();
            if (paymentMethod === 'tunai') cash_sales = parseFloat(sale.total);
            else if (paymentMethod === 'kartu') card_sales = parseFloat(sale.total);
            else if (paymentMethod === 'qris') qris_sales = parseFloat(sale.total);
            else other_sales += parseFloat(sale.total);
        });

        const total_sales = cash_sales + card_sales + qris_sales + other_sales;
        const expected_cash = parseFloat(shift.starting_cash) + cash_sales;
        const difference = parseFloat(ending_cash) - expected_cash;

        const updateQuery = `
            UPDATE cashier_shifts SET 
            end_time = ?, ending_cash = ?, cash_sales = ?, card_sales = ?, 
            qris_sales = ?, other_sales = ?, total_sales = ?, expected_cash = ?, 
            difference = ?, status = "closed" 
            WHERE id = ?
        `;
        await connection.query(updateQuery, [
            endTime, parseFloat(ending_cash), cash_sales, card_sales, qris_sales, other_sales,
            total_sales, expected_cash, difference, shiftId
        ]);
        
        await connection.commit();
        await logActivity(businessId, userId, 'CLOSE_SHIFT', `Shift ID ${shiftId} ditutup.`);
        res.json({ message: 'Shift berhasil ditutup.', shiftSummary: { ...shift, status: 'closed', end_time: endTime, total_sales, expected_cash, difference } });

    } catch (error) {
        await connection.rollback();
        console.error("Error closing shift:", error);
        res.status(500).json({ message: error.message || "Gagal menutup shift." });
    } finally {
        connection.release();
    }
});

// GET /api/shifts/history - (Admin) Melihat riwayat shift
router.get('/history', protect, isAdmin, async (req, res) => {
    const businessId = req.user.business_id;
    try {
        const query = `
            SELECT s.*, u.name as user_name 
            FROM cashier_shifts s
            JOIN users u ON s.user_id = u.id
            WHERE s.business_id = ? AND s.status = 'closed'
            ORDER BY s.end_time DESC
        `;
        const [history] = await db.query(query, [businessId]);
        res.json(history);
    } catch (error) {
        console.error("Error fetching shift history:", error);
        res.status(500).json({ message: "Gagal mengambil riwayat shift." });
    }
});

// NEW ENDPOINT: DELETE /api/shifts/:id - Menghapus shift (Admin only)
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const shiftId = req.params.id;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    try {
        const [result] = await db.query('DELETE FROM cashier_shifts WHERE id = ? AND business_id = ?', [shiftId, businessId]);
        
        if (result.affectedRows === 0) {
            await logActivity(businessId, userId, 'DELETE_SHIFT_FAILED', `Attempted to delete non-existent or unauthorized shift ID ${shiftId}.`);
            return res.status(404).json({ message: 'Shift tidak ditemukan atau Anda tidak punya akses.' });
        }
        
        await logActivity(businessId, userId, 'DELETE_SHIFT', `Deleted shift ID: ${shiftId}.`);
        res.status(200).json({ message: 'Shift berhasil dihapus.' });

    } catch (error) {
        console.error("Error deleting shift:", error);
        await logActivity(businessId, userId, 'DELETE_SHIFT_FAILED', `Failed to delete shift ID ${shiftId}. Error: ${error.message}`);
        res.status(500).json({ message: "Server Error" });
    }
});

module.exports = router;

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\stockRoutes.js =====

// backend/routes/stockRoutes.js
const express = require('express');
const db = require('../config/db');
const { protect } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const router = express.Router();

const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: "Akses ditolak." });
    }
    next();
};

// Endpoint utama untuk melakukan penyesuaian stok
router.post('/adjust', protect, isAdmin, async (req, res) => {
    const { productId, newStockQuantity, type, reason } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    if (productId == null || newStockQuantity == null || !type) {
        return res.status(400).json({ message: 'Data tidak lengkap.' });
    }

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        // 1. Ambil stok saat ini dan kunci baris produk untuk mencegah update bersamaan
        const [[product]] = await connection.query(
            'SELECT stock, name FROM products WHERE id = ? AND business_id = ? FOR UPDATE',
            [productId, businessId]
        );

        if (!product) {
            throw new Error('Produk tidak ditemukan.');
        }

        const currentStock = product.stock;
        const quantityChange = newStockQuantity - currentStock;

        // 2. Catat perubahan di tabel stock_adjustments
        await connection.query(
            'INSERT INTO stock_adjustments (business_id, product_id, user_id, type, quantity_change, reason) VALUES (?, ?, ?, ?, ?, ?)',
            [businessId, productId, userId, type, quantityChange, reason || null]
        );

        // 3. Update jumlah stok di tabel products
        await connection.query(
            'UPDATE products SET stock = ? WHERE id = ?',
            [newStockQuantity, productId]
        );
        
        await connection.commit();
        
        await logActivity(businessId, userId, 'STOCK_ADJUSTMENT', `Stok produk "${product.name}" (ID: ${productId}) diubah dari ${currentStock} menjadi ${newStockQuantity}. Alasan: ${type}.`);
        res.status(200).json({ message: 'Stok berhasil disesuaikan.' });

    } catch (error) {
        await connection.rollback();
        console.error("Stock Adjustment Error:", error);
        res.status(500).json({ message: error.message || 'Gagal menyesuaikan stok.' });
    } finally {
        connection.release();
    }
});

module.exports = router;

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\supplierRoutes.js =====

const express = require('express');
const db = require('../config/db');
const { protect } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils'); // <-- Pastikan ini ada
const router = express.Router();

const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: 'Akses ditolak. Memerlukan peran admin.' });
    }
    next();
};

// GET semua supplier berdasarkan business_id (yang tidak diarsipkan)
router.get('/', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [suppliers] = await db.query('SELECT id, name, contact_person, phone, email, address, created_at FROM suppliers WHERE business_id = ? AND is_archived = 0 ORDER BY name ASC', [businessId]);
        res.json(suppliers);
    } catch (error) {
        console.error('Error fetching suppliers:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// POST buat supplier baru dengan business_id
router.post('/', protect, isAdmin, async (req, res) => {
    const { name, contact_person, phone, email, address } = req.body;
    const businessId = req.user.business_id;
    try {
        const [result] = await db.query(
            'INSERT INTO suppliers (business_id, name, contact_person, phone, email, address) VALUES (?, ?, ?, ?, ?, ?)',
            [businessId, name, contact_person || null, phone || null, email || null, address || null]
        );
        const supplierId = result.insertId;
        await logActivity(businessId, req.user.id, 'CREATE_SUPPLIER', `Created supplier: ${name} (ID: ${supplierId}).`);
        res.status(201).json({ message: 'Supplier berhasil dibuat.', supplierId: supplierId });
    } catch (error) {
        console.error('Error creating supplier:', error);
        await logActivity(businessId, req.user.id, 'CREATE_SUPPLIER_FAILED', `Failed to create supplier ${name}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error' });
    }
});

// PUT update supplier
router.put('/:id', protect, isAdmin, async (req, res) => {
    const supplierId = req.params.id;
    const { name, contact_person, phone, email, address } = req.body;
    const businessId = req.user.business_id;
    try {
        const [result] = await db.query(
            'UPDATE suppliers SET name = ?, contact_person = ?, phone = ?, email = ?, address = ? WHERE id = ? AND business_id = ?',
            [name, contact_person || null, phone || null, email || null, address || null, supplierId, businessId]
        );
        if (result.affectedRows === 0) {
            await logActivity(businessId, req.user.id, 'UPDATE_SUPPLIER_FAILED', `Attempted to update non-existent or unauthorized supplier ID ${supplierId}.`);
            return res.status(404).json({ message: 'Supplier tidak ditemukan atau Anda tidak punya akses.' });
        }
        await logActivity(businessId, req.user.id, 'UPDATE_SUPPLIER', `Updated supplier ID ${supplierId} to name ${name}.`);
        res.json({ message: 'Supplier berhasil diperbarui.' });
    } catch (error) {
        console.error('Error updating supplier:', error);
        await logActivity(businessId, req.user.id, 'UPDATE_SUPPLIER_ERROR', `Error updating supplier ID ${supplierId}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error' });
    }
});

// DELETE (Soft Delete): Mengarsipkan supplier
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const supplierId = req.params.id;
    const businessId = req.user.business_id;
    try {
        // Opsional: Anda mungkin ingin memeriksa apakah ada produk yang masih terkait dengan supplier ini
        // Jika ada, putuskan hubungan supplier_id menjadi NULL di tabel products
        await db.query('UPDATE products SET supplier_id = NULL WHERE supplier_id = ? AND business_id = ?', [supplierId, businessId]);
        
        // Perubahan di sini: Update is_archived menjadi 1
        const [result] = await db.query('UPDATE suppliers SET is_archived = 1 WHERE id = ? AND business_id = ?', [supplierId, businessId]);
        
        if (result.affectedRows === 0) {
            await logActivity(businessId, req.user.id, 'DELETE_SUPPLIER_FAILED', `Attempted to archive non-existent or unauthorized supplier ID ${supplierId}.`);
            return res.status(404).json({ message: 'Supplier tidak ditemukan atau Anda tidak punya akses.' });
        }
        await logActivity(businessId, req.user.id, 'ARCHIVE_SUPPLIER', `Archived supplier ID ${supplierId}.`);
        res.json({ message: 'Supplier berhasil diarsipkan.' });
    } catch (error) {
        console.error('Error archiving supplier:', error);
        await logActivity(businessId, req.user.id, 'DELETE_SUPPLIER_ERROR', `Error archiving supplier ID ${supplierId}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error' });
    }
});

module.exports = router;

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\uploadRoutes.js =====

// FILE: uploadRoutes.js
// backend/routes/uploadRoutes.js
const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { protect } = require('../middleware/authMiddleware');

// Define storage for multer
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        const uploadDir = path.join(__dirname, '..', 'uploads');

        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        cb(null, `${file.fieldname}-${Date.now()}${path.extname(file.originalname)}`);
    }
});
// Configure multer middleware
const upload = multer({ storage: storage });
// POST route for image upload
router.post('/image', protect, upload.single('image'), (req, res) => {
    if (!req.file) {
        return res.status(400).json({ message: 'No file uploaded.' });
    }

    const imageUrl = `${req.protocol}://${req.get('host')}/uploads/${req.file.filename}`;

    res.status(200).json({ message: 'Image uploaded successfully', url: imageUrl });
});

module.exports = router;

===== C:\Users\Ibnu\Project\smart-pos\backend\routes\userRoutes.js =====

// backend/routes/userRoutes.js

const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const db = require('../config/db');
const { protect } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const nodemailer = require('nodemailer');
const { decrypt } = require('../utils/encryption');
const router = express.Router();

const isAdmin = (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: "Akses ditolak. Hanya untuk Admin." });
    }
    next();
};

// Register endpoint
router.post('/register', async (req, res) => {
    const { name, email, password, registrationKey } = req.body;

    if (!name || !email || !password || !registrationKey) {
        return res.status(400).json({ message: 'Semua kolom harus diisi.' });
    }

    if (password.length < 6) {
        return res.status(400).json({ message: 'Password minimal 6 karakter.' });
    }

    try {
        const [[existingUser]] = await db.query('SELECT id FROM users WHERE email = ?', [email]);
        if (existingUser) {
            return res.status(400).json({ message: 'Email sudah terdaftar.' });
        }

        const [[anyAdmin]] = await db.query('SELECT id FROM users WHERE role = "admin"');
        let role = 'kasir';
        if (!anyAdmin) {
            // First user to register becomes admin if registration key matches
            if (registrationKey !== process.env.ADMIN_REGISTRATION_KEY) {
                return res.status(403).json({ message: 'Kode registrasi admin tidak valid.' });
            }
            role = 'admin';
        } else {
            // If there's already an admin, public registration is not allowed
            // This is a design choice; you might allow public cashier registration
            return res.status(403).json({ message: 'Registrasi akun admin hanya dapat dilakukan satu kali. Hubungi admin untuk membuat akun baru.' });
            // If you want to allow regular users (cashiers) to register without key, remove the above line
            // and ensure your frontend distinguishes between admin and cashier registration forms.
            // For simplicity, this template assumes only one initial admin registration via key.
        }

        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        // For the first admin, create a new business
        let businessId = null;
        if (role === 'admin') {
            const [businessResult] = await db.query('INSERT INTO businesses (business_name) VALUES (?)', [`${name}'s Business`]);
            businessId = businessResult.insertId;
            // Also create default settings for this new business
            await db.query('INSERT INTO email_settings (business_id) VALUES (?)', [businessId]);
        }

        const [userResult] = await db.query('INSERT INTO users (business_id, name, email, password, role) VALUES (?, ?, ?, ?, ?)', [businessId, name, email, hashedPassword, role]);
        const newUser = {
            id: userResult.insertId,
            name,
            email,
            role,
            business_id: businessId
        };
        
        await logActivity(businessId, newUser.id, 'USER_REGISTER', `New user registered: ${name} (${role}).`);
        
        const token = jwt.sign({ id: newUser.id, name: newUser.name, email: newUser.email, role: newUser.role, business_id: newUser.business_id }, process.env.JWT_SECRET, { expiresIn: '1d' });
        res.status(201).json({ message: 'Registrasi berhasil!', token });

    } catch (error) {
        console.error("Register Error:", error);
        res.status(500).json({ message: 'Server Error' });
    }
});


// Login endpoint
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ message: 'Email dan password harus diisi.' });
    }

    try {
        const [[user]] = await db.query('SELECT * FROM users WHERE email = ?', [email]);
        if (!user) {
            return res.status(401).json({ message: 'Email atau password salah.' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ message: 'Email atau password salah.' });
        }

        const token = jwt.sign({ id: user.id, name: user.name, email: user.email, role: user.role, business_id: user.business_id }, process.env.JWT_SECRET, { expiresIn: '1d' });
        
        await logActivity(user.business_id, user.id, 'USER_LOGIN', `User ${user.name} logged in.`);
        res.json({ message: 'Login berhasil!', token });

    } catch (error) {
        console.error("Login Error:", error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// --- ENDPOINT BARU: LUPA PASSWORD ---
router.post('/forgot-password', async (req, res) => {
    const { email } = req.body;
    if (!email) {
        return res.status(400).json({ message: 'Alamat email harus diisi.' });
    }

    try {
        const [[user]] = await db.query('SELECT id, business_id, name FROM users WHERE email = ?', [email]);
        if (!user) {
            // Tetap kirim respons sukses untuk mencegah enumerasi email
            return res.status(200).json({ message: 'Jika email terdaftar, link reset akan dikirim.' });
        }

        const businessId = user.business_id;
        const [[emailSettings]] = await db.query(
            'SELECT sender_email, app_password, sender_name FROM email_settings WHERE business_id = ?',
            [businessId]
        );

        if (!emailSettings || !emailSettings.sender_email || !emailSettings.app_password) {
            return res.status(500).json({ message: 'Layanan email belum dikonfigurasi oleh admin.' });
        }

        // Buat token reset dengan masa berlaku singkat (15 menit)
        const resetToken = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '15m' });
        const resetLink = `http://localhost:5173/reset-password/${resetToken}`;

        const transporter = nodemailer.createTransport({
            host: "smtp.gmail.com",
            port: 465,
            secure: true,
            auth: {
                user: emailSettings.sender_email,
                pass: decrypt(emailSettings.app_password),
            },
        });

        await transporter.sendMail({
            from: `"${emailSettings.sender_name || 'Smart POS'}" <${emailSettings.sender_email}>`,
            to: email,
            subject: 'Reset Password Akun Smart POS Anda',
            html: `
                <p>Halo ${user.name},</p>
                <p>Anda menerima email ini karena ada permintaan untuk mereset password akun Anda.</p>
                <p>Silakan klik link di bawah ini untuk melanjutkan:</p>
                <a href="${resetLink}" target="_blank">Reset Password Saya</a>
                <p>Link ini hanya berlaku selama 15 menit. Jika Anda tidak merasa meminta ini, abaikan saja email ini.</p>
            `,
        });

        await logActivity(businessId, user.id, 'FORGOT_PASSWORD_REQUEST', `Password reset link sent to ${email}.`);
        res.status(200).json({ message: 'Jika email terdaftar, link reset akan dikirim.' });

    } catch (error) {
        console.error("Forgot Password Error:", error);
        res.status(500).json({ message: "Terjadi kesalahan pada server." });
    }
});

// --- ENDPOINT BARU: RESET PASSWORD ---
router.post('/reset-password/:token', async (req, res) => {
    const { token } = req.params;
    const { password } = req.body;

    if (!password) {
        return res.status(400).json({ message: 'Password baru harus diisi.' });
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const userId = decoded.id;

        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        await db.query('UPDATE users SET password = ? WHERE id = ?', [hashedPassword, userId]);
        
        // Log aktivitas tanpa businessId jika tidak ada di token (opsional, tapi bagus)
        const [[user]] = await db.query('SELECT business_id, name FROM users WHERE id = ?', [userId]);
        if(user) {
            await logActivity(user.business_id, userId, 'PASSWORD_RESET_SUCCESS', `Password for user ${user.name} has been reset.`);
        }
        
        res.status(200).json({ message: 'Password berhasil direset! Silakan login dengan password baru Anda.' });
    } catch (error) {
        if (error instanceof jwt.TokenExpiredError) {
            return res.status(400).json({ message: 'Link reset password sudah kedaluwarsa. Silakan minta yang baru.' });
        }
        console.error("Reset Password Error:", error);
        res.status(500).json({ message: 'Token tidak valid atau terjadi kesalahan.' });
    }
});


// User Profile (logged-in user)
router.get('/profile', protect, (req, res) => {
    // req.user comes from protect middleware
    res.json({ id: req.user.id, name: req.user.name, email: req.user.email, role: req.user.role, business_id: req.user.business_id });
});

// GET all users (Admin only)
router.get('/', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [users] = await db.query('SELECT id, name, email, role, created_at FROM users WHERE business_id = ? ORDER BY created_at DESC', [businessId]);
        res.json(users);
    } catch (error) {
        console.error('Error fetching users:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// CREATE user (Admin only)
router.post('/', protect, isAdmin, async (req, res) => {
    const { name, email, password, role } = req.body;
    const businessId = req.user.business_id; // Admin's business_id

    if (!name || !email || !password || !role) {
        return res.status(400).json({ message: 'Semua kolom harus diisi.' });
    }
    if (password.length < 6) {
        return res.status(400).json({ message: 'Password minimal 6 karakter.' });
    }

    try {
        const [[existingUser]] = await db.query('SELECT id FROM users WHERE email = ? AND business_id = ?', [email, businessId]);
        if (existingUser) {
            return res.status(400).json({ message: 'Email ini sudah digunakan di bisnis Anda.' });
        }

        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        const [userResult] = await db.query('INSERT INTO users (business_id, name, email, password, role) VALUES (?, ?, ?, ?, ?)', [businessId, name, email, hashedPassword, role]);
        const userId = userResult.insertId; // Perbaikan di sini: Menggunakan userResult
        await logActivity(businessId, req.user.id, 'CREATE_USER_BY_ADMIN', `Admin created new user: ${name} (${role}).`);
        res.status(201).json({ message: 'Pengguna berhasil ditambahkan!', userId });
    } catch (error) {
        console.error('Error creating user by admin:', error);
        await logActivity(businessId, req.user.id, 'CREATE_USER_BY_ADMIN_FAILED', `Failed to create user ${name}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error' });
    }
});

// UPDATE user (Admin only)
router.put('/:id', protect, isAdmin, async (req, res) => {
    const userIdToUpdate = req.params.id;
    const { name, email, password, role } = req.body;
    const businessId = req.user.business_id;

    if (!name || !email || !role) {
        return res.status(400).json({ message: 'Nama, email, dan peran harus diisi.' });
    }

    try {
        let hashedPassword = null;
        if (password) {
            if (password.length < 6) {
                return res.status(400).json({ message: 'Password minimal 6 karakter.' });
            }
            const salt = await bcrypt.genSalt(10);
            hashedPassword = await bcrypt.hash(password, salt);
        }

        const [[targetUser]] = await db.query('SELECT email FROM users WHERE id = ? AND business_id = ?', [userIdToUpdate, businessId]);
        if (!targetUser) {
            return res.status(404).json({ message: 'Pengguna tidak ditemukan atau Anda tidak punya akses.' });
        }

        // Check if new email already exists for another user in the same business
        if (email !== targetUser.email) {
            const [[emailExists]] = await db.query('SELECT id FROM users WHERE email = ? AND business_id = ? AND id != ?', [email, businessId, userIdToUpdate]);
            if (emailExists) {
                return res.status(400).json({ message: 'Email ini sudah digunakan oleh pengguna lain di bisnis Anda.' });
            }
        }

        const updateFields = [`name = ?`, `email = ?`, `role = ?`];
        const updateValues = [name, email, role];

        if (hashedPassword) {
            updateFields.push(`password = ?`);
            updateValues.push(hashedPassword);
        }
        updateValues.push(userIdToUpdate, businessId);

        const updateSql = `UPDATE users SET ${updateFields.join(', ')} WHERE id = ? AND business_id = ?`;
        const [result] = await db.query(updateSql, updateValues);

        if (result.affectedRows === 0) {
            await logActivity(businessId, req.user.id, 'UPDATE_USER_FAILED', `Attempted to update non-existent user ID ${userIdToUpdate} or no changes made.`);
            return res.status(404).json({ message: 'Pengguna tidak ditemukan atau tidak ada perubahan yang dibuat.' });
        }
        await logActivity(businessId, req.user.id, 'UPDATE_USER', `Admin updated user ID ${userIdToUpdate}.`);
        res.json({ message: 'Pengguna berhasil diperbarui!' });
    } catch (error) {
        console.error('Error updating user:', error);
        await logActivity(businessId, req.user.id, 'UPDATE_USER_ERROR', `Error updating user ID ${userIdToUpdate}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error' });
    }
});

// DELETE user (Admin only)
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const userIdToDelete = req.params.id;
    const businessId = req.user.business_id;

    if (parseInt(userIdToDelete) === req.user.id) {
        return res.status(400).json({ message: 'Anda tidak dapat menghapus akun Anda sendiri.' });
    }

    try {
        const [result] = await db.query('DELETE FROM users WHERE id = ? AND business_id = ?', [userIdToDelete, businessId]);
        if (result.affectedRows === 0) {
            await logActivity(businessId, req.user.id, 'DELETE_USER_FAILED', `Attempted to delete non-existent or unauthorized user ID ${userIdToDelete}.`);
            return res.status(404).json({ message: 'Pengguna tidak ditemukan atau Anda tidak punya akses.' });
        }
        await logActivity(businessId, req.user.id, 'DELETE_USER', `Admin deleted user ID ${userIdToDelete}.`);
        res.json({ message: 'Pengguna berhasil dihapus.' });
    } catch (error) {
        console.error('Error deleting user:', error);
        await logActivity(businessId, req.user.id, 'DELETE_USER_ERROR', `Error deleting user ID ${userIdToDelete}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error' });
    }
});

module.exports = router;


===== C:\Users\Ibnu\Project\smart-pos\backend\utils\dateUtils.js =====

// backend/utils/dateUtils.js
const getValidDateRange = (startDateStr, endDateStr) => {
    let startDate;
    let endDate;

    if (startDateStr) {
        startDate = new Date(startDateStr);
    } else {
        startDate = new Date();
        startDate.setDate(startDate.getDate() - 30);
    }
    startDate.setHours(0, 0, 0, 0);

    if (endDateStr) {
        endDate = new Date(endDateStr);
    } else {
        endDate = new Date();
    }
    endDate.setHours(23, 59, 59, 999);

    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
        throw new Error('Invalid date format');
    }
    
    const formatSqlDateTime = (date) => {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');
        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    };

    return { 
        startDate: formatSqlDateTime(startDate),
        endDate: formatSqlDateTime(endDate)
    };
};

module.exports = { getValidDateRange };

===== C:\Users\Ibnu\Project\smart-pos\backend\utils\emailService.js =====

// backend/utils/emailService.js

const nodemailer = require('nodemailer');
const db = require('../config/db');
const { decrypt } = require('./encryption');

const formatRupiah = (number) => {
    return new Intl.NumberFormat('id-ID', {
        style: 'currency',
        currency: 'IDR',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
    }).format(number);
};

async function sendReceiptEmail(recipientEmail, order, businessInfo) {
    const [[emailSettings]] = await db.query(
        'SELECT sender_email, app_password, sender_name FROM email_settings WHERE business_id = ?',
        [businessInfo.id]
    );

    if (!emailSettings || !emailSettings.sender_email || !emailSettings.app_password) {
        throw new Error('Konfigurasi email pengirim belum lengkap di pengaturan.');
    }

    const decryptedAppPassword = decrypt(emailSettings.app_password);

    let transporter = nodemailer.createTransport({
        host: "smtp.gmail.com",
        port: 465,
        secure: true,
        auth: {
            user: emailSettings.sender_email,
            pass: decryptedAppPassword,
        },
    });

    const orderDate = new Date(order.created_at).toLocaleString('id-ID', {
        year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit'
    });
    const senderDisplayName = emailSettings.sender_name || businessInfo.business_name || "Smart POS";

    let itemsHtml = order.items.map(item => `
        <tr>
            <td style="padding: 8px; border-bottom: 1px solid #ddd; text-align: left;">${item.product_name}${item.variant_name ? ` (${item.variant_name})` : ''}</td>
            <td style="padding: 8px; border-bottom: 1px solid #ddd; text-align: center;">${item.quantity}</td>
            <td style="padding: 8px; border-bottom: 1px solid #ddd; text-align: right;">${formatRupiah(item.price)}</td>
            <td style="padding: 8px; border-bottom: 1px solid #ddd; text-align: right;">${formatRupiah(item.quantity * item.price)}</td>
        </tr>
    `).join('');

    const emailHtml = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; border: 1px solid #eee; padding: 20px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
        ${businessInfo.receipt_logo_url ? `<div style="text-align: center; margin-bottom: 20px;"><img src="${businessInfo.receipt_logo_url}" alt="Business Logo" style="max-width: 150px; height: auto;"></div>` : ''}
        <h2 style="text-align: center; color: #333;">Struk Pembelian ${businessInfo.business_name || ''}</h2>
        <p><strong>Tanggal:</strong> ${orderDate}</p>
        <p><strong>Nomor Pesanan:</strong> #${order.id}</p>
        <p><strong>Kasir:</strong> ${order.cashier_name}</p>
        ${order.customer_name ? `<p><strong>Pelanggan:</strong> ${order.customer_name}</p>` : ''}
        <p><strong>Metode Pembayaran:</strong> ${order.payment_method}</p>

        <h3 style="color: #333; border-bottom: 1px solid #eee; padding-bottom: 10px;">Detail Pesanan:</h3>
        <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
            <thead>
                <tr style="background-color: #f2f2f2;">
                    <th style="padding: 10px; border-bottom: 1px solid #ddd; text-align: left;">Item</th>
                    <th style="padding: 10px; border-bottom: 1px solid #ddd; text-align: center;">Qty</th>
                    <th style="padding: 10px; border-bottom: 1px solid #ddd; text-align: right;">Harga Satuan</th>
                    <th style="padding: 10px; border-bottom: 1px solid #ddd; text-align: right;">Subtotal</th>
                </tr>
            </thead>
            <tbody>${itemsHtml}</tbody>
            <tfoot>
                <tr><td colspan="3" style="padding: 10px; text-align: right;"><strong>Subtotal:</strong></td><td style="padding: 10px; text-align: right; font-weight: bold;">${formatRupiah(order.subtotal_amount)}</td></tr>
                ${order.tax_amount > 0 ? `<tr><td colspan="3" style="padding: 10px; text-align: right;"><strong>Pajak:</strong></td><td style="padding: 10px; text-align: right; font-weight: bold;">${formatRupiah(order.tax_amount)}</td></tr>` : ''}
                <tr><td colspan="3" style="padding: 10px; text-align: right; font-weight: bold; border-top: 1px solid #ddd;">Total Akhir:</td><td style="padding: 10px; text-align: right; font-weight: bold; border-top: 1px solid #ddd;">${formatRupiah(order.total_amount)}</td></tr>
                <tr><td colspan="3" style="padding: 10px; text-align: right; font-weight: bold;">Dibayar:</td><td style="padding: 10px; text-align: right; font-weight: bold;">${formatRupiah(order.amount_paid)}</td></tr>
                ${order.payment_method === 'Tunai' && (order.amount_paid - order.total_amount) > 0 ? `<tr><td colspan="3" style="padding: 10px; text-align: right; font-weight: bold;">Kembalian:</td><td style="padding: 10px; text-align: right; font-weight: bold;">${formatRupiah(order.amount_paid - order.total_amount)}</td></tr>` : ''}
            </tfoot>
        </table>
        <p style="text-align: center; color: #555;">${businessInfo.receipt_footer_text || 'Terima kasih atas pembelian Anda!'}</p>
    </div>
    `;

    await transporter.sendMail({
        from: `"${senderDisplayName}" <${emailSettings.sender_email}>`,
        to: recipientEmail,
        subject: `Struk Pembelian #${order.id}`,
        html: emailHtml,
    });
}

module.exports = { sendReceiptEmail };

===== C:\Users\Ibnu\Project\smart-pos\backend\utils\encryption.js =====

// backend/utils/encryption.js
const crypto = require('crypto');

const ALGORITHM = 'aes-256-gcm';
const IV_LENGTH = 16;
const SALT_LENGTH = 64;
const TAG_LENGTH = 16;
const KEY_LENGTH = 32; // Kunci harus 32 byte untuk aes-256-gcm

// Kunci utama dari environment variable, JANGAN DIUBAH SEMBARANGAN
const MASTER_KEY = process.env.ENCRYPTION_KEY;

function encrypt(text) {
    // 1. Buat salt acak untuk setiap enkripsi
    const salt = crypto.randomBytes(SALT_LENGTH);

    // 2. Buat kunci enkripsi unik menggunakan master key dan salt acak
    // Setiap enkripsi akan memiliki kunci turunan yang berbeda karena salt acak yang berbeda
    const key = crypto.scryptSync(MASTER_KEY, salt, KEY_LENGTH); // <-- PERBAIKAN: Gunakan salt acak di sini

    // 3. Buat IV (Initialization Vector) acak
    const iv = crypto.randomBytes(IV_LENGTH);
    
    // 4. Enkripsi data
    const cipher = crypto.createCipheriv(ALGORITHM, key, iv); // <-- Gunakan key turunan yang unik
    const encrypted = Buffer.concat([cipher.update(String(text), 'utf8'), cipher.final()]);
    const tag = cipher.getAuthTag();

    // 5. Gabungkan salt, iv, tag, dan data terenkripsi untuk disimpan
    // Salt harus disimpan bersama data terenkripsi agar bisa digunakan saat dekripsi
    return Buffer.concat([salt, iv, tag, encrypted]).toString('hex');
}

function decrypt(encryptedText) {
    const data = Buffer.from(String(encryptedText), 'hex');

    // 1. Ekstrak salt, iv, tag, dan data terenkripsi dari hasil gabungan
    const salt = data.slice(0, SALT_LENGTH);
    const iv = data.slice(SALT_LENGTH, SALT_LENGTH + IV_LENGTH);
    const tag = data.slice(SALT_LENGTH + IV_LENGTH, SALT_LENGTH + IV_LENGTH + TAG_LENGTH);
    const encrypted = data.slice(SALT_LENGTH + IV_LENGTH + TAG_LENGTH);

    // 2. Buat kembali kunci enkripsi yang sama persis menggunakan master key dan salt yang diekstrak
    // Ini memastikan kunci yang sama digunakan untuk dekripsi
    const key = crypto.scryptSync(MASTER_KEY, salt, KEY_LENGTH); // <-- PERBAIKAN: Gunakan salt yang diekstrak di sini

    // 3. Dekripsi data
    const decipher = crypto.createDecipheriv(ALGORITHM, key, iv); // <-- Gunakan key turunan yang unik
    decipher.setAuthTag(tag);

    return decipher.update(encrypted, 'hex', 'utf8') + decipher.final('utf8');
}

module.exports = { encrypt, decrypt };

===== C:\Users\Ibnu\Project\smart-pos\backend\utils\logUtils.js =====

// backend/utils/logUtils.js
const db = require('../config/db');

async function logActivity(businessId, userId, action, details) {
    try {
        const detailString = typeof details === 'object' ? JSON.stringify(details) : String(details);
        const query = 'INSERT INTO activity_logs (business_id, user_id, action, details) VALUES (?, ?, ?, ?)';
        await db.execute(query, [businessId, userId, action, detailString]);
    } catch (error) {
        console.error("Failed to log activity:", error);
    }
}

module.exports = { logActivity };

===== C:\Users\Ibnu\Project\smart-pos\frontend\.gitignore =====

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

===== C:\Users\Ibnu\Project\smart-pos\frontend\eslint.config.js =====

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])

===== C:\Users\Ibnu\Project\smart-pos\frontend\index.html =====

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Smart POS</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

===== C:\Users\Ibnu\Project\smart-pos\frontend\package-lock.json =====

{
  "name": "smart-pos",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "smart-pos",
      "version": "1.0.0",
      "dependencies": {
        "axios": "^1.7.7",
        "framer-motion": "^12.0.0",
        "jwt-decode": "^4.0.0",
        "react": "^18.3.1",
        "react-datepicker": "^7.4.0",
        "react-dom": "^18.3.1",
        "react-icons": "^5.3.0",
        "react-loading-skeleton": "^3.5.0",
        "react-router-dom": "^6.27.0",
        "react-to-print": "^2.15.1",
        "react-toastify": "^10.0.6",
        "recharts": "^2.13.0",
        "styled-components": "^6.1.13"
      },
      "devDependencies": {
        "@vitejs/plugin-react": "^4.3.2",
        "eslint": "^9.12.0",
        "eslint-plugin-react": "^7.37.1",
        "eslint-plugin-react-hooks": "^5.0.0",
        "eslint-plugin-react-refresh": "^0.4.12",
        "prettier": "^3.3.3",
        "vite": "^5.4.8"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.6",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.0",
        "@babel/types": "^7.28.0",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.0",
        "@babel/types": "^7.28.0",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.2.tgz",
      "integrity": "sha512-/V9771t+EgXz62aCcyofnQhGM8DQACbRhvzKFsXKC9QM+5MadF8ZmIm0crDMaz3+o0h0zXfJnd4EhbYbxsrcFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.28.2.tgz",
      "integrity": "sha512-KHp2IflsnGywDjBWDkR9iEqiWSpc8GIi0lgTT3mOElT0PP1tG26P4tmFI2YvAdzgq9RGyoHZQEIEdZy6Ec5xCA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.0",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.2.tgz",
      "integrity": "sha512-ruv7Ae4J5dUYULmeXw1gmb7rYRz57OWCPM57pHojnLq/3Z1CK2lNSLTCVjxVk1F/TZHwOZZrOWi0ur95BbLxNQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@emotion/is-prop-valid": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.2.tgz",
      "integrity": "sha512-uNsoYd37AFmaCdXlg6EYD1KaPOaRWRByMCYzbKUX4+hhMfrxdVSelShywL4JVaAeM/eHUOSprYBQls+/neX3pw==",
      "license": "MIT",
      "dependencies": {
        "@emotion/memoize": "^0.8.1"
      }
    },
    "node_modules/@emotion/memoize": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.1.tgz",
      "integrity": "sha512-W2P2c/VRW1/1tLox0mVUalvnWXxavmv/Oum2aPsRcoDJuob75FC3Y8FbpfLwUegRcxINtGUMPq0tFCvYNTBXNA==",
      "license": "MIT"
    },
    "node_modules/@emotion/unitless": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.8.1.tgz",
      "integrity": "sha512-KOEGMu6dmJZtpadb476IsZBclKvILjopjUii3V+7MnXIQCYh8W3NgNcgwo21n9LXZX6EDIKvqfjYxXebDwxKmQ==",
      "license": "MIT"
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.21.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.0.tgz",
      "integrity": "sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.3.0.tgz",
      "integrity": "sha512-ViuymvFmcJi04qdZeDc2whTHryouGcDlaxPqarTD0ZE10ISpxGUVZGZDx4w01upyIynL3iu6IXH2bS1NhclQMw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.15.1",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.15.1.tgz",
      "integrity": "sha512-bkOp+iumZCCbt1K1CmWf0R9pM5yKpDv+ZXtvSyQpudrI9kuFLp+bM2WOPXImuD/ceQuaa8f5pj93Y7zyECIGNA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.32.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.32.0.tgz",
      "integrity": "sha512-BBpRFZK3eX6uMLKz8WxFOBIFFcGFJ/g8XuwjTHCqHROSIsopI+ddn/d5Cfh36+7+e5edVS8dbSHnBNhrLEX0zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.3.4",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.3.4.tgz",
      "integrity": "sha512-Ul5l+lHEcw3L5+k8POx6r74mxEYKG5kOb6Xpy2gCRW6zweT6TEhAf8vhxGgjhqrd/VO/Dirhsb+1hNpD1ue9hw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.15.1",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@floating-ui/core": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/@floating-ui/core/-/core-1.7.2.tgz",
      "integrity": "sha512-wNB5ooIKHQc+Kui96jE/n69rHFWAVoxn5CAzL1Xdd8FG03cgY3MLO+GF9U3W737fYDSgPWA6MReKhBQBop6Pcw==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/utils": "^0.2.10"
      }
    },
    "node_modules/@floating-ui/dom": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/@floating-ui/dom/-/dom-1.7.2.tgz",
      "integrity": "sha512-7cfaOQuCS27HD7DX+6ib2OrnW+b4ZBwDNnCcT0uTyidcmyWb03FnQqJybDBoCnpdxwBSfA94UAYlRCt7mV+TbA==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/core": "^1.7.2",
        "@floating-ui/utils": "^0.2.10"
      }
    },
    "node_modules/@floating-ui/react": {
      "version": "0.27.14",
      "resolved": "https://registry.npmjs.org/@floating-ui/react/-/react-0.27.14.tgz",
      "integrity": "sha512-aSf9JXfyXpRQWMbtuW+CJQrnhzHu4Hg1Th9AkvR1o+wSW/vCUVMrtgXaRY5ToV5Fh5w3I7lXJdvlKVvYrQrppw==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/react-dom": "^2.1.4",
        "@floating-ui/utils": "^0.2.10",
        "tabbable": "^6.0.0"
      },
      "peerDependencies": {
        "react": ">=17.0.0",
        "react-dom": ">=17.0.0"
      }
    },
    "node_modules/@floating-ui/react-dom": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@floating-ui/react-dom/-/react-dom-2.1.4.tgz",
      "integrity": "sha512-JbbpPhp38UmXDDAu60RJmbeme37Jbgsm7NrHGgzYYFKmblzRUh6Pa641dII6LsjwF4XlScDrde2UAzDo/b9KPw==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/dom": "^1.7.2"
      },
      "peerDependencies": {
        "react": ">=16.8.0",
        "react-dom": ">=16.8.0"
      }
    },
    "node_modules/@floating-ui/utils": {
      "version": "0.2.10",
      "resolved": "https://registry.npmjs.org/@floating-ui/utils/-/utils-0.2.10.tgz",
      "integrity": "sha512-aGTxbpbg8/b5JfU1HXSrbH3wXZuLPJcNEcZQFMxLs3oSzgtVu6nFPkbbGGUvBcUjKV2YyB9Wxxabo+HEH9tcRQ==",
      "license": "MIT"
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
      "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.12",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.29",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.23.0",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.27",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.27.tgz",
      "integrity": "sha512-+d0F4MKMCbeVUJwG96uQ4SgAznZNSq93I3V+9NHA4OpvqG8mRCpGdKmK8l/dl02h2CCDHwW2FqilnTyDcAnqjA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.46.1.tgz",
      "integrity": "sha512-oENme6QxtLCqjChRUUo3S6X8hjCXnWmJWnedD7VbGML5GUtaOtAyx+fEEXnBXVf0CBZApMQU0Idwi0FmyxzQhw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.46.1.tgz",
      "integrity": "sha512-OikvNT3qYTl9+4qQ9Bpn6+XHM+ogtFadRLuT2EXiFQMiNkXFLQfNVppi5o28wvYdHL2s3fM0D/MZJ8UkNFZWsw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.46.1.tgz",
      "integrity": "sha512-EFYNNGij2WllnzljQDQnlFTXzSJw87cpAs4TVBAWLdkvic5Uh5tISrIL6NRcxoh/b2EFBG/TK8hgRrGx94zD4A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.46.1.tgz",
      "integrity": "sha512-ZaNH06O1KeTug9WI2+GRBE5Ujt9kZw4a1+OIwnBHal92I8PxSsl5KpsrPvthRynkhMck4XPdvY0z26Cym/b7oA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.46.1.tgz",
      "integrity": "sha512-n4SLVebZP8uUlJ2r04+g2U/xFeiQlw09Me5UFqny8HGbARl503LNH5CqFTb5U5jNxTouhRjai6qPT0CR5c/Iig==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.46.1.tgz",
      "integrity": "sha512-8vu9c02F16heTqpvo3yeiu7Vi1REDEC/yES/dIfq3tSXe6mLndiwvYr3AAvd1tMNUqE9yeGYa5w7PRbI5QUV+w==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.46.1.tgz",
      "integrity": "sha512-K4ncpWl7sQuyp6rWiGUvb6Q18ba8mzM0rjWJ5JgYKlIXAau1db7hZnR0ldJvqKWWJDxqzSLwGUhA4jp+KqgDtQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.46.1.tgz",
      "integrity": "sha512-YykPnXsjUjmXE6j6k2QBBGAn1YsJUix7pYaPLK3RVE0bQL2jfdbfykPxfF8AgBlqtYbfEnYHmLXNa6QETjdOjQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.46.1.tgz",
      "integrity": "sha512-kKvqBGbZ8i9pCGW3a1FH3HNIVg49dXXTsChGFsHGXQaVJPLA4f/O+XmTxfklhccxdF5FefUn2hvkoGJH0ScWOA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.46.1.tgz",
      "integrity": "sha512-zzX5nTw1N1plmqC9RGC9vZHFuiM7ZP7oSWQGqpbmfjK7p947D518cVK1/MQudsBdcD84t6k70WNczJOct6+hdg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.46.1.tgz",
      "integrity": "sha512-O8CwgSBo6ewPpktFfSDgB6SJN9XDcPSvuwxfejiddbIC/hn9Tg6Ai0f0eYDf3XvB/+PIWzOQL+7+TZoB8p9Yuw==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-ppc64-gnu": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.46.1.tgz",
      "integrity": "sha512-JnCfFVEKeq6G3h3z8e60kAp8Rd7QVnWCtPm7cxx+5OtP80g/3nmPtfdCXbVl063e3KsRnGSKDHUQMydmzc/wBA==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.46.1.tgz",
      "integrity": "sha512-dVxuDqS237eQXkbYzQQfdf/njgeNw6LZuVyEdUaWwRpKHhsLI+y4H/NJV8xJGU19vnOJCVwaBFgr936FHOnJsQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.46.1.tgz",
      "integrity": "sha512-CvvgNl2hrZrTR9jXK1ye0Go0HQRT6ohQdDfWR47/KFKiLd5oN5T14jRdUVGF4tnsN8y9oSfMOqH6RuHh+ck8+w==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.46.1.tgz",
      "integrity": "sha512-x7ANt2VOg2565oGHJ6rIuuAon+A8sfe1IeUx25IKqi49OjSr/K3awoNqr9gCwGEJo9OuXlOn+H2p1VJKx1psxA==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.46.1.tgz",
      "integrity": "sha512-9OADZYryz/7E8/qt0vnaHQgmia2Y0wrjSSn1V/uL+zw/i7NUhxbX4cHXdEQ7dnJgzYDS81d8+tf6nbIdRFZQoQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.46.1.tgz",
      "integrity": "sha512-NuvSCbXEKY+NGWHyivzbjSVJi68Xfq1VnIvGmsuXs6TCtveeoDRKutI5vf2ntmNnVq64Q4zInet0UDQ+yMB6tA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.46.1.tgz",
      "integrity": "sha512-mWz+6FSRb82xuUMMV1X3NGiaPFqbLN9aIueHleTZCc46cJvwTlvIh7reQLk4p97dv0nddyewBhwzryBHH7wtPw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.46.1.tgz",
      "integrity": "sha512-7Thzy9TMXDw9AU4f4vsLNBxh7/VOKuXi73VH3d/kHGr0tZ3x/ewgL9uC7ojUKmH1/zvmZe2tLapYcZllk3SO8Q==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.46.1.tgz",
      "integrity": "sha512-7GVB4luhFmGUNXXJhH2jJwZCFB3pIOixv2E3s17GQHBFUOQaISlt7aGcQgqvCaDSxTZJUzlK/QJ1FN8S94MrzQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/d3-array": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-color": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
      "license": "MIT"
    },
    "node_modules/@types/d3-ease": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
      "license": "MIT"
    },
    "node_modules/@types/d3-interpolate": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-color": "*"
      }
    },
    "node_modules/@types/d3-path": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-scale": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-time": "*"
      }
    },
    "node_modules/@types/d3-shape": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-path": "*"
      }
    },
    "node_modules/@types/d3-time": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
      "license": "MIT"
    },
    "node_modules/@types/d3-timer": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
      "license": "MIT"
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/stylis": {
      "version": "4.2.5",
      "resolved": "https://registry.npmjs.org/@types/stylis/-/stylis-4.2.5.tgz",
      "integrity": "sha512-1Xve+NMN7FWjY14vLoY5tL3BVEQ/n42YLwaqJIPYhotZ9uBHt87VceMwWQpzmdEt2TNXIorIFG+YeCUUW7RInw==",
      "license": "MIT"
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.7.0.tgz",
      "integrity": "sha512-gUu9hwfWvvEDBBmgtAowQCojwZmJ5mcLn3aufeCsitijs3+f2NsrPtlAWIR6OPiqljl96GVCUbLe0HyqIpVaoA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.28.0",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.27",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-includes": {
      "version": "3.1.9",
      "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.9.tgz",
      "integrity": "sha512-FmeCCAenzH0KH381SPT5FZmiA/TmpndpcaShhfgEN9eCVjnFBqq3l1xrI42y8+PPLI6hypzou4GXw00WHmPBLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.24.0",
        "es-object-atoms": "^1.1.1",
        "get-intrinsic": "^1.3.0",
        "is-string": "^1.1.1",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.findlast": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/array.prototype.findlast/-/array.prototype.findlast-1.2.5.tgz",
      "integrity": "sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flat": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.3.tgz",
      "integrity": "sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flatmap": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.3.tgz",
      "integrity": "sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.tosorted": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/array.prototype.tosorted/-/array.prototype.tosorted-1.1.4.tgz",
      "integrity": "sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3",
        "es-errors": "^1.3.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/async-function": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/axios": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.11.0.tgz",
      "integrity": "sha512-1Lx3WLFQWm3ooKDYZD1eXmoGO9fxYQjrycfHFC8P0sCfQVXyROp0p9PFWBehewBOdCwHc+f/b8I0fMto5eSfwA==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.4",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.1",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001726",
        "electron-to-chromium": "^1.5.173",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelize": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/camelize/-/camelize-1.0.1.tgz",
      "integrity": "sha512-dU+Tx2fsypxTgtLoE36npi3UqcjSSMNYfkqgmoEhtZrraP5VWq0K7FkWVTYa8eMPtnU/G2txVsfdCJTn9uzpuQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001731",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001731.tgz",
      "integrity": "sha512-lDdp2/wrOmTRWuoB5DpfNkC0rJDU8DqRa6nYL6HK6sytw70QMopt/NIc/9SM7ylItlBWfACXk0tEn37UWM/+mg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/css-color-keywords": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/css-color-keywords/-/css-color-keywords-1.0.0.tgz",
      "integrity": "sha512-FyyrDHZKEjXDpNJYvVsV960FiqQyXc/LlYmsxl2BcdMb2WPx0OGRVgTg55rPSyLSNMqP52R9r8geSp7apN3Ofg==",
      "license": "ISC",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/css-to-react-native": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/css-to-react-native/-/css-to-react-native-3.2.0.tgz",
      "integrity": "sha512-e8RKaLXMOFii+02mOlqwjbD00KSEKqblnpO9e++1aXS1fPQOpS1YoqdVHBqPjHNoxeF2mimzVqawm2KCbEdtHQ==",
      "license": "MIT",
      "dependencies": {
        "camelize": "^1.0.0",
        "css-color-keywords": "^1.0.0",
        "postcss-value-parser": "^4.0.2"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/inspect-js"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/date-fns": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-3.6.0.tgz",
      "integrity": "sha512-fRHTG8g/Gif+kSh50gaGEdToemgfj74aRX3swtiouboip5JDLAyDE9F11nHMIcvOaXeOC6D7SpNhi7uFyB7Uww==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/kossnocorp"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js-light": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/dom-helpers": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.8.7",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.192",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.192.tgz",
      "integrity": "sha512-rP8Ez0w7UNw/9j5eSXCe10o1g/8B1P5SM90PCCMVkIRQn2R0LEHWz4Eh9RnxkniuDe1W0cTSOB3MLlkTGDcuCg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/es-abstract": {
      "version": "1.24.0",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
      "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.2",
        "arraybuffer.prototype.slice": "^1.0.4",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "data-view-buffer": "^1.0.2",
        "data-view-byte-length": "^1.0.2",
        "data-view-byte-offset": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-set-tostringtag": "^2.1.0",
        "es-to-primitive": "^1.3.0",
        "function.prototype.name": "^1.1.8",
        "get-intrinsic": "^1.3.0",
        "get-proto": "^1.0.1",
        "get-symbol-description": "^1.1.0",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "internal-slot": "^1.1.0",
        "is-array-buffer": "^3.0.5",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.2",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.2.1",
        "is-set": "^2.0.3",
        "is-shared-array-buffer": "^1.0.4",
        "is-string": "^1.1.1",
        "is-typed-array": "^1.1.15",
        "is-weakref": "^1.1.1",
        "math-intrinsics": "^1.1.0",
        "object-inspect": "^1.13.4",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.7",
        "own-keys": "^1.0.1",
        "regexp.prototype.flags": "^1.5.4",
        "safe-array-concat": "^1.1.3",
        "safe-push-apply": "^1.0.0",
        "safe-regex-test": "^1.1.0",
        "set-proto": "^1.0.0",
        "stop-iteration-iterator": "^1.1.0",
        "string.prototype.trim": "^1.2.10",
        "string.prototype.trimend": "^1.0.9",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.3",
        "typed-array-byte-length": "^1.0.3",
        "typed-array-byte-offset": "^1.0.4",
        "typed-array-length": "^1.0.7",
        "unbox-primitive": "^1.1.0",
        "which-typed-array": "^1.1.19"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-iterator-helpers": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/es-iterator-helpers/-/es-iterator-helpers-1.2.1.tgz",
      "integrity": "sha512-uDn+FE1yrDzyC0pCo961B2IHbdM8y/ACZsKD4dG6WqrjV53BADjwa7D+1aom2rsNVfLyDgU/eigvlJGJ08OQ4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-set-tostringtag": "^2.0.3",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.6",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "iterator.prototype": "^1.1.4",
        "safe-array-concat": "^1.1.3"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.1.0.tgz",
      "integrity": "sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7",
        "is-date-object": "^1.0.5",
        "is-symbol": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/esbuild": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.21.5",
        "@esbuild/android-arm": "0.21.5",
        "@esbuild/android-arm64": "0.21.5",
        "@esbuild/android-x64": "0.21.5",
        "@esbuild/darwin-arm64": "0.21.5",
        "@esbuild/darwin-x64": "0.21.5",
        "@esbuild/freebsd-arm64": "0.21.5",
        "@esbuild/freebsd-x64": "0.21.5",
        "@esbuild/linux-arm": "0.21.5",
        "@esbuild/linux-arm64": "0.21.5",
        "@esbuild/linux-ia32": "0.21.5",
        "@esbuild/linux-loong64": "0.21.5",
        "@esbuild/linux-mips64el": "0.21.5",
        "@esbuild/linux-ppc64": "0.21.5",
        "@esbuild/linux-riscv64": "0.21.5",
        "@esbuild/linux-s390x": "0.21.5",
        "@esbuild/linux-x64": "0.21.5",
        "@esbuild/netbsd-x64": "0.21.5",
        "@esbuild/openbsd-x64": "0.21.5",
        "@esbuild/sunos-x64": "0.21.5",
        "@esbuild/win32-arm64": "0.21.5",
        "@esbuild/win32-ia32": "0.21.5",
        "@esbuild/win32-x64": "0.21.5"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.32.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.32.0.tgz",
      "integrity": "sha512-LSehfdpgMeWcTZkWZVIJl+tkZ2nuSkyyB9C27MZqFWXuph7DvaowgcTvKqxvpLW1JZIk8PN7hFY3Rj9LQ7m7lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.21.0",
        "@eslint/config-helpers": "^0.3.0",
        "@eslint/core": "^0.15.0",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.32.0",
        "@eslint/plugin-kit": "^0.3.4",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.4.0",
        "eslint-visitor-keys": "^4.2.1",
        "espree": "^10.4.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react": {
      "version": "7.37.5",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.37.5.tgz",
      "integrity": "sha512-Qteup0SqU15kdocexFNAJMvCJEfa2xUKNV4CC1xsVMrIIqEy3SQ/rqyxCWNzfrd3/ldy6HMlD2e0JDVpDg2qIA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.8",
        "array.prototype.findlast": "^1.2.5",
        "array.prototype.flatmap": "^1.3.3",
        "array.prototype.tosorted": "^1.1.4",
        "doctrine": "^2.1.0",
        "es-iterator-helpers": "^1.2.1",
        "estraverse": "^5.3.0",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^2.4.1 || ^3.0.0",
        "minimatch": "^3.1.2",
        "object.entries": "^1.1.9",
        "object.fromentries": "^2.0.8",
        "object.values": "^1.2.1",
        "prop-types": "^15.8.1",
        "resolve": "^2.0.0-next.5",
        "semver": "^6.3.1",
        "string.prototype.matchall": "^4.0.12",
        "string.prototype.repeat": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7"
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.20",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.20.tgz",
      "integrity": "sha512-XpbHQ2q5gUF8BGOX4dHe+71qoirYMhApEPZ7sfhF/dNnOF1UXnCMGZf79SFTBO7Bz5YEIT4TMieSlJBWhP9WBA==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "eslint": ">=8.40"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.4.0.tgz",
      "integrity": "sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.4.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.4.0.tgz",
      "integrity": "sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.15.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-equals": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/fast-equals/-/fast-equals-5.2.2.tgz",
      "integrity": "sha512-V7/RktU11J3I36Nwq2JnZEM7tNm17eBJz+u25qdxBZeCKiX6BkVSZQjwWIr+IobgnZy+ag73tTZgZi7tr0LrBw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/framer-motion": {
      "version": "12.23.11",
      "resolved": "https://registry.npmjs.org/framer-motion/-/framer-motion-12.23.11.tgz",
      "integrity": "sha512-VzNi+exyI3bn7Pzvz1Fjap1VO9gQu8mxrsSsNamMidsZ8AA8W2kQsR+YQOciEUbMtkKAWIbPHPttfn5e9jqqJQ==",
      "license": "MIT",
      "dependencies": {
        "motion-dom": "^12.23.9",
        "motion-utils": "^12.23.6",
        "tslib": "^2.4.0"
      },
      "peerDependencies": {
        "@emotion/is-prop-valid": "*",
        "react": "^18.0.0 || ^19.0.0",
        "react-dom": "^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/is-prop-valid": {
          "optional": true
        },
        "react": {
          "optional": true
        },
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "functions-have-names": "^1.2.3",
        "hasown": "^2.0.2",
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-async-function": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "async-function": "^1.0.0",
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.0",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/iterator.prototype": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/iterator.prototype/-/iterator.prototype-1.1.5.tgz",
      "integrity": "sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "get-proto": "^1.0.0",
        "has-symbols": "^1.1.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsx-ast-utils": {
      "version": "3.3.5",
      "resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz",
      "integrity": "sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.6",
        "array.prototype.flat": "^1.3.1",
        "object.assign": "^4.1.4",
        "object.values": "^1.1.6"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/jwt-decode": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jwt-decode/-/jwt-decode-4.0.0.tgz",
      "integrity": "sha512-+KJGIyHgkGuIq3IEBNftfhW/LfWhXUIY6OmyVWjliu5KH1y0fw7VQ8YndE2O4qZdMSd9SqbnC8GOcZEy0Om7sA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/motion-dom": {
      "version": "12.23.9",
      "resolved": "https://registry.npmjs.org/motion-dom/-/motion-dom-12.23.9.tgz",
      "integrity": "sha512-6Sv++iWS8XMFCgU1qwKj9l4xuC47Hp4+2jvPfyTXkqDg2tTzSgX6nWKD4kNFXk0k7llO59LZTPuJigza4A2K1A==",
      "license": "MIT",
      "dependencies": {
        "motion-utils": "^12.23.6"
      }
    },
    "node_modules/motion-utils": {
      "version": "12.23.6",
      "resolved": "https://registry.npmjs.org/motion-utils/-/motion-utils-12.23.6.tgz",
      "integrity": "sha512-eAWoPgr4eFEOFfg2WjIsMoqJTW6Z8MTUCgn/GZ3VRpClWBdnbjryiA3ZSNLyxCTmCQx4RmYX6jX1iWHbenUPNQ==",
      "license": "MIT"
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.entries": {
      "version": "1.1.9",
      "resolved": "https://registry.npmjs.org/object.entries/-/object.entries-1.1.9.tgz",
      "integrity": "sha512-8u/hfXFRBD1O0hPUjioLhoWFHRmt6tKA4/vZPyckBr18l1KE9uHrFaFaUi8MDRTpi4uak2goyPTSNJLXX2k2Hw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.fromentries": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.8.tgz",
      "integrity": "sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.values": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.2.1.tgz",
      "integrity": "sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/own-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.6",
        "object-keys": "^1.1.1",
        "safe-push-apply": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/postcss": {
      "version": "8.4.49",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.49.tgz",
      "integrity": "sha512-OCVPnIObs4N29kxTjzLfUryOkvZEq+pf8jTF0lg8E7uETuWHA+v7j3c/xJmiqpX450191LlmZfUKkXxkTry7nA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.7",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "license": "MIT"
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prettier": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/prettier/-/prettier-3.6.2.tgz",
      "integrity": "sha512-I7AIg5boAr5R0FFtJ6rCfD+LFsWHp81dolrFD8S79U9tb8Az2nGrJncnMSnys+bpQJfRUzqs9hnA81OAA3hCuQ==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "prettier": "bin/prettier.cjs"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/prettier/prettier?sponsor=1"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-datepicker": {
      "version": "7.6.0",
      "resolved": "https://registry.npmjs.org/react-datepicker/-/react-datepicker-7.6.0.tgz",
      "integrity": "sha512-9cQH6Z/qa4LrGhzdc3XoHbhrxNcMi9MKjZmYgF/1MNNaJwvdSjv3Xd+jjvrEEbKEf71ZgCA3n7fQbdwd70qCRw==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/react": "^0.27.0",
        "clsx": "^2.1.1",
        "date-fns": "^3.6.0"
      },
      "peerDependencies": {
        "react": "^16.9.0 || ^17 || ^18 || ^19 || ^19.0.0-rc",
        "react-dom": "^16.9.0 || ^17 || ^18 || ^19 || ^19.0.0-rc"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-icons": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/react-icons/-/react-icons-5.5.0.tgz",
      "integrity": "sha512-MEFcXdkP3dLo8uumGI5xN3lDFNsRtrjbOEKDLD7yv76v4wpnEq2Lt2qeHaQOr34I/wPN3s3+N08WkQ+CW37Xiw==",
      "license": "MIT",
      "peerDependencies": {
        "react": "*"
      }
    },
    "node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/react-loading-skeleton": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/react-loading-skeleton/-/react-loading-skeleton-3.5.0.tgz",
      "integrity": "sha512-gxxSyLbrEAdXTKgfbpBEFZCO/P153DnqSCQau2+o6lNy1jgMRr2MmRmOzMmyrwSaSYLRB8g7b0waYPmUjz7IhQ==",
      "license": "MIT",
      "peerDependencies": {
        "react": ">=16.8.0"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.1.tgz",
      "integrity": "sha512-X1m21aEmxGXqENEPG3T6u0Th7g0aS4ZmoNynhbs+Cn+q+QGTLt+d5IQ2bHAXKzKcxGJjxACpVbnYQSCRcfxHlQ==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.1.tgz",
      "integrity": "sha512-llKsgOkZdbPU1Eg3zK8lCn+sjD9wMRZZPuzmdWWX5SUs8OFkN5HnFVC0u5KMeMaC9aoancFI/KoLuKPqN+hxHw==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0",
        "react-router": "6.30.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/react-smooth": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/react-smooth/-/react-smooth-4.0.4.tgz",
      "integrity": "sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==",
      "license": "MIT",
      "dependencies": {
        "fast-equals": "^5.0.1",
        "prop-types": "^15.8.1",
        "react-transition-group": "^4.4.5"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/react-to-print": {
      "version": "2.15.1",
      "resolved": "https://registry.npmjs.org/react-to-print/-/react-to-print-2.15.1.tgz",
      "integrity": "sha512-1foogIFbCpzAVxydkhBiDfMiFYhIMphiagDOfcG4X/EcQ+fBPqJ0rby9Wv/emzY1YLkIQy/rEgOrWQT+rBKhjw==",
      "license": "MIT",
      "peerDependencies": {
        "react": "^15.0.0 || ^16.0.0 || ^17.0.0 || ^18.0.0",
        "react-dom": "^15.0.0 || ^16.0.0 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/react-toastify": {
      "version": "10.0.6",
      "resolved": "https://registry.npmjs.org/react-toastify/-/react-toastify-10.0.6.tgz",
      "integrity": "sha512-yYjp+omCDf9lhZcrZHKbSq7YMuK0zcYkDFTzfRFgTXkTFHZ1ToxwAonzA4JI5CxA91JpjFLmwEsZEgfYfOqI1A==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.1.0"
      },
      "peerDependencies": {
        "react": ">=18",
        "react-dom": ">=18"
      }
    },
    "node_modules/react-transition-group": {
      "version": "4.4.5",
      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/runtime": "^7.5.5",
        "dom-helpers": "^5.0.1",
        "loose-envify": "^1.4.0",
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": ">=16.6.0",
        "react-dom": ">=16.6.0"
      }
    },
    "node_modules/recharts": {
      "version": "2.15.4",
      "resolved": "https://registry.npmjs.org/recharts/-/recharts-2.15.4.tgz",
      "integrity": "sha512-UT/q6fwS3c1dHbXv2uFgYJ9BMFHu3fwnd7AYZaEQhXuYQ4hgsxLvsUXzGdKeZrW5xopzDCvuA2N41WJ88I7zIw==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.0.0",
        "eventemitter3": "^4.0.1",
        "lodash": "^4.17.21",
        "react-is": "^18.3.1",
        "react-smooth": "^4.0.4",
        "recharts-scale": "^0.4.4",
        "tiny-invariant": "^1.3.1",
        "victory-vendor": "^36.6.8"
      },
      "engines": {
        "node": ">=14"
      },
      "peerDependencies": {
        "react": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/recharts-scale": {
      "version": "0.4.5",
      "resolved": "https://registry.npmjs.org/recharts-scale/-/recharts-scale-0.4.5.tgz",
      "integrity": "sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==",
      "license": "MIT",
      "dependencies": {
        "decimal.js-light": "^2.4.1"
      }
    },
    "node_modules/recharts/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "license": "MIT"
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.7",
        "get-proto": "^1.0.1",
        "which-builtin-type": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve": {
      "version": "2.0.0-next.5",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-2.0.0-next.5.tgz",
      "integrity": "sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/rollup": {
      "version": "4.46.1",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.46.1.tgz",
      "integrity": "sha512-33xGNBsDJAkzt0PvninskHlWnTIPgDtTwhg0U38CUoNP/7H6wI2Cz6dUeoNPbjdTdsYTGuiFFASuUOWovH0SyQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.46.1",
        "@rollup/rollup-android-arm64": "4.46.1",
        "@rollup/rollup-darwin-arm64": "4.46.1",
        "@rollup/rollup-darwin-x64": "4.46.1",
        "@rollup/rollup-freebsd-arm64": "4.46.1",
        "@rollup/rollup-freebsd-x64": "4.46.1",
        "@rollup/rollup-linux-arm-gnueabihf": "4.46.1",
        "@rollup/rollup-linux-arm-musleabihf": "4.46.1",
        "@rollup/rollup-linux-arm64-gnu": "4.46.1",
        "@rollup/rollup-linux-arm64-musl": "4.46.1",
        "@rollup/rollup-linux-loongarch64-gnu": "4.46.1",
        "@rollup/rollup-linux-ppc64-gnu": "4.46.1",
        "@rollup/rollup-linux-riscv64-gnu": "4.46.1",
        "@rollup/rollup-linux-riscv64-musl": "4.46.1",
        "@rollup/rollup-linux-s390x-gnu": "4.46.1",
        "@rollup/rollup-linux-x64-gnu": "4.46.1",
        "@rollup/rollup-linux-x64-musl": "4.46.1",
        "@rollup/rollup-win32-arm64-msvc": "4.46.1",
        "@rollup/rollup-win32-ia32-msvc": "4.46.1",
        "@rollup/rollup-win32-x64-msvc": "4.46.1",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "has-symbols": "^1.1.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-push-apply": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-proto": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/shallowequal": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/shallowequal/-/shallowequal-1.1.0.tgz",
      "integrity": "sha512-y0m1JoUZSlPAjXVtPPW70aZWfIL/dSP7AFkRnniLCrK/8MDKog3TySTBmckD+RObVxH0v4Tox67+F14PdED2oQ==",
      "license": "MIT"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string.prototype.matchall": {
      "version": "4.0.12",
      "resolved": "https://registry.npmjs.org/string.prototype.matchall/-/string.prototype.matchall-4.0.12.tgz",
      "integrity": "sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "regexp.prototype.flags": "^1.5.3",
        "set-function-name": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.repeat": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/string.prototype.repeat/-/string.prototype.repeat-1.0.0.tgz",
      "integrity": "sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.3",
        "es-abstract": "^1.17.5"
      }
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-data-property": "^1.1.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-object-atoms": "^1.0.0",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/styled-components": {
      "version": "6.1.19",
      "resolved": "https://registry.npmjs.org/styled-components/-/styled-components-6.1.19.tgz",
      "integrity": "sha512-1v/e3Dl1BknC37cXMhwGomhO8AkYmN41CqyX9xhUDxry1ns3BFQy2lLDRQXJRdVVWB9OHemv/53xaStimvWyuA==",
      "license": "MIT",
      "dependencies": {
        "@emotion/is-prop-valid": "1.2.2",
        "@emotion/unitless": "0.8.1",
        "@types/stylis": "4.2.5",
        "css-to-react-native": "3.2.0",
        "csstype": "3.1.3",
        "postcss": "8.4.49",
        "shallowequal": "1.1.0",
        "stylis": "4.3.2",
        "tslib": "2.6.2"
      },
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/styled-components"
      },
      "peerDependencies": {
        "react": ">= 16.8.0",
        "react-dom": ">= 16.8.0"
      }
    },
    "node_modules/styled-components/node_modules/tslib": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
      "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==",
      "license": "0BSD"
    },
    "node_modules/stylis": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.3.2.tgz",
      "integrity": "sha512-bhtUjWd/z6ltJiQwg0dUfxEJ+W+jdqQd8TbWLWyeIJHlnsqmGLRFFd8e5mA0AZi/zx90smXRlN66YMTcaSFifg==",
      "license": "MIT"
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tabbable": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/tabbable/-/tabbable-6.2.0.tgz",
      "integrity": "sha512-Cat63mxsVJlzYvN51JmVXIgNoUokrIaT2zLclCXjRd8boZ0004U4KCs/sToJ75C6sdlByWxpYnb5Boif1VSFew==",
      "license": "MIT"
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
      "license": "MIT"
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.15",
        "reflect.getprototypeof": "^1.0.9"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0",
        "reflect.getprototypeof": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/unbox-primitive": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.1.0",
        "which-boxed-primitive": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/victory-vendor": {
      "version": "36.9.2",
      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-36.9.2.tgz",
      "integrity": "sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==",
      "license": "MIT AND ISC",
      "dependencies": {
        "@types/d3-array": "^3.0.3",
        "@types/d3-ease": "^3.0.0",
        "@types/d3-interpolate": "^3.0.1",
        "@types/d3-scale": "^4.0.2",
        "@types/d3-shape": "^3.1.0",
        "@types/d3-time": "^3.0.0",
        "@types/d3-timer": "^3.0.0",
        "d3-array": "^3.1.6",
        "d3-ease": "^3.0.1",
        "d3-interpolate": "^3.0.1",
        "d3-scale": "^4.0.2",
        "d3-shape": "^3.1.0",
        "d3-time": "^3.0.0",
        "d3-timer": "^3.0.1"
      }
    },
    "node_modules/vite": {
      "version": "5.4.19",
      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.19.tgz",
      "integrity": "sha512-qO3aKv3HoQC8QKiNSTuUM1l9o/XX3+c+VTgLHbJWHZGeTPVAg2XwazI9UWzoxjIJCGCV2zU60uqMzjeLZuULqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.21.3",
        "postcss": "^8.4.43",
        "rollup": "^4.20.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || >=20.0.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.1.0",
        "is-finalizationregistry": "^1.1.0",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.2.1",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.1.0",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}


===== C:\Users\Ibnu\Project\smart-pos\frontend\package.json =====

{
  "name": "smart-pos",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "format": "prettier --write ."
  },
  "dependencies": {
    "axios": "^1.7.7",
    "framer-motion": "^12.0.0",
    "jwt-decode": "^4.0.0",
    "react": "^18.3.1",
    "react-datepicker": "^7.4.0",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "react-loading-skeleton": "^3.5.0",
    "react-router-dom": "^6.27.0",
    "react-to-print": "^2.15.1",
    "react-toastify": "^10.0.6",
    "recharts": "^2.13.0",
    "styled-components": "^6.1.13"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.3.2",
    "eslint": "^9.12.0",
    "eslint-plugin-react": "^7.37.1",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.12",
    "prettier": "^3.3.3",
    "vite": "^5.4.8"
  }
}

===== C:\Users\Ibnu\Project\smart-pos\frontend\vite.config.js =====

// frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vite.dev/config/
export default defineConfig({
    plugins: [react()],
    server: {
        hmr: {
            overlay: true, // Keep error overlay enabled
        },
    },
    build: {
        sourcemap: false, // Disable source maps in production
    },
    optimizeDeps: {
        esbuildOptions: {
            sourcemap: false, // Disable source maps for optimized dependencies
        },
    },
});

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\App.jsx =====

// frontend/src/App.jsx

import React, { useContext } from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { createGlobalStyle } from 'styled-components';
import { SkeletonTheme } from 'react-loading-skeleton';
import 'react-toastify/dist/ReactToastify.css';
import { ToastContainer } from 'react-toastify';

// Context
import { ThemeProvider, ThemeContext } from './context/ThemeContext';
import { BusinessProvider } from './context/BusinessContext';
import { ShiftProvider } from './context/ShiftContext';

// Pages
import LoginPage from './pages/LoginPage';
import PosPage from './pages/PosPage';
import DashboardPage from './pages/Dashboard/DashboardPage';
import ProductsPage from './pages/ProductsPage';
import HistoryPage from './pages/HistoryPage';
import UsersPage from './pages/UsersPage';
import RegisterPage from './pages/RegisterPage';
import SettingsPage from './pages/SettingsPage';
import CategoryPage from './pages/CategoryPage';
import AppPasswordTutorialPage from './pages/AppPasswordTutorialPage';
import SupplierPage from './pages/SupplierPage';
import CustomerPage from './pages/CustomerPage';
import ProductFormPage from './pages/ProductFormPage';
import ExpensesPage from './pages/ExpensesPage';
import ReceiveStockPage from './pages/ReceiveStockPage';
import QuickActionsPage from './pages/QuickActionsPage';
import TargetPage from './pages/TargetPage';
import PromotionsPage from './pages/PromotionsPage';
import PromotionFormPage from './pages/PromotionFormPage';
import StockAdjustmentPage from './pages/StockAdjustmentPage';
import ReportsPage from './pages/ReportsPage';
import CustomerDetailPage from './pages/CustomerDetailPage';
import ShiftHistoryPage from './pages/ShiftHistoryPage';
import ForgotPasswordPage from './pages/ForgotPasswordPage';
import ResetPasswordPage from './pages/ResetPasswordPage';


// Components
import ProtectedRoute from './components/ProtectedRoute';
import AdminRoute from './components/AdminRoute';
import Layout from './components/Layout';

const GlobalStyle = createGlobalStyle`
    body {
        --bg-main: #F7F8FC;
        --bg-surface: #FFFFFF;
        --bg-secondary: #FFFFFF;
        --border-color: #EAEBF0;
        --text-primary: #1D2129;
        --text-secondary: #65676B;
        --text-placeholder: #8A8D91;
    }

    body[data-theme='dark'] {
        --bg-main: #000000;
        --bg-surface: #121212;
        --bg-secondary: #1E1E1E;
        --border-color: #2D2D2D;
        --text-primary: #F5F6F7;
        --text-secondary: #A0AEC0;
        --text-placeholder: #718096;
    }

    :root {
        --primary-color: #9D4EDD;
        --primary-hover: #B583E6;
        --red-color: #E53E3E;
        --green-color: #198754;
    }
    
    * { 
        box-sizing: border-box; margin: 0; padding: 0; 
    }

    body {
        font-family: 'Poppins', sans-serif;
        background-color: var(--bg-main);
        color: var(--text-primary);
        transition: background-color 0.2s, color 0.2s;
        overflow: hidden;
    }
`;

function AppContent() {
    const { theme } = useContext(ThemeContext);
    return (
        <SkeletonTheme
            baseColor={theme === 'dark' ? '#121212' : '#EAEBF0'}
            highlightColor={theme === 'dark' ? '#2D2D2D' : '#ffffff'}
        >
            <GlobalStyle />
            <ToastContainer position="top-right" autoClose={3000} theme={theme} />
            <BrowserRouter
                future={{
                    v7_startTransition: true,
                    v7_relativeSplatPath: true
                }}
            >
                <Routes>
                    <Route path="/login" element={<LoginPage />} />
                    <Route path="/register" element={<RegisterPage />} />
                    <Route path="/forgot-password" element={<ForgotPasswordPage />} />
                    <Route path="/reset-password/:token" element={<ResetPasswordPage />} />
                    <Route path="/tutorial/app-password" element={<AppPasswordTutorialPage />} />
                    <Route
                        path="/"
                        element={localStorage.getItem('token') ? <Navigate to="/pos" /> : <Navigate to="/login" />}
                    />
                    <Route element={<ProtectedRoute />}>
                        <Route element={<Layout />}>
                            <Route path="/pos" element={<PosPage />} />
                            <Route element={<AdminRoute />}>
                                <Route path="/dashboard" element={<DashboardPage />} />
                                <Route path="/products" element={<ProductsPage />} />
                                <Route path="/products/new" element={<ProductFormPage />} />
                                <Route path="/products/edit/:id" element={<ProductFormPage />} />
                                <Route path="/history" element={<HistoryPage />} />
                                <Route path="/reports" element={<ReportsPage />} />
                                <Route path="/shift-history" element={<ShiftHistoryPage />} />
                                <Route path="/users" element={<UsersPage />} />
                                <Route path="/customers" element={<CustomerPage />} />
                                <Route path="/customers/:id" element={<CustomerDetailPage />} />
                                <Route path="/suppliers" element={<SupplierPage />} />
                                <Route path="/settings" element={<SettingsPage />} />
                                <Route path="/categories" element={<CategoryPage />} />
                                <Route path="/expenses" element={<ExpensesPage />} />
                                <Route path="/receive-stock" element={<ReceiveStockPage />} />
                                <Route path="/quick-actions" element={<QuickActionsPage />} />
                                <Route path="/targets" element={<TargetPage />} />
                                <Route path="/promotions" element={<PromotionsPage />} />
                                <Route path="/promotions/new" element={<PromotionFormPage />} />
                                <Route path="/promotions/edit/:id" element={<PromotionFormPage />} />
                                <Route path="/stock-adjustment" element={<StockAdjustmentPage />} />
                            </Route>
                        </Route>
                    </Route>
                    <Route path="*" element={<Navigate to="/login" />} />
                </Routes>
            </BrowserRouter>
        </SkeletonTheme>
    );
}

function App() {
    return (
        <ThemeProvider>
            <BusinessProvider>
                <ShiftProvider>
                    <AppContent />
                </ShiftProvider>
            </BusinessProvider>
        </ThemeProvider>
    );
}

export default App;


===== C:\Users\Ibnu\Project\smart-pos\frontend\src\main.jsx =====

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\AdminRoute.jsx =====

// frontend/src/components/AdminRoute.jsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { jwtDecode } from 'jwt-decode';
import { toast } from 'react-toastify';

function AdminRoute() {
  const token = localStorage.getItem('token');

  if (!token) {
    return <Navigate to="/login" />;
  }

  try {
    const decoded = jwtDecode(token);
    const isAdmin = decoded.role === 'admin';

    if (isAdmin) {
      return <Outlet />;
    } else {
      toast.error('Anda tidak memiliki hak akses Admin.');
      return <Navigate to="/" />;
    }
  } catch (error) {
    toast.error('Sesi tidak valid, silakan login kembali.');
    return <Navigate to="/login" />;
  }
}

export default AdminRoute;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\CheckoutModal.jsx =====

// frontend/src/components/CheckoutModal.jsx

import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiDollarSign, FiCreditCard, FiSmartphone, FiBox } from 'react-icons/fi';
import { formatRupiah, parseRupiah } from '../utils/formatters';

const ModalBackdrop = styled(motion.div)`
  position: fixed;
  top: 0; left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const ModalContainer = styled(motion.div)`
  background: var(--bg-surface);
  border-radius: 12px;
  width: 100%;
  max-width: 400px;
  overflow: hidden;
  box-shadow: 0 4px 24px rgba(0, 0, 0, 0.2);
`;

const ModalHeader = styled.div`
  padding: 20px;
  border-bottom: 1px solid var(--border-color);
`;

const ModalTitle = styled.h2`
  margin: 0;
  font-size: 1.5rem;
  font-weight: 600;
  color: var(--text-primary);
`;

const ModalBody = styled.div`
  padding: 20px;
  display: flex;
  flex-direction: column;
  gap: 20px;
`;

const InfoRow = styled.div`
  display: flex;
  justify-content: space-between;
  font-weight: 500;
  color: var(--text-secondary);
`;

const PaymentMethodContainer = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
`;

const PaymentButton = styled.button`
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 10px 15px;
  border: 1px solid ${(props) => (props.$active ? 'var(--primary-color)' : 'var(--border-color)')};
  background: ${(props) => (props.$active ? 'var(--primary-color)' : 'var(--bg-main)')};
  color: ${(props) => (props.$active ? 'white' : 'var(--text-primary)')};
  border-radius: 8px;
  cursor: pointer;
  font-weight: 500;
  &:hover {
    background: ${(props) => (props.$active ? 'var(--primary-color)' : 'var(--bg-surface)')};
  }
`;

const Input = styled.input`
  width: 100%;
  padding: 12px;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  font-size: 1rem;
  background: var(--bg-main);
  color: var(--text-primary);
  &:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2);
  }
`;

const ModalFooter = styled.div`
  padding: 20px;
  border-top: 1px solid var(--border-color);
  display: flex;
  gap: 10px;
  justify-content: flex-end;
`;

const Button = styled.button`
  padding: 10px 20px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 500;
  background: ${(props) => (props.$primary ? 'var(--primary-color)' : 'var(--bg-main)')};
  color: ${(props) => (props.$primary ? 'white' : 'var(--text-primary)')};
  &:hover {
    background: ${(props) => (props.$primary ? 'var(--primary-hover)' : 'var(--bg-surface)')};
  }
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

const paymentIconMap = {
  tunai: <FiDollarSign size={20} />,
  kartu: <FiCreditCard size={20} />,
  qris: <FiSmartphone size={20} />,
};

const getPaymentIcon = (methodName) => {
  const key = methodName.toLowerCase();
  return paymentIconMap[key] || <FiBox size={20} />;
};

function CheckoutModal({ isOpen, onClose, cartTotal, onConfirmCheckout, paymentMethods = [], taxRate = 0 }) {
  const [amountPaid, setAmountPaid] = useState('');
  const [change, setChange] = useState(0);
  const [paymentMethod, setPaymentMethod] = useState('');

  const taxAmount = cartTotal * taxRate;
  const finalTotal = cartTotal + taxAmount;

  useEffect(() => {
    if (isOpen) {
      setAmountPaid('');
      setChange(0);
      setPaymentMethod(paymentMethods[0] || 'Tunai');
    }
  }, [isOpen, paymentMethods]);

  useEffect(() => {
    const paid = parseFloat(amountPaid) || 0;
    if (paymentMethod === 'Tunai') {
      setChange(paid >= finalTotal ? paid - finalTotal : 0);
    } else {
      setChange(0);
      setAmountPaid(finalTotal); // Otomatis isi jika bukan tunai
    }
  }, [amountPaid, finalTotal, paymentMethod]);

  if (!isOpen) return null;

  const handleConfirm = () => {
    onConfirmCheckout({
      paymentMethod,
      amountPaid: parseFloat(amountPaid) || finalTotal,
      subtotal: cartTotal,
      taxAmount,
      finalTotal,
    });
    onClose();
  };

  const isConfirmDisabled = cartTotal <= 0 || (paymentMethod === 'Tunai' && (parseFloat(amountPaid) || 0) < finalTotal);

  return (
    <AnimatePresence>
      {isOpen && (
        <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
          <ModalContainer initial={{ y: 50 }} animate={{ y: 0 }} exit={{ y: 50 }}>
            <ModalHeader>
              <ModalTitle>Pembayaran</ModalTitle>
            </ModalHeader>
            <ModalBody>
              <InfoRow>
                <span>Subtotal:</span>
                <span>Rp {formatRupiah(cartTotal)}</span>
              </InfoRow>
              {taxRate > 0 && (
                <InfoRow>
                    <span>Pajak ({(taxRate * 100).toFixed(1)}%):</span>
                    <span>Rp {formatRupiah(taxAmount)}</span>
                </InfoRow>
              )}
              <InfoRow style={{fontSize: '1.2rem', color: 'var(--text-primary)', borderTop: '1px solid var(--border-color)', paddingTop: '15px'}}>
                <strong>Total Akhir:</strong>
                <strong>Rp {formatRupiah(finalTotal)}</strong>
               </InfoRow>
              <div>
                <label style={{ display: 'block', marginBottom: '8px', fontWeight: 500, color: 'var(--text-secondary)' }}>
                  Metode Pembayaran
                </label>
                <PaymentMethodContainer>
                  {paymentMethods.length === 0 ? (
                    <PaymentButton $active={paymentMethod === 'Tunai'} onClick={() => setPaymentMethod('Tunai')}>
                      {getPaymentIcon('Tunai')} Tunai
                    </PaymentButton>
                  ) : (
                     paymentMethods.map((method) => (
                      <PaymentButton
                        key={method}
                        $active={paymentMethod === method}
                        onClick={() => setPaymentMethod(method)}
                         aria-label={`Pilih metode pembayaran ${method}`}
                      >
                        {getPaymentIcon(method)} {method}
                      </PaymentButton>
                    ))
                   )}
                </PaymentMethodContainer>
              </div>
              {paymentMethod === 'Tunai' && (
                <>
                  <div>
                     <label style={{ display: 'block', marginBottom: '8px', fontWeight: 500, color: 'var(--text-secondary)' }}>
                      Uang Dibayar (Rp)
                    </label>
                    <Input
                      type="text"
                      value={formatRupiah(amountPaid)}
                      onChange={(e) => setAmountPaid(parseRupiah(e.target.value))}
                      placeholder="0"
                      autoFocus
                    />
                   </div>
                  <InfoRow>
                    <span>Kembalian:</span>
                    <span>Rp {formatRupiah(change)}</span>
                  </InfoRow>
                </>
               )}
            </ModalBody>
            <ModalFooter>
              <Button onClick={onClose}>Batal</Button>
              <Button $primary onClick={handleConfirm} disabled={isConfirmDisabled}>
                Konfirmasi & Proses
              </Button>
            </ModalFooter>
          </ModalContainer>
        </ModalBackdrop>
      )}
    </AnimatePresence>
  );
}

export default CheckoutModal;

CheckoutModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  cartTotal: PropTypes.number.isRequired,
  onConfirmCheckout: PropTypes.func.isRequired,
  paymentMethods: PropTypes.arrayOf(PropTypes.string).isRequired,
  taxRate: PropTypes.number,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\CloseShiftModal.jsx =====

// frontend/src/components/CloseShiftModal.jsx

import React, { useState } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { FiLogOut } from 'react-icons/fi';
import { closeShift } from '../services/api';
import { toast } from 'react-toastify';
import { formatRupiah, parseRupiah } from '../utils/formatters';


const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7); display: flex;
  justify-content: center; align-items: center; z-index: 1001;
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface); border-radius: 16px;
  width: 100%; max-width: 400px; padding: 30px;
`;
const ModalTitle = styled.h2` font-size: 1.5rem; margin-bottom: 20px; text-align: center; color: var(--text-primary); `;
const Form = styled.form` display: flex; flex-direction: column; gap: 20px; `;
const Label = styled.label` font-weight: 500; color: var(--text-secondary); margin-bottom: 5px; display: block; `;
const Input = styled.input`
    width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1rem; background-color: var(--bg-main); color: var(--text-primary);
    
    &[type="number"] {
        -moz-appearance: textfield;
    }
    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
`;
const Button = styled.button` padding: 12px 20px; border-radius: 8px; border: none; background-color: var(--red-color); color: white; font-weight: 600; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 8px; &:disabled { opacity: 0.5; } `;

function CloseShiftModal({ shiftId, onShiftClosed, onClose }) {
    const [endingCash, setEndingCash] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        const cashAmount = parseFloat(endingCash);
        if (isNaN(cashAmount) || cashAmount < 0) {
            return toast.error("Masukkan jumlah kas akhir yang valid.");
        }
        setIsSubmitting(true);
        try {
            await toast.promise(
                closeShift(shiftId, { ending_cash: cashAmount }),
                {
                    pending: 'Menutup shift...',
                    success: 'Shift berhasil ditutup!',
                    error: (err) => err.response?.data?.message || 'Gagal menutup shift.'
                }
            );
            onShiftClosed();
        } catch (error) {
            console.error(error);
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
       <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }} onClick={onClose}>
            <ModalContainer initial={{ y: -50 }} animate={{ y: 0 }} onClick={e => e.stopPropagation()}>
                <ModalTitle>Tutup Shift</ModalTitle>
                <Form onSubmit={handleSubmit}>
                    <div>
                        <Label htmlFor="endingCash">Total Kas Fisik Akhir (Rp)</Label>
                        <Input
                            id="endingCash"
                            type="text"
                            value={formatRupiah(endingCash)}
                            onChange={(e) => {
                                setEndingCash(parseRupiah(e.target.value));
                            }}
                            placeholder="Hitung dan masukkan total uang tunai"
                            required
                            autoFocus
                        />
                    </div>
                    <Button type="submit" disabled={isSubmitting}>
                        <FiLogOut /> {isSubmitting ? 'Memproses...' : 'Konfirmasi & Tutup Shift'}
                    </Button>
                </Form>
            </ModalContainer>
        </ModalBackdrop>
    );
}

export default CloseShiftModal;

CloseShiftModal.propTypes = {
  shiftId: PropTypes.number.isRequired,
  onShiftClosed: PropTypes.func.isRequired,
  onClose: PropTypes.func.isRequired,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\CustomerFormModal.jsx =====

import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7); display: flex;
  justify-content: center; align-items: center; z-index: 1000;
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface); border-radius: 16px;
  border: 1px solid var(--border-color); width: 100%;
  max-width: 500px; box-shadow: 0 10px 30px rgba(0,0,0,0.3);
`;
const ModalHeader = styled.div`
  padding: 20px 25px; border-bottom: 1px solid var(--border-color);
  display: flex; justify-content: space-between; align-items: center;
`;
const ModalTitle = styled.h3` font-size: 1.2rem; font-weight: 600; `;
const CloseButton = styled.button` background: none; border: none; color: var(--text-secondary); cursor: pointer; &:hover { color: var(--text-primary); } `;
const ModalBody = styled.div` padding: 25px; display: grid; grid-template-columns: 1fr; gap: 20px; `;
const InputGroup = styled.div` grid-column: ${props => props.$fullWidth ? '1 / -1' : 'auto'}; `;
const Label = styled.label` display: block; margin-bottom: 8px; font-weight: 500; font-size: 0.9rem; color: var(--text-secondary); `;
const Input = styled.input` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; `;
const ModalFooter = styled.div` padding: 20px 25px; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; gap: 15px; `;
const Button = styled.button`
  padding: 10px 25px; border-radius: 8px; border: 1px solid var(--border-color);
  font-weight: 600; cursor: pointer;
  background-color: ${props => props.$primary ? 'var(--primary-color)' : 'transparent'};
  color: ${props => props.$primary ? 'white' : 'var(--text-primary)'};
  &:hover { opacity: 0.9; }
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

function CustomerFormModal({ isOpen, onClose, onSave, customer, isSubmitting }) {
    const [formData, setFormData] = useState({});
    const isEditing = Boolean(customer);

    useEffect(() => {
        setFormData(customer || { name: '', phone: '', email: '', address: '' });
    }, [customer, isOpen]);

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave(formData);
    };

    const backdropVariants = { hidden: { opacity: 0 }, visible: { opacity: 1 } };
    const modalVariants = { hidden: { y: "-50px", opacity: 0 }, visible: { y: "0", opacity: 1 } };

    return (
        <AnimatePresence>
            {isOpen && (
                <ModalBackdrop initial="hidden" animate="visible" exit="hidden" variants={backdropVariants}>
                    <ModalContainer variants={modalVariants}>
                        <form onSubmit={handleSubmit}>
                            <ModalHeader>
                                <ModalTitle>{isEditing ? 'Edit Pelanggan' : 'Tambah Pelanggan Baru'}</ModalTitle>
                                <CloseButton type="button" onClick={onClose}><FiX size={24} /></CloseButton>
                            </ModalHeader>
                            <ModalBody>
                                <InputGroup>
                                    <Label>Nama Pelanggan</Label>
                                    <Input name="name" value={formData.name || ''} onChange={handleChange} required autoFocus />
                                </InputGroup>
                                <InputGroup>
                                    <Label>Telepon</Label>
                                    <Input name="phone" value={formData.phone || ''} onChange={handleChange} />
                                </InputGroup>
                                <InputGroup>
                                    <Label>Email</Label>
                                    <Input type="email" name="email" value={formData.email || ''} onChange={handleChange} />
                                </InputGroup>
                                <InputGroup>
                                    <Label>Alamat</Label>
                                    <Input as="textarea" rows="2" name="address" value={formData.address || ''} onChange={handleChange} />
                                </InputGroup>
                            </ModalBody>
                            <ModalFooter>
                                <Button type="button" onClick={onClose}>Batal</Button>
                                <Button type="submit" $primary disabled={isSubmitting}>
                                    {isSubmitting ? 'Menyimpan...' : 'Simpan'}
                                </Button>
                            </ModalFooter>
                        </form>
                    </ModalContainer>
                </ModalBackdrop>
            )}
        </AnimatePresence>
    );
}

export default CustomerFormModal;

CustomerFormModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onSave: PropTypes.func.isRequired,
  customer: PropTypes.object,
  isSubmitting: PropTypes.bool.isRequired,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\CustomerSelectModal.jsx =====

import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX, FiUserPlus } from 'react-icons/fi';
import { getCustomers, createCustomer } from '../services/api';
import { toast } from 'react-toastify';

const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.6); display: flex;
  justify-content: center; align-items: center; z-index: 1000;
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface); border-radius: 16px;
  width: 100%; max-width: 500px; overflow: hidden;
  border: 1px solid var(--border-color);
  display: flex; flex-direction: column;
`;
const ModalHeader = styled.div`
  padding: 20px 25px; border-bottom: 1px solid var(--border-color);
  display: flex; justify-content: space-between; align-items: center;
`;
const ModalTitle = styled.h3` font-size: 1.2rem; font-weight: 600; margin: 0;`;
const CloseButton = styled.button` background: none; border: none; cursor: pointer; color: var(--text-secondary); `;
const ModalBody = styled.div` padding: 25px; display: flex; flex-direction: column; gap: 20px;`;

const SearchInput = styled.input`
  width: 100%;
  padding: 12px;
  border-radius: 8px;
  border: 1px solid var(--border-color);
  font-size: 1rem;
  background-color: var(--bg-main);
  color: var(--text-primary);
  &::placeholder {
    color: var(--text-secondary);
    opacity: 0.8;
  }
  &:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2);
  }
  -webkit-user-select: text !important;
  -moz-user-select: text !important;
  -ms-user-select: text !important;
  user-select: text !important;
`;

const CustomerList = styled.ul`
  list-style: none; padding: 0; margin: 0;
  max-height: 300px; overflow-y: auto;
`;
const CustomerItem = styled.li`
  padding: 15px; border-radius: 8px; cursor: pointer;
  color: var(--text-primary);
  &:hover { background-color: var(--bg-main); }
`;
const AddCustomerForm = styled.form`
  display: flex; gap: 10px; border-top: 1px solid var(--border-color);
  padding: 20px 25px;
`;
const AddButton = styled.button`
  padding: 0 15px;
  border-radius: 8px; border: none;
  background-color: var(--primary-color);
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center; &:hover { opacity: 0.9; }
`;

function CustomerSelectModal({ isOpen, onClose, onSelectCustomer }) {
    const [customers, setCustomers] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [newCustomerName, setNewCustomerName] = useState('');

    const fetchCustomers = async (search = '') => {
        try {
            const res = await getCustomers(search);
            setCustomers(res.data);
        } catch (error) {
            toast.error("Gagal memuat pelanggan.");
        }
    };

    useEffect(() => {
        if (isOpen) {
            const handler = setTimeout(() => {
                fetchCustomers(searchTerm);
            }, 300);
            return () => clearTimeout(handler);
        }
    }, [searchTerm, isOpen]);

    const handleAddCustomer = async (e) => {
        e.preventDefault();
        if (!newCustomerName.trim()) {
            toast.warn("Nama pelanggan tidak boleh kosong.");
            return;
        }
        try {
            const res = await createCustomer({ name: newCustomerName });
            const newCustomer = { id: res.data.customerId, name: newCustomerName };
            toast.success(`Pelanggan "${newCustomerName}" ditambahkan!`);
            onSelectCustomer(newCustomer);
            setNewCustomerName('');
            onClose();
        } catch (error) {
            console.error("Error adding customer:", error);
            toast.error("Gagal menambahkan pelanggan.");
        }
    };

    if (!isOpen) return null;

    return (
        <AnimatePresence>
            <ModalBackdrop
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
            >
                <ModalContainer
                    initial={{ y: "-100vh", opacity: 0 }}
                    animate={{ y: "0", opacity: 1 }}
                    exit={{ y: "100vh", opacity: 0 }}
                    transition={{ type: "spring", damping: 25, stiffness: 200 }}
                >
                    <ModalHeader>
                        <ModalTitle>Pilih Pelanggan</ModalTitle>
                        <CloseButton onClick={onClose}><FiX size={24} /></CloseButton>
                    </ModalHeader>
                    <ModalBody>
                        <SearchInput 
                            placeholder="Cari nama atau no. telepon..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                        />
                        <CustomerList>
                            {customers.length > 0 ? customers.map(customer => (
                                <CustomerItem key={customer.id} onClick={() => onSelectCustomer(customer)}>
                                    {customer.name} {customer.phone ? `(${customer.phone})` : ''}
                                </CustomerItem>
                            )) : <p style={{textAlign: 'center', color: 'var(--text-secondary)'}}>Pelanggan tidak ditemukan.</p>}
                        </CustomerList>
                    </ModalBody>
                    <AddCustomerForm onSubmit={handleAddCustomer}>
                        <SearchInput 
                            placeholder="atau tambah pelanggan baru..."
                            value={newCustomerName}
                            onChange={(e) => setNewCustomerName(e.target.value)}
                        />
                        <AddButton type="submit"><FiUserPlus/></AddButton>
                    </AddCustomerForm>
                </ModalContainer>
            </ModalBackdrop>
        </AnimatePresence>
    );
}

export default CustomerSelectModal;

CustomerSelectModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onSelectCustomer: PropTypes.func.isRequired,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\DailyReport.jsx =====

// frontend/src/components/DailyReport.jsx
import React from 'react';
import PropTypes from 'prop-types';

const DailyReport = React.forwardRef(({ data }, ref) => {
    if (!data) {
        return <div ref={ref} style={{ display: 'none' }}></div>;
    }

    const formatDate = (dateString) => new Date(dateString).toLocaleDateString('id-ID', {
        day: '2-digit', month: 'long', year: 'numeric',
    });

    const formatCurrency = (value) => `Rp ${new Intl.NumberFormat('id-ID').format(value || 0)}`;

    return (
        <div ref={ref} className="printable-content">
            <style>
                {`
                    @media print {
                        @page {
                            size: A4;
                            margin: 20mm;
                        }
                        body * {
                            visibility: hidden;
                        }
                        .printable-content, .printable-content * {
                            visibility: visible;
                        }
                        .printable-content {
                            position: absolute;
                            left: 0;
                            top: 0;
                            width: 100%;
                            font-family: 'Poppins', sans-serif;
                            color: #000;
                        }
                        h1, h2, h3 {
                            margin: 0;
                            padding: 0;
                        }
                        table {
                            width: 100%;
                            border-collapse: collapse;
                            margin-top: 15px;
                        }
                        th, td {
                            border: 1px solid #ddd;
                            padding: 8px;
                            text-align: left;
                        }
                        th {
                            background-color: #f2f2f2;
                        }
                        .report-header {
                            text-align: center;
                            margin-bottom: 30px;
                        }
                        .summary-section {
                            margin-top: 20px;
                            padding: 15px;
                            border: 1px solid #ddd;
                            border-radius: 8px;
                        }
                        .summary-item {
                            display: flex;
                            justify-content: space-between;
                            padding: 5px 0;
                        }
                    }
                `}
            </style>
            
            <div className="report-header">
                <h1>Laporan Kinerja Harian</h1>
                <p>Periode: {formatDate(data.startDate)} - {formatDate(data.endDate)}</p>
            </div>

            <div className="summary-section">
                <h3>Ringkasan Umum</h3>
                <div className="summary-item">
                    <span>Total Pendapatan:</span>
                    <strong>{formatCurrency(data.totalRevenue)}</strong>
                </div>
                <div className="summary-item">
                    <span>Total Perkiraan Laba:</span>
                    <strong>{formatCurrency(data.totalProfit)}</strong>
                </div>
                <div className="summary-item">
                    <span>Jumlah Transaksi:</span>
                    <strong>{data.totalTransactions}</strong>
                </div>
                <div className="summary-item">
                    <span>Total Produk Terjual:</span>
                    <strong>{data.totalSoldUnits} unit</strong>
                </div>
                <div className="summary-item">
                    <span>Pelanggan Baru:</span>
                    <strong>{data.newCustomers} orang</strong>
                </div>
            </div>

            <h3>Produk Terlaris (Berdasarkan Kuantitas)</h3>
            <table>
                <thead>
                    <tr>
                        <th>No.</th>
                        <th>Nama Produk</th>
                        <th>Total Terjual</th>
                    </tr>
                </thead>
                <tbody>
                    {data.topProducts && data.topProducts.length > 0 ? (
                        data.topProducts.map((product, index) => (
                            <tr key={index}>
                                <td>{index + 1}</td>
                                <td>{product.name}</td>
                                <td>{product.totalSold} unit</td>
                            </tr>
                        ))
                    ) : (
                        <tr>
                            <td colSpan="3" style={{ textAlign: 'center' }}>Tidak ada data produk terlaris pada periode ini.</td>
                        </tr>
                    )}
                </tbody>
            </table>
        </div>
    );
});

DailyReport.displayName = 'DailyReport'; // Add display name for forwardRef components

export default DailyReport;

DailyReport.propTypes = {
  data: PropTypes.object,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\EditExpenseModal.jsx =====

import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { FiSave, FiX } from 'react-icons/fi';
import { formatRupiah, parseRupiah } from '../utils/formatters';

// Styled Components
const ModalOverlay = styled.div`
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
`;

const ModalContent = styled.div`
    background: var(--bg-surface);
    border-radius: 16px;
    padding: 20px;
    width: 100%;
    max-width: 500px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
`;

const ModalHeader = styled.div`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
`;

const ModalTitle = styled.h2`
    font-size: 1.5rem;
    color: var(--text-primary);
`;

const CloseButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    &:hover {
        color: var(--primary-color);
    }
`;

const Form = styled.form`
    display: grid;
    gap: 15px;
`;

const InputGroup = styled.div`
    display: flex;
    flex-direction: column;
`;

const Label = styled.label`
    margin-bottom: 8px;
    font-weight: 500;
    font-size: 0.9rem;
    color: var(--text-secondary);
`;

const Input = styled.input`
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background: var(--bg-main);
    color: var(--text-primary);
    font-size: 1rem;
`;

const Button = styled.button`
    padding: 12px 20px;
    border-radius: 8px;
    border: none;
    background-color: var(--primary-color);
    color: white;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    justify-content: center;
    &:hover {
        opacity: 0.9;
    }
    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
`;

function EditExpenseModal({ isOpen, onClose, expense, onSave, isSubmitting }) {
    const [formData, setFormData] = useState({ description: '', amount: '' });

    useEffect(() => {
        if (expense) {
            setFormData({
                description: expense.description || '',
                amount: String(expense.amount) || ''
            });
        } else {
            setFormData({ description: '', amount: '' });
        }
    }, [expense]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        if (name === 'amount') {
            setFormData(prev => ({
                ...prev,
                [name]: parseRupiah(value)
            }));
        } else {
            setFormData(prev => ({ ...prev, [name]: value }));
        }
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        const amountToSave = parseFloat(formData.amount);
        if (isNaN(amountToSave) || amountToSave <= 0) {
            alert("Please enter a valid positive amount.");
            return;
        }
        onSave({ ...formData, amount: amountToSave });
    };

    if (!isOpen) return null;

    return (
       <ModalOverlay onClick={onClose}>
            <ModalContent onClick={e => e.stopPropagation()}>
                <ModalHeader>
                    <ModalTitle>Edit Expense</ModalTitle>
                    <CloseButton onClick={onClose}><FiX /></CloseButton>
                </ModalHeader>
                <Form onSubmit={handleSubmit}>
                    <InputGroup>
                        <Label>Expense Description</Label>
                        <Input
                            name="description"
                            value={formData.description}
                            onChange={handleChange}
                            required
                        />
                    </InputGroup>
                    <InputGroup>
                        <Label>Amount (Rp)</Label>
                        <Input
                            name="amount"
                            type="text"
                            value={formatRupiah(formData.amount)}
                            onChange={handleChange}
                            required
                        />
                    </InputGroup>
                    <Button type="submit" disabled={isSubmitting}>
                        <FiSave /> {isSubmitting ? 'Saving...' : 'Save Changes'}
                    </Button>
                </Form>
            </ModalContent>
        </ModalOverlay>
    );
}

export default EditExpenseModal;

EditExpenseModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  expense: PropTypes.object,
  onSave: PropTypes.func.isRequired,
  isSubmitting: PropTypes.bool.isRequired,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\HeldCartsModal.jsx =====

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX, FiChevronsRight, FiTrash2 } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.6); display: flex;
  justify-content: center; align-items: center; z-index: 1000;
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface); border-radius: 16px;
  width: 100%; max-width: 500px; overflow: hidden;
  border: 1px solid var(--border-color);
`;
const ModalHeader = styled.div`
  padding: 20px 25px; border-bottom: 1px solid var(--border-color);
  display: flex; justify-content: space-between; align-items: center;
`;
const ModalTitle = styled.h3` font-size: 1.2rem; font-weight: 600; margin: 0;`;
const CloseButton = styled.button` background: none; border: none; cursor: pointer; color: var(--text-secondary); `;
const ModalBody = styled.div`
    padding: 25px;
    max-height: 60vh;
    overflow-y: auto;
`;
const CartList = styled.ul`
    list-style: none; padding: 0; margin: 0;
`;
const CartItem = styled.li`
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 10px;
    background-color: var(--bg-main);
    border: 1px solid var(--border-color);
`;
const CartInfo = styled.div`
    font-weight: 500;
    & small {
        display: block;
        color: var(--text-secondary);
        font-weight: 400;
    }
`;
const ActionButton = styled.button`
    background: ${props => props.$resume ? 'var(--primary-color)' : 'none'};
    color: ${props => props.$resume ? 'white' : 'var(--text-secondary)'};
    border: ${props => props.$resume ? 'none' : '1px solid var(--border-color)'};
    padding: 8px 12px;
    border-radius: 6px;
    cursor: pointer;
    margin-left: 10px;
    &:hover {
        opacity: 0.8;
    }
`;

function HeldCartsModal({ isOpen, onClose, heldCarts, onResume, onDelete }) {
    if (!isOpen) return null;

    return (
        <AnimatePresence>
            {isOpen && (
               <ModalBackdrop>
                    <ModalContainer>
                        <ModalHeader>
                             <ModalTitle>Keranjang Ditahan</ModalTitle>
                            <CloseButton onClick={onClose}><FiX size={24} /></CloseButton>
                        </ModalHeader>
                        <ModalBody>
                             <CartList>
                                {heldCarts.length > 0 ? heldCarts.map(cart => (
                                    <CartItem key={cart.id}>
                                         <CartInfo>
                                            {cart.customer ? cart.customer.name : `Keranjang #${cart.id.slice(-4)}`}
                                             <small>{cart.items.length} item</small>
                                        </CartInfo>
                                        <div>
                                             <ActionButton onClick={() => onDelete(cart.id)}><FiTrash2/></ActionButton>
                                            <ActionButton $resume onClick={() => onResume(cart.id)}><FiChevronsRight/> Lanjutkan</ActionButton>
                                        </div>
                                   </CartItem>
                                )) : <p style={{textAlign: 'center', color: 'var(--text-secondary)'}}>Tidak ada keranjang yang ditahan.</p>}
                            </CartList>
                         </ModalBody>
                    </ModalContainer>
                </ModalBackdrop>
            )}
        </AnimatePresence>
    );
}

export default HeldCartsModal;

HeldCartsModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  heldCarts: PropTypes.array.isRequired,
  onResume: PropTypes.func.isRequired,
  onDelete: PropTypes.func.isRequired,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\Layout.jsx =====

// frontend/src/components/Layout.jsx

import React from 'react';
import styled from 'styled-components';
import { Outlet } from 'react-router-dom';
import Sidebar from './Sidebar';

const AppContainer = styled.div`
  display: flex;
  height: 100vh;
  width: 100vw;
  background-color: var(--bg-main);
`;

const ContentWrapper = styled.main`
  flex: 1;
  height: 100vh;
  overflow-y: auto;
`;

function Layout() {
  return (
    <AppContainer>
      <Sidebar />
      <ContentWrapper>
        <Outlet />
      </ContentWrapper>
    </AppContainer>
  );
}

export default Layout;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\OrderDetailModal.jsx =====

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX, FiPrinter } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
    position: fixed; top: 0; left: 0; width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6); display: flex;
    justify-content: center; align-items: center; z-index: 1000;
`;

const ModalContainer = styled(motion.div)`
    background-color: var(--bg-surface); border-radius: 16px;
    width: 100%; max-width: 600px; overflow: hidden;
    border: 1px solid var(--border-color);
`;

const ModalHeader = styled.div`
    padding: 20px 25px; border-bottom: 1px solid var(--border-color);
    display: flex; justify-content: space-between; align-items: center;
`;

const ModalTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0;
`;

const CloseButton = styled.button`
    background: none; border: none; color: var(--text-secondary);
    cursor: pointer; &:hover { color: var(--text-primary); }
`;

const ModalBody = styled.div`
    padding: 25px;
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-height: 70vh;
    overflow-y: auto;
`;

const InfoRow = styled.div`
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 1rem;
    span:first-child {
        color: var(--text-secondary);
        font-weight: 500;
    }
    span:last-child {
        font-weight: 600;
        color: var(--text-primary);
    }
`;

const ItemsTable = styled.table`
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
    th, td {
        text-align: left;
        padding: 10px 0; border-bottom: 1px dashed var(--border-color);
        color: var(--text-primary);
    }
    th {
        font-size: 0.9rem;
        color: var(--text-secondary);
        font-weight: 600;
        text-transform: uppercase;
        padding-bottom: 15px;
    }
    td:last-child {
        text-align: right;
        font-weight: 500;
    }
`;

const Total = styled.div`
    font-size: 1.3rem;
    font-weight: 700;
    text-align: right;
    margin-top: 20px;
    color: var(--primary-color);
`;

const Button = styled.button`
    padding: 12px 25px;
    border-radius: 8px;
    border: 1px solid ${props => props.$primary ? 'var(--primary-color)' : 'var(--border-color)'};
    font-weight: 600;
    cursor: pointer;
    background-color: ${props => props.$primary ? 'var(--primary-color)' : 'transparent'};
    color: ${props => props.$primary ? 'white' : 'var(--text-primary)'};
    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
`;

const ModalFooter = styled.div`
    padding: 20px 25px;
    border-top: 1px solid var(--border-color);
    display: flex;
    justify-content: flex-end;
    gap: 15px;
`;

function OrderDetailModal({ isOpen, onClose, order, onPrint }) { 
    if (!isOpen || !order) return null;

    return (
        <AnimatePresence>
            {isOpen && (
                <ModalBackdrop
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    onClick={onClose}
                >
                    <ModalContainer
                        initial={{ y: "-50px", opacity: 0 }}
                        animate={{ y: "0", opacity: 1 }}
                        exit={{ y: "50px", opacity: 0 }}
                        transition={{ type: "spring", stiffness: 200, damping: 20 }}
                        onClick={(e) => e.stopPropagation()}
                    >
                        <ModalHeader>
                            <ModalTitle>Detail Pesanan #{order.id}</ModalTitle>
                            <CloseButton onClick={onClose}><FiX size={24} /></CloseButton>
                        </ModalHeader>
                        <ModalBody>
                            <InfoRow>
                                <span>Tanggal:</span>
                                <span>{new Date(order.created_at).toLocaleString('id-ID', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' })}</span>
                            </InfoRow>
                            <InfoRow>
                                <span>Kasir:</span>
                                <span>{order.cashier_name}</span>
                            </InfoRow>
                            {order.customer_name && (
                                <InfoRow>
                                    <span>Pelanggan:</span>
                                    <span>{order.customer_name}</span>
                                </InfoRow>
                             )}
                            <InfoRow>
                                <span>Metode Pembayaran:</span>
                                <span>{order.payment_method}</span>
                            </InfoRow>
                            <InfoRow>
                                <span>Uang Dibayar:</span>
                                <span>Rp {new Intl.NumberFormat('id-ID').format(order.amount_paid)}</span>
                            </InfoRow>
                            {order.payment_method === 'Tunai' && (order.amount_paid - order.total_amount) > 0 && (
                                <InfoRow>
                                    <span>Kembalian:</span>
                                    <span>Rp {new Intl.NumberFormat('id-ID').format(order.amount_paid - order.total_amount)}</span>
                                </InfoRow>
                            )}

                            <ItemsTable>
                                <thead>
                                    <tr>
                                        <th>Item</th>
                                        <th style={{ textAlign: 'center' }}>Qty</th>
                                        <th style={{ textAlign: 'right' }}>Harga Satuan</th>
                                        <th style={{ textAlign: 'right' }}>Subtotal</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {order.items.map((item, index) => (
                                        <tr key={index}>
                                            <td>{item.product_name}{item.variant_name ? ` (${item.variant_name})` : ''}</td>
                                            <td style={{ textAlign: 'center' }}>{item.quantity}</td>
                                            <td style={{ textAlign: 'right' }}>Rp {new Intl.NumberFormat('id-ID').format(item.price)}</td>
                                            <td style={{ textAlign: 'right' }}>Rp {new Intl.NumberFormat('id-ID').format(item.quantity * item.price)}</td>
                                        </tr>
                                    ))}
                                </tbody>
                            </ItemsTable>
                            
                            <Total>Total: Rp {new Intl.NumberFormat('id-ID').format(order.total_amount)}</Total>
                        </ModalBody>
                        <ModalFooter>
                            <Button onClick={onClose}>Tutup</Button>
                            <Button $primary onClick={() => onPrint(order.id)}>
                                <FiPrinter style={{ marginRight: '8px' }} />
                                Cetak Struk
                            </Button>
                        </ModalFooter>
                    </ModalContainer>
                </ModalBackdrop>
            )}
        </AnimatePresence>
    );
}

export default OrderDetailModal;

OrderDetailModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  order: PropTypes.object,
  onPrint: PropTypes.func.isRequired,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\PostCheckoutModal.jsx =====

// frontend/src/components/PostCheckoutModal.jsx

import React, { useState } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiSend, FiCheckCircle, FiPrinter } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { sendReceipt } from '../services/api';

const ModalBackdrop = styled(motion.div)` position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.6); display: flex; justify-content: center; align-items: center; z-index: 1000; backdrop-filter: blur(4px); `;
const ModalContainer = styled(motion.div)` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); width: 100%; max-width: 450px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); text-align: center; padding: 30px; display: flex; flex-direction: column; align-items: center; `;
const SuccessIcon = styled.div` width: 70px; height: 70px; border-radius: 50%; background-color: rgba(32, 201, 151, 0.1); color: #20C997; display: flex; align-items: center; justify-content: center; margin: 0 auto 20px auto; `;
const ModalTitle = styled.h3` font-size: 1.5rem; font-weight: 600; margin-bottom: 10px; color: var(--text-primary); `;
const ModalSubtitle = styled.p` color: var(--text-secondary); margin-bottom: 25px; font-size: 0.95rem; `;
const Form = styled.form` display: flex; flex-direction: column; gap: 15px; width: 100%; `;
const Input = styled.input` width: 100%; padding: 12px 18px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1rem; background-color: var(--bg-main); color: var(--text-primary); text-align: center; &::placeholder { color: var(--text-placeholder); } &:focus { outline: none; border-color: var(--primary-color); } `;
const Button = styled.button` padding: 12px 25px; border-radius: 8px; border: none; font-weight: 600; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 8px; transition: all 0.2s ease-in-out; background-color: ${props => props.$primary ? 'var(--primary-color)' : 'var(--bg-surface)'}; color: ${props => props.$primary ? 'white' : 'var(--text-primary)'}; border: 1px solid ${props => props.$primary ? 'var(--primary-color)' : 'var(--border-color)'}; &:hover { ${props => props.$primary ? `background-color: var(--primary-hover);` : `background-color: var(--bg-main); border-color: var(--primary-color);`} } &:disabled { opacity: 0.5; cursor: not-allowed; } `;
const ButtonGroup = styled.div` display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 10px; width: 100%; `;
const FullWidthButton = styled(Button)` grid-column: 1 / -1; `;

function PostCheckoutModal({ isOpen, onClose, orderId, onPrint }) {
  const [email, setEmail] = useState('');
  const [isSending, setIsSending] = useState(false);

  const handleSendReceipt = async (e) => {
    e.preventDefault();
    if (!email) {
      toast.warn("Silakan masukkan alamat email.");
      return;
    }
    setIsSending(true);
    try {
      await sendReceipt(orderId, email);
      toast.success('Struk berhasil dikirim!');
      setEmail('');
    } catch (error) {
      toast.error(`Gagal mengirim struk: ${error.response?.data?.message || 'Server error'}`);
    } finally {
      setIsSending(false);
    }
  };

  const backdropVariants = { hidden: { opacity: 0 }, visible: { opacity: 1 }, exit: { opacity: 0 }};
  const modalVariants = { hidden: { y: "-50px", opacity: 0 }, visible: { y: "0", opacity: 1 }, exit: { y: "50px", opacity: 0 }};

  return (
    <AnimatePresence>
      {isOpen && (
        <ModalBackdrop initial="hidden" animate="visible" exit="exit" onClick={onClose}>
          <ModalContainer variants={modalVariants} onClick={(e) => e.stopPropagation()}>
            <SuccessIcon><FiCheckCircle size={32} /></SuccessIcon>
            <ModalTitle>Transaksi Berhasil!</ModalTitle>
            <ModalSubtitle>Pesanan #{orderId} telah berhasil diproses.</ModalSubtitle>
            
            <Form onSubmit={handleSendReceipt}>
              <Input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Kirim struk ke email (opsional)"
              />
              <ButtonGroup>
                <Button type="button" onClick={() => onPrint(orderId)}>
                  <FiPrinter /> Cetak
                </Button>
                <Button type="submit" $primary disabled={!email || isSending}>
                  <FiSend /> {isSending ? 'Mengirim...' : 'Kirim'}
                </Button>
                <FullWidthButton type="button" onClick={onClose}>
                  Selesai (Transaksi Baru)
                </FullWidthButton>
              </ButtonGroup>
            </Form>
          </ModalContainer>
        </ModalBackdrop>
      )}
    </AnimatePresence>
  );
}

export default PostCheckoutModal;

PostCheckoutModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  orderId: PropTypes.number,
  onPrint: PropTypes.func.isRequired,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\ProductFormModal.jsx =====

// frontend/src/pages/ProductFormPage.jsx

import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { getCategories, getSubCategories, getSuppliers, getProductById, createProduct, updateProduct, uploadImage } from '../services/api';
import { toast } from 'react-toastify';
import { FiSave, FiPlus, FiTrash2, FiArrowLeft, FiUpload } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import { formatRupiah, parseRupiah } from '../utils/formatters';

// --- Styled Components ---
const PageContainer = styled.div` padding: 30px; max-width: 900px; margin: 0 auto; `;
const PageHeader = styled.header` display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; `;
const Title = styled.h1` font-size: 1.8rem; `;
const BackLink = styled(Link)` display: inline-flex; align-items: center; gap: 8px; color: var(--text-secondary); text-decoration: none; margin-bottom: 20px; font-weight: 500; &:hover { color: var(--text-primary); } `;
const Form = styled.form` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); padding: 25px; `;
const FormGrid = styled.div` display: grid; grid-template-columns: repeat(3, 1fr); gap: 18px 20px; `;
const InputGroup = styled.div` grid-column: ${props => props.$fullWidth ? '1 / -1' : 'span 1'}; `;
const Label = styled.label` display: block; margin-bottom: 8px; font-weight: 500; font-size: 0.9rem; color: var(--text-secondary); `;
const Input = styled.input` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; &[type="number"] { -moz-appearance: textfield; } &::-webkit-outer-spin-button, &::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; } `;
const FileInputContainer = styled.div` display: flex; gap: 10px; align-items: center; width: 100%; `;
const UploadButton = styled.button` background-color: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 12px 15px; font-weight: 600; display: flex; align-items: center; gap: 5px; cursor: pointer; flex-shrink: 0; &:hover { background-color: var(--primary-hover); } &:disabled { opacity: 0.5; cursor: not-allowed; } `;
const FileInput = styled.input` display: none; `;
const Select = styled.select` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; appearance: none; background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E"); background-repeat: no-repeat; background-position: right 12px center; background-size: 20px; &:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2); } `;
const VariantSection = styled.div` grid-column: 1 / -1; border-top: 1px solid var(--border-color); margin-top: 10px; padding-top: 20px; `;
const VariantRow = styled.div` display: grid; grid-template-columns: 2fr 1fr 1fr 1.5fr 50px; gap: 15px; align-items: center; margin-bottom: 10px; `;
const AddVariantButton = styled.button` display: flex; align-items: center; gap: 5px; background-color: var(--primary-color); color: white; padding: 8px 15px; border-radius: 8px; border: none; cursor: pointer; font-weight: 500; margin-top: 10px; &:hover { opacity: 0.9; } `;
const ActionButton = styled.button` background: none; border: none; cursor: pointer; color: var(--red-color); `;
const FormFooter = styled.div` padding-top: 25px; margin-top: 25px; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; `;
const SaveButton = styled.button` background-color: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 12px 25px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; &:hover { background-color: var(--primary-hover); } &:disabled { opacity: 0.5; cursor: not-allowed; } `;

function ProductFormPage() {
    const { id } = useParams();
    const navigate = useNavigate();
    const isEditing = Boolean(id);
    const fileInputRef = useRef(null);

    const [formData, setFormData] = useState({
        name: '',
        description: '',
        category_id: '',
        sub_category_id: '',
        supplier_id: '',
        stock: 0,
        low_stock_threshold: 5, // Tambahkan state baru
        image_url: '',
        expiration_date: '',
        variants: [{ name: 'Reguler', price: '', cost_price: '', barcode: '' }]
    });

    const [categories, setCategories] = useState([]);
    const [subCategories, setSubCategories] = useState([]);
    const [suppliers, setSuppliers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [selectedFile, setSelectedFile] = useState(null);

    const fetchProductData = useCallback(async () => {
        if (isEditing) {
            try {
                const res = await getProductById(id);
                const product = res.data;
                if (product.category_id) {
                    const subCatRes = await getSubCategories(product.category_id);
                    setSubCategories(subCatRes.data);
                }
                setFormData({
                    name: product.name || '',
                    description: product.description || '',
                    category_id: product.category_id || '',
                    sub_category_id: product.sub_category_id || '',
                    supplier_id: product.supplier_id || '',
                    stock: product.stock || 0,
                    low_stock_threshold: product.low_stock_threshold || 5, // Tambahkan ini
                    image_url: product.image_url || '',
                    expiration_date: product.expiration_date ? new Date(product.expiration_date).toISOString().split('T')[0] : '',
                    variants: product.variants && product.variants.length > 0
                        ? product.variants.map(v => ({
                            id: v.id,
                            name: v.name || '',
                            price: v.price !== undefined ? v.price : '',
                            cost_price: v.cost_price !== undefined ? v.cost_price : '',
                            barcode: v.barcode || '',
                          }))
                        : [{ name: 'Reguler', price: '', cost_price: '', barcode: '' }]
                });
            } catch (error) {
                console.error("Error fetching product data:", error);
                toast.error("Gagal memuat data produk. Mungkin produk tidak ditemukan.");
                navigate('/products');
            } finally {
                setLoading(false);
            }
        } else {
            setLoading(false);
        }
    }, [id, isEditing, navigate]);

    useEffect(() => {
        const fetchDropdownData = async () => {
            try {
                const [catRes, supRes] = await Promise.all([getCategories(), getSuppliers()]);
                setCategories(catRes.data);
                setSuppliers(supRes.data);
            } catch (error) {
                toast.error("Gagal memuat data kategori atau pemasok.");
            }
        };
        fetchDropdownData();
        fetchProductData();
    }, [fetchProductData]);

    useEffect(() => {
        if (formData.category_id) {
            getSubCategories(formData.category_id)
                .then(res => setSubCategories(res.data))
                .catch(err => toast.error("Gagal memuat sub-kategori."));
        } else {
            setSubCategories([]);
        }
    }, [formData.category_id]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        if (name === "category_id") {
            setFormData({ ...formData, category_id: value, sub_category_id: '' });
        } else {
            setFormData({ ...formData, [name]: value });
        }
    };

    const handleVariantChange = (index, field, value) => {
        const newVariants = [...formData.variants];
        if (field === 'price' || field === 'cost_price') {
            newVariants[index][field] = value === '' ? '' : parseRupiah(value);
        } else {
            newVariants[index][field] = value;
        }
        setFormData({ ...formData, variants: newVariants });
    };

    const addVariant = () => {
        setFormData({
            ...formData,
            variants: [...formData.variants, { name: '', price: '', cost_price: '', barcode: '' }]
        });
    };

    const removeVariant = (index) => {
        if (formData.variants.length <= 1) {
            toast.warn("Produk harus memiliki setidaknya satu varian.");
            return;
        }
        const newVariants = formData.variants.filter((_, i) => i !== index);
        setFormData({ ...formData, variants: newVariants });
    };

    const handleFileChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setSelectedFile(file);
            setFormData(prev => ({ ...prev, image_url: '' }));
            toast.info(`File dipilih: ${file.name}`);
        } else {
            setSelectedFile(null);
        }
    };

    const triggerFileInput = () => {
        fileInputRef.current.click();
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        const validVariants = formData.variants.filter(v =>
            v.name &&
            v.price !== '' &&
            !isNaN(parseFloat(v.price)) &&
            v.cost_price !== '' &&
            !isNaN(parseFloat(v.cost_price))
        ).map(v => ({
            ...v,
            price: parseFloat(v.price),
            cost_price: parseFloat(v.cost_price),
        }));
        if (validVariants.length === 0) {
            toast.error('Setidaknya satu varian produk harus diisi lengkap (nama, harga beli, dan harga jual).');
            setIsSubmitting(false);
            return;
        }
        let imageUrlToSend = formData.image_url;
        if (selectedFile) {
            const formDataForUpload = new FormData();
            formDataForUpload.append('image', selectedFile);
            try {
                const uploadRes = await uploadImage(formDataForUpload);
                imageUrlToSend = uploadRes.data.url;
                toast.success("Gambar berhasil diunggah!");
            } catch (error) {
                console.error("Error uploading image:", error);
                toast.error("Gagal mengunggah gambar.");
                setIsSubmitting(false);
                return;
            }
        }
        const productData = {
            ...formData,
            image_url: imageUrlToSend,
            variants: validVariants,
            expiration_date: formData.expiration_date || null
        };
        const promise = isEditing
            ? updateProduct(id, productData)
            : createProduct(productData);
        try {
            await toast.promise(promise, {
                pending: 'Menyimpan produk...',
                success: 'Produk berhasil disimpan!',
                error: 'Gagal menyimpan produk.'
            });
            navigate('/products');
        } catch (err) {
            console.error(err);
        } finally {
            setIsSubmitting(false);
        }
    };

    if (loading) {
        return <PageContainer><Skeleton height={400} /></PageContainer>;
    }

    return (
        <PageContainer>
            <BackLink to="/products"><FiArrowLeft /> Kembali ke Daftar Produk</BackLink>
            <PageHeader>
                <Title>{isEditing ? 'Edit Produk' : 'Tambah Produk Baru'}</Title>
            </PageHeader>
            <Form onSubmit={handleSubmit}>
                <FormGrid>
                    <InputGroup $fullWidth>
                        <Label>Nama Produk</Label>
                        <Input name="name" value={formData.name} onChange={handleChange} required autoFocus />
                    </InputGroup>
                    <InputGroup>
                        <Label>Kategori</Label>
                        <Select name="category_id" value={formData.category_id} onChange={handleChange}>
                            <option value="">-- Pilih Kategori --</option>
                            {categories.map(cat => <option key={cat.id} value={cat.id}>{cat.name}</option>)}
                        </Select>
                    </InputGroup>
                    <InputGroup>
                        <Label>Sub-Kategori</Label>
                        <Select name="sub_category_id" value={formData.sub_category_id} onChange={handleChange} disabled={subCategories.length === 0}>
                            <option value="">-- Pilih Sub-Kategori --</option>
                            {subCategories.map(sub => <option key={sub.id} value={sub.id}>{sub.name}</option>)}
                        </Select>
                    </InputGroup>
                    <InputGroup>
                        <Label>Pemasok</Label>
                        <Select name="supplier_id" value={formData.supplier_id} onChange={handleChange}>
                            <option value="">-- Pilih Pemasok --</option>
                            {suppliers.map(sup => <option key={sup.id} value={sup.id}>{sup.name}</option>)}
                        </Select>
                    </InputGroup>
                    <InputGroup>
                        <Label>Tanggal Kadaluarsa (Opsional)</Label>
                        <Input type="date" name="expiration_date" value={formData.expiration_date} onChange={handleChange} />
                    </InputGroup>
                    <InputGroup>
                        <Label>Total Stok</Label>
                        <Input name="stock" type="number" value={formData.stock} onChange={handleChange} required />
                    </InputGroup>
                    
                    {/* Input Group Baru untuk Ambang Batas Stok */}
                    <InputGroup>
                        <Label>Ambang Batas Stok Rendah</Label>
                        <Input name="low_stock_threshold" type="number" value={formData.low_stock_threshold} onChange={handleChange} required />
                    </InputGroup>

                    <VariantSection>
                        <Label style={{ fontWeight: 600, marginBottom: '15px' }}>Varian Produk</Label>
                        {formData.variants.map((variant, index) => (
                            <VariantRow key={index}>
                                <Input placeholder="Nama Varian (cth: Panas)" value={variant.name} onChange={e => handleVariantChange(index, 'name', e.target.value)} required />
                                <Input
                                    type="text" placeholder="Harga Beli (Modal)" value={formatRupiah(variant.cost_price)}
                                    onChange={e => handleVariantChange(index, 'cost_price', e.target.value)}
                                    onFocus={e => { const rawValue = parseRupiah(e.target.value); e.target.value = isNaN(rawValue) ? '' : rawValue; }}
                                    onBlur={e => { const rawValue = parseRupiah(e.target.value); e.target.value = formatRupiah(rawValue); }}
                                    required
                                />
                                <Input
                                    type="text" placeholder="Harga Jual" value={formatRupiah(variant.price)}
                                    onChange={e => handleVariantChange(index, 'price', e.target.value)}
                                    onFocus={e => { const rawValue = parseRupiah(e.target.value); e.target.value = isNaN(rawValue) ? '' : rawValue; }}
                                    onBlur={e => { const rawValue = parseRupiah(e.target.value); e.target.value = formatRupiah(rawValue); }}
                                    required
                                />
                                <Input placeholder="Barcode/SKU" value={variant.barcode || ''} onChange={e => handleVariantChange(index, 'barcode', e.target.value)} />
                                <ActionButton type="button" onClick={() => removeVariant(index)}><FiTrash2 size={18} /></ActionButton>
                            </VariantRow>
                        ))}
                        <AddVariantButton type="button" onClick={addVariant}><FiPlus /> Tambah Varian</AddVariantButton>
                    </VariantSection>
                    <InputGroup $fullWidth>
                        <Label>URL Gambar (atau Unggah)</Label>
                        <FileInputContainer>
                            <Input name="image_url" value={selectedFile ? selectedFile.name : formData.image_url} onChange={handleChange} placeholder="URL Gambar atau pilih file" disabled={!!selectedFile} />
                            <UploadButton type="button" onClick={triggerFileInput}> <FiUpload /> Unggah </UploadButton>
                            <FileInput type="file" accept="image/*" onChange={handleFileChange} ref={fileInputRef} />
                        </FileInputContainer>
                        {selectedFile && <small style={{ color: 'var(--text-secondary)', marginTop: '5px' }}>File dipilih: {selectedFile.name}</small>}
                        {formData.image_url && !selectedFile && <small style={{ color: 'var(--text-secondary)', marginTop: '5px' }}>URL Gambar: {formData.image_url}</small>}
                    </InputGroup>
                    <InputGroup $fullWidth>
                        <Label>Deskripsi</Label>
                        <Input as="textarea" rows="3" name="description" value={formData.description} onChange={handleChange} />
                    </InputGroup>
                </FormGrid>
                <FormFooter>
                    <SaveButton type="submit" disabled={isSubmitting}>
                        <FiSave /> {isSubmitting ? 'Menyimpan...' : 'Simpan Produk'}
                    </SaveButton>
                </FormFooter>
            </Form>
        </PageContainer>
    );
}

export default ProductFormPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\ProtectedRoute.jsx =====

// frontend/src/components/ProtectedRoute.jsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { jwtDecode } from 'jwt-decode';
import { toast } from 'react-toastify';

function ProtectedRoute() {
  const token = localStorage.getItem('token');

  if (!token) {
    return <Navigate to="/login" />;
  }

  try {
    const decoded = jwtDecode(token);
    const currentTime = Date.now() / 1000;
    if (decoded.exp < currentTime) {
      localStorage.removeItem('token');
      toast.error('Sesi Anda telah berakhir. Silakan login kembali.');
      return <Navigate to="/login" />;
    }

    return <Outlet />;
  } catch (error) {
    console.error("Invalid token:", error);
    localStorage.removeItem('token');
    toast.error('Sesi tidak valid, silakan login kembali.');
    return <Navigate to="/login" />;
  }
}

export default ProtectedRoute;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\Receipt.jsx =====

// frontend/src/components/Receipt.jsx

import React from 'react';
import PropTypes from 'prop-types';

const Receipt = React.forwardRef(({ order }, ref) => {
    if (!order) {
        return <div ref={ref} style={{ display: 'none' }}></div>;
    }

    const formatCurrency = (num) => new Intl.NumberFormat('id-ID').format(num);

    return (
        <div ref={ref} style={{ fontFamily: "'Courier New', Courier, monospace", fontSize: '12px', color: '#000', width: '300px', padding: '20px' }}>
           <div style={{ textAlign: 'center', marginBottom: '20px' }}>
                <h2 style={{ margin: 0, fontSize: '16px' }}>Toko 27</h2>
                <p style={{ margin: '2px 0' }}>Jl. Raya Cileungsi No. 123</p>
                <p style={{ margin: '2px 0' }}>Telp: 0812-3456-7890</p>
            </div>
            
           <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '5px' }}>
                <span>No: #{order.id}</span>
                <span>{new Date(order.created_at).toLocaleString('id-ID', {day: '2-digit', month: '2-digit', year: '2-digit', hour: '2-digit', minute: '2-digit'})}</span>
            </div>
            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '5px' }}>
                <span>Kasir: {order.cashier_name}</span>
                <span>Pelanggan: {order.customer_name || '-'}</span>
            </div>
            
            <hr style={{ border: 0, borderTop: '1px dashed #ccc', margin: '10px 0' }} />
            
            <table style={{ width: '100%', borderCollapse: 'collapse', marginBottom: '10px' }}>
                <thead>
                    <tr>
                        <th style={{ textAlign: 'left', padding: '5px 0', borderBottom: '1px dashed #ccc' }}>Item</th>
                        <th style={{ textAlign: 'center', padding: '5px 0', borderBottom: '1px dashed #ccc' }}>Qty</th>
                        <th style={{ textAlign: 'right', padding: '5px 0', borderBottom: '1px dashed #ccc' }}>Harga</th>
                    </tr>
                </thead>
                <tbody>
                    {order.items.map((item, index) => (
                        <tr key={index}>
                            <td style={{ padding: '5px 0' }}>{item.product_name}{item.variant_name ? ` (${item.variant_name})` : ''}</td>
                            <td style={{ textAlign: 'center', padding: '5px 0' }}>{item.quantity}</td>
                            <td style={{ textAlign: 'right', padding: '5px 0' }}>{formatCurrency(item.price * item.quantity)}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
            
            <hr style={{ border: 0, borderTop: '1px dashed #ccc', margin: '10px 0' }} />
            
            <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                <tbody>
                    <tr>
                        <td><strong>Total</strong></td>
                        <td style={{ textAlign: 'right' }} colSpan="2"><strong>Rp {formatCurrency(order.total_amount)}</strong></td>
                    </tr>
                    <tr>
                        <td>Dibayar</td>
                        <td style={{ textAlign: 'right' }} colSpan="2">Rp {formatCurrency(order.amount_paid)}</td>
                    </tr>
                    {order.payment_method === 'Tunai' && (order.amount_paid - order.total_amount) > 0 && (
                        <tr>
                            <td>Kembalian</td>
                            <td style={{ textAlign: 'right' }} colSpan="2">Rp {formatCurrency(order.amount_paid - order.total_amount)}</td>
                        </tr>
                    )}
                </tbody>
            </table>
            
            <div style={{ textAlign: 'center', marginTop: '20px' }}>
                <p>Terima Kasih!</p>
            </div>
        </div>
    );
});

Receipt.displayName = 'Receipt';

export default Receipt;

Receipt.propTypes = {
  order: PropTypes.object,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\Sidebar.jsx =====

// frontend/src/components/Sidebar.jsx

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { NavLink } from 'react-router-dom';
import { FiGrid, FiShoppingCart, FiPackage, FiLogOut, FiList, FiSettings, FiZap, FiPower, FiClock, FiFileText } from 'react-icons/fi';
import { jwtDecode } from 'jwt-decode';
import { useShift } from '../context/ShiftContext';
import CloseShiftModal from './CloseShiftModal';
import { toast } from 'react-toastify';

const SidebarContainer = styled.div`
  width: 250px;
  background-color: var(--bg-surface);
  border-right: 1px solid var(--border-color);
  display: flex;
  flex-direction: column;
  padding: 20px; /* Sedikit dikurangi padding atas/bawah */
  height: 100vh;
  box-sizing: border-box;
  /* Gunakan gap untuk jarak antar anak langsung (Logo, NavList, ActionButtonsContainer) */
  gap: 30px; /* Jarak utama antar blok */
`;

const Logo = styled.h1`
  font-size: 1.8rem;
  font-weight: 700;
  color: var(--primary-color);
  text-align: center;
  margin: 0; /* Hapus margin default */
`;

const NavList = styled.ul`
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  /* Gunakan gap untuk jarak antar item menu */
  gap: 6px; /* Jarak antar item menu */
  flex-grow: 1;
  /* Scroll jika konten terlalu panjang */
  overflow-y: auto;
`;

const NavItem = styled(NavLink)`
  display: flex;
  align-items: center;
  gap: 15px;
  color: var(--text-secondary);
  text-decoration: none;
  padding: 12px 15px; /* Sedikit dikurangi padding horizontal */
  border-radius: 8px;
  font-weight: 500;
  transition: all 0.2s ease-in-out;
  /* Hilangkan margin-bottom karena sudah pakai gap */

  &:hover {
    background-color: var(--bg-main);
    color: var(--primary-color);
  }

  &.active {
    background-color: var(--primary-color);
    color: white;
  }
`;

// Container baru untuk tombol-tombol aksi di bawah
const ActionButtonsContainer = styled.div`
  display: flex;
  flex-direction: column;
  /* Gunakan gap untuk jarak antar tombol dalam container ini */
  gap: 12px; /* Jarak antar tombol Tutup Shift dan Logout */
  /* Margin top untuk memberi jeda dari NavList */
  margin-top: 20px; /* JEDA UTAMA DARI MENU UTAMA */
`;

// Styled component untuk tombol Tutup Shift
const CloseShiftButton = styled.button`
  display: flex;
  align-items: center;
  gap: 15px;
  width: 100%;
  background-color: var(--red-color);
  color: white;
  border: none;
  border-radius: 8px;
  padding: 12px 15px; /* Sesuaikan padding */
  font-weight: 600;
  font-size: 1rem;
  font-family: 'Poppins', sans-serif;
  cursor: pointer;
  box-shadow: 0 4px 10px rgba(229, 62, 62, 0.3);
  transition: background-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
  /* Hilangkan margin-top karena sudah pakai gap di container */

  &:hover {
    background-color: #CC2222;
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(229, 62, 62, 0.4);
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    box-shadow: none;
    transform: none; /* Hilangkan efek hover saat disabled */
  }
`;

const LogoutButton = styled.button`
  display: flex;
  align-items: center;
  gap: 15px;
  width: 100%;
  background: none;
  border: none;
  color: var(--text-secondary);
  padding: 12px 15px; /* Sesuaikan padding */
  border-radius: 8px;
  font-weight: 500;
  font-size: 1rem;
  font-family: 'Poppins', sans-serif;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  /* Hilangkan margin-top karena sudah pakai gap di container */

  &:hover {
    background-color: var(--bg-main);
    color: var(--red-color);
  }
`;

function Sidebar() {
  const [userRole, setUserRole] = useState(null);
  const { activeShift, refreshShiftStatus } = useShift();
  const [isCloseShiftModalOpen, setCloseShiftModalOpen] = useState(false);

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      try {
        const decoded = jwtDecode(token);
        setUserRole(decoded.role);
      } catch (error) {
        console.error("Invalid token:", error);
      }
    }
  }, []);

  const handleLogout = () => {
    if (activeShift) {
      toast.warn("Anda harus menutup shift terlebih dahulu sebelum logout.");
      return;
    }
    localStorage.removeItem('token');
    window.location.href = '/login';
  };

  return (
    <>
      <SidebarContainer>
        <Logo>Smart POS</Logo>
        <NavList>
          <li><NavItem to="/pos"><FiShoppingCart size={20} /> Kasir</NavItem></li>

          {userRole === 'admin' && (
            <>
              <li><NavItem to="/dashboard"><FiGrid size={20} /> Dashboard</NavItem></li>
              <li><NavItem to="/products"><FiPackage size={20} /> Produk</NavItem></li>
              <li><NavItem to="/history"><FiList size={20} /> Riwayat</NavItem></li>
              <li><NavItem to="/reports"><FiFileText size={20} /> Laporan</NavItem></li>
              <li><NavItem to="/shift-history"><FiClock size={20} /> Riwayat Shift</NavItem></li>
              <li><NavItem to="/quick-actions"><FiZap size={20} /> Aksi Cepat</NavItem></li>
              <li><NavItem to="/settings"><FiSettings size={20} /> Setelan</NavItem></li>
            </>
          )}
        </NavList>

        {/* Container untuk tombol-tombol aksi */}
        <ActionButtonsContainer>
          {activeShift && (
            <CloseShiftButton onClick={() => setCloseShiftModalOpen(true)}>
              <FiPower size={20} /> Tutup Shift
            </CloseShiftButton>
          )}
          <LogoutButton onClick={handleLogout}><FiLogOut size={20} /> Logout</LogoutButton>
        </ActionButtonsContainer>
      </SidebarContainer>

      {isCloseShiftModalOpen && activeShift && (
        <CloseShiftModal
          shiftId={activeShift.id}
          onClose={() => setCloseShiftModalOpen(false)}
          onShiftClosed={() => {
            setCloseShiftModalOpen(false);
            refreshShiftStatus();
          }}
        />
      )}
    </>
  );
}

export default Sidebar;


===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\StartShiftModal.jsx =====

// frontend/src/components/StartShiftModal.jsx

import React, { useState } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { FiLogIn } from 'react-icons/fi';
import { startShift } from '../services/api';
import { toast } from 'react-toastify';
import { formatRupiah, parseRupiah } from '../utils/formatters';


const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7); display: flex;
  justify-content: center; align-items: center; z-index: 1001; backdrop-filter: blur(5px);
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface); border-radius: 16px;
  width: 100%; max-width: 400px; padding: 30px;
`;
const ModalTitle = styled.h2` font-size: 1.5rem; margin-bottom: 20px; text-align: center; color: var(--text-primary); `;
const Form = styled.form` display: flex; flex-direction: column; gap: 20px; `;
const Label = styled.label` font-weight: 500; color: var(--text-secondary); margin-bottom: 5px; display: block; `;
const Input = styled.input`
    width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1rem; background-color: var(--bg-main); color: var(--text-primary);
    
    &[type="number"] {
        -moz-appearance: textfield;
    }
    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
`;
const Button = styled.button` padding: 12px 20px; border-radius: 8px; border: none; background-color: var(--primary-color); color: white; font-weight: 600; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 8px; &:disabled { opacity: 0.5; } `;

function StartShiftModal({ onShiftStarted }) {
    const [startingCash, setStartingCash] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        const cashAmount = parseFloat(startingCash);
        if (isNaN(cashAmount) || cashAmount < 0) {
            return toast.error("Masukkan jumlah kas awal yang valid.");
        }
        setIsSubmitting(true);
        try {
            await toast.promise(
                startShift({ starting_cash: cashAmount }),
                {
                    pending: 'Memulai shift...',
                    success: 'Shift berhasil dimulai!',
                    error: 'Gagal memulai shift.'
                }
            );
            onShiftStarted();
        } catch (error) {
            console.error(error);
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
            <ModalContainer initial={{ y: -50 }} animate={{ y: 0 }}>
                <ModalTitle>Buka Shift Baru</ModalTitle>
                <Form onSubmit={handleSubmit}>
                    <div>
                        <Label htmlFor="startingCash">Kas Awal (Rp)</Label>
                        <Input
                            id="startingCash"
                            type="text"
                            value={formatRupiah(startingCash)}
                            onChange={(e) => {
                                setStartingCash(parseRupiah(e.target.value));
                            }}
                            placeholder="Contoh: 500.000"
                            required
                            autoFocus
                        />
                    </div>
                    <Button type="submit" disabled={isSubmitting}>
                        <FiLogIn /> {isSubmitting ? 'Memproses...' : 'Mulai Shift'}
                    </Button>
                </Form>
            </ModalContainer>
        </ModalBackdrop>
    );
}

export default StartShiftModal;

StartShiftModal.propTypes = {
  onShiftStarted: PropTypes.func.isRequired,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\SupplierFormModal.jsx =====

import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7); display: flex;
  justify-content: center; align-items: center; z-index: 1000;
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface); border-radius: 16px;
  border: 1px solid var(--border-color); width: 100%;
  max-width: 500px; box-shadow: 0 10px 30px rgba(0,0,0,0.3);
`;

const ModalHeader = styled.div`
  padding: 20px 25px; border-bottom: 1px solid var(--border-color);
  display: flex; justify-content: space-between; align-items: center;
`;

const ModalTitle = styled.h3`
  font-size: 1.2rem; font-weight: 600;
`;

const CloseButton = styled.button`
  background: none; border: none; color: var(--text-secondary);
  cursor: pointer; &:hover { color: var(--text-primary); }
`;

const ModalBody = styled.div`
  padding: 25px; display: grid;
  grid-template-columns: 1fr 1fr; gap: 20px;
`;

const InputGroup = styled.div`
  grid-column: ${props => props.$fullWidth ? '1 / -1' : 'auto'};
`;

const Label = styled.label`
  display: block; margin-bottom: 8px;
  font-weight: 500; font-size: 0.9rem;
  color: var(--text-secondary);
`;

const Input = styled.input`
  width: 100%; padding: 12px; border: 1px solid var(--border-color);
  border-radius: 8px; background-color: var(--bg-main);
  color: var(--text-primary); font-size: 1rem;
`;

const ModalFooter = styled.div`
  padding: 20px 25px; border-top: 1px solid var(--border-color);
  display: flex; justify-content: flex-end; gap: 15px;
`;

const Button = styled.button`
  padding: 10px 25px; border-radius: 8px;
  border: 1px solid var(--border-color);
  font-weight: 600; cursor: pointer;
  background-color: ${props => props.$primary ? 'var(--primary-color)' : 'transparent'};
  color: ${props => props.$primary ? 'white' : 'var(--text-primary)'};
  &:hover { opacity: 0.9; }
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

function SupplierFormModal({ isOpen, onClose, onSave, supplier, isSubmitting }) {
  const [formData, setFormData] = useState({});
  const isEditing = Boolean(supplier);

  useEffect(() => {
    setFormData(supplier || {
      name: '', contact_person: '', phone: '', email: '', address: ''
    });
  }, [supplier, isOpen]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };

  const backdropVariants = { hidden: { opacity: 0 }, visible: { opacity: 1 } };
  const modalVariants = { hidden: { y: "-50px", opacity: 0 }, visible: { y: "0", opacity: 1 } };

  return (
    <AnimatePresence>
      {isOpen && (
        <ModalBackdrop initial="hidden" animate="visible" exit="hidden" variants={backdropVariants}>
          <ModalContainer variants={modalVariants} onClick={(e) => e.stopPropagation()}>
            <form onSubmit={handleSubmit}>
              <ModalHeader>
                <ModalTitle>{isEditing ? 'Edit Pemasok' : 'Tambah Pemasok Baru'}</ModalTitle>
                <CloseButton type="button" onClick={onClose}><FiX size={24} /></CloseButton>
              </ModalHeader>
              <ModalBody>
                <InputGroup $fullWidth>
                  <Label>Nama Pemasok</Label>
                  <Input name="name" value={formData.name || ''} onChange={handleChange} required autoFocus />
                </InputGroup>
                <InputGroup>
                  <Label>Narahubung</Label>
                  <Input name="contact_person" value={formData.contact_person || ''} onChange={handleChange} />
                </InputGroup>
                <InputGroup>
                  <Label>Telepon</Label>
                  <Input name="phone" value={formData.phone || ''} onChange={handleChange} />
                </InputGroup>
                <InputGroup $fullWidth>
                  <Label>Email</Label>
                  <Input type="email" name="email" value={formData.email || ''} onChange={handleChange} />
                </InputGroup>
                <InputGroup $fullWidth>
                  <Label>Alamat</Label>
                  <Input as="textarea" rows="3" name="address" value={formData.address || ''} onChange={handleChange} />
                </InputGroup>
              </ModalBody>
              <ModalFooter>
                <Button type="button" onClick={onClose}>Batal</Button>
                <Button type="submit" $primary disabled={isSubmitting}>
                    {isSubmitting ? 'Menyimpan...' : 'Simpan'}
                </Button>
              </ModalFooter>
            </form>
          </ModalContainer>
        </ModalBackdrop>
      )}
    </AnimatePresence>
  );
}

export default SupplierFormModal;

SupplierFormModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onSave: PropTypes.func.isRequired,
  supplier: PropTypes.object,
  isSubmitting: PropTypes.bool.isRequired,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\TargetChart.jsx =====

// frontend/src/pages/Dashboard/components/TargetChart.jsx

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Skeleton from 'react-loading-skeleton';
import { FiTarget } from 'react-icons/fi';

const ChartContainer = styled.div`
    background-color: var(--bg-surface);
    padding: 30px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    grid-column: 1 / -1;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
`;

const ChartTitle = styled.h3`
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 25px;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 10px;
    justify-content: center;
    text-align: center;
`;

const ProgressBarContainer = styled.div`
    width: 100%;
    height: 20px;
    background-color: var(--bg-main);
    border-radius: 10px;
    overflow: hidden;
    margin: 10px 0;
`;
const ProgressBarFill = styled.div`
    height: 100%;
    width: ${props => props.$percentage}%;
    background: linear-gradient(90deg, var(--primary-color) 0%, #B583E6 100%);
    border-radius: 10px;
    transition: width 0.5s ease-in-out;
    text-align: right;
    color: white;
    font-size: 12px;
    line-height: 20px;
    padding-right: 8px;
`;

const StatsText = styled.div`
    display: flex;
    justify-content: space-between;
    font-size: 0.95rem;
    margin-top: 10px;
    color: var(--text-secondary);

    strong {
        color: var(--text-primary);
        font-weight: 600;
    }
`;


function TargetChart({ loading, stats }) {
    if (loading) {
        return (
            <ChartContainer>
                <ChartTitle><FiTarget size={22} /> Target Pendapatan Bulanan</ChartTitle>
                <Skeleton height={60} />
            </ChartContainer>
        );
    }

    const target = stats?.monthly_revenue_target || 0;
    const currentRevenue = stats?.totalRevenue || 0;
    const percentage = target > 0 ? (currentRevenue / target) * 100 : 0;
    const cappedPercentage = Math.min(percentage, 100);
    const formatCurrency = (value) => `Rp ${new Intl.NumberFormat('id-ID').format(value || 0)}`;

    return (
        <ChartContainer>
           <ChartTitle><FiTarget size={22} /> Target Pendapatan Bulanan</ChartTitle>
            {target > 0 ? (
                <div>
                    <ProgressBarContainer>
                        <ProgressBarFill $percentage={cappedPercentage}>
                            {percentage.toFixed(0)}%
                        </ProgressBarFill>
                    </ProgressBarContainer>
                    <StatsText>
                        <span>Tercapai: <strong>{formatCurrency(currentRevenue)}</strong></span>
                        <span>Target: <strong>{formatCurrency(target)}</strong></span>
                    </StatsText>
                </div>
            ) : (
                <p style={{ textAlign: 'center', color: 'var(--text-secondary)' }}>
                    Target pendapatan bulanan belum diatur.
                </p>
            )}
        </ChartContainer>
    );
}

export default TargetChart;

TargetChart.propTypes = {
  loading: PropTypes.bool.isRequired,
  stats: PropTypes.object,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\UserFormModal.jsx =====

import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7); display: flex;
  justify-content: center; align-items: center; z-index: 1000;
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface); border-radius: 16px;
  border: 1px solid var(--border-color); width: 100%;
  max-width: 500px; box-shadow: 0 10px 30px rgba(0,0,0,0.3);
`;
const ModalHeader = styled.div`
  padding: 20px 25px; border-bottom: 1px solid var(--border-color);
  display: flex; justify-content: space-between; align-items: center;
`;
const ModalTitle = styled.h3` font-size: 1.2rem; font-weight: 600; `;
const CloseButton = styled.button` background: none; border: none; color: var(--text-secondary); cursor: pointer; &:hover { color: var(--text-primary); } `;
const ModalBody = styled.div` padding: 25px; display: grid; grid-template-columns: 1fr; gap: 20px; `;
const InputGroup = styled.div` grid-column: ${props => props.$fullWidth ? '1 / -1' : 'auto'}; `;
const Label = styled.label` display: block; margin-bottom: 8px; font-weight: 500; font-size: 0.9rem; color: var(--text-secondary); `;
const Input = styled.input` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; `;
const Select = styled.select` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; `;
const ModalFooter = styled.div` padding: 20px 25px; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; gap: 15px; `;
const Button = styled.button`
  padding: 10px 25px; border-radius: 8px; border: 1px solid var(--border-color);
  font-weight: 600; cursor: pointer;
  background-color: ${props => props.$primary ? 'var(--primary-color)' : 'transparent'};
  color: ${props => props.$primary ? 'white' : 'var(--text-primary)'};
  &:hover { opacity: 0.9; }
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

function UserFormModal({ isOpen, onClose, onSave, user, isSubmitting }) {
  const [formData, setFormData] = useState({});
  const isEditing = Boolean(user);

  useEffect(() => {
    setFormData(user || { name: '', email: '', password: '', role: 'kasir' });
  }, [user, isOpen]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };

  const backdropVariants = { hidden: { opacity: 0 }, visible: { opacity: 1 } };
  const modalVariants = { hidden: { y: "-50px", opacity: 0 }, visible: { y: "0", opacity: 1 } };

  return (
    <AnimatePresence>
      {isOpen && (
        <ModalBackdrop initial="hidden" animate="visible" exit="hidden" variants={backdropVariants}>
          <ModalContainer variants={modalVariants}>
            <form onSubmit={handleSubmit}>
              <ModalHeader>
                <ModalTitle>{isEditing ? 'Edit Pengguna' : 'Tambah Pengguna Baru'}</ModalTitle>
                <CloseButton type="button" onClick={onClose}><FiX size={24} /></CloseButton>
              </ModalHeader>
              <ModalBody>
                <InputGroup $fullWidth>
                  <Label>Nama</Label>
                  <Input name="name" value={formData.name || ''} onChange={handleChange} required autoFocus />
                </InputGroup>
                <InputGroup $fullWidth>
                  <Label>Email</Label>
                  <Input type="email" name="email" value={formData.email || ''} onChange={handleChange} required />
                </InputGroup>
                {!isEditing && (
                  <InputGroup $fullWidth>
                    <Label>Password</Label>
                    <Input type="password" name="password" value={formData.password || ''} onChange={handleChange} required />
                  </InputGroup>
                )}
                <InputGroup $fullWidth>
                  <Label>Peran (Role)</Label>
                  <Select name="role" value={formData.role || 'kasir'} onChange={handleChange}>
                    <option value="kasir">Kasir</option>
                    <option value="admin">Admin</option>
                  </Select>
                </InputGroup>
              </ModalBody>
              <ModalFooter>
                <Button type="button" onClick={onClose}>Batal</Button>
                <Button type="submit" $primary disabled={isSubmitting}>
                    {isSubmitting ? 'Menyimpan...' : 'Simpan'}
                </Button>
              </ModalFooter>
            </form>
          </ModalContainer>
        </ModalBackdrop>
      )}
    </AnimatePresence>
  );
}

export default UserFormModal;

UserFormModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onSave: PropTypes.func.isRequired,
  user: PropTypes.object,
  isSubmitting: PropTypes.bool.isRequired,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\components\VariantSelectModal.jsx =====

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const ModalContainer = styled(motion.div)`
  background: var(--bg-surface);
  border-radius: 16px;
  width: 100%;
  max-width: 600px;
  overflow: hidden;
  border: 1px solid var(--border-color);
  box-shadow: 0 10px 30px rgba(0,0,0,0.2);
`;

const ModalHeader = styled.div`
  padding: 20px 25px;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: linear-gradient(120deg, var(--bg-surface), var(--bg-main));
`;
const ModalTitle = styled.h3`
  font-size: 1.2rem;
  font-weight: 600;
  margin: 0;
  color: var(--text-primary);
`;

const CloseButton = styled.button`
  background: none;
  border: none;
  cursor: pointer;
  color: var(--text-secondary);
  transition: transform 0.2s ease;
  &:hover {
    transform: rotate(90deg);
    color: var(--text-primary);
  }
`;

const VariantGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  gap: 15px;
  padding: 25px;
`;

const VariantButton = styled(motion.button)`
  padding: 15px;
  border-radius: 8px;
  border: 1px solid var(--border-color);
  background-color: var(--bg-surface);
  cursor: pointer;
  text-align: center;
  position: relative;
  overflow: hidden;
  color: var(--text-primary);

  &:hover:not(:disabled) {
    border-color: var(--primary-color);
    color: var(--primary-color);
    box-shadow: 0 0 15px rgba(157, 78, 221, 0.2);
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    background-color: var(--bg-main);
    color: var(--text-secondary);
  }
`;

const VariantName = styled.div`font-weight: 600;`;
const VariantPrice = styled.div`font-size: 0.9rem; margin-top: 5px;`;
const VariantStock = styled.div`font-size: 0.8rem; color: var(--text-secondary); margin-top: 8px;`;

const OutOfStockBadge = styled.div`
    position: absolute;
    top: 5px;
    right: 5px;
    background-color: var(--red-color);
    color: white;
    font-size: 0.7rem;
    font-weight: 600;
    padding: 2px 6px;
    border-radius: 4px;
`;

function VariantSelectModal({ isOpen, onClose, product, onSelectVariant }) {
    const backdropVariants = { hidden: { opacity: 0 }, visible: { opacity: 1 } };
    const modalVariants = {
        hidden: { scale: 0.95, opacity: 0 },
        visible: {
            scale: 1,
            opacity: 1,
            transition: { type: "spring", stiffness: 300, damping: 30 }
        }
    };

    if (!isOpen || !product) return null;

    return (
        <AnimatePresence>
            {isOpen && (
                <ModalBackdrop
                    variants={backdropVariants}
                    initial="hidden"
                    animate="visible"
                    exit="hidden"
                    onClick={onClose}
                >
                    <ModalContainer
                        variants={modalVariants}
                        onClick={e => e.stopPropagation()}
                    >
                        <ModalHeader>
                            <ModalTitle>Pilih Varian: {product.name}</ModalTitle>
                            <CloseButton onClick={onClose}><FiX size={24} /></CloseButton>
                        </ModalHeader>
                        <VariantGrid>
                            {product.variants.map((variant, index) => (
                                <VariantButton 
                                    key={variant.id} 
                                    onClick={() => onSelectVariant(product, variant)}
                                    disabled={product.stock <= 0} // Logic updated to use product's total stock
                                    initial={{ opacity: 0, y: 20 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    transition={{ delay: index * 0.05 }}
                                    whileHover={{ scale: 1.05 }}
                                    whileTap={{ scale: 0.95 }}
                                >
                                    {product.stock <= 0 && <OutOfStockBadge>Habis</OutOfStockBadge>}
                                    <VariantName>{variant.name}</VariantName>
                                    <VariantPrice>Rp {new Intl.NumberFormat('id-ID').format(variant.price)}</VariantPrice>
                                </VariantButton>
                            ))}
                        </VariantGrid>
                    </ModalContainer>
                </ModalBackdrop>
            )}
        </AnimatePresence>
    );
}

export default VariantSelectModal;

VariantSelectModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  product: PropTypes.object,
  onSelectVariant: PropTypes.func.isRequired,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\context\BusinessContext.jsx =====

// frontend/src/context/BusinessContext.jsx
import React, { useState, useEffect, createContext, useCallback, useContext } from 'react';
import { getBusinessSettings } from '../services/api';
import { toast } from 'react-toastify';
// Assuming you have an AuthContext that provides user information
// import { AuthContext } from './AuthContext'; // Uncomment and import your AuthContext if you have one

export const BusinessContext = createContext();

export const BusinessProvider = ({ children }) => {
    const [settings, setSettings] = useState({
        payment_methods: ['Tunai', 'Kartu', 'QRIS'],
        tax_rate: 0,
        receipt_logo_url: '',
        receipt_footer_message: 'Terima Kasih!',
    });
    const [loading, setLoading] = useState(true);

    // Assuming AuthContext provides a user object with a 'role' property
    // const { user } = useContext(AuthContext); // Uncomment this line if you have AuthContext

    const fetchBusinessSettings = useCallback(async () => {
        const token = localStorage.getItem('token');
        if (!token) {
            setLoading(false);
            return;
        }

        // --- Start of added role check ---
        // Placeholder for user role check.
        // Replace 'user?.role === 'admin'' with your actual user role check logic.
        // For example, if you have an AuthContext, you would use:
        // if (!user || user.role !== 'admin') {
        //     console.log("User is not an admin, skipping business settings fetch.");
        //     setLoading(false);
        //     return;
        // }
        // For demonstration, let's assume a hardcoded admin check or that `user` is available.
        // If `user` is not available here, you'll need to pass it as a prop or fetch it.
        // For now, we'll proceed without a strict `user` object check, assuming the backend will handle unauthorized access.
        // However, if you want to prevent the frontend call entirely based on role,
        // you would need to uncomment and properly integrate the AuthContext.
        // --- End of added role check ---

        setLoading(true);
        try {
            const res = await getBusinessSettings();
            if (res.data) {
                setSettings({
                    ...res.data,
                    payment_methods: JSON.parse(res.data.payment_methods || '[]'),
                    tax_rate: parseFloat(res.data.tax_rate) || 0,
                    receipt_footer_message: res.data.receipt_footer_text || 'Terima Kasih!',
                });
            }
        } catch (error) {
            console.error("Gagal memuat setelan bisnis:", error);
            toast.error("Gagal memuat setelan bisnis.");
        } finally {
            setLoading(false);
        }
    }, []); // Add 'user' to dependency array if you uncomment the user check: [fetchBusinessSettings, user]

    useEffect(() => {
        fetchBusinessSettings();
    }, [fetchBusinessSettings]);

    const value = { settings, loading, fetchBusinessSettings };

    return (
        <BusinessContext.Provider value={value}>
            {children}
        </BusinessContext.Provider>
    );
};


===== C:\Users\Ibnu\Project\smart-pos\frontend\src\context\ShiftContext.jsx =====

// frontend/src/context/ShiftContext.jsx

import React, { createContext, useState, useCallback, useEffect, useContext } from 'react';
import { getCurrentShift } from '../services/api';

export const ShiftContext = createContext();

export const useShift = () => useContext(ShiftContext);

export const ShiftProvider = ({ children }) => {
    const [activeShift, setActiveShift] = useState(null);
    const [isLoading, setIsLoading] = useState(true);

    const checkActiveShift = useCallback(async () => {
        const token = localStorage.getItem('token');
        if (!token) {
            setIsLoading(false);
            setActiveShift(null);
            return;
        }

        try {
            setIsLoading(true);
            const res = await getCurrentShift();
            if (res.data.active) {
                setActiveShift(res.data.shift);
            } else {
                setActiveShift(null);
            }
        } catch (error) {
            console.error("Failed to check active shift:", error);
            setActiveShift(null);
        } finally {
            setIsLoading(false);
        }
    }, []);

    useEffect(() => {
        checkActiveShift();
    }, [checkActiveShift]);

    const value = {
        activeShift,
        setActiveShift,
        isLoadingShift: isLoading,
        refreshShiftStatus: checkActiveShift
    };

    return (
        <ShiftContext.Provider value={value}>
            {children}
        </ShiftContext.Provider>
    );
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\context\ThemeContext.jsx =====

import React, { useState, useEffect, createContext } from 'react';

export const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
    const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'light');

    useEffect(() => {
        localStorage.setItem('theme', theme);
        document.body.setAttribute('data-theme', theme);
    }, [theme]);

    const toggleTheme = () => {
        setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));
    };
    return (
        <ThemeContext.Provider value={{ theme, toggleTheme }}>
            {children}
        </ThemeContext.Provider>
    );
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\AppPasswordTutorialPage.jsx =====

import React from 'react';
import styled from 'styled-components';
import { Link } from 'react-router-dom';
import { FiArrowLeft } from 'react-icons/fi';

const PageContainer = styled.div`
  padding: 30px;
  max-width: 800px;
  margin: 0 auto;
`;

const Title = styled.h1`
  font-size: 1.8rem;
  margin-bottom: 30px;
`;

const TutorialCard = styled.div`
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);
  padding: 30px;
`;

const Step = styled.div`
  margin-bottom: 25px;
  padding-bottom: 25px;
  border-bottom: 1px solid var(--border-color);

  &:last-child {
    border-bottom: none;
    margin-bottom: 0;
  }
`;

const StepTitle = styled.h3`
  font-size: 1.2rem;
  font-weight: 600;
  margin-bottom: 10px;
`;

const StepText = styled.p`
  color: var(--text-secondary);
  line-height: 1.6;
`;

const StyledLink = styled.a`
  color: var(--primary-color);
  font-weight: 500;
  text-decoration: none;
  &:hover { text-decoration: underline; }
`;

const BackLink = styled(Link)`
  display: inline-flex;
  align-items: center;
  gap: 8px;
  color: var(--text-secondary);
  text-decoration: none;
  margin-bottom: 20px;
  font-weight: 500;
  &:hover { color: var(--text-primary); }
`;

function AppPasswordTutorialPage() {
  return (
    <PageContainer>
        <BackLink to="/settings"><FiArrowLeft /> Kembali ke Setelan</BackLink>
        <Title>Cara Mendapatkan Sandi Aplikasi Google</Title>
        <TutorialCard>
            <Step>
                <StepTitle>1. Aktifkan Verifikasi 2 Langkah</StepTitle>
                <StepText>
                    Sandi Aplikasi hanya tersedia untuk akun yang sudah mengaktifkan Verifikasi 2 Langkah. Jika belum, aktifkan terlebih dahulu di halaman keamanan akun Google Anda.
                </StepText>
            </Step>
            <Step>
                <StepTitle>2. Buka Halaman Sandi Aplikasi</StepTitle>
                <StepText>
                    Login ke Akun Google Anda, lalu kunjungi langsung halaman Sandi Aplikasi melalui link ini: <StyledLink href="https://myaccount.google.com/apppasswords" target="_blank" rel="noopener noreferrer">myaccount.google.com/apppasswords</StyledLink>
                </StepText>
            </Step>
            <Step>
                <StepTitle>3. Buat Sandi Aplikasi Baru</StepTitle>
                <StepText>
                    Di halaman tersebut, klik pada kolom "Pilih aplikasi" dan pilih "Lainnya (Nama kustom...)". Beri nama, misalnya "SmartPOS App", lalu klik "BUAT".
                </StepText>
            </Step>
            <Step>
                <StepTitle>4. Salin dan Gunakan Sandi</StepTitle>
                <StepText>
                    Google akan menampilkan sebuah kotak kuning berisi **16 karakter sandi**. Salin 16 karakter ini (tanpa spasi) dan tempelkan ke kolom "Sandi Aplikasi" di halaman Setelan SmartPOS Anda.
                </StepText>
            </Step>
        </TutorialCard>
    </PageContainer>
  );
}

export default AppPasswordTutorialPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\CategoryPage.jsx =====

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { getCategories, createCategory, deleteCategory, getSubCategories, createSubCategory, deleteSubCategory } from '../services/api';
import { toast } from 'react-toastify';
import { FiPlus, FiTrash2, FiChevronRight, FiArrowLeft } from 'react-icons/fi';

const PageContainer = styled.div`
  padding: 30px;
  height: 100%;
  overflow-y: auto;
`;

const Panel = styled.div`
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);
  padding: 25px;
  max-width: 800px;
  margin: 0 auto;
`;

const PanelHeader = styled.div`
  margin: 0 0 20px 0;
  padding-bottom: 20px;
  border-bottom: 1px solid var(--border-color);
`;

const PanelTitle = styled.h2`
  font-size: 1.5rem;
  font-weight: 600; display: flex;
  align-items: center;
  gap: 15px;
`;

const BackButton = styled.button`
  background: none;
  border: none;
  cursor: pointer;
  color: var(--text-secondary);
  &:hover { color: var(--primary-color); }
`;

const Form = styled.form`
  display: flex;
  gap: 15px;
  margin-bottom: 25px;
`;

const Input = styled.input`
  flex-grow: 1;
  padding: 12px;
  border-radius: 8px;
  border: 1px solid var(--border-color);
  background-color: var(--bg-main);
  color: var(--text-primary);
  font-size: 1rem;
  &::placeholder {
    color: var(--text-secondary);
    opacity: 0.8;
  }
  &:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2);
  }
`;

const Button = styled.button`
  padding: 0 20px;
  border-radius: 8px;
  border: none;
  background-color: var(--primary-color);
  color: white;
  font-weight: 600;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  &:hover {
    background-color: var(--primary-hover);
  }
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
`;

const List = styled.ul`
  list-style: none;
  padding: 0;
  margin: 0;
`;

const ListItem = styled.li`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px;
  border-radius: 8px;
  cursor: ${props => props.$clickable ? 'pointer' : 'default'};
  transition: background-color 0.2s ease;
  
  &:hover {
    background-color: var(--bg-main);
  }

  &:not(:last-child) {
    border-bottom: 1px solid var(--border-color);
  }
`;

const ListItemActions = styled.div`
  display: flex;
  align-items: center;
  gap: 10px;
`;

const DeleteButton = styled.button`
  background: none;
  border: none;
  color: var(--text-secondary);
  cursor: pointer;
  font-size: 1.1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 5px;
  &:hover { color: var(--red-color); }
`;

const ListItemText = styled.span`
  flex-grow: 1;
`;

function CategoryPage() {
    const [view, setView] = useState('categories');
    const [categories, setCategories] = useState([]);
    const [subCategories, setSubCategories] = useState([]);
    const [selectedCategory, setSelectedCategory] = useState(null);
    const [newCategoryName, setNewCategoryName] = useState('');
    const [newSubCategoryName, setNewSubCategoryName] = useState('');

    const fetchCategories = async () => {
        try {
            const res = await getCategories();
            setCategories(res.data);
        } catch (error) { toast.error("Gagal memuat kategori."); }
    };

    useEffect(() => { fetchCategories(); }, []);

    const handleSelectCategory = async (category) => {
        setSelectedCategory(category);
        try {
            const res = await getSubCategories(category.id);
            setSubCategories(res.data);
            setView('subcategories');
        } catch (error) { toast.error("Gagal memuat sub-kategori."); }
    };

    const handleBackToCategories = () => {
        setSelectedCategory(null);
        setSubCategories([]);
        setNewSubCategoryName('');
        setView('categories');
    };

    const handleCreateCategory = async (e) => {
        e.preventDefault();
        if (!newCategoryName.trim()) {
            toast.warn("Nama kategori tidak boleh kosong.");
            return;
        }
        await toast.promise(createCategory({name: newCategoryName}), {
            pending: 'Menyimpan...', success: 'Kategori dibuat!', error: 'Gagal membuat kategori.'
        });
        setNewCategoryName('');
        fetchCategories();
    };
    
    const handleCreateSubCategory = async (e) => {
        e.preventDefault();
        if (!newSubCategoryName.trim()) {
            toast.warn("Nama sub-kategori tidak boleh kosong.");
            return;
        }
        const subCategoryData = {
            name: newSubCategoryName,
        };
        await toast.promise(createSubCategory(selectedCategory.id, subCategoryData), {
            pending: 'Menyimpan...', success: 'Sub-kategori dibuat!', error: 'Gagal membuat sub-kategori.'
        });
        setNewSubCategoryName('');
        handleSelectCategory(selectedCategory);
    };
    
    const handleDeleteCategory = async (id) => {
        if (window.confirm("Yakin ingin menghapus kategori ini? Semua sub-kategori di dalamnya akan ikut terhapus.")) {
            await toast.promise(deleteCategory(id), {
                pending: 'Menghapus...', success: 'Kategori dihapus!', error: 'Gagal menghapus kategori.'
            });
            fetchCategories();
        }
    };

    const handleDeleteSubCategory = async (id) => {
        if (window.confirm("Yakin ingin menghapus sub-kategori ini?")) {
            await toast.promise(deleteSubCategory(id), {
                pending: 'Menghapus...', success: 'Sub-kategori dihapus!', error: 'Gagal menghapus sub-kategori.'
            });
            handleSelectCategory(selectedCategory);
        }
    };

    return (
        <PageContainer>
            <Panel>
                {view === 'categories' && (
                    <>
                        <PanelHeader><PanelTitle>Manajemen Kategori</PanelTitle></PanelHeader>
                        <Form onSubmit={handleCreateCategory}>
                            <Input
                                value={newCategoryName}
                                onChange={(e) => setNewCategoryName(e.target.value)}
                                placeholder="Nama kategori baru..."
                            />
                            <Button type="submit"><FiPlus /></Button>
                        </Form>
                        <List>
                            {categories.map(cat => (
                                <ListItem key={cat.id} $clickable onClick={() => handleSelectCategory(cat)}>
                                    <ListItemText>{cat.name}</ListItemText>
                                    <ListItemActions>
                                        <DeleteButton onClick={(e) => { e.stopPropagation(); handleDeleteCategory(cat.id); }}><FiTrash2 /></DeleteButton>
                                        <FiChevronRight />
                                    </ListItemActions>
                                </ListItem>
                            ))}
                        </List>
                    </>
                )}

                {view === 'subcategories' && selectedCategory && (
                    <>
                        <PanelHeader>
                            <PanelTitle>
                                <BackButton onClick={handleBackToCategories}><FiArrowLeft size={24} /></BackButton>
                                Sub-Kategori: {selectedCategory.name}
                            </PanelTitle>
                        </PanelHeader>
                        <Form onSubmit={handleCreateSubCategory}>
                            <Input
                                value={newSubCategoryName}
                                onChange={(e) => setNewSubCategoryName(e.target.value)}
                                placeholder="Nama sub-kategori..."
                            />
                            <Button type="submit"><FiPlus /></Button>
                        </Form>
                        <List>
                            {subCategories.map(sub => (
                                <ListItem key={sub.id}>
                                    <ListItemText>{sub.name}</ListItemText>
                                    <DeleteButton onClick={() => handleDeleteSubCategory(sub.id)}><FiTrash2 /></DeleteButton>
                                </ListItem>
                            ))}
                        </List>
                    </>
                )}
            </Panel>
        </PageContainer>
    );
}

export default CategoryPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\CustomerDetailPage.jsx =====

// frontend/src/pages/CustomerDetailPage.jsx

import React, { useState, useEffect, useCallback } from 'react';
import styled from 'styled-components';
import { useParams, Link } from 'react-router-dom';
import { getCustomerById, getCustomerHistory, redeemCustomerPoints } from '../services/api';
import { toast } from 'react-toastify';
import Skeleton from 'react-loading-skeleton';
import { FiArrowLeft, FiUser, FiAward, FiShoppingBag, FiGift } from 'react-icons/fi';

// --- Styled Components ---
const PageContainer = styled.div` padding: 30px; max-width: 1000px; margin: 0 auto; `;
const BackLink = styled(Link)` display: inline-flex; align-items: center; gap: 8px; color: var(--text-secondary); text-decoration: none; margin-bottom: 20px; font-weight: 500; &:hover { color: var(--text-primary); } `;
const Grid = styled.div` display: grid; grid-template-columns: 300px 1fr; gap: 30px; align-items: flex-start; @media (max-width: 768px) { grid-template-columns: 1fr; }`;
const InfoCard = styled.div` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); padding: 25px; `;
const CardTitle = styled.h3` font-size: 1.2rem; font-weight: 600; padding-bottom: 15px; margin: 0 0 20px 0; border-bottom: 1px solid var(--border-color); display: flex; align-items: center; gap: 10px; `;
const InfoText = styled.p` color: var(--text-secondary); margin: 0 0 10px 0; strong { color: var(--text-primary); }`;
const PointsDisplay = styled.div` text-align: center; margin: 20px 0; p { margin: 0; color: var(--text-secondary); } h2 { font-size: 2.5rem; color: var(--primary-color); margin: 5px 0 0 0; }`;
const Form = styled.form` display: flex; flex-direction: column; gap: 10px; `;
const Input = styled.input` width: 100%; padding: 10px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); `;
const Button = styled.button` padding: 10px 20px; border-radius: 8px; border: none; background-color: var(--primary-color); color: white; font-weight: 600; cursor: pointer; &:disabled { opacity: 0.5; } `;
const HistoryTableContainer = styled(InfoCard)` padding: 0; overflow: hidden; `;
const Table = styled.table` width: 100%; border-collapse: collapse; `;
const Th = styled.th` text-align: left; padding: 15px 20px; background-color: var(--bg-main); border-bottom: 1px solid var(--border-color); font-weight: 600; color: var(--text-secondary); font-size: 0.9rem; text-transform: uppercase; `;
const Td = styled.td` padding: 15px 20px; border-bottom: 1px solid var(--border-color); color: var(--text-primary); vertical-align: middle; `;
const Tr = styled.tr` &:last-child > td { border-bottom: none; } `;

function CustomerDetailPage() {
    const { id } = useParams();
    const [customer, setCustomer] = useState(null);
    const [history, setHistory] = useState([]);
    const [loading, setLoading] = useState(true);
    const [redeemAmount, setRedeemAmount] = useState('');
    const [redeemDesc, setRedeemDesc] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);

    const fetchData = useCallback(async () => {
        setLoading(true);
        try {
            const [customerRes, historyRes] = await Promise.all([
                getCustomerById(id),
                getCustomerHistory(id)
            ]);
            setCustomer(customerRes.data);
            setHistory(historyRes.data);
        } catch (error) {
            toast.error("Gagal memuat data pelanggan.");
        } finally {
            setLoading(false);
        }
    }, [id]);

    useEffect(() => {
        fetchData();
    }, [fetchData]);

    const handleRedeem = async (e) => {
        e.preventDefault();
        const pointsToRedeem = parseInt(redeemAmount, 10);
        if (isNaN(pointsToRedeem) || pointsToRedeem <= 0) {
            return toast.warn("Masukkan jumlah poin yang valid.");
        }
        if (!redeemDesc) {
            return toast.warn("Masukkan deskripsi/alasan penukaran.");
        }

        setIsSubmitting(true);
        try {
            await toast.promise(
                redeemCustomerPoints(id, { pointsToRedeem, description: redeemDesc }),
                {
                    pending: "Memproses penukaran...",
                    success: "Poin berhasil ditukarkan!",
                    error: (err) => err.response?.data?.message || "Gagal menukarkan poin."
                }
            );
            setRedeemAmount('');
            setRedeemDesc('');
            fetchData();
        } catch (error) {
            console.error(error);
        } finally {
            setIsSubmitting(false);
        }
    };

    if (loading) {
        return <PageContainer><Skeleton count={5} height={40} /></PageContainer>;
    }

    if (!customer) {
        return <PageContainer>Pelanggan tidak ditemukan.</PageContainer>;
    }

    return (
        <PageContainer>
            <BackLink to="/customers"><FiArrowLeft /> Kembali ke Daftar Pelanggan</BackLink>
            <Grid>
                <InfoCard>
                    <CardTitle><FiUser /> Detail Pelanggan</CardTitle>
                    <InfoText><strong>Nama:</strong> {customer.name}</InfoText>
                    <InfoText><strong>Telepon:</strong> {customer.phone || '-'}</InfoText>
                    <InfoText><strong>Email:</strong> {customer.email || '-'}</InfoText>
                    <InfoText><strong>Alamat:</strong> {customer.address || '-'}</InfoText>
                   
                    <CardTitle style={{marginTop: '30px'}}><FiAward /> Poin Loyalitas</CardTitle>
                    <PointsDisplay>
                        <p>Total Poin Saat Ini</p>
                        <h2>{customer.points}</h2>
                    </PointsDisplay>
                    
                    <Form onSubmit={handleRedeem}>
                        <Input type="number" value={redeemAmount} onChange={(e) => setRedeemAmount(e.target.value)} placeholder="Jumlah poin" required />
                        <Input value={redeemDesc} onChange={(e) => setRedeemDesc(e.target.value)} placeholder="Deskripsi (cth: Tukar Merchandise)" required />
                        <Button type="submit" disabled={isSubmitting}>{isSubmitting ? 'Memproses...' : 'Tukarkan Poin'}</Button>
                    </Form>
                </InfoCard>

                <HistoryTableContainer>
                    <CardTitle style={{padding: '25px', margin: 0}}><FiShoppingBag /> Riwayat Transaksi</CardTitle>
                    <div style={{overflowY: 'auto'}}>
                        <Table>
                            <thead>
                                <tr>
                                    <Th>Tanggal</Th>
                                    <Th>Total Belanja</Th>
                                    <Th>Poin Didapat</Th>
                                </tr>
                            </thead>
                            <tbody>
                                {history.length > 0 ? history.map(order => (
                                    <Tr key={order.id}>
                                        <Td>{new Date(order.created_at).toLocaleString('id-ID')}</Td>
                                        <Td>Rp {new Intl.NumberFormat('id-ID').format(order.total_amount)}</Td>
                                        <Td style={{color: 'var(--green-color)'}}>+{order.points_earned}</Td>
                                    </Tr>
                                )) : (
                                    <Tr><Td colSpan="3" style={{textAlign: 'center', padding: '50px 0'}}>Belum ada riwayat transaksi.</Td></Tr>
                                )}
                            </tbody>
                        </Table>
                    </div>
                </HistoryTableContainer>
            </Grid>
        </PageContainer>
    );
}

export default CustomerDetailPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\CustomerPage.jsx =====

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { getCustomers, createCustomer, updateCustomer, deleteCustomer } from '../services/api';
import CustomerFormModal from '../components/CustomerFormModal';
import { toast } from 'react-toastify';
import { FiEdit, FiTrash2, FiPlus, FiAward, FiPhone, FiMail, FiUsers } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';

// --- Styled Components ---
const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
    
    /* --- PERBAIKAN FINAL DI SINI --- */
    position: relative; 
    z-index: 2; 
    /* Menambahkan background solid sesuai warna halaman untuk menutupi elemen di belakangnya */
    background-color: var(--bg-main); 
    padding-bottom: 30px; /* Menambah padding agar tidak terlalu mepet */
    margin-bottom: 0; /* Margin dipindahkan ke padding */
`;

const Title = styled.h1`
    font-size: 1.8rem;
`;

const AddButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover { background-color: var(--primary-hover); }
`;
const GridWrapper = styled.div`
    position: relative;
    z-index: 1; 
    flex-grow: 1;
    overflow-y: auto;
    padding-top: 30px; /* Memberi jarak dari header */
`;

const CustomerGrid = styled.div`
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    padding-right: 10px;
`;

const CustomerCard = styled.div`
    background-color: var(--bg-surface);
    border-radius: 12px;
    border: 1px solid var(--border-color);
    padding: 20px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    transition: all 0.2s ease-in-out;
    cursor: pointer;
    &:hover {
        border-color: var(--primary-color);
        transform: translateY(-5px); /* Sedikit diperbesar efeknya */
        box-shadow: 0 6px 16px rgba(0,0,0,0.1);
    }
`;

const CardHeader = styled.div`
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 15px;
`;

const CustomerName = styled.h3`
    font-size: 1.1rem;
    font-weight: 600;
`;

const ActionButtons = styled.div`
    display: flex;
    gap: 10px;
`;

const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    &:hover { color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'}; }
`;

const CardBody = styled.div`
    display: flex;
    flex-direction: column;
    gap: 8px;
    margin-bottom: 15px;
`;

const InfoRow = styled.div`
    display: flex;
    align-items: center;
    gap: 8px;
    color: var(--text-secondary);
    font-size: 0.9rem;
`;

const CardFooter = styled.div`
    border-top: 1px solid var(--border-color);
    padding-top: 15px;
    margin-top: auto;
    display: flex;
    align-items: center;
    gap: 8px;
    color: var(--primary-color);
    font-weight: 600;
`;

const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px dashed var(--border-color);
`;

const EmptyStateTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-top: 20px;
    margin-bottom: 10px;
`;


function CustomerPage() {
    const [customers, setCustomers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingCustomer, setEditingCustomer] = useState(null);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const navigate = useNavigate();

    const fetchCustomers = async () => {
        setLoading(true);
        try {
            const res = await getCustomers();
            setCustomers(res.data);
        } catch (error) {
            toast.error("Gagal memuat data pelanggan.");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchCustomers();
    }, []);

    const handleOpenModal = (customer = null) => {
        setEditingCustomer(customer);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setEditingCustomer(null);
    };

    const handleSaveCustomer = async (customerData) => {
        setIsSubmitting(true);
        const promise = editingCustomer
            ? updateCustomer(editingCustomer.id, customerData)
            : createCustomer(customerData);
        try {
            await toast.promise(promise, {
                pending: 'Menyimpan data...',
                success: 'Data pelanggan berhasil disimpan!',
                error: 'Gagal menyimpan data.'
            });
            fetchCustomers();
        } catch (error) {
            console.error("Save customer failed:", error);
        } finally {
            setIsSubmitting(false);
            handleCloseModal();
        }
    };

    const handleDeleteCustomer = async (id) => {
        if (window.confirm('Yakin ingin menghapus pelanggan ini?')) {
            const promise = deleteCustomer(id);
            toast.promise(promise, {
                pending: 'Menghapus data...',
                success: 'Pelanggan berhasil dihapus!',
                error: 'Gagal menghapus data.'
            });
            try {
                await promise;
                fetchCustomers();
            } catch (error) {
                console.error("Delete customer failed:", error);
            }
        }
    };

    return (
        <PageContainer>
            <PageHeader>
                <Title>Manajemen Pelanggan</Title>
                <AddButton onClick={() => handleOpenModal()}>
                    <FiPlus /> Tambah Pelanggan
                </AddButton>
            </PageHeader>
            
            {loading ? (
                <GridWrapper>
                    <CustomerGrid>
                        {Array.from({ length: 6 }).map((_, index) => (
                            <Skeleton key={index} height={180} borderRadius={12} />
                        ))}
                    </CustomerGrid>
                </GridWrapper>
            ) : customers.length > 0 ? (
                <GridWrapper>
                    <CustomerGrid>
                        {customers.map(customer => (
                            <CustomerCard key={customer.id} onClick={() => navigate(`/customers/${customer.id}`)}>
                                <div>
                                    <CardHeader>
                                        <CustomerName>{customer.name}</CustomerName>
                                        <ActionButtons>
                                            <ActionButton onClick={(e) => { e.stopPropagation(); handleOpenModal(customer); }}><FiEdit size={16} /></ActionButton>
                                            <ActionButton $danger onClick={(e) => { e.stopPropagation(); handleDeleteCustomer(customer.id); }}><FiTrash2 size={16} /></ActionButton>
                                        </ActionButtons>
                                    </CardHeader>
                                    <CardBody>
                                        {customer.phone && <InfoRow><FiPhone size={14}/> {customer.phone}</InfoRow>}
                                        {customer.email && <InfoRow><FiMail size={14}/> {customer.email}</InfoRow>}
                                    </CardBody>
                                </div>
                                <CardFooter>
                                    <FiAward size={16}/> {customer.points || 0} Poin
                                </CardFooter>
                            </CustomerCard>
                        ))}
                    </CustomerGrid>
                </GridWrapper>
            ) : (
                <EmptyStateContainer>
                    <FiUsers size={48} />
                    <EmptyStateTitle>Belum Ada Pelanggan</EmptyStateTitle>
                    <p>Klik tombol di pojok kanan atas untuk menambahkan pelanggan pertama Anda.</p>
                </EmptyStateContainer>
            )}

            <CustomerFormModal 
                isOpen={isModalOpen}
                onClose={handleCloseModal}
                onSave={handleSaveCustomer}
                customer={editingCustomer}
                isSubmitting={isSubmitting}
            />
        </PageContainer>
    );
}

export default CustomerPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\DashboardPage.jsx =====


===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\expensespage.jsx =====

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { getExpenses, createExpense, updateExpense, deleteExpense } from '../services/api'; // Assuming this connects to your database
import { toast } from 'react-toastify';
import { FiPlus, FiEdit, FiTrash2, FiDollarSign } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';
import EditExpenseModal from '../components/EditExpenseModal';

// Styled Components
const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
`;

const Title = styled.h1`
    font-size: 1.8rem;
`;

const AddButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover { background-color: var(--primary-hover); }
`;

const TableContainer = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
`;

const TableWrapper = styled.div`
    overflow-x: auto;
    flex-grow: 1;
`;

const Table = styled.table`
    width: 100%;
    border-collapse: collapse;
`;

const Th = styled.th`
    text-align: left;
    padding: 15px 20px;
    background-color: var(--bg-main);
    border-bottom: 1px solid var(--border-color);
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.9rem;
    text-transform: uppercase;
`;

const Td = styled.td`
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    vertical-align: middle;
`;

const Tr = styled.tr`
    &:last-child > td {
        border-bottom: none;
    }
`;

const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    margin-right: 15px;
    &:hover { color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'}; }
`;

const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
`;

const EmptyStateTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-top: 20px;
    margin-bottom: 10px;
`;

function ExpensesPage() {
    const [expenses, setExpenses] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingExpense, setEditingExpense] = useState(null);
    const [isSubmitting, setIsSubmitting] = useState(false);

    const fetchExpenses = async () => {
        setLoading(true);
        try {
            const res = await getExpenses();
            setExpenses(res.data);
        } catch (error) {
            toast.error("Gagal memuat data pengeluaran.");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchExpenses();
    }, []);
    const handleOpenModal = (expense = null) => {
        setEditingExpense(expense);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setEditingExpense(null);
    };

    const handleSaveExpense = async (expenseData) => {
        setIsSubmitting(true);
        const promise = editingExpense
            ? updateExpense(editingExpense.id, expenseData)
            : createExpense(expenseData);

        try {
            await toast.promise(promise, {
                pending: 'Menyimpan data...',
                success: 'Data pengeluaran berhasil disimpan!',
                error: 'Gagal menyimpan data.'
            });
            fetchExpenses();
        } catch (err) {
            console.error(err);
        } finally {
            setIsSubmitting(false);
            handleCloseModal();
        }
    };

    const handleDeleteExpense = async (id) => {
        if (window.confirm('Yakin ingin menghapus pengeluaran ini?')) {
            await toast.promise(deleteExpense(id), {
                pending: 'Menghapus data...',
                success: 'Pengeluaran berhasil dihapus!',
                error: 'Gagal menghapus data.'
            });
            fetchExpenses();
        }
    };

    return (
        <PageContainer>
            <PageHeader>
                <Title>Manajemen Pengeluaran</Title>
                <AddButton onClick={() => handleOpenModal()}>
                    <FiPlus /> Catat Pengeluaran
                </AddButton>
            </PageHeader>
            
            <TableContainer>
                {loading ? (
                    <div style={{ padding: '20px' }}>
                        <Skeleton count={8} height={50} />
                    </div>
                ) : expenses.length > 0 ? (
                    <TableWrapper>
                        <Table>
                            <thead>
                                <tr>
                                    <Th>Tanggal</Th>
                                    <Th>Deskripsi</Th>
                                    <Th>Jumlah</Th>
                                    <Th>Dicatat Oleh</Th>
                                    <Th>Aksi</Th>
                                </tr>
                            </thead>
                            <tbody>
                                {expenses.map(expense => (
                                    <Tr key={expense.id}>
                                        <Td>{new Date(expense.created_at).toLocaleString('id-ID')}</Td>
                                        <Td>{expense.description}</Td>
                                        <Td>Rp {new Intl.NumberFormat('id-ID').format(expense.amount)}</Td>
                                        <Td>{expense.user_name}</Td>
                                        <Td>
                                            <ActionButton onClick={() => handleOpenModal(expense)}><FiEdit size={18} /></ActionButton>
                                            <ActionButton $danger onClick={() => handleDeleteExpense(expense.id)}><FiTrash2 size={18} /></ActionButton>
                                        </Td>
                                    </Tr>
                                ))}
                            </tbody>
                        </Table>
                    </TableWrapper>
                ) : (
                    <EmptyStateContainer>
                        <FiDollarSign size={48} />
                        <EmptyStateTitle>Belum Ada Pengeluaran</EmptyStateTitle>
                        <p>Klik tombol di pojok kanan atas untuk mencatat pengeluaran pertama Anda.</p>
                    </EmptyStateContainer>
                )}
            </TableContainer>

            <EditExpenseModal 
                isOpen={isModalOpen}
                onClose={handleCloseModal}
                onSave={handleSaveExpense}
                expense={editingExpense}
                isSubmitting={isSubmitting}
            />
        </PageContainer>
    );
}

export default ExpensesPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\ForgotPasswordPage.jsx =====

// frontend/src/pages/ForgotPasswordPage.jsx

import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { forgotPassword } from '../services/api';
import { toast } from 'react-toastify';
import { FiMail } from 'react-icons/fi';

// --- Styled Components (Sama seperti LoginPage) ---
const PageContainer = styled.div`
  display: flex;
  height: 100vh;
  width: 100vw;
  background-color: var(--bg-main);
  @media (max-width: 768px) {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
`;

const BrandingPanel = styled.div`
  flex: 1.2;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  padding: 60px;
  @media (max-width: 768px) {
    padding: 30px;
    align-items: center;
    text-align: center;
  }
`;

const BrandingContent = styled.div`
  max-width: 450px;
`;

const BrandingTitle = styled.h1`
  font-size: 3.5rem;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 15px;
  color: var(--primary-color);
  @media (max-width: 768px) {
    font-size: 2.5rem;
  }
`;

const BrandingSubtitle = styled.p`
  font-size: 1.2rem;
  font-weight: 300;
  color: var(--text-secondary);
  @media (max-width: 768px) {
    font-size: 1rem;
  }
`;

const FormPanel = styled.div`
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow-y: auto;
  padding: 20px 0;
  @media (max-width: 768px) {
    padding: 20px;
  }
`;

const FormBox = styled.div`
  width: 100%;
  max-width: 400px;
  padding: 40px;
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);
  @media (max-width: 768px) {
    padding: 30px;
  }
`;

const Title = styled.h2`
  font-size: 2.2rem;
  font-weight: 600;
  margin-bottom: 10px;
  color: var(--text-primary);
`;

const Subtitle = styled.p`
  color: var(--text-secondary);
  margin-bottom: 50px;
  font-size: 1rem;
`;

const Form = styled.form``;
const InputGroup = styled.div` margin-bottom: 25px; `;
const Label = styled.label` display: block; margin-bottom: 8px; font-weight: 500; color: var(--text-secondary); `;
const Input = styled.input` width: 100%; padding: 14px 18px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1rem; background-color: var(--bg-main); color: var(--text-primary); `;
const Button = styled.button` width: 100%; padding: 15px; background-color: var(--primary-color); color: white; border: none; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; &:hover { background-color: var(--primary-hover); } `;
const BackLink = styled(Link)` display: block; text-align: center; margin-top: 25px; color: var(--text-secondary); font-size: 0.9rem; text-decoration: none; &:hover { text-decoration: underline; } `;


function ForgotPasswordPage() {
  const [email, setEmail] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    try {
      const response = await forgotPassword({ email });
      toast.success(response.data.message);
    } catch (err) {
      toast.error(err.response?.data?.message || 'Terjadi kesalahan.');
    } finally {
        setIsSubmitting(false);
    }
  };

  return (
    <PageContainer>
        <BrandingPanel>
            <BrandingContent>
                <BrandingTitle>Lupa Password?</BrandingTitle>
                <BrandingSubtitle>Jangan khawatir, kami akan membantu Anda mendapatkan kembali akses ke akun Anda.</BrandingSubtitle>
            </BrandingContent>
        </BrandingPanel>
        <FormPanel>
            <FormBox>
                <Title>Atur Ulang Password</Title>
                <Subtitle>Masukkan email Anda untuk menerima link pemulihan.</Subtitle>
                <Form onSubmit={handleSubmit}>
                    <InputGroup>
                        <Label htmlFor="email">Alamat Email</Label>
                        <Input 
                        id="email" 
                        type="email" 
                        value={email} 
                        onChange={(e) => setEmail(e.target.value)} 
                        required 
                        autoFocus 
                        />
                    </InputGroup>
                    <Button type="submit" disabled={isSubmitting}>
                        <FiMail style={{ marginRight: '8px' }}/> 
                        {isSubmitting ? 'Mengirim...' : 'Kirim Link Reset'}
                    </Button>
                    <BackLink to="/login">Kembali ke Halaman Login</BackLink>
                </Form>
            </FormBox>
        </FormPanel>
    </PageContainer>
  );
}

export default ForgotPasswordPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\HistoryPage.jsx =====

// frontend/src/pages/HistoryPage.jsx

import React, { useState, useEffect, useCallback, useRef } from 'react';
import styled from 'styled-components';
import { getOrders, getOrderById, deleteOrder, exportOrders, clearOrderHistory } from '../services/api';
import { toast } from 'react-toastify';
import { useReactToPrint } from 'react-to-print';
import { FiEye, FiTrash2, FiDownload, FiAlertTriangle } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import OrderDetailModal from '../components/OrderDetailModal';
import Receipt from '../components/Receipt';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";

const PageContainer = styled.div` padding: 30px; height: 100%; display: flex; flex-direction: column; `;
const PageHeader = styled.header` display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; flex-shrink: 0; `;
const Title = styled.h1` font-size: 1.8rem; `;
const FilterContainer = styled.div` display: flex; gap: 15px; align-items: center; margin-bottom: 25px; flex-wrap: wrap; `;
const ExportButton = styled.button` background-color: var(--green-color); color: white; border: none; border-radius: 8px; padding: 10px 20px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; margin-left: auto; &:hover { opacity: 0.9; } &:disabled { opacity: 0.5; cursor: not-allowed; } `;
const TableContainer = styled.div` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); overflow: hidden; flex-grow: 1; display: flex; flex-direction: column; `;
const TableWrapper = styled.div` overflow-x: auto; flex-grow: 1; `;
const Table = styled.table` width: 100%; min-width: 800px; border-collapse: collapse; white-space: nowrap; `;
const Th = styled.th` text-align: left; padding: 15px 20px; background-color: var(--bg-main); border-bottom: 1px solid var(--border-color); font-weight: 600; color: var(--text-secondary); font-size: 0.9rem; text-transform: uppercase; `;
const Td = styled.td` padding: 15px 20px; border-bottom: 1px solid var(--border-color); color: var(--text-primary); vertical-align: middle; `;
const Tr = styled.tr` &:last-child { ${Td} { border-bottom: none; } } `;
const ActionButton = styled.button` background: none; border: none; cursor: pointer; color: var(--text-secondary); margin: 0 5px; &:hover { color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'}; } `;
const ClearHistoryButton = styled.button` background-color: var(--red-color); color: white; border: none; border-radius: 8px; padding: 10px 20px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; margin-left: 15px; &:hover { opacity: 0.9; } &:disabled { opacity: 0.5; cursor: not-allowed; } `;
const DatePickerWrapper = styled.div`
    .react-datepicker-wrapper input {
        padding: 10px 15px;
        border-radius: 8px;
        border: 1px solid var(--border-color);
        background-color: var(--bg-main);
        color: var(--text-primary);
        font-weight: 500;
        width: 130px;
        cursor: pointer;
        text-align: center;
    }
`;

function HistoryPage() {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [orderToPrint, setOrderToPrint] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [startDate, setStartDate] = useState(new Date(new Date().setDate(new Date().getDate() - 30)));
    const [endDate, setEndDate] = useState(new Date());
    
    const receiptRef = useRef();
    const handlePrint = useReactToPrint({
        content: () => receiptRef.current,
        documentTitle: `Struk-Pesanan-${orderToPrint?.id || ''}`,
        onAfterPrint: () => setOrderToPrint(null),
    });

    const handlePrintFromModal = async (orderId) => {
        try {
            const res = await getOrderById(orderId);
            setOrderToPrint(res.data);
        } catch (error) {
            console.error("Error preparing for print:", error);
            toast.error("Gagal menyiapkan data untuk dicetak.");
        }
    };
    
    useEffect(() => {
        if (orderToPrint) {
            const timer = setTimeout(() => {
                if (receiptRef.current) {
                    handlePrint();
                } else {
                    toast.error("Gagal mencetak: Komponen struk tidak siap.");
                }
            }, 500);
            return () => clearTimeout(timer);
        }
    }, [orderToPrint, handlePrint]);
    
    const fetchOrders = useCallback(async () => {
        setLoading(true);
        try {
            const res = await getOrders(startDate, endDate);
            setOrders(res.data);
        } catch (error) {
            if (error.response && error.response.status === 401) {
                toast.error("Sesi Anda telah berakhir. Silakan login kembali.");
            } else {
                toast.error("Gagal memuat riwayat transaksi.");
            }
            setOrders([]);
        } finally {
            setLoading(false);
        }
    }, [startDate, endDate]);

    useEffect(() => {
        fetchOrders();
    }, [fetchOrders]);
    
    const handleViewDetail = async (orderId) => {
        try {
            const res = await getOrderById(orderId);
            setSelectedOrder(res.data);
            setIsModalOpen(true);
        } catch (error) {
            toast.error("Gagal memuat detail pesanan.");
        }
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setSelectedOrder(null);
    };

    const handleDeleteOrder = async (orderId) => {
        if (window.confirm(`Yakin ingin menghapus pesanan #${orderId}? Stok akan dikembalikan.`)) {
            await toast.promise(deleteOrder(orderId), {
                pending: 'Menghapus pesanan...',
                success: 'Pesanan berhasil dihapus!',
                error: 'Gagal menghapus pesanan.'
            });
            fetchOrders();
        }
    };

    const handleExport = async () => {
        toast.info("Mempersiapkan data untuk diunduh...");
        try {
            const response = await exportOrders(startDate, endDate);
            const url = window.URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement('a');
            link.href = url;
            const fileName = `laporan-transaksi-${new Date().toISOString().slice(0, 10)}.csv`;
            link.setAttribute('download', fileName);
            document.body.appendChild(link);
            link.click();
            link.parentNode.removeChild(link);
            window.URL.revokeObjectURL(url);
            toast.success("Ekspor berhasil!");
        } catch (error) {
            console.error("Export error:", error);
            toast.error(error.response?.data?.message || "Gagal mengekspor data.");
        }
    };

    const handleClearHistory = async () => {
        if (window.confirm('PERINGATAN: Anda akan menghapus SELURUH riwayat transaksi. Aksi ini tidak dapat dibatalkan. Lanjutkan?')) {
            try {
                await toast.promise(clearOrderHistory(), {
                    pending: 'Menghapus seluruh riwayat...',
                    success: 'Seluruh riwayat berhasil dihapus!',
                    error: 'Gagal menghapus riwayat.'
                });
                fetchOrders();
            } catch (error) {
                console.error("Clear history error:", error);
            }
        }
    };

    return (
        <PageContainer>
            <PageHeader>
                <Title>Riwayat Transaksi</Title>
            </PageHeader>
            
            <FilterContainer>
                <span style={{fontWeight: 500}}>Filter Tanggal:</span>
                <DatePickerWrapper>
                    <DatePicker selected={startDate} onChange={(date) => setStartDate(date)} dateFormat="dd/MM/yyyy" maxDate={endDate} />
                </DatePickerWrapper>
                <span>sampai</span>
                <DatePickerWrapper>
                    <DatePicker selected={endDate} onChange={(date) => setEndDate(date)} dateFormat="dd/MM/yyyy" minDate={startDate} />
                </DatePickerWrapper>
                <ExportButton onClick={handleExport}><FiDownload size={16}/> Ekspor CSV</ExportButton>
                <ClearHistoryButton onClick={handleClearHistory}><FiAlertTriangle size={16}/> Hapus Riwayat</ClearHistoryButton>
            </FilterContainer>

            <TableContainer>
                <TableWrapper>
                    <Table>
                        <thead>
                            <tr>
                                <Th style={{width: '10%'}}>ID Pesanan</Th>
                                <Th style={{width: '25%'}}>Tanggal</Th>
                                <Th style={{width: '15%'}}>Kasir</Th>
                                <Th style={{width: '15%'}}>Pelanggan</Th>
                                <Th style={{width: '10%', textAlign: 'center'}}>Metode</Th>
                                <Th style={{width: '15%', textAlign: 'right'}}>Total</Th>
                                <Th style={{width: '10%', textAlign: 'center'}}>Aksi</Th>
                            </tr>
                        </thead>
                        <tbody>
                            {loading ? (
                                Array.from({ length: 10 }).map((_, index) => (
                                    <Tr key={index}>
                                        {[...Array(7)].map((_, i) => <Td key={i}><Skeleton /></Td>)}
                                    </Tr>
                                ))
                            ) : orders.length > 0 ? (
                                orders.map(order => (
                                    <Tr key={order.id}>
                                        <Td>#{order.id}</Td>
                                        <Td>{new Date(order.created_at).toLocaleString('id-ID')}</Td>
                                        <Td>{order.cashier_name}</Td>
                                        <Td>{order.customer_name || '-'}</Td>
                                        <Td style={{textAlign: 'center'}}>{order.payment_method}</Td>
                                        <Td style={{textAlign: 'right', fontWeight: 600}}>Rp {new Intl.NumberFormat('id-ID').format(order.total_amount)}</Td>
                                        <Td style={{textAlign: 'center'}}>
                                            <ActionButton onClick={() => handleViewDetail(order.id)}>
                                                <FiEye size={18} />
                                            </ActionButton>
                                            <ActionButton $danger onClick={() => handleDeleteOrder(order.id)}>
                                                <FiTrash2 size={18} />
                                            </ActionButton>
                                        </Td>
                                    </Tr>
                                ))
                            ) : (
                                <Tr>
                                    <Td colSpan="7" style={{textAlign: 'center', padding: '50px 0'}}>
                                        Tidak ada riwayat transaksi pada rentang tanggal ini.
                                    </Td>
                                </Tr>
                            )}
                        </tbody>
                    </Table>
                </TableWrapper>
            </TableContainer>

            {isModalOpen && selectedOrder && (
                <OrderDetailModal 
                    isOpen={isModalOpen}
                    onClose={handleCloseModal}
                    order={selectedOrder}
                    onPrint={handlePrintFromModal}
                />
            )}

            <div style={{ display: 'none' }}>
                <Receipt ref={receiptRef} order={orderToPrint} />
            </div>
        </PageContainer>
    );
}

export default HistoryPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\LoginPage.jsx =====

// frontend/src/pages/LoginPage.jsx

import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { loginUser } from '../services/api';
import { toast } from 'react-toastify';
import { FiLogIn } from 'react-icons/fi';

const PageContainer = styled.div`
  display: flex;
  height: 100vh;
  width: 100vw;
  background-color: var(--bg-main);
  @media (max-width: 768px) {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
`;

const BrandingPanel = styled.div`
  flex: 1.2;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  padding: 60px;

  @media (max-width: 768px) {
    padding: 30px;
    align-items: center;
    text-align: center;
  }
`;

const BrandingContent = styled.div`
  max-width: 450px;
`;

const BrandingTitle = styled.h1`
  font-size: 3.5rem;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 15px;
  color: var(--primary-color);

  @media (max-width: 768px) {
    font-size: 2.5rem;
  }
`;

const BrandingSubtitle = styled.p`
  font-size: 1.2rem;
  font-weight: 300;
  color: var(--text-secondary);

  @media (max-width: 768px) {
    font-size: 1rem;
  }
`;

const FormPanel = styled.div`
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow-y: auto;
  padding: 20px 0;

  @media (max-width: 768px) {
    padding: 20px;
  }
`;

const FormBox = styled.div`
  width: 100%;
  max-width: 400px;
  padding: 40px;
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);

  @media (max-width: 768px) {
    padding: 30px;
  }
`;

const Title = styled.h2`
  font-size: 2.2rem;
  font-weight: 600;
  margin-bottom: 10px;
  color: var(--text-primary);

  @media (max-width: 768px) {
    font-size: 1.8rem;
  }
`;

const Subtitle = styled.p`
  color: var(--text-secondary);
  margin-bottom: 50px;
  font-size: 1rem;

  @media (max-width: 768px) {
    margin-bottom: 30px;
  }
`;

const Form = styled.form``;

const InputGroup = styled.div`
  margin-bottom: 25px;
`;

const Label = styled.label`
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: var(--text-secondary);
`;

const Input = styled.input`
  width: 100%;
  padding: 14px 18px;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  font-size: 1rem;
  background-color: var(--bg-main);
  color: var(--text-primary);
`;

const Button = styled.button`
  width: 100%;
  padding: 15px;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  &:hover {
    background-color: var(--primary-hover);
  }
`;

// --- TAMBAHKAN STYLED COMPONENT BARU DI SINI ---
const LinksContainer = styled.div`
  text-align: center;
  margin-top: 25px;
  font-size: 0.9rem;
  color: var(--text-secondary);

  a {
    color: var(--primary-color);
    font-weight: 600;
    text-decoration: none;
    &:hover { text-decoration: underline; }
  }
`;
// --- AKHIR TAMBAHAN ---

function LoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (event) => {
    event.preventDefault();
    try {
      const userData = { email, password };
      const response = await loginUser(userData);
      localStorage.setItem('token', response.data.token);
      navigate('/pos', { replace: true });
    } catch (err) {
      console.error("Login Error:", err.response || err);
      // NEW: Improved error message for network issues
      toast.error(err.response?.data?.message || 'Terjadi kesalahan jaringan atau server tidak merespons.');
    }
  };

  return (
    <PageContainer>
      <BrandingPanel>
        <BrandingContent>
          <BrandingTitle>SmartPOS</BrandingTitle>
          <BrandingSubtitle>Solusi kasir modern untuk mengembangkan bisnis Anda.</BrandingSubtitle>
        </BrandingContent>
      </BrandingPanel>
      <FormPanel>
        <FormBox>
          <Title>Selamat Datang</Title>
          <Subtitle>Silakan login untuk melanjutkan.</Subtitle>
          <Form onSubmit={handleLogin}>
            <InputGroup>
              <Label htmlFor="email">Alamat Email</Label>
              <Input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} required autoFocus />
            </InputGroup>
            <InputGroup>
              <Label htmlFor="password">Password</Label>
              <Input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required />
            </InputGroup>
            <Button type="submit"><FiLogIn style={{ marginRight: '8px' }}/> Login</Button>
            
            {/* --- GANTI BAGIAN LINK DI SINI --- */}
            <LinksContainer>
              <Link to="/forgot-password">Lupa Password?</Link>
              <span style={{ margin: '0 10px' }}>|</span>
              <span>Belum punya akun? <Link to="/register">Daftar di sini</Link></span>
            </LinksContainer>
          </Form>
        </FormBox>
      </FormPanel>
    </PageContainer>
  );
}

export default LoginPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\PosPage.jsx =====

// frontend/src/pages/PosPage.jsx

import React, { useState, useEffect, useContext, useRef, useCallback } from 'react';
import styled from 'styled-components';
import { getProducts, createOrder, getOrderById, validateCoupon } from '../services/api';
import { FiPlus, FiMinus, FiSearch, FiTrash2, FiUser, FiPause, FiGrid, FiTag } from 'react-icons/fi';
import { motion, AnimatePresence } from 'framer-motion';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';
import { toast } from 'react-toastify';
import { useReactToPrint } from 'react-to-print';

// Import Komponen & Context
import PostCheckoutModal from '../components/PostCheckoutModal';
import CheckoutModal from '../components/CheckoutModal';
import CustomerSelectModal from '../components/CustomerSelectModal';
import VariantSelectModal from '../components/VariantSelectModal';
import HeldCartsModal from '../components/HeldCartsModal';
import Receipt from '../components/Receipt';
import StartShiftModal from '../components/StartShiftModal';
import { BusinessContext } from '../context/BusinessContext';
import { ShiftContext } from '../context/ShiftContext';

// --- Styled Components ---
const PageContainer = styled.div` padding: 30px; height: 100%; display: flex; flex-direction: column; `;
const PageGrid = styled.div` display: grid; grid-template-columns: 1fr 420px; gap: 30px; width: 100%; height: 100vh; padding: 30px; overflow: hidden; @media (max-width: 1024px) { grid-template-columns: 1fr; height: auto; overflow-y: auto; } @media (max-width: 768px) { padding: 15px; gap: 20px; } `;
const ProductsPanel = styled.div` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); display: flex; flex-direction: column; overflow: hidden; `;
const PanelHeader = styled.header` padding: 20px 25px; border-bottom: 1px solid var(--border-color); flex-shrink: 0; `;
const SearchContainer = styled.div` position: relative; width: 100%; max-width: 450px; `;
const SearchIcon = styled(FiSearch)` position: absolute; top: 50%; left: 15px; transform: translateY(-50%); color: var(--text-placeholder); `;
const SearchInput = styled.input` width: 100%; padding: 12px 20px 12px 45px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1rem; background-color: var(--bg-main); color: var(--text-primary); &:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2); } `;
const ProductGrid = styled(motion.div)` flex-grow: 1; padding: 25px; display: grid; grid-template-columns: repeat(auto-fill, minmax(170px, 1fr)); gap: 22px; overflow-y: auto; `;
const ProductCard = styled(motion.div)` background-color: var(--bg-surface); border-radius: 12px; border: 1px solid var(--border-color); overflow: hidden; display: flex; flex-direction: column; position: relative; cursor: ${(props) => (props.$disabled ? 'not-allowed' : 'pointer')}; opacity: ${(props) => (props.$disabled ? 0.5 : 1)}; transition: all 0.2s ease-in-out; &:hover:not([disabled]) { border-color: var(--primary-color); transform: translateY(-4px); box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08); } `;
const ProductImage = styled.div` width: 100%; padding-top: 100%; background-image: url(${(props) => props.src}); background-size: cover; background-position: center; `;
const ProductInfo = styled.div` padding: 5px 15px 10px; text-align: left; flex-grow: 1; display: flex; flex-direction: column; border-top: 1px solid var(--border-color); `;
const ProductName = styled.h4` margin: 0 0 2px 0; font-size: 0.9rem; font-weight: 500; color: var(--text-primary); line-height: 1.2em; max-height: 2.4em; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; white-space: normal; `;
const ProductPrice = styled.p` margin: 0; padding-top: 2px; color: var(--primary-color); font-weight: 600; font-size: 1rem; `;
const CartPanel = styled.aside` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); display: flex; flex-direction: column; padding: 0; overflow: hidden; `;
const CartHeader = styled.div` padding: 20px 25px; flex-shrink: 0; border-bottom: 1px solid var(--border-color); `;
const PanelTitle = styled.h1` font-size: 1.5rem; font-weight: 600; color: var(--text-primary); `;
const CartItemsList = styled.ul` list-style: none; padding: 0 25px; margin: 0; flex-grow: 1; overflow-y: auto; `;
const CartItem = styled(motion.li)` display: flex; align-items: center; gap: 15px; padding: 15px 0; border-bottom: 1px solid var(--border-color); `;
const CartItemImage = styled.img` width: 50px; height: 50px; border-radius: 8px; object-fit: cover; `;
const CartItemDetails = styled.div` flex-grow: 1; `;
const CartItemName = styled.span` display: block; font-weight: 500; font-size: 0.9rem; `;
const CartItemPrice = styled.small` color: var(--text-secondary); `;
const CartItemControls = styled.div` display: flex; align-items: center; background-color: var(--bg-main); border: 1px solid var(--border-color); border-radius: 8px; padding: 4px; `;
const ControlButton = styled.button` width: 24px; height: 24px; border: none; background: none; color: var(--text-primary); cursor: pointer; `;
const QuantityDisplay = styled.span` padding: 0 8px; font-weight: 500; font-size: 0.9rem; `;
const RemoveItemButton = styled.button` background: none; border: none; color: var(--text-secondary); cursor: pointer; &:hover { color: var(--red-color); } `;
const CheckoutSection = styled.div` padding: 20px 25px; border-top: 1px solid var(--border-color); background-color: var(--bg-surface); margin-top: auto; flex-shrink: 0; `;
const TotalRow = styled.div` display: flex; justify-content: space-between; font-weight: 500; margin-bottom: 10px; & span:last-child { font-weight: 600; font-size: 1.1rem; } `;
const CheckoutButton = styled(motion.button)` width: 100%; padding: 15px; background-color: var(--primary-color); color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 1rem; font-weight: 600; `;
const CustomerInfo = styled.div` padding: 20px 25px; border-bottom: 1px solid var(--border-color); display: flex; justify-content: space-between; align-items: center; color: var(--text-secondary); flex-shrink: 0; `;
const CustomerButton = styled.button` display: flex; align-items: center; gap: 8px; background: none; border: 1px solid var(--border-color); padding: 8px 15px; border-radius: 8px; cursor: pointer; color: var(--text-primary); &:hover { background-color: var(--bg-main); } `;
const RemoveCustomerLink = styled.button` margin-left: 10px; background: none; border: none; color: var(--red-color); cursor: pointer; text-decoration: underline; `;
const CartActions = styled.div` display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 20px; `;
const ActionButton = styled.button` display: flex; align-items: center; justify-content: center; gap: 8px; padding: 10px; border-radius: 8px; font-weight: 600; cursor: pointer; border: 1px solid var(--border-color); background-color: var(--bg-surface); color: var(--text-primary); position: relative; &:hover { background-color: var(--bg-main); } `;
const Badge = styled.span` position: absolute; top: -5px; right: -5px; background-color: var(--red-color); color: white; border-radius: 50%; width: 20px; height: 20px; font-size: 0.7rem; display: flex; align-items: center; justify-content: center; `;
const SkeletonCard = () => ( <div style={{ border: '1px solid var(--border-color)', borderRadius: '12px', overflow: 'hidden' }}><Skeleton height={136} /><div style={{ padding: '15px' }}><Skeleton height={20} style={{ marginBottom: '8px' }} count={2} /><Skeleton height={24} width="60%" style={{ marginTop: '8px' }} /></div></div> );
const PromoSection = styled.div` display: flex; gap: 10px; margin-bottom: 20px; `;
const PromoInput = styled.input` flex-grow: 1; padding: 10px 15px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); `;


function PosPage() {
    const [products, setProducts] = useState([]);
    const [cart, setCart] = useState([]);
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [lastOrderId, setLastOrderId] = useState(null);
    const [isPostCheckoutOpen, setIsPostCheckoutOpen] = useState(false);
    const [isCheckoutModalOpen, setIsCheckoutModalOpen] = useState(false);
    const [isCustomerModalOpen, setIsCustomerModalOpen] = useState(false);
    const [selectedCustomer, setSelectedCustomer] = useState(null);
    const [isVariantModalOpen, setIsVariantModalOpen] = useState(false);
    const [selectedProductForVariant, setSelectedProductForVariant] = useState(null);
    const [isHeldCartsModalOpen, setIsHeldCartsModalOpen] = useState(false);
    const { settings } = useContext(BusinessContext);
    const { activeShift, isLoadingShift, refreshShiftStatus } = useContext(ShiftContext);
    const [heldCarts, setHeldCarts] = useState(() => { const saved = localStorage.getItem('heldCarts'); return saved ? JSON.parse(saved) : []; });
    const [couponCode, setCouponCode] = useState('');
    const [appliedDiscount, setAppliedDiscount] = useState(null);

    const [orderToPrint, setOrderToPrint] = useState(null);
    const receiptRef = useRef();
    const handlePrint = useReactToPrint({
        content: () => receiptRef.current,
        documentTitle: `Struk-Pesanan-${orderToPrint?.id || ''}`,
        onAfterPrint: () => setOrderToPrint(null),
    });

    const handlePrintReceipt = useCallback(async (orderId) => {
        try {
            const res = await getOrderById(orderId);
            setOrderToPrint(res.data);
        } catch (error) {
            toast.error("Gagal memuat data struk untuk dicetak.");
            console.error('Fetch receipt error:', error);
        }
    }, []);

    useEffect(() => {
        if (orderToPrint) {
            const timer = setTimeout(() => {
                if (receiptRef.current) {
                    handlePrint();
                } else {
                    toast.error("Gagal mencetak: Komponen struk tidak siap.");
                }
            }, 500);
            return () => clearTimeout(timer);
        }
    }, [orderToPrint, handlePrint]);
    
    useEffect(() => { localStorage.setItem('heldCarts', JSON.stringify(heldCarts)); }, [heldCarts]);

    useEffect(() => {
        const fetchProductData = async () => {
            setLoading(true);
            try {
                const productsRes = await getProducts();
                setProducts(productsRes.data);
            } catch (error) {
                toast.error("Gagal memuat data produk.");
            } finally {
                setLoading(false);
            }
        };
        fetchProductData();
    }, []);
    
    const addToCart = useCallback((product, variant) => {
        const fullProduct = products.find((p) => p.id === product.id);
        if (!fullProduct) { toast.error('Produk tidak ditemukan.'); return; }

        const cartItemId = `${product.id}-${variant.id}`;
        const existingItem = cart.find((item) => item.cartItemId === cartItemId);
        
        const totalProductStock = fullProduct.stock;
        const totalOfThisProductInCart = cart
            .filter(item => item.productId === product.id)
            .reduce((sum, item) => sum + item.quantity, 0);

        if (totalOfThisProductInCart >= totalProductStock) {
            toast.warn(`Stok total untuk ${product.name} tidak mencukupi!`);
            return;
        }

        if (existingItem) {
            setCart(cart.map((item) => (item.cartItemId === cartItemId ? { ...item, quantity: item.quantity + 1 } : item)));
        } else {
            const newItem = { cartItemId, productId: product.id, variantId: variant.id, name: `${product.name} (${variant.name})`, price: variant.price, image_url: product.image_url, quantity: 1 };
            setCart(prevCart => [...prevCart, newItem]);
        }
    }, [cart, products]);

    const handleProductClick = useCallback((product) => {
        if (product.stock <= 0) { toast.warn(`Stok total untuk ${product.name} habis.`); return; }
        if (product.variants && product.variants.length > 1) { setSelectedProductForVariant(product); setIsVariantModalOpen(true); }
        else if (product.variants && product.variants.length === 1) { const soleVariant = product.variants[0]; addToCart(product, soleVariant); }
        else { toast.warn('Produk ini tidak memiliki varian yang tersedia.'); }
    }, [addToCart]);
    
    const handleSelectVariant = (product, variant) => {
        if (!product || !variant) {
            toast.error('Gagal memilih varian.');
            return;
        }
        addToCart(product, variant);
        setIsVariantModalOpen(false);
    };

    const processBarcode = useCallback(async (scannedBarcode) => {
        try {
            const res = await getProducts(scannedBarcode);
            const foundProducts = res.data;

            if (foundProducts.length === 0) {
                toast.error(`Produk dengan barcode "${scannedBarcode}" tidak ditemukan.`);
                return;
            }

            const product = foundProducts[0];
            const variant = product.variants.find(v => v.barcode === scannedBarcode);
            
            if (product.stock <= 0) {
                toast.warn(`Stok untuk produk ${product.name} habis.`);
                return;
            }

            if (variant) {
                addToCart(product, variant);
                toast.success(`${product.name} (${variant.name}) ditambahkan.`);
            } else {
                handleProductClick(product);
            }

        } catch (error) {
            toast.error("Gagal memproses barcode.");
            console.error("Barcode processing error:", error);
        }
    }, [addToCart, handleProductClick]);

    useEffect(() => {
        let barcode = '';
        let lastKeyTime = Date.now();
        const handleKeyDown = (e) => {
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
            if (Date.now() - lastKeyTime > 100) barcode = '';
            
            if (e.key === 'Enter') {
                if (barcode.length > 3) {
                    e.preventDefault();
                    processBarcode(barcode);
                }
                barcode = '';
                return;
            }
            if (e.key.length === 1) barcode += e.key;
            lastKeyTime = Date.now();
        };
        document.addEventListener('keydown', handleKeyDown);
        return () => document.removeEventListener('keydown', handleKeyDown);
    }, [processBarcode]);

    const increaseQuantity = (cartItemId) => {
        const itemInCart = cart.find((item) => item.cartItemId === cartItemId);
        if (!itemInCart) return;
        const fullProduct = products.find((p) => p.id === itemInCart.productId);
        if (!fullProduct) { toast.error('Produk tidak ditemukan.'); return; }
        const totalOfThisProductInCart = cart.filter(item => item.productId === itemInCart.productId).reduce((sum, item) => sum + item.quantity, 0);
        if (totalOfThisProductInCart >= fullProduct.stock) { toast.warn(`Stok total untuk ${fullProduct.name} tidak mencukupi!`); return; }
        setCart(cart.map((item) => (item.cartItemId === cartItemId ? { ...item, quantity: item.quantity + 1 } : item)));
    };
    const decreaseQuantity = (cartItemId) => {
        const existingItem = cart.find((item) => item.cartItemId === cartItemId);
        if (existingItem && existingItem.quantity > 1) {
            setCart(cart.map((item) => (item.cartItemId === cartItemId ? { ...item, quantity: item.quantity - 1 } : item)));
        } else {
            removeFromCart(cartItemId);
        }
    };
    const removeFromCart = (cartItemId) => { setCart(cart.filter((item) => item.cartItemId !== cartItemId)); };
    
    const handleApplyCoupon = async () => {
        if (!couponCode.trim()) return toast.warn("Masukkan kode promo.");
        try {
            const res = await validateCoupon(couponCode);
            setAppliedDiscount(res.data);
            toast.success(`Promo "${res.data.name}" berhasil diterapkan!`);
        } catch (error) {
            setAppliedDiscount(null);
            toast.error(error.response?.data?.message || "Gagal menerapkan promo.");
        }
    };
    
    const removeDiscount = () => {
        setAppliedDiscount(null);
        setCouponCode('');
        toast.info("Promo dibatalkan.");
    };
    
    const cartTotal = cart.reduce((total, item) => total + item.price * item.quantity, 0);
    
    let discountAmount = 0;
    if (appliedDiscount) {
        if (appliedDiscount.type === 'percentage') {
            discountAmount = cartTotal * (parseFloat(appliedDiscount.value) / 100);
        } else {
            discountAmount = parseFloat(appliedDiscount.value);
        }
    }
    const finalTotal = cartTotal - discountAmount;

    const handleCheckout = async (checkoutData) => {
        if (cart.length === 0) { toast.warn('Keranjang kosong, tidak bisa checkout.'); return; }
        const orderData = {
            items: cart.map((item) => ({ variantId: item.variantId, quantity: item.quantity })),
            customer_id: selectedCustomer ? selectedCustomer.id : null,
            payment_method: checkoutData.paymentMethod,
            amount_paid: checkoutData.amountPaid,
            subtotal_amount: cartTotal,
            tax_amount: checkoutData.taxAmount,
            total_amount: checkoutData.finalTotal,
            promotion_id: appliedDiscount ? appliedDiscount.id : null,
            discount_amount: discountAmount
        };
        try {
            const res = await toast.promise(createOrder(orderData), {
                pending: 'Memproses transaksi...',
                success: 'Transaksi berhasil!',
                error: (err) => `Gagal checkout: ${err.response?.data?.message || 'Server error'}`,
            });
            setLastOrderId(res.data.orderId);
            setIsPostCheckoutOpen(true);
            setIsCheckoutModalOpen(false);
            setAppliedDiscount(null);
            setCouponCode('');
        } catch (err) {
            console.error('Checkout error:', err);
        }
    };

    const handleClosePostCheckoutModal = () => {
        setIsPostCheckoutOpen(false);
        setCart([]);
        setSelectedCustomer(null);
        setAppliedDiscount(null);
        setCouponCode('');
    };
    const handleSelectCustomer = (customer) => { setSelectedCustomer(customer); setIsCustomerModalOpen(false); };
    const handleHoldCart = () => { if (cart.length === 0) { toast.warn('Keranjang kosong, tidak bisa ditahan.'); return; } const newHeldCart = { id: new Date().toISOString(), items: cart, customer: selectedCustomer }; setHeldCarts((prev) => [...prev, newHeldCart]); setCart([]); setSelectedCustomer(null); toast.info('Keranjang berhasil ditahan.'); };
    const handleResumeCart = (cartId) => { const cartToResume = heldCarts.find((c) => c.id === cartId); if (cartToResume) { setCart(cartToResume.items); setSelectedCustomer(cartToResume.customer); setHeldCarts(heldCarts.filter((c) => c.id !== cartId)); setIsHeldCartsModalOpen(false); toast.success('Keranjang berhasil dilanjutkan.'); } };
    const handleDeleteHeldCart = (cartId) => { setHeldCarts(heldCarts.filter((c) => c.id !== cartId)); toast.warn('Keranjang yang ditahan telah dihapus.'); };

    const filteredProducts = products.filter((p) => {
        const term = searchTerm.toLowerCase();
        if (!term) return true;
        const nameMatch = p.name.toLowerCase().includes(term);
        const barcodeMatch = p.variants.some(v => v.barcode && v.barcode.toLowerCase().includes(term));
        return nameMatch || barcodeMatch;
    });

    if (isLoadingShift) {
        return <PageContainer><Skeleton height="80vh" /></PageContainer>;
    }

    if (!activeShift) {
        return <StartShiftModal onShiftStarted={refreshShiftStatus} />;
    }

    return (
        <>
            <PageGrid>
                <ProductsPanel>
                    <PanelHeader><SearchContainer><SearchIcon size={18} /><SearchInput placeholder="Cari nama produk atau barcode..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} /></SearchContainer></PanelHeader>
                    {loading ? ( <ProductGrid> {Array.from({ length: 12 }).map((_, index) => ( <SkeletonCard key={index} /> ))} </ProductGrid> ) : (
                        <ProductGrid>
                            {filteredProducts.map((product) => (
                                <ProductCard key={product.id} $disabled={product.stock <= 0} onClick={() => handleProductClick(product)}>
                                    <ProductImage src={product.image_url || `https://placehold.co/200`} />
                                    <ProductInfo>
                                        <ProductName>{product.name}</ProductName>
                                        <ProductPrice>{product.variants && product.variants.length > 0 ? `Mulai Rp ${new Intl.NumberFormat('id-ID').format(Math.min(...product.variants.map((v) => v.price)))}` : 'Tidak tersedia'}</ProductPrice>
                                    </ProductInfo>
                                </ProductCard>
                            ))}
                        </ProductGrid>
                    )}
                </ProductsPanel>
                <CartPanel>
                    <CartHeader><PanelTitle>Pesanan</PanelTitle></CartHeader>
                    <CustomerInfo>
                        {selectedCustomer ? ( <div> <span style={{ fontWeight: 500, color: 'var(--text-primary)' }}>{selectedCustomer.name}</span> <RemoveCustomerLink onClick={() => setSelectedCustomer(null)}>Hapus</RemoveCustomerLink> </div> ) : ( <span>Pelanggan Umum</span> )}
                        <CustomerButton onClick={() => setIsCustomerModalOpen(true)}><FiUser size={16} /> {selectedCustomer ? 'Ganti' : 'Pilih'}</CustomerButton>
                    </CustomerInfo>
                    <CartItemsList>
                        <AnimatePresence>
                            {cart.length === 0 && ( <p style={{ textAlign: 'center', color: 'var(--text-secondary)', padding: '20px' }}> Keranjang Anda kosong. </p> )}
                            {cart.map((item) => (
                                <CartItem key={item.cartItemId} layout>
                                    <CartItemImage src={item.image_url || 'https://placehold.co/100'} />
                                    <CartItemDetails><CartItemName>{item.name}</CartItemName><CartItemPrice>Rp {new Intl.NumberFormat('id-ID').format(item.price)}</CartItemPrice></CartItemDetails>
                                    <CartItemControls><ControlButton onClick={() => decreaseQuantity(item.cartItemId)}><FiMinus size={16} /></ControlButton><QuantityDisplay>{item.quantity}</QuantityDisplay><ControlButton onClick={() => increaseQuantity(item.cartItemId)}><FiPlus size={16} /></ControlButton></CartItemControls>
                                    <RemoveItemButton onClick={() => removeFromCart(item.cartItemId)}><FiTrash2 size={18} /></RemoveItemButton>
                                </CartItem>
                            ))}
                        </AnimatePresence>
                    </CartItemsList>
                    <CheckoutSection>
                        <CartActions><ActionButton onClick={handleHoldCart}><FiPause /> Tahan</ActionButton><ActionButton onClick={() => setIsHeldCartsModalOpen(true)}><FiGrid /> Lihat Keranjang {heldCarts.length > 0 && <Badge>{heldCarts.length}</Badge>}</ActionButton></CartActions>
                        <PromoSection>
                            <PromoInput placeholder="Kode Promo" value={couponCode} onChange={(e) => setCouponCode(e.target.value)} disabled={!!appliedDiscount} />
                            {appliedDiscount ? (<ActionButton onClick={removeDiscount}><FiTrash2/> Batal</ActionButton>) : (<ActionButton onClick={handleApplyCoupon}><FiTag/> Terapkan</ActionButton>)}
                        </PromoSection>
                        {cart.length > 0 && ( <> <TotalRow> <span>Subtotal</span> <span>Rp {new Intl.NumberFormat('id-ID').format(cartTotal)}</span> </TotalRow> {appliedDiscount && (<TotalRow style={{color: 'var(--green-color)'}}><span>Diskon ({appliedDiscount.name})</span><span>- Rp {new Intl.NumberFormat('id-ID').format(discountAmount)}</span></TotalRow>)} <TotalRow> <span>Total Akhir</span> <span>Rp {new Intl.NumberFormat('id-ID').format(finalTotal)}</span> </TotalRow> <CheckoutButton onClick={() => setIsCheckoutModalOpen(true)}>Bayar Sekarang</CheckoutButton> </> )}
                    </CheckoutSection>
                </CartPanel>
            </PageGrid>

            <CheckoutModal isOpen={isCheckoutModalOpen} onClose={() => setIsCheckoutModalOpen(false)} cartTotal={finalTotal} onConfirmCheckout={handleCheckout} paymentMethods={settings.payment_methods} taxRate={settings.tax_rate} />
            <PostCheckoutModal isOpen={isPostCheckoutOpen} onClose={handleClosePostCheckoutModal} orderId={lastOrderId} onPrint={handlePrintReceipt} />
            <CustomerSelectModal isOpen={isCustomerModalOpen} onClose={() => setIsCustomerModalOpen(false)} onSelectCustomer={handleSelectCustomer} />
            <VariantSelectModal isOpen={isVariantModalOpen} onClose={() => setIsVariantModalOpen(false)} product={selectedProductForVariant} onSelectVariant={handleSelectVariant} />
            <HeldCartsModal isOpen={isHeldCartsModalOpen} onClose={() => setIsHeldCartsModalOpen(false)} heldCarts={heldCarts} onResume={handleResumeCart} onDelete={handleDeleteHeldCart} />
            
            <div style={{ display: 'none' }}>
           <Receipt ref={receiptRef} order={orderToPrint} />
            </div>
        </>
    );
}

export default PosPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\ProductFormPage.jsx =====

// frontend/src/pages/ProductFormPage.jsx

import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { getCategories, getSubCategories, getSuppliers, getProductById, createProduct, updateProduct, uploadImage } from '../services/api';
import { toast } from 'react-toastify';
import { FiSave, FiPlus, FiTrash2, FiArrowLeft, FiUpload } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';

const formatCurrency = (value) => {
    if (value === null || value === undefined || value === '') return '';
    const number = parseFloat(value);
    if (isNaN(number)) return String(value);
    return `Rp ${new Intl.NumberFormat('id-ID').format(number)}`;
};
const parseCurrency = (value) => {
    if (typeof value !== 'string') return value;
    const cleanValue = value.replace(/Rp\s?|\./g, '').replace(/,/g, '.');
    const parsed = parseFloat(cleanValue);
    return isNaN(parsed) ? value : parsed;
};

// --- Styled Components ---
const PageContainer = styled.div` padding: 30px; max-width: 900px; margin: 0 auto; `;
const PageHeader = styled.header` display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; `;
const Title = styled.h1` font-size: 1.8rem; `;
const BackLink = styled(Link)` display: inline-flex; align-items: center; gap: 8px; color: var(--text-secondary); text-decoration: none; margin-bottom: 20px; font-weight: 500; &:hover { color: var(--text-primary); } `;
const Form = styled.form` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); padding: 25px; `;
const FormGrid = styled.div` display: grid; grid-template-columns: repeat(3, 1fr); gap: 18px 20px; `;
const InputGroup = styled.div` grid-column: ${props => props.$fullWidth ? '1 / -1' : 'span 1'}; `;
const Label = styled.label` display: block; margin-bottom: 8px; font-weight: 500; font-size: 0.9rem; color: var(--text-secondary); `;
const Input = styled.input` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; &[type="number"] { -moz-appearance: textfield; } &::-webkit-outer-spin-button, &::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; } `;
const FileInputContainer = styled.div` display: flex; gap: 10px; align-items: center; width: 100%; `;
const UploadButton = styled.button` background-color: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 12px 15px; font-weight: 600; display: flex; align-items: center; gap: 5px; cursor: pointer; flex-shrink: 0; &:hover { background-color: var(--primary-hover); } &:disabled { opacity: 0.5; cursor: not-allowed; } `;
const FileInput = styled.input` display: none; `;
const Select = styled.select` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; appearance: none; background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E"); background-repeat: no-repeat; background-position: right 12px center; background-size: 20px; &:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2); } `;
const VariantSection = styled.div` grid-column: 1 / -1; border-top: 1px solid var(--border-color); margin-top: 10px; padding-top: 20px; `;
// <-- PERUBAHAN BARCODE 1: Menambah satu kolom untuk Barcode (menjadi 5 kolom + tombol)
const VariantRow = styled.div` display: grid; grid-template-columns: 2fr 1fr 1fr 1.5fr 50px; gap: 15px; align-items: center; margin-bottom: 10px; `;
const AddVariantButton = styled.button` display: flex; align-items: center; gap: 5px; background-color: var(--primary-color); color: white; padding: 8px 15px; border-radius: 8px; border: none; cursor: pointer; font-weight: 500; margin-top: 10px; &:hover { opacity: 0.9; } `;
const ActionButton = styled.button` background: none; border: none; cursor: pointer; color: var(--red-color); `;
const FormFooter = styled.div` padding-top: 25px; margin-top: 25px; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; `;
const SaveButton = styled.button` background-color: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 12px 25px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; &:hover { background-color: var(--primary-hover); } &:disabled { opacity: 0.5; cursor: not-allowed; } `;

function ProductFormPage() {
    const { id } = useParams();
    const navigate = useNavigate();
    const isEditing = Boolean(id);
    const fileInputRef = useRef(null);

    const [formData, setFormData] = useState({
        name: '',
        description: '',
        category_id: '',
        sub_category_id: '',
        supplier_id: '',
        stock: 0,
        image_url: '',
        expiration_date: '',
        // <-- PERUBAHAN BARCODE 2: Menambahkan 'barcode' ke state awal varian
        variants: [{ name: 'Reguler', price: '', cost_price: '', barcode: '' }]
    });

    const [categories, setCategories] = useState([]);
    const [subCategories, setSubCategories] = useState([]);
    const [suppliers, setSuppliers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [selectedFile, setSelectedFile] = useState(null);

    const fetchProductData = useCallback(async () => {
        if (isEditing) {
            try {
                const res = await getProductById(id);
                const product = res.data;
                if (product.category_id) {
                    const subCatRes = await getSubCategories(product.category_id);
                    setSubCategories(subCatRes.data);
                }
                setFormData({
                    name: product.name || '',
                    description: product.description || '',
                    category_id: product.category_id || '',
                    sub_category_id: product.sub_category_id || '',
                    supplier_id: product.supplier_id || '',
                    stock: product.stock || 0,
                    image_url: product.image_url || '',
                    expiration_date: product.expiration_date ? new Date(product.expiration_date).toISOString().split('T')[0] : '',
                    variants: product.variants && product.variants.length > 0
                        ? product.variants.map(v => ({
                            id: v.id,
                            name: v.name || '',
                            price: v.price !== undefined ? v.price : '',
                            cost_price: v.cost_price !== undefined ? v.cost_price : '',
                            barcode: v.barcode || '', // <-- PERUBAHAN BARCODE 3: Membaca data barcode
                          }))
                        : [{ name: 'Reguler', price: '', cost_price: '', barcode: '' }]
                });
            } catch (error) {
                console.error("Error fetching product data:", error);
                toast.error("Gagal memuat data produk. Mungkin produk tidak ditemukan.");
                navigate('/products');
            } finally {
                setLoading(false);
            }
        } else {
            setLoading(false);
        }
    }, [id, isEditing, navigate]);

    useEffect(() => {
        const fetchDropdownData = async () => {
            try {
                const [catRes, supRes] = await Promise.all([getCategories(), getSuppliers()]);
                setCategories(catRes.data);
                setSuppliers(supRes.data);
            } catch (error) {
                toast.error("Gagal memuat data kategori atau pemasok.");
            }
        };
        fetchDropdownData();
        fetchProductData();
    }, [fetchProductData]);

    useEffect(() => {
        if (formData.category_id) {
            getSubCategories(formData.category_id)
                .then(res => setSubCategories(res.data))
                .catch(err => toast.error("Gagal memuat sub-kategori."));
        } else {
            setSubCategories([]);
        }
    }, [formData.category_id]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        if (name === "category_id") {
            setFormData({ ...formData, category_id: value, sub_category_id: '' });
        } else {
            setFormData({ ...formData, [name]: value });
        }
    };

    const handleVariantChange = (index, field, value) => {
        const newVariants = [...formData.variants];
        if (field === 'price' || field === 'cost_price') {
            newVariants[index][field] = value === '' ? '' : parseCurrency(value);
        } else {
            newVariants[index][field] = value;
        }
        setFormData({ ...formData, variants: newVariants });
    };

    const addVariant = () => {
        setFormData({
            ...formData,
            // <-- PERUBAHAN BARCODE 4: Menambahkan 'barcode' saat membuat varian baru
            variants: [...formData.variants, { name: '', price: '', cost_price: '', barcode: '' }]
        });
    };

    const removeVariant = (index) => {
        if (formData.variants.length <= 1) {
            toast.warn("Produk harus memiliki setidaknya satu varian.");
            return;
        }
        const newVariants = formData.variants.filter((_, i) => i !== index);
        setFormData({ ...formData, variants: newVariants });
    };

    const handleFileChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setSelectedFile(file);
            setFormData(prev => ({ ...prev, image_url: '' }));
            toast.info(`File dipilih: ${file.name}`);
        } else {
            setSelectedFile(null);
        }
    };

    const triggerFileInput = () => {
        fileInputRef.current.click();
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        const validVariants = formData.variants.filter(v =>
            v.name &&
            v.price !== '' &&
            !isNaN(parseFloat(v.price)) &&
            v.cost_price !== '' &&
            !isNaN(parseFloat(v.cost_price))
        ).map(v => ({
            ...v,
            price: parseFloat(v.price),
            cost_price: parseFloat(v.cost_price),
        }));
        if (validVariants.length === 0) {
            toast.error('Setidaknya satu varian produk harus diisi lengkap (nama, harga beli, dan harga jual).');
            setIsSubmitting(false);
            return;
        }
        let imageUrlToSend = formData.image_url;
        if (selectedFile) {
            const formDataForUpload = new FormData();
            formDataForUpload.append('image', selectedFile);
            try {
                const uploadRes = await uploadImage(formDataForUpload);
                imageUrlToSend = uploadRes.data.url;
                toast.success("Gambar berhasil diunggah!");
            } catch (error) {
                console.error("Error uploading image:", error);
                toast.error("Gagal mengunggah gambar.");
                setIsSubmitting(false);
                return;
            }
        }
        const productData = {
            ...formData,
            image_url: imageUrlToSend,
            variants: validVariants,
            expiration_date: formData.expiration_date || null
        };
        const promise = isEditing
            ? updateProduct(id, productData)
            : createProduct(productData);
        try {
            await toast.promise(promise, {
                pending: 'Menyimpan produk...',
                success: 'Produk berhasil disimpan!',
                error: 'Gagal menyimpan produk.'
            });
            navigate('/products');
        } catch (err) {
            console.error(err);
        } finally {
            setIsSubmitting(false);
        }
    };

    if (loading) {
        return <PageContainer><Skeleton height={400} /></PageContainer>;
    }

    return (
        <PageContainer>
            <BackLink to="/products"><FiArrowLeft /> Kembali ke Daftar Produk</BackLink>
            <PageHeader>
                <Title>{isEditing ? 'Edit Produk' : 'Tambah Produk Baru'}</Title>
            </PageHeader>
            <Form onSubmit={handleSubmit}>
                <FormGrid>
                    <InputGroup $fullWidth>
                        <Label>Nama Produk</Label>
                        <Input name="name" value={formData.name} onChange={handleChange} required autoFocus />
                    </InputGroup>
                    <InputGroup>
                        <Label>Kategori</Label>
                        <Select name="category_id" value={formData.category_id} onChange={handleChange}>
                            <option value="">-- Pilih Kategori --</option>
                            {categories.map(cat => <option key={cat.id} value={cat.id}>{cat.name}</option>)}
                        </Select>
                    </InputGroup>
                    <InputGroup>
                        <Label>Sub-Kategori</Label>
                        <Select name="sub_category_id" value={formData.sub_category_id} onChange={handleChange} disabled={subCategories.length === 0}>
                            <option value="">-- Pilih Sub-Kategori --</option>
                            {subCategories.map(sub => <option key={sub.id} value={sub.id}>{sub.name}</option>)}
                        </Select>
                    </InputGroup>
                    <InputGroup>
                        <Label>Pemasok</Label>
                        <Select name="supplier_id" value={formData.supplier_id} onChange={handleChange}>
                            <option value="">-- Pilih Pemasok --</option>
                            {suppliers.map(sup => <option key={sup.id} value={sup.id}>{sup.name}</option>)}
                        </Select>
                    </InputGroup>
                    <InputGroup>
                        <Label>Tanggal Kadaluarsa (Opsional)</Label>
                        <Input type="date" name="expiration_date" value={formData.expiration_date} onChange={handleChange} />
                    </InputGroup>
                    <InputGroup>
                        <Label>Total Stok</Label>
                        <Input name="stock" type="number" value={formData.stock} onChange={handleChange} required />
                    </InputGroup>
                    <VariantSection>
                        <Label style={{ fontWeight: 600, marginBottom: '15px' }}>Varian Produk</Label>
                        {formData.variants.map((variant, index) => (
                            <VariantRow key={index}>
                                <Input placeholder="Nama Varian (cth: Panas)" value={variant.name} onChange={e => handleVariantChange(index, 'name', e.target.value)} required />
                                <Input
                                    type="text" placeholder="Harga Beli (Modal)" value={formatCurrency(variant.cost_price)}
                                    onChange={e => handleVariantChange(index, 'cost_price', e.target.value)}
                                    onFocus={e => { const rawValue = parseCurrency(e.target.value); e.target.value = isNaN(rawValue) ? '' : rawValue; }}
                                    onBlur={e => { const rawValue = parseCurrency(e.target.value); e.target.value = formatCurrency(rawValue); }}
                                    required
                                />
                                <Input
                                    type="text" placeholder="Harga Jual" value={formatCurrency(variant.price)}
                                    onChange={e => handleVariantChange(index, 'price', e.target.value)}
                                    onFocus={e => { const rawValue = parseCurrency(e.target.value); e.target.value = isNaN(rawValue) ? '' : rawValue; }}
                                    onBlur={e => { const rawValue = parseCurrency(e.target.value); e.target.value = formatCurrency(rawValue); }}
                                    required
                                />
                                {/* <-- PERUBAHAN BARCODE 5: Input untuk barcode ditambahkan di sini --> */}
                                <Input placeholder="Barcode/SKU" value={variant.barcode || ''} onChange={e => handleVariantChange(index, 'barcode', e.target.value)} />
                                <ActionButton type="button" onClick={() => removeVariant(index)}><FiTrash2 size={18} /></ActionButton>
                            </VariantRow>
                        ))}
                        <AddVariantButton type="button" onClick={addVariant}><FiPlus /> Tambah Varian</AddVariantButton>
                    </VariantSection>
                    <InputGroup $fullWidth>
                        <Label>URL Gambar (atau Unggah)</Label>
                        <FileInputContainer>
                            <Input name="image_url" value={selectedFile ? selectedFile.name : formData.image_url} onChange={handleChange} placeholder="URL Gambar atau pilih file" disabled={!!selectedFile} />
                            <UploadButton type="button" onClick={triggerFileInput}> <FiUpload /> Unggah </UploadButton>
                            <FileInput type="file" accept="image/*" onChange={handleFileChange} ref={fileInputRef} />
                        </FileInputContainer>
                        {selectedFile && <small style={{ color: 'var(--text-secondary)', marginTop: '5px' }}>File dipilih: {selectedFile.name}</small>}
                        {formData.image_url && !selectedFile && <small style={{ color: 'var(--text-secondary)', marginTop: '5px' }}>URL Gambar: {formData.image_url}</small>}
                    </InputGroup>
                    <InputGroup $fullWidth>
                        <Label>Deskripsi</Label>
                        <Input as="textarea" rows="3" name="description" value={formData.description} onChange={handleChange} />
                    </InputGroup>
                </FormGrid>
                <FormFooter>
                    <SaveButton type="submit" disabled={isSubmitting}>
                        <FiSave /> {isSubmitting ? 'Menyimpan...' : 'Simpan Produk'}
                    </SaveButton>
                </FormFooter>
            </Form>
        </PageContainer>
    );
}

export default ProductFormPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\ProductsPage.jsx =====

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { getProducts, deleteProduct } from '../services/api';
import { toast } from 'react-toastify';
import { FiEdit, FiTrash2, FiPlus, FiPackage } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';

// --- Styled Components (tidak ada perubahan) ---
const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;
const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
`;
const Title = styled.h1`
    font-size: 1.8rem;
`;
const AddButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover {
        background-color: var(--primary-hover);
    }
`;
const TableContainer = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
`;
const TableWrapper = styled.div`
    overflow-x: auto;
    flex-grow: 1;
`;
const Table = styled.table`
    width: 100%;
    border-collapse: collapse;
`;
const Th = styled.th`
    text-align: left;
    padding: 15px 20px;
    background-color: var(--bg-main);
    border-bottom: 1px solid var(--border-color);
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.9rem;
    text-transform: uppercase;
`;
const Td = styled.td`
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    vertical-align: middle;
`;
const Tr = styled.tr`
    &:last-child {
        ${Td} {
            border-bottom: none;
        }
    }
`;
const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    margin-right: 15px;
    &:hover {
        color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'};
    }
`;
const ProductImage = styled.img`
    width: 50px;
    height: 50px;
    border-radius: 8px;
    object-fit: cover;
    border: 1px solid var(--border-color);
`;
const PriceRange = styled.span`
    display: block;
    font-size: 0.9rem;
`;
const StockTotal = styled.span`
    font-weight: 600;
    font-size: 1rem;
`;
const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px dashed var(--border-color);
`;
const EmptyStateTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-top: 20px;
    margin-bottom: 10px;
`;


function ProductsPage() {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();

    const fetchProducts = async () => {
        try {
            setLoading(true);
            const res = await getProducts();
            setProducts(res.data);
        } catch (error) {
            toast.error("Gagal memuat produk.");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchProducts();
    }, []);

    const handleDeleteProduct = async (id) => {
        if (window.confirm('Apakah Anda yakin ingin menghapus produk ini? Semua variannya juga akan terhapus.')) {
            const promise = deleteProduct(id);
            toast.promise(promise, {
                pending: 'Menghapus produk...',
                success: 'Produk berhasil dihapus!',
                error: 'Gagal menghapus produk.'
            });
            try {
                await promise;
                fetchProducts();
            } catch (err) {
                console.error(err);
            }
        }
    };

    return (
        <PageContainer>
            <PageHeader>
                <Title>Manajemen Produk</Title>
                <AddButton onClick={() => navigate('/products/new')}>
                    <FiPlus /> Tambah Produk
                </AddButton>
            </PageHeader>

            {loading ? (
                <TableContainer>
                    <TableWrapper>
                        <Table>
                            <thead>
                                <tr>
                                    <Th>Gambar</Th>
                                    <Th>Nama Produk</Th>
                                    <Th>Harga</Th>
                                    <Th>Total Stok</Th>
                                    <Th>Aksi</Th>
                                </tr>
                            </thead>
                            <tbody>
                                {Array.from({ length: 5 }).map((_, index) => (
                                    <Tr key={index}>
                                        {[...Array(5)].map((_, i) => (
                                            <Td key={i}><Skeleton /></Td>
                                        ))}
                                    </Tr>
                                ))}
                            </tbody>
                        </Table>
                    </TableWrapper>
                </TableContainer>
            ) : products.length > 0 ? (
                <TableContainer>
                    <TableWrapper>
                        <Table>
                            <thead>
                                <tr>
                                    <Th>Gambar</Th>
                                    <Th>Nama Produk</Th>
                                    <Th>Harga</Th>
                                    <Th>Total Stok</Th>
                                    <Th>Aksi</Th>
                                </tr>
                            </thead>
                            <tbody>
                                {products.map(product => {
                                    const prices = product.variants.map(v => v.price);
                                    // --- PERBAIKAN DI SINI ---
                                    // Ambil stok langsung dari produk, bukan dari varian lagi
                                    const totalStock = product.stock;

                                    return (
                                        <Tr key={product.id}>
                                            <Td>
                                                <ProductImage src={product.image_url || `https://placehold.co/100`} />
                                            </Td>
                                            <Td>{product.name}</Td>
                                            <Td>
                                                {prices.length > 0 ? (
                                                    <PriceRange>
                                                        Rp {new Intl.NumberFormat('id-ID').format(Math.min(...prices))} - Rp {new Intl.NumberFormat('id-ID').format(Math.max(...prices))}
                                                    </PriceRange>
                                                ) : 'N/A'}
                                            </Td>
                                            <Td>
                                                <StockTotal>{totalStock}</StockTotal>
                                            </Td>
                                            <Td>
                                                <ActionButton onClick={() => navigate(`/products/edit/${product.id}`)}>
                                                    <FiEdit size={18} />
                                                </ActionButton>
                                                <ActionButton $danger onClick={() => handleDeleteProduct(product.id)}>
                                                    <FiTrash2 size={18} />
                                                </ActionButton>
                                            </Td>
                                        </Tr>
                                    );
                                })}
                            </tbody>
                        </Table>
                    </TableWrapper>
                </TableContainer>
            ) : (
                <EmptyStateContainer>
                    <FiPackage size={48} />
                    <EmptyStateTitle>Belum Ada Produk</EmptyStateTitle>
                    <p>Klik tombol di pojok kanan atas untuk menambahkan produk pertama Anda.</p>
                </EmptyStateContainer>
            )}
        </PageContainer>
    );
}

export default ProductsPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\PromotionFormPage.jsx =====

// frontend/src/pages/PromotionFormPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { getPromotionById, createPromotion, updatePromotion } from '../services/api';
import { toast } from 'react-toastify';
import { FiSave, FiArrowLeft } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css'; // Import skeleton styles

// Helper Functions for Currency Formatting (consistent with other forms)
const formatCurrency = (value) => {
    if (value === null || value === undefined || value === '') return '';
    const number = parseFloat(value);
    if (isNaN(number)) return String(value);
    return new Intl.NumberFormat('id-ID', { minimumFractionDigits: 0 }).format(number);
};
const parseCurrency = (value) => {
    if (typeof value !== 'string') return value;
    const cleanValue = value.replace(/Rp\s?|\./g, '').replace(/,/g, '.');
    const parsed = parseFloat(cleanValue);
    return isNaN(parsed) ? value : parsed;
};

// --- Styled Components (diadaptasi dari ProductFormPage, dengan penyesuaian layout) ---
const PageContainer = styled.div`
    padding: 30px;
    max-width: 900px;
    margin: 0 auto;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
`;

const Title = styled.h1`
    font-size: 1.8rem;
`;

const BackLink = styled(Link)`
    display: inline-flex;
    align-items: center;
    gap: 8px;
    color: var(--text-secondary);
    text-decoration: none;
    margin-bottom: 20px;
    font-weight: 500;
    &:hover { color: var(--text-primary); }
`;

const Form = styled.form`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    padding: 25px;
`;

const FormGrid = styled.div`
    display: grid;
    grid-template-columns: repeat(2, 1fr); /* Dua kolom */
    gap: 20px;

    @media (max-width: 768px) { /* Untuk layar lebih kecil, jadi satu kolom */
        grid-template-columns: 1fr;
    }
`;

const InputGroup = styled.div`
    /* Properti untuk membuat input group mengisi full width atau hanya 1 kolom */
    grid-column: ${props => props.$fullWidth ? '1 / -1' : 'auto'};
`;

const Label = styled.label`
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    font-size: 0.9rem;
    color: var(--text-secondary);
`;

const Input = styled.input`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background-color: var(--bg-main);
    color: var(--text-primary);
    font-size: 1rem;
    /* Styling untuk datetime-local */
    &[type="datetime-local"] {
        /* Optional: adjust height if needed */
    }
`;

const Select = styled.select`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background-color: var(--bg-main);
    color: var(--text-primary);
    font-size: 1rem;
    appearance: none; /* Remove default arrow */
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 12px center; background-size: 20px;
    &:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2);
    }
`;

const CheckboxContainer = styled.div`
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 10px; /* Adjust margin to align with other inputs */

    input[type="checkbox"] {
        appearance: none;
        width: 20px;
        height: 20px;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        background-color: var(--bg-main);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;

        &:checked {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        &:checked::before {
            content: '✔'; /* Checkmark character */
            font-size: 14px;
            color: white;
            display: block;
        }
    }
    label {
        margin-bottom: 0;
        cursor: pointer;
        color: var(--text-primary);
        font-weight: 500;
    }
`;

const FormFooter = styled.div`
    padding-top: 25px;
    margin-top: 25px;
    border-top: 1px solid var(--border-color);
    display: flex;
    justify-content: flex-end;
`;

const SaveButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 25px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover { opacity: 0.9; }
    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
`;

function PromotionFormPage() {
    const { id } = useParams();
    const navigate = useNavigate();
    const isEditing = Boolean(id);

    const [formData, setFormData] = useState({
        name: '',
        description: '',
        type: 'percentage',
        value: '',
        code: '',
        start_date: '',
        end_date: '',
        is_active: true,
    });
    const [loading, setLoading] = useState(isEditing);
    const [isSubmitting, setIsSubmitting] = useState(false);

    const fetchPromotionData = useCallback(async () => {
        if (!isEditing) return;
        try {
            const res = await getPromotionById(id);
            const promo = res.data;
            setFormData({
                name: promo.name,
                description: promo.description || '',
                type: promo.type,
                value: promo.value,
                code: promo.code || '',
                // Format tanggal ke YYYY-MM-DDTHH:mm untuk input datetime-local
                start_date: promo.start_date ? new Date(promo.start_date).toISOString().slice(0, 16) : '',
                end_date: promo.end_date ? new Date(promo.end_date).toISOString().slice(0, 16) : '',
                is_active: promo.is_active,
            });
        } catch (error) {
            toast.error("Gagal memuat data promosi.");
            navigate('/promotions');
        } finally {
            setLoading(false);
        }
    }, [id, isEditing, navigate]);

    useEffect(() => {
        fetchPromotionData();
    }, [fetchPromotionData]);

    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        // Handle numeric value parsing for 'value' input
        if (name === 'value') {
            setFormData(prev => ({ ...prev, [name]: parseCurrency(value) }));
        } else {
            setFormData(prev => ({
                ...prev,
                [name]: type === 'checkbox' ? checked : value,
            }));
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);

        // Convert value back to float for API
        const dataToSave = {
            ...formData,
            value: parseFloat(formData.value),
            // Ensure dates are sent as proper SQL DATETIME strings or null
            start_date: formData.start_date || null,
            end_date: formData.end_date || null,
        };

        const promise = isEditing
            ? updatePromotion(id, dataToSave)
            : createPromotion(dataToSave);

        try {
            await toast.promise(promise, {
                pending: 'Menyimpan promosi...',
                success: 'Promosi berhasil disimpan!',
                error: (err) => err.response?.data?.message || 'Gagal menyimpan promosi.'
            });
            navigate('/promotions');
        } catch (err) {
            console.error(err);
        } finally {
            setIsSubmitting(false);
        }
    };

    if (loading) {
        return <PageContainer><Skeleton height={400} /></PageContainer>;
    }

    return (
        <PageContainer>
            <BackLink to="/promotions"><FiArrowLeft /> Kembali ke Daftar Promosi</BackLink>
            <PageHeader>
                <Title>{isEditing ? 'Edit Promosi' : 'Tambah Promosi Baru'}</Title>
            </PageHeader>
            <Form onSubmit={handleSubmit}>
                <FormGrid>
                    <InputGroup $fullWidth> {/* Full width */}
                        <Label>Nama Promosi</Label>
                        <Input name="name" value={formData.name} onChange={handleChange} required autoFocus />
                    </InputGroup>
                    <InputGroup $fullWidth> {/* Full width */}
                        <Label>Deskripsi (Opsional)</Label>
                        <Input as="textarea" rows="3" name="description" value={formData.description} onChange={handleChange} />
                    </InputGroup>

                    <InputGroup> {/* Side-by-side */}
                        <Label>Tipe Diskon</Label>
                        <Select name="type" value={formData.type} onChange={handleChange} required>
                            <option value="percentage">Persentase (%)</option>
                            <option value="fixed_amount">Potongan Tetap (Rp)</option>
                        </Select>
                    </InputGroup>
                    <InputGroup> {/* Side-by-side */}
                        <Label>Nilai</Label>
                        <Input
                            name="value"
                            type="number" // Change to number type for validation, but handle formatting in display
                            value={formData.value}
                            onChange={handleChange}
                            required
                            placeholder={formData.type === 'percentage' ? 'Contoh: 10 (untuk 10%)' : 'Contoh: 5000'}
                            min={formData.type === 'percentage' ? "0" : "0"}
                            max={formData.type === 'percentage' ? "100" : undefined}
                        />
                    </InputGroup>

                    <InputGroup> {/* Side-by-side */}
                        <Label>Kode Kupon (Opsional)</Label>
                        <Input name="code" value={formData.code} onChange={handleChange} placeholder="Contoh: RAMADANHEMAT" />
                    </InputGroup>
                    <InputGroup style={{ alignSelf: 'flex-end', paddingBottom: '8px' }}> {/* Align checkbox to bottom */}
                        <Label>Status</Label>
                        <CheckboxContainer>
                            <input type="checkbox" id="is_active" name="is_active" checked={formData.is_active} onChange={handleChange} />
                            <label htmlFor="is_active">Aktifkan Promosi</label>
                        </CheckboxContainer>
                    </InputGroup>
                    
                    <InputGroup> {/* Side-by-side */}
                        <Label>Tanggal Mulai (Opsional)</Label>
                        <Input name="start_date" type="datetime-local" value={formData.start_date} onChange={handleChange} />
                    </InputGroup>
                    <InputGroup> {/* Side-by-side */}
                        <Label>Tanggal Berakhir (Opsional)</Label>
                        <Input name="end_date" type="datetime-local" value={formData.end_date} onChange={handleChange} />
                    </InputGroup>
                </FormGrid>
                <FormFooter>
                    <SaveButton type="submit" disabled={isSubmitting}>
                        <FiSave /> {isSubmitting ? 'Menyimpan...' : 'Simpan Promosi'}
                    </SaveButton>
                </FormFooter>
            </Form>
        </PageContainer>
    );
}
export default PromotionFormPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\PromotionsPage.jsx =====

// frontend/src/pages/PromotionsPage.jsx

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { getPromotions, deletePromotion } from '../services/api';
import { toast } from 'react-toastify';
import { FiPlus, FiTrash2, FiTag, FiEdit } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';

const PageContainer = styled.div` padding: 30px; height: 100%; display: flex; flex-direction: column; `;
const PageHeader = styled.header` display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; flex-shrink: 0; `;
const Title = styled.h1` font-size: 1.8rem; `;
const AddButton = styled.button` background-color: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 12px 20px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; &:hover { background-color: var(--primary-hover); } `;
const TableContainer = styled.div` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); overflow: hidden; flex-grow: 1; display: flex; flex-direction: column; `;
const TableWrapper = styled.div` overflow-x: auto; flex-grow: 1; `;
const Table = styled.table` width: 100%; border-collapse: collapse; `;
const Th = styled.th` text-align: left; padding: 15px 20px; background-color: var(--bg-main); border-bottom: 1px solid var(--border-color); font-weight: 600; color: var(--text-secondary); font-size: 0.9rem; text-transform: uppercase; white-space: nowrap;`;
const Td = styled.td` padding: 15px 20px; border-bottom: 1px solid var(--border-color); color: var(--text-primary); vertical-align: middle; `;
const Tr = styled.tr` &:last-child > td { border-bottom: none; } `;
const ActionButton = styled.button` background: none; border: none; cursor: pointer; color: var(--text-secondary); margin-right: 15px; &:hover { color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'}; } `;
const EmptyStateContainer = styled.div` flex-grow: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; color: var(--text-secondary); `;

function PromotionsPage() {
    const [promotions, setPromotions] = useState([]);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();

    const fetchPromotions = async () => {
        setLoading(true);
        try {
            const res = await getPromotions();
            setPromotions(res.data);
        } catch (error) {
            toast.error("Gagal memuat data promosi.");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchPromotions();
    }, []);

    const handleDelete = async (id) => {
        if (window.confirm('Yakin ingin menghapus promosi ini?')) {
            await toast.promise(deletePromotion(id), {
                pending: 'Menghapus...',
                success: 'Promosi berhasil dihapus!',
                error: 'Gagal menghapus promosi.'
            });
            fetchPromotions();
        }
    };

    return (
        <PageContainer>
            <PageHeader>
                <Title>Manajemen Promosi</Title>
                <AddButton onClick={() => navigate('/promotions/new')}>
                    <FiPlus /> Tambah Promosi
                </AddButton>
            </PageHeader>
            
            <TableContainer>
                {loading ? (
                    <div style={{ padding: '20px' }}><Skeleton count={5} height={50} /></div>
                ) : promotions.length > 0 ? (
                    <TableWrapper>
                        <Table>
                            <thead>
                                <tr>
                                    <Th>Nama Promo</Th>
                                    <Th>Kode</Th>
                                    <Th>Tipe</Th>
                                    <Th>Nilai</Th>
                                    <Th>Status</Th>
                                    <Th>Aksi</Th>
                                </tr>
                            </thead>
                            <tbody>
                                {promotions.map(promo => (
                                    <Tr key={promo.id}>
                                        <Td>{promo.name}</Td>
                                        <Td>{promo.code || '-'}</Td>
                                        <Td>{promo.type === 'percentage' ? 'Persentase' : 'Potongan Tetap'}</Td>
                                        <Td>{promo.type === 'percentage' ? `${promo.value}%` : `Rp ${new Intl.NumberFormat('id-ID').format(promo.value)}`}</Td>
                                        <Td>{promo.is_active ? 'Aktif' : 'Tidak Aktif'}</Td>
                                        <Td>
                                            <ActionButton onClick={() => navigate(`/promotions/edit/${promo.id}`)}><FiEdit size={18} /></ActionButton>
                                            <ActionButton $danger onClick={() => handleDelete(promo.id)}><FiTrash2 size={18} /></ActionButton>
                                        </Td>
                                    </Tr>
                                ))}
                            </tbody>
                        </Table>
                    </TableWrapper>
                ) : (
                    <EmptyStateContainer>
                        <FiTag size={48} />
                        <h3>Belum Ada Promosi</h3>
                        <p>Klik tombol di atas untuk membuat promosi pertama Anda.</p>
                    </EmptyStateContainer>
                )}
            </TableContainer>
        </PageContainer>
    );
}

export default PromotionsPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\QuickActionsPage.jsx =====

// frontend/src/pages/QuickActionsPage.jsx

import React from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import QuickActionGrids from './Dashboard/components/QuickActionGrids';
import { FiArrowLeft } from 'react-icons/fi';

const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
`;

const Title = styled.h1`
    font-size: 1.8rem;
`;

const BackButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover {
        background-color: var(--primary-hover);
    }
`;

function QuickActionsPage() {
    const navigate = useNavigate();
    return (
        <PageContainer>
            <PageHeader>
                <Title>Aksi Cepat & Manajemen</Title>
                <BackButton onClick={() => navigate('/dashboard')}>
                    <FiArrowLeft size={18} />
                    Kembali ke Dashboard
                </BackButton>
            </PageHeader>
            <QuickActionGrids />
        </PageContainer>
    );
}

export default QuickActionsPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\ReceiveStockPage.jsx =====

// frontend/src/pages/ReceiveStockPage.jsx
import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { getProducts, receiveStock } from '../services/api';
import { toast } from 'react-toastify';
import { FiSave, FiSearch, FiPlusCircle, FiTrash2, FiArrowLeft } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
const PageContainer = styled.div`
    padding: 30px;
    max-width: 1000px;
    margin: 0 auto;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
`;

const Title = styled.h1`
    font-size: 1.8rem;
`;

const BackButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover {
        background-color: var(--primary-hover);
    }
`;

const MainGrid = styled.div`
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
`;

const Panel = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    padding: 25px;
    height: 65vh;
    display: flex;
    flex-direction: column;
`;

const PanelTitle = styled.h2`
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0 0 20px 0;
    padding-bottom: 20px;
    border-bottom: 1px solid var(--border-color);
`;

const SearchInput = styled.input`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: var(--bg-main); /* Sinkron dengan theme */
    color: var(--text-primary); /* Sinkron dengan theme */

    &::placeholder {
        color: var(--text-placeholder); /* Sinkron dengan theme */
        opacity: 0.8; /* Sedikit transparansi untuk placeholder */
    }

    &:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2);
    }
`;

const ProductList = styled.ul`
    list-style: none;
    padding: 0;
    overflow-y: auto;
    flex-grow: 1;
`;

const ListItem = styled.li`
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    border-radius: 8px;
    &:hover { background-color: var(--bg-main); }
`;

const AddButton = styled.button`
    background: none; border: none; cursor: pointer;
    color: var(--primary-color);
`;
const ReceiveListTable = styled.table`
    width: 100%;
    border-collapse: collapse;
    flex-grow: 1;
`;
const Th = styled.th`
    text-align: left;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-secondary);
`;
const Td = styled.td`
    padding: 10px 0;
    vertical-align: middle;
`;
const QuantityInput = styled.input`
    width: 80px;
    padding: 8px;
    border-radius: 6px;
    border: 1px solid var(--border-color);
    text-align: center;
`;
const SaveButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 25px;
    font-weight: 600;
    cursor: pointer;
    margin-top: 20px;
    float: right;
    &:disabled { opacity: 0.5; cursor: not-allowed; }
`;
function ReceiveStockPage() {
    const navigate = useNavigate();
    const [allProducts, setAllProducts] = useState([]);
    const [filteredProducts, setFilteredProducts] = useState([]);
    const [receiveList, setReceiveList] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);

    useEffect(() => {
        const fetchAllProducts = async () => {
            try {
                const res = await getProducts();
                setAllProducts(res.data);
                setFilteredProducts(res.data);
            } catch (error) {
                toast.error("Gagal memuat produk.");
            } finally {
                setLoading(false);
            }
        };
        fetchAllProducts();
    }, []);

    const handleSearch = (e) => {
        const term = e.target.value.toLowerCase();
        setFilteredProducts(
            allProducts.filter(p => p.name.toLowerCase().includes(term))
        );
    };
    const addProductToReceiveList = (product) => {
        if (receiveList.some(item => item.id === product.id)) {
            toast.warn("Produk sudah ada di dalam daftar penerimaan.");
            return;
        }
        setReceiveList([...receiveList, { ...product, quantityToAdd: 1 }]);
    };

    const handleQuantityChange = (productId, quantity) => {
        setReceiveList(
            receiveList.map(item =>
                item.id === productId ? { ...item, quantityToAdd: parseInt(quantity, 10) || 0 } : item
            )
        );
    };

    const removeFromReceiveList = (productId) => {
        setReceiveList(receiveList.filter(item => item.id !== productId));
    };

    const handleSubmit = async () => {
        const itemsToSubmit = receiveList
            .filter(item => item.quantityToAdd > 0)
            .map(item => ({ productId: item.id, quantity: item.quantityToAdd }));

        if (itemsToSubmit.length === 0) {
            toast.warn("Tidak ada stok untuk ditambahkan. Isi kuantitas minimal 1.");
            return;
        }

        setIsSubmitting(true);
        try {
            await toast.promise(
                receiveStock({ items: itemsToSubmit }),
                {
                    pending: 'Menyimpan stok...',
                    success: 'Stok berhasil diperbarui!',
                    error: 'Gagal memperbarui stok.'
                }
            );
            setReceiveList([]);
            const res = await getProducts();
            setAllProducts(res.data);
            setFilteredProducts(res.data);
        } catch (error) {
            console.error(error);
        } finally {
            setIsSubmitting(false);
        }
    };


    return (
        <PageContainer>
            <PageHeader>
                <Title>Terima Stok Barang</Title>
                <BackButton onClick={() => navigate('/dashboard')}>
                    <FiArrowLeft size={18} /> Kembali ke Dashboard
                </BackButton>
            </PageHeader>
            <MainGrid>
                <Panel>
                    <PanelTitle>Daftar Produk</PanelTitle>
                    <SearchInput placeholder="Cari produk..." onChange={handleSearch} />
                    {loading ? <Skeleton count={8} /> : (
                        <ProductList>
                            {filteredProducts.map(p => (
                                <ListItem key={p.id}>
                                    <span>{p.name} <small>(Stok: {p.stock})</small></span>
                                    <AddButton onClick={() => addProductToReceiveList(p)}>
                                        <FiPlusCircle size={20} />
                                    </AddButton>
                                </ListItem>
                            ))}
                        </ProductList>
                    )}
                </Panel>
                <Panel>
                    <PanelTitle>Daftar Penerimaan</PanelTitle>
                    <div style={{ flexGrow: 1, overflowY: 'auto' }}>
                        <ReceiveListTable>
                            <thead>
                                <tr>
                                    <Th>Produk</Th>
                                    <Th>Jumlah Tambah</Th>
                                    <Th>Aksi</Th>
                                </tr>
                            </thead>
                            <tbody>
                                {receiveList.map(item => (
                                    <tr key={item.id}>
                                        <Td>{item.name}</Td>
                                        <Td>
                                            <QuantityInput
                                                type="number"
                                                min="1"
                                                value={item.quantityToAdd}
                                                onChange={(e) => handleQuantityChange(item.id, e.target.value)}
                                            />
                                        </Td>
                                        <Td>
                                            <AddButton onClick={() => removeFromReceiveList(item.id)}>
                                                <FiTrash2 />
                                            </AddButton>
                                        </Td>
                                    </tr>
                                ))}
                            </tbody>
                        </ReceiveListTable>
                    </div>
                    {receiveList.length > 0 && (
                        <SaveButton onClick={handleSubmit} disabled={isSubmitting}>
                            <FiSave /> {isSubmitting ? 'Menyimpan...' : 'Simpan Stok Diterima'}
                        </SaveButton>
                    )}
                </Panel>
            </MainGrid>
        </PageContainer>
    );
}

export default ReceiveStockPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\RegisterPage.jsx =====

import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { createUser } from '../services/api'; // Removed checkInitialUser import
import { toast } from 'react-toastify';
import { FiUserPlus } from 'react-icons/fi';

const PageContainer = styled.div`
  display: flex;
  height: 100vh;
  width: 100vw;
  background-color: var(--bg-main);

  @media (max-width: 768px) {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
`;

const BrandingPanel = styled.div`
  flex: 1.2;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  padding: 60px;

  @media (max-width: 768px) {
    padding: 30px;
    align-items: center;
    text-align: center;
  }
`;

const BrandingContent = styled.div`
  max-width: 450px;
`;

const BrandingTitle = styled.h1`
  font-size: 3.5rem;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 15px;
  color: var(--primary-color);

  @media (max-width: 768px) {
    font-size: 2.5rem;
  }
`;

const BrandingSubtitle = styled.p`
  font-size: 1.2rem;
  font-weight: 300;
  color: var(--text-secondary);

  @media (max-width: 768px) {
    font-size: 1rem;
  }
`;

const FormPanel = styled.div`
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow-y: auto;
  padding: 20px 0;

  @media (max-width: 768px) {
    padding: 20px;
  }
`;

const FormBox = styled.div`
  width: 100%;
  max-width: 550px;
  padding: 40px;
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);

  @media (max-width: 768px) {
    padding: 30px;
  }
`;

const Title = styled.h2`
  font-size: 2.2rem;
  font-weight: 600;
  margin-bottom: 10px;
  color: var(--text-primary);

  @media (max-width: 768px) {
    font-size: 1.8rem;
  }
`;

const Subtitle = styled.p`
  color: var(--text-secondary);
  margin-bottom: 50px;
  font-size: 1rem;

  @media (max-width: 768px) {
    margin-bottom: 30px;
  }
`;

const Form = styled.form`
  display: grid;
  grid-template-columns: 1fr 1fr; /* Mengubah menjadi 2 kolom */
  gap: 25px;

  @media (max-width: 768px) {
    grid-template-columns: 1fr; /* Kembali ke 1 kolom di HP */
  }
`;

const InputGroup = styled.div`
  /* Defaultnya akan menempati 1 kolom, kecuali diberi prop fullWidth */
  grid-column: ${props => props.fullWidth ? '1 / -1' : 'auto'};
`;

const Label = styled.label`
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: var(--text-secondary);
`;

const Input = styled.input`
  width: 100%;
  padding: 14px 18px;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  font-size: 1rem;
  background-color: var(--bg-main);
  color: var(--text-primary);
`;

const Button = styled.button`
  width: 100%;
  padding: 15px;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  grid-column: 1 / -1; /* Tombol tetap mengisi 2 kolom */
  &:hover {
    background-color: var(--primary-hover);
  }
`;

const LoginLink = styled.p`
  text-align: center;
  margin-top: 15px;
  color: var(--text-secondary);
  font-size: 0.9rem;
  grid-column: 1 / -1; /* Link tetap mengisi 2 kolom */

  a {
    color: var(--primary-color);
    font-weight: 600;
    text-decoration: none;
    &:hover { text-decoration: underline; }
  }
`;


function RegisterPage() {
    const [formData, setFormData] = useState({ name: '', email: '', password: '', registrationKey: '' });
    const navigate = useNavigate();

    // The useEffect block for checkInitialUser is no longer needed
    // as the registration logic now relies on ADMIN_REGISTRATION_KEY.
    // useEffect(() => {
    //     const checkUser = async () => {
    //         try {
    //             const res = await checkInitialUser();
    //             if (!res.data.setupNeeded) {
    //                 toast.info("Registrasi publik dinonaktifkan.");
    //                 navigate('/login');
    //             }
    //         } catch (error) {
    //             toast.error("Tidak bisa terhubung ke server.");
    //             navigate('/login');
    //         }
    //     };
    //     checkUser();
    // }, [navigate]);

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        const promise = createUser(formData); 
        
        // Store the toast promise result
        const toastResult = toast.promise(promise, {
            pending: 'Mendaftarkan admin...',
            success: 'Registrasi Admin berhasil! Silakan login.', // Simplified success message
            error: {
                render({data}){
                    return `Gagal: ${data.response?.data?.message || 'Server error'}`;
                }
            }
        });

        try {
            await toastResult; // Await the toast promise to ensure it completes
            navigate('/login'); // Navigate after the toast promise resolves successfully
        } catch (error) {
            // Error handling is already done by toast.promise, but we catch it here
            // to prevent unhandled promise rejections if needed for other logic.
            console.error("Registration failed:", error);
        }
    };

    return (
        <PageContainer>
            <BrandingPanel>
                <BrandingContent>
                    <BrandingTitle>Registrasi Admin</BrandingTitle>
                    <BrandingSubtitle>Buat akun Administrator baru untuk mengakses sistem.</BrandingSubtitle>
                </BrandingContent>
            </BrandingPanel>
            <FormPanel>
                <FormBox>
                    <Title>Buat Akun Admin</Title>
                    <Subtitle>Isi data di bawah untuk membuat akun.</Subtitle>
                    <Form onSubmit={handleSubmit}>
                        <InputGroup>
                            <Label htmlFor="name">Nama Lengkap</Label>
                            <Input id="name" name="name" type="text" onChange={handleChange} required />
                        </InputGroup>
                        <InputGroup>
                            <Label htmlFor="email">Alamat Email</Label>
                            <Input id="email" name="email" type="email" onChange={handleChange} required />
                        </InputGroup>
                        <InputGroup>
                            <Label htmlFor="password">Password</Label>
                            <Input id="password" name="password" type="password" onChange={handleChange} required />
                        </InputGroup>
                        <InputGroup>
                            <Label htmlFor="registrationKey">Kode Registrasi</Label>
                            {/* NEW: Make sure this input sends the registrationKey */}
                            <Input id="registrationKey" name="registrationKey" type="password" onChange={handleChange} required />
                        </InputGroup>
                        <Button type="submit"><FiUserPlus style={{ marginRight: '8px' }}/> Buat Akun Admin</Button>
                        <LoginLink>
                            Sudah punya akun? <Link to="/login">Login di sini</Link>
                        </LoginLink>
                    </Form>
                </FormBox>
            </FormPanel>
        </PageContainer>
    );
}

export default RegisterPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\ReportsPage.jsx =====

// frontend/src/pages/ReportsPage.jsx

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { getSalesReportPdf, getUsers, getCustomers } from '../services/api';
import { toast } from 'react-toastify';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";
import { FiFileText, FiDownload } from 'react-icons/fi';

// --- Styled Components ---
const PageContainer = styled.div` padding: 30px; max-width: 800px; margin: 0 auto; `;
const PageHeader = styled.header` margin-bottom: 30px; `;
const Title = styled.h1` font-size: 1.8rem; display: flex; align-items: center; gap: 12px; `;
const FilterCard = styled.div` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); padding: 25px; `;
const Grid = styled.div` display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; @media (max-width: 768px) { grid-template-columns: 1fr; } `;
const InputGroup = styled.div` display: flex; flex-direction: column; gap: 8px; `;
const Label = styled.label` font-weight: 500; font-size: 0.9rem; color: var(--text-secondary); `;
const Select = styled.select` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; `;
const DatePickerWrapper = styled.div` .react-datepicker-wrapper input { width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; }`;
const ButtonContainer = styled.div` margin-top: 25px; padding-top: 25px; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; `;
const GenerateButton = styled.button` background-color: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 12px 25px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; &:hover { opacity: 0.9; } &:disabled { opacity: 0.5; cursor: not-allowed; } `;

function ReportsPage() {
    const [users, setUsers] = useState([]);
    const [customers, setCustomers] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [filters, setFilters] = useState({
        startDate: new Date(new Date().setDate(new Date().getDate() - 30)),
        endDate: new Date(),
        userId: 'all',
        customerId: 'all',
    });

    useEffect(() => {
        const fetchData = async () => {
            try {
                const [usersRes, customersRes] = await Promise.all([getUsers(), getCustomers()]);
                setUsers(usersRes.data);
                setCustomers(customersRes.data);
            } catch (error) {
                toast.error("Gagal memuat data filter.");
            }
        };
        fetchData();
    }, []);

    const handleFilterChange = (e) => {
        setFilters(prev => ({ ...prev, [e.target.name]: e.target.value }));
    };

    const handleDateChange = (name, date) => {
        setFilters(prev => ({ ...prev, [name]: date }));
    };

    const handleGenerateReport = async () => {
        setIsLoading(true);
        try {
            const response = await getSalesReportPdf(filters);
            const url = window.URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement('a');
            link.href = url;
            const fileName = `laporan-penjualan-${new Date().toISOString().slice(0, 10)}.pdf`;
            link.setAttribute('download', fileName);
            document.body.appendChild(link);
            link.click();
            link.parentNode.removeChild(link);
            window.URL.revokeObjectURL(url);
            toast.success("Laporan PDF berhasil dibuat!");
        } catch (error) {
            console.error("Report generation error:", error);
            toast.error(error.response?.data?.message || "Gagal membuat laporan.");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <PageContainer>
            <PageHeader>
                <Title><FiFileText /> Buat Laporan</Title>
            </PageHeader>
            <FilterCard>
                <Grid>
                    <InputGroup>
                        <Label>Dari Tanggal</Label>
                        <DatePickerWrapper>
                            <DatePicker
                                selected={filters.startDate}
                                onChange={(date) => handleDateChange('startDate', date)}
                                dateFormat="dd/MM/yyyy"
                                maxDate={filters.endDate}
                            />
                        </DatePickerWrapper>
                    </InputGroup>
                    <InputGroup>
                        <Label>Sampai Tanggal</Label>
                        <DatePickerWrapper>
                            <DatePicker
                                selected={filters.endDate}
                                onChange={(date) => handleDateChange('endDate', date)}
                                dateFormat="dd/MM/yyyy"
                                minDate={filters.startDate}
                            />
                        </DatePickerWrapper>
                    </InputGroup>
                    <InputGroup>
                        <Label>Filter Berdasarkan Kasir</Label>
                        <Select name="userId" value={filters.userId} onChange={handleFilterChange}>
                            <option value="all">Semua Kasir</option>
                            {users.map(user => (
                                <option key={user.id} value={user.id}>{user.name}</option>
                            ))}
                        </Select>
                    </InputGroup>
                    <InputGroup>
                        <Label>Filter Berdasarkan Pelanggan</Label>
                        <Select name="customerId" value={filters.customerId} onChange={handleFilterChange}>
                            <option value="all">Semua Pelanggan</option>
                            {customers.map(customer => (
                                <option key={customer.id} value={customer.id}>{customer.name}</option>
                            ))}
                        </Select>
                    </InputGroup>
                </Grid>
                <ButtonContainer>
                    <GenerateButton onClick={handleGenerateReport} disabled={isLoading}>
                        <FiDownload />
                        {isLoading ? 'Membuat Laporan...' : 'Buat & Unduh PDF'}
                    </GenerateButton>
                </ButtonContainer>
            </FilterCard>
        </PageContainer>
    );
}

export default ReportsPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\ResetPasswordPage.jsx =====

// frontend/src/pages/ResetPasswordPage.jsx

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { resetPassword } from '../services/api';
import { toast } from 'react-toastify';
import { FiSave } from 'react-icons/fi';
import { jwtDecode } from 'jwt-decode';

// --- Styled Components (Sama seperti LoginPage) ---
const PageContainer = styled.div`
  display: flex;
  height: 100vh;
  width: 100vw;
  background-color: var(--bg-main);
  @media (max-width: 768px) {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
`;

const BrandingPanel = styled.div`
  flex: 1.2;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  padding: 60px;
  @media (max-width: 768px) {
    padding: 30px;
    align-items: center;
    text-align: center;
  }
`;

const BrandingContent = styled.div`
  max-width: 450px;
`;

const BrandingTitle = styled.h1`
  font-size: 3.5rem;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 15px;
  color: var(--primary-color);
  @media (max-width: 768px) {
    font-size: 2.5rem;
  }
`;

const BrandingSubtitle = styled.p`
  font-size: 1.2rem;
  font-weight: 300;
  color: var(--text-secondary);
  @media (max-width: 768px) {
    font-size: 1rem;
  }
`;

const FormPanel = styled.div`
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow-y: auto;
  padding: 20px 0;
  @media (max-width: 768px) {
    padding: 20px;
  }
`;

const FormBox = styled.div`
  width: 100%;
  max-width: 400px;
  padding: 40px;
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);
  @media (max-width: 768px) {
    padding: 30px;
  }
`;

const Title = styled.h2`
  font-size: 2.2rem;
  font-weight: 600;
  margin-bottom: 10px;
  color: var(--text-primary);
`;

const Subtitle = styled.p`
  color: var(--text-secondary);
  margin-bottom: 50px;
  font-size: 1rem;
`;

const Form = styled.form``;
const InputGroup = styled.div` margin-bottom: 25px; `;
const Label = styled.label` display: block; margin-bottom: 8px; font-weight: 500; color: var(--text-secondary); `;
const Input = styled.input` width: 100%; padding: 14px 18px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1rem; background-color: var(--bg-main); color: var(--text-primary); `;
const Button = styled.button` width: 100%; padding: 15px; background-color: var(--primary-color); color: white; border: none; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; &:hover { background-color: var(--primary-hover); } &:disabled { opacity: 0.5; } `;
const ErrorMessage = styled.p` color: var(--red-color); font-weight: 500; `;
const BackLink = styled(Link)` display: block; text-align: center; margin-top: 25px; color: var(--text-secondary); font-size: 0.9rem; text-decoration: none; &:hover { text-decoration: underline; } `;


function ResetPasswordPage() {
  const { token } = useParams();
  const navigate = useNavigate();
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isValidToken, setIsValidToken] = useState(false);
  const [error, setError] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    try {
      const decoded = jwtDecode(token);
      const currentTime = Date.now() / 1000;
      if (decoded.exp < currentTime) {
        setError('Link reset password sudah kedaluwarsa. Silakan minta yang baru.');
        setIsValidToken(false);
      } else {
        setIsValidToken(true);
      }
    } catch (err) {
      setError('Token tidak valid atau salah.');
      setIsValidToken(false);
    }
  }, [token]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (password !== confirmPassword) {
      return toast.error("Password dan konfirmasi password tidak cocok.");
    }
    if (password.length < 6) {
      return toast.error("Password minimal harus 6 karakter.");
    }

    setIsSubmitting(true);
    try {
      const response = await resetPassword(token, { password });
      toast.success(response.data.message);
      navigate('/login');
    } catch (err) {
      toast.error(err.response?.data?.message || 'Gagal mereset password.');
    } finally {
        setIsSubmitting(false);
    }
  };

  return (
    <PageContainer>
        <BrandingPanel>
            <BrandingContent>
                <BrandingTitle>Buat Password Baru</BrandingTitle>
                <BrandingSubtitle>Keamanan akun Anda adalah prioritas kami. Silakan buat password baru yang kuat.</BrandingSubtitle>
            </BrandingContent>
        </BrandingPanel>
        <FormPanel>
            <FormBox>
                <Title>Reset Password</Title>
                {isValidToken ? (
                <>
                    <Subtitle>Masukkan password baru Anda di bawah ini.</Subtitle>
                    <Form onSubmit={handleSubmit}>
                    <InputGroup>
                        <Label htmlFor="password">Password Baru</Label>
                        <Input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required autoFocus />
                    </InputGroup>
                    <InputGroup>
                        <Label htmlFor="confirmPassword">Konfirmasi Password Baru</Label>
                        <Input id="confirmPassword" type="password" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required />
                    </InputGroup>
                    <Button type="submit" disabled={isSubmitting}>
                        <FiSave style={{ marginRight: '8px' }}/> 
                        {isSubmitting ? 'Menyimpan...' : 'Simpan Password Baru'}
                    </Button>
                    </Form>
                </>
                ) : (
                <>
                    <ErrorMessage>{error}</ErrorMessage>
                    <BackLink to="/forgot-password">Minta link baru</BackLink>
                </>
                )}
            </FormBox>
        </FormPanel>
    </PageContainer>
  );
}

export default ResetPasswordPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\SettingsPage.jsx =====

// frontend/src/pages/SettingsPage.jsx

import React, { useState, useEffect, useContext } from 'react';
import styled from 'styled-components';
import { ThemeContext } from '../context/ThemeContext';
import { BusinessContext } from '../context/BusinessContext';
import { getEmailSettings, saveEmailSettings, saveBusinessSettings } from '../services/api';
import { toast } from 'react-toastify';
import { Link } from 'react-router-dom';
import { FiCheckCircle, FiX } from 'react-icons/fi';

// --- Styled Components (tidak ada perubahan pada style yang sudah ada) ---
const PageContainer = styled.div` padding: 30px; `;
const Title = styled.h1` font-size: 1.8rem; margin-bottom: 30px; `;

const SettingsGrid = styled.div`
    display: grid;
    grid-template-columns: 1fr 1.2fr;
    gap: 30px;
    align-items: flex-start;

    @media (max-width: 1024px) {
        grid-template-columns: 1fr;
    }
`;

const Column = styled.div`
    display: flex;
    flex-direction: column;
    gap: 30px;
`;

const SettingsCard = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    padding: 25px;
    width: 100%;
`;
const CardTitle = styled.h3` font-size: 1.1rem; font-weight: 600; padding-bottom: 15px; margin-bottom: 25px; border-bottom: 1px solid var(--border-color); display: flex; align-items: center; gap: 10px; `;
const SettingRow = styled.div` display: flex; justify-content: space-between; align-items: center; `;
const SettingLabel = styled.div` p { font-size: 1rem; font-weight: 500; margin: 0; } small { font-size: 0.85rem; color: var(--text-secondary); } `;
const ThemeSwitchLabel = styled.label` position: relative; display: inline-block; width: 60px; height: 34px; `;
const ThemeSwitchInput = styled.input` opacity: 0; width: 0; height: 0; &:checked + span { background-color: var(--primary-color); } &:checked + span:before { transform: translateX(26px); } `;
const ThemeSwitchSlider = styled.span` position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: var(--border-color); transition: .4s; border-radius: 34px; &:before { position: absolute; content: ""; height: 26px; width: 26px; left: 4px; bottom: 4px; background-color: white; transition: .4s; border-radius: 50%; } `;
const InfoBox = styled.div` padding: 20px; background-color: var(--bg-main); border-radius: 8px; margin-bottom: 20px; display: flex; align-items: center; gap: 15px; `;
const Form = styled.form` display: flex; flex-direction: column; gap: 20px; `;
const InputGroup = styled.div``;
const Label = styled.label` display: block; margin-bottom: 8px; font-weight: 500; color: var(--text-secondary); `;
const Input = styled.input` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1rem; background-color: var(--bg-main); color: var(--text-primary); &:focus { outline: none; border-color: var(--primary-color); } `;
const Button = styled.button` padding: 10px 20px; border-radius: 8px; border: 1px solid ${props => props.$primary ? 'var(--primary-color)' : 'var(--border-color)'}; font-weight: 600; cursor: pointer; background-color: ${props => props.$primary ? 'var(--primary-color)' : 'transparent'}; color: ${props => props.$primary ? 'white' : 'var(--text-primary)'}; &:hover { opacity: 0.9; } `;
const TagsContainer = styled.div` display: flex; flex-wrap: wrap; gap: 10px; padding: 10px; border: 1px solid var(--border-color); border-radius: 8px; min-height: 48px; align-items: center; `;
const Tag = styled.div` background-color: var(--primary-color); color: white; padding: 5px 10px; border-radius: 5px; display: flex; align-items: center; gap: 8px; font-size: 0.9rem; `;
const RemoveTagButton = styled.button` background: none; border: none; color: white; cursor: pointer; padding: 0; line-height: 1; display: flex; align-items: center; justify-content: center; `;
const Select = styled.select`
    width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1rem;
    background-color: var(--bg-main); color: var(--text-primary); appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat; background-position: right 12px center; background-size: 20px;
    &:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2); }
`;
const CheckboxContainer = styled.div` /* NEW: Styled for checkboxes like is_active */
    display: flex;
    align-items: center;
    gap: 10px;
    input[type="checkbox"] {
        appearance: none;
        width: 20px;
        height: 20px;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        background-color: var(--bg-main);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        &:checked {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        &:checked::before {
            content: '✔';
            font-size: 14px;
            color: white;
            display: block;
        }
    }
    label {
        margin-bottom: 0;
        cursor: pointer;
        color: var(--text-primary);
        font-weight: 500;
    }
`;

function SettingsPage() {
    const { theme, toggleTheme } = useContext(ThemeContext);
    const { settings, fetchBusinessSettings } = useContext(BusinessContext);

    const [emailSettings, setEmailSettings] = useState({ email: '', appPassword: '', sender_name: '' });
    const [savedEmail, setSavedEmail] = useState('');
    
    // low_stock_threshold state removed
    const [formData, setFormData] = useState(() => ({
        business_name: '', address: '', phone: '',
        payment_methods: [], receipt_logo_url: '', receipt_footer_message: '',
        receipt_template: 'STANDARD_RECEIPT_TEMPLATE', tax_rate: 0.00,
        // low_stock_threshold: 10, // Default value removed
    }));
    const [newPaymentMethod, setNewPaymentMethod] = useState('');
    const [isEditingEmail, setIsEditingEmail] = useState(false);

    useEffect(() => {
        const fetchAllSettings = async () => {
            try {
                const emailRes = await getEmailSettings();
                if (emailRes.data && emailRes.data.sender_email) {
                    setSavedEmail(emailRes.data.sender_email);
                    setEmailSettings(prev => ({ ...prev, email: emailRes.data.sender_email, sender_name: emailRes.data.sender_name || '' }));
                    setIsEditingEmail(false);
                } else {
                    setIsEditingEmail(true);
                }
            } catch (error) {
                toast.error("Gagal memuat beberapa setelan.");
            }
        };
        fetchAllSettings();
    }, []);

    useEffect(() => {
        if (settings) {
            setFormData({
                business_name: settings.business_name || '',
                address: settings.address || '',
                phone: settings.phone || '',
                payment_methods: Array.isArray(settings.payment_methods)
                    ? settings.payment_methods
                    : (settings.payment_methods ? JSON.parse(settings.payment_methods) : []),
                receipt_logo_url: settings.receipt_logo_url || '',
                receipt_footer_message: settings.receipt_footer_text || '',
                receipt_template: settings.receipt_template || 'STANDARD_RECEIPT_TEMPLATE',
                tax_rate: (settings.tax_rate === null || settings.tax_rate === undefined || settings.tax_rate === '')
                    ? 0.00
                    : parseFloat(settings.tax_rate) * 100,
                // low_stock_threshold: settings.low_stock_threshold !== undefined && settings.low_stock_threshold !== null
                //                     ? parseInt(settings.low_stock_threshold) : 10, // Logic for this removed
            });
        }
    }, [settings]);

    const handleEmailChange = (e) => setEmailSettings({ ...emailSettings, [e.target.name]: e.target.value });
    const handleBusinessChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value,
        }));
    };

    const handleEmailSave = async (e) => {
        e.preventDefault();
        await toast.promise(saveEmailSettings(emailSettings), {
            pending: 'Menyimpan...',
            success: 'Setelan email berhasil disimpan!',
            error: (err) => `Gagal menyimpan: ${err.response?.data?.message || err.message}`
        });
        setSavedEmail(emailSettings.email);
        setEmailSettings(prev => ({ ...prev, appPassword: '' }));
        setIsEditingEmail(false);
    };

    const handleBusinessSave = async (e) => {
        e.preventDefault();
        const dataToSave = { ...formData };
        if (dataToSave.tax_rate !== '' && !isNaN(parseFloat(dataToSave.tax_rate))) {
            dataToSave.tax_rate = parseFloat(dataToSave.tax_rate) / 100;
        } else {
            dataToSave.tax_rate = 0.00;
        }
        // low_stock_threshold data is no longer sent
        // dataToSave.low_stock_threshold = parseInt(dataToSave.low_stock_threshold) || 0;

        await toast.promise(saveBusinessSettings(dataToSave), {
            pending: 'Menyimpan...',
            success: 'Setelan bisnis berhasil diperbarui!',
            error: (err) => `Gagal menyimpan: ${err.response?.data?.message || err.message}`
        });
        fetchBusinessSettings();
    };

    const addPaymentMethod = () => {
        const trimmedMethod = newPaymentMethod.trim();
        if (trimmedMethod && !formData.payment_methods.some(m => m.toLowerCase() === trimmedMethod.toLowerCase())) {
            setFormData(prev => ({...prev, payment_methods: [...prev.payment_methods, trimmedMethod]}));
            setNewPaymentMethod('');
        } else if (trimmedMethod) {
            toast.warn('Metode pembayaran ini sudah ada.');
        }
    };

    const removePaymentMethod = (methodToRemove) => {
        setFormData(prev => ({...prev, payment_methods: prev.payment_methods.filter(m => m !== methodToRemove)}));
    };

    return (
        <PageContainer>
            <Title>Setelan</Title>
            <SettingsGrid>
                <Column>
                    <SettingsCard>
                        <CardTitle>Profil Bisnis</CardTitle>
                        <Form onSubmit={handleBusinessSave}>
                            <InputGroup>
                                <Label>Nama Bisnis</Label>
                                <Input name="business_name" value={formData.business_name} onChange={handleBusinessChange} placeholder="Nama Toko Anda" />
                            </InputGroup>
                            <InputGroup>
                                <Label>Telepon</Label>
                                <Input name="phone" value={formData.phone} onChange={handleBusinessChange} placeholder="No. Telepon Toko" />
                            </InputGroup>
                            <InputGroup>
                                <Label>Alamat</Label>
                                <Input as="textarea" rows="3" name="address" value={formData.address} onChange={handleBusinessChange} placeholder="Alamat lengkap toko" />
                            </InputGroup>
                            {/* Removed InputGroup for low_stock_threshold */}
                            
                            <div style={{ display: 'flex', justifyContent: 'flex-end' }}><Button type="submit" $primary>Simpan Profil</Button></div>
                        </Form>
                    </SettingsCard>

                    <SettingsCard>
                        <CardTitle>Tampilan</CardTitle>
                        <SettingRow>
                            <SettingLabel>
                                <p>Mode Tampilan</p>
                                <small>Anda sedang menggunakan mode {theme === 'light' ? 'Terang' : 'Gelap'}</small>
                            </SettingLabel>
                            <ThemeSwitchLabel>
                                <ThemeSwitchInput type="checkbox" onChange={toggleTheme} checked={theme === 'dark'} />
                                <ThemeSwitchSlider />
                            </ThemeSwitchLabel>
                        </SettingRow>
                    </SettingsCard>
                </Column>

                <Column>
                    <SettingsCard>
                        <CardTitle>Konfigurasi Email Pengirim Struk</CardTitle>
                        {!isEditingEmail && savedEmail ? (
                            <div>
                                <InfoBox><FiCheckCircle size={24} color="var(--green-color)" /><div><p style={{ margin: 0, fontWeight: 500 }}>Terhubung: {savedEmail}</p></div></InfoBox>
                                <Button onClick={() => setIsEditingEmail(true)}>Ubah Setelan</Button>
                            </div>
                        ) : (
                            <Form onSubmit={handleEmailSave}>
                                <InputGroup><Label>Email Pengirim (Gmail)</Label><Input type="email" name="email" value={emailSettings.email} onChange={handleEmailChange} required/></InputGroup>
                                <InputGroup><Label>Nama Pengirim</Label><Input type="text" name="sender_name" value={emailSettings.sender_name} onChange={handleEmailChange} placeholder="Nama Bisnis Anda"/></InputGroup>
                                <InputGroup><Label>Sandi Aplikasi</Label><Input type="password" name="appPassword" value={emailSettings.appPassword} onChange={handleEmailChange} required placeholder="16 karakter sandi aplikasi"/><small style={{ color: 'var(--text-secondary)', marginTop: '5px', display: 'block' }}>Tidak tahu? <Link to="/tutorial/app-password" style={{ color: 'var(--primary-color)' }}>Lihat tutorial</Link></small></InputGroup>
                                <div style={{ display: 'flex', gap: '15px', justifyContent: 'flex-end' }}>
                                    {isEditingEmail && savedEmail && <Button type="button" onClick={() => setIsEditingEmail(false)}>Batal</Button>}
                                    <Button type="submit" $primary>Simpan</Button>
                                </div>
                            </Form>
                        )}
                    </SettingsCard>
                    <SettingsCard>
                        <CardTitle>Format Struk & Metode Pembayaran</CardTitle>
                        <Form onSubmit={handleBusinessSave}>
                            <InputGroup><Label>Metode Pembayaran</Label><TagsContainer>{formData.payment_methods.map(method => (<Tag key={method}>{method}<RemoveTagButton type="button" onClick={() => removePaymentMethod(method)}><FiX size={16} /></RemoveTagButton></Tag>))}</TagsContainer><div style={{ display: 'flex', gap: '10px', marginTop: '10px' }}><Input value={newPaymentMethod} onChange={(e) => setNewPaymentMethod(e.target.value)} onKeyPress={(e) => { if (e.key === 'Enter') { e.preventDefault(); addPaymentMethod(); } }} placeholder="Tambah metode baru"/><Button type="button" onClick={addPaymentMethod}>Tambah</Button></div></InputGroup>
                            <InputGroup><Label>Format Struk</Label><Select name="receipt_template" value={formData.receipt_template} onChange={handleBusinessChange}><option value="STANDARD_RECEIPT_TEMPLATE">Struk Standar</option><option value="THERMAL_RECEIPT_TEMPLATE">Struk Thermal</option></Select></InputGroup>
                            <InputGroup><Label>URL Logo Struk</Label><Input name="receipt_logo_url" value={formData.receipt_logo_url} onChange={handleBusinessChange} /></InputGroup>
                            <InputGroup><Label>Teks Footer Struk</Label><Input name="receipt_footer_message" value={formData.receipt_footer_message} onChange={handleBusinessChange} /></InputGroup>
                            <InputGroup><Label>Tarif Pajak Global (%)</Label><Input type="number" name="tax_rate" value={formData.tax_rate} onChange={handleBusinessChange} step="0.01" min="0" max="100"/></InputGroup>
                            <div style={{ display: 'flex', justifyContent: 'flex-end' }}><Button type="submit" $primary>Simpan Setelan Bisnis</Button></div>
                        </Form>
                    </SettingsCard>
                </Column>
            </SettingsGrid>
        </PageContainer>
    );
}

export default SettingsPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\ShiftHistoryPage.jsx =====

// frontend/src/pages/ShiftHistoryPage.jsx

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { getShiftHistory, deleteShift } from '../services/api';
import { toast } from 'react-toastify';
import { FiClock, FiFileText, FiTrash2 } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import { jwtDecode } from 'jwt-decode';

const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;
const PageHeader = styled.header`
    margin-bottom: 30px;
    flex-shrink: 0;
`;
const Title = styled.h1`
    font-size: 1.8rem;
    display: flex;
    align-items: center;
    gap: 12px;
`;
const TableContainer = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
`;
const TableWrapper = styled.div`
    overflow-x: hidden;
    flex-grow: 1;
`;
const Table = styled.table`
    width: 100%;
    border-collapse: collapse;
    min-width: 580px; 
`;
const Th = styled.th`
    /* NEW: Rata tengah semua header tabel */
    text-align: center; 
    padding: 15px 20px;
    background-color: var(--bg-main);
    border-bottom: 1px solid var(--border-color);
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.9rem;
    white-space: nowrap; 
    text-transform: uppercase;
`;
const Td = styled.td`
    /* NEW: Rata tengah semua sel data tabel secara default */
    text-align: center; 
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    vertical-align: middle;
    white-space: normal; 
    word-break: break-word; 
    
    &.nowrap {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    /* NEW: Tambahkan kelas rata kiri spesifik jika dibutuhkan untuk kolom tertentu */
    &.text-left {
        text-align: left;
    }
`;
const Tr = styled.tr`
    &:last-child > td { border-bottom: none; }
`;
const DifferenceText = styled.span`
    font-weight: 700;
    color: ${props => props.$isPositive ? 'var(--green-color)' : props => props.$isNegative ? 'var(--red-color)' : 'var(--text-primary)'};
`;
const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    margin: 0 5px;
    &:hover { color: var(--red-color); }
`;
const TimePeriodCell = styled.div`
    font-size: 0.85rem;
    color: var(--text-primary);
    line-height: 1.3; 
    .start-time {
        font-weight: 600;
    }
    .end-time {
        color: var(--text-secondary);
    }
`;


const formatCurrency = (value) => `Rp ${new Intl.NumberFormat('id-ID').format(value || 0)}`;
const formatDateTimeCombined = (start, end) => {
    const startDate = new Date(start);
    const endDate = new Date(end);

    const dateStr = startDate.toLocaleDateString('id-ID', { day: 'numeric', month: 'short', year: 'numeric' });
    const startTime = startDate.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' });
    const endTime = endDate.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' });

    return (
        <>
            <div className="start-time">{dateStr}</div>
            <div className="end-time">{startTime} - {endTime}</div>
        </>
    );
};


function ShiftHistoryPage() {
    const [history, setHistory] = useState([]);
    const [loading, setLoading] = useState(true);
    const [userRole, setUserRole] = useState(null);

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            try {
                const decoded = jwtDecode(token);
                setUserRole(decoded.role);
            } catch (error) {
                console.error("Invalid token:", error);
                setUserRole(null);
            }
        }

        const fetchHistory = async () => {
            setLoading(true);
            try {
                const res = await getShiftHistory();
                setHistory(res.data);
            } catch (error) {
                toast.error("Gagal memuat riwayat shift.");
            } finally {
                setLoading(false);
            }
        };
        fetchHistory();
    }, []);

    const handleDeleteShift = async (shiftId) => {
        if (window.confirm(`Yakin ingin menghapus shift #${shiftId} ini? Aksi ini tidak dapat dibatalkan.`)) {
            try {
                await toast.promise(deleteShift(shiftId), {
                    pending: 'Menghapus shift...',
                    success: 'Shift berhasil dihapus!',
                    error: (err) => err.response?.data?.message || 'Gagal menghapus shift.'
                });
                setHistory(prevHistory => prevHistory.filter(shift => shift.id !== shiftId));
            } catch (error) {
                console.error("Error deleting shift:", error);
            }
        }
    };


    return (
        <PageContainer>
            <PageHeader>
                <Title><FiClock /> Riwayat Shift</Title>
            </PageHeader>
            
            <TableContainer>
                {loading ? (
                    <div style={{ padding: '20px' }}><Skeleton count={10} height={50} /></div>
                ) : history.length > 0 ? (
                    <TableWrapper>
                        <Table>
                            <thead>
                                <tr>
                                    <Th style={{width: '15%'}}>Kasir</Th> 
                                    <Th style={{width: '25%'}}>Waktu Shift</Th>
                                    <Th style={{width: '15%'}}>Kas Awal</Th> 
                                    <Th style={{width: '15%'}}>Penjualan</Th> 
                                    <Th style={{width: '15%'}}>Fisik Akhir</Th> 
                                    <Th style={{width: '10%'}}>Selisih</Th> 
                                    {userRole === 'admin' && <Th style={{width: '5%'}}>Aksi</Th>}
                                </tr>
                            </thead>
                            <tbody>
                                {history.map(shift => (
                                    <Tr key={shift.id}>
                                        <Td className="text-left">{shift.user_name}</Td> {/* NEW: Kasir rata kiri */}
                                        <Td><TimePeriodCell>{formatDateTimeCombined(shift.start_time, shift.end_time)}</TimePeriodCell></Td>
                                        <Td className="nowrap">{formatCurrency(shift.starting_cash)}</Td>
                                        <Td className="nowrap">{formatCurrency(shift.total_sales)}</Td>
                                        <Td className="nowrap">{formatCurrency(shift.ending_cash)}</Td>
                                        <Td className="nowrap">
                                            <DifferenceText 
                                                $isPositive={shift.difference > 0} 
                                                $isNegative={shift.difference < 0}
                                            >
                                                {formatCurrency(shift.difference)}
                                            </DifferenceText>
                                        </Td>
                                        {userRole === 'admin' && (
                                            <Td>
                                                <ActionButton onClick={() => handleDeleteShift(shift.id)}>
                                                    <FiTrash2 size={18} />
                                                </ActionButton>
                                            </Td>
                                        )}
                                    </Tr>
                                ))}
                            </tbody>
                        </Table>
                    </TableWrapper>
                ) : (
                    <div style={{ textAlign: 'center', padding: '50px', color: 'var(--text-secondary)' }}>
                        <FiFileText size={48} />
                        <p style={{marginTop: '15px'}}>Belum ada riwayat shift yang ditutup.</p>
                    </div>
                )}
            </TableContainer>
        </PageContainer>
    );
}

export default ShiftHistoryPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\StockAdjustmentPage.jsx =====

// frontend/src/pages/StockAdjustmentPage.jsx
import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { getProducts, adjustStock } from '../services/api';
import { toast } from 'react-toastify';
import { FiArrowLeft, FiSave, FiSearch } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';

// --- Styled Components ---
const PageContainer = styled.div`
    padding: 30px;
    max-width: 1200px;
    margin: 0 auto;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
`;

const Title = styled.h1`
    font-size: 1.8rem;
`;

const BackButton = styled.button`
    background-color: var(--bg-surface);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 10px 18px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover {
        background-color: var(--bg-main);
    }
`;

const MainGrid = styled.div`
    display: grid;
    grid-template-columns: 1fr 1.5fr;
    gap: 30px;
`;

const Panel = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    padding: 25px;
    height: 70vh;
    display: flex;
    flex-direction: column;
`;

const PanelTitle = styled.h2`
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0 0 20px 0;
    padding-bottom: 20px;
    border-bottom: 1px solid var(--border-color);
`;

const SearchInput = styled.input`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: var(--bg-main); /* Sinkron dengan theme */
    color: var(--text-primary); /* Sinkron dengan theme */

    &::placeholder {
        color: var(--text-placeholder); /* Sinkron dengan theme */
        opacity: 0.8; /* Sedikit transparansi untuk placeholder */
    }

    &:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2);
    }
`;

const ProductList = styled.ul`
    list-style: none;
    padding: 0;
    overflow-y: auto;
    flex-grow: 1;
`;

const ListItem = styled.li`
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    border-radius: 8px;
    cursor: pointer;
    background-color: ${props => props.$isSelected ? 'var(--primary-color)15' : 'transparent'};
    &:hover {
        background-color: var(--bg-main);
    }
`;

const Form = styled.form`
    display: flex;
    flex-direction: column;
    gap: 20px;
`;

const InputGroup = styled.div``;

const Label = styled.label`
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    font-size: 0.9rem;
    color: var(--text-secondary);
`;

const Input = styled.input`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background-color: var(--bg-main);
    color: var(--text-primary);
    font-size: 1rem;
`;
const Select = styled.select`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background-color: var(--bg-main);
    color: var(--text-primary);
    font-size: 1rem;
`;

const SaveButton = styled.button`
    padding: 12px 25px;
    border-radius: 8px;
    border: none;
    background-color: var(--primary-color);
    color: white;
    font-weight: 600;
    cursor: pointer;
    align-self: flex-end;
    margin-top: 10px;
    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
`;

function StockAdjustmentPage() {
    const navigate = useNavigate();
    const [products, setProducts] = useState([]);
    const [filteredProducts, setFilteredProducts] = useState([]);
    const [selectedProduct, setSelectedProduct] = useState(null);
    const [formData, setFormData] = useState({ newStockQuantity: '', type: 'adjustment', reason: '' });
    const [loading, setLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);

    useEffect(() => {
        const fetchAllProducts = async () => {
            try {
                const res = await getProducts();
                setProducts(res.data);
                setFilteredProducts(res.data);
            } catch (error) {
                toast.error("Gagal memuat produk.");
            } finally {
                setLoading(false);
            }
        };
        fetchAllProducts();
    }, []);

    const handleSearch = (e) => {
        const term = e.target.value.toLowerCase();
        setFilteredProducts(products.filter(p => p.name.toLowerCase().includes(term)));
    };

    const handleSelectProduct = (product) => {
        setSelectedProduct(product);
        setFormData({ newStockQuantity: product.stock, type: 'adjustment', reason: '' });
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!selectedProduct) return toast.warn("Pilih produk terlebih dahulu.");
        if (formData.newStockQuantity === '' || isNaN(formData.newStockQuantity)) return toast.error("Jumlah stok baru harus berupa angka.");

        setIsSubmitting(true);
        const dataToSend = {
            productId: selectedProduct.id,
            newStockQuantity: parseInt(formData.newStockQuantity, 10),
            type: formData.type,
            reason: formData.reason,
        };

        try {
            await toast.promise(adjustStock(dataToSend), {
                pending: 'Menyimpan penyesuaian stok...',
                success: 'Stok berhasil diperbarui!',
                error: 'Gagal memperbarui stok.'
            });
            // Reset state & refresh data
            setSelectedProduct(null);
            setFormData({ newStockQuantity: '', type: 'adjustment', reason: '' });
            const res = await getProducts();
            setProducts(res.data);
            setFilteredProducts(res.data);
        } catch (error) {
            console.error(error);
        } finally {
            setIsSubmitting(false);
        }
    };
    
    return (
        <PageContainer>
            <PageHeader>
                <Title>Penyesuaian Stok</Title>
                <BackButton onClick={() => navigate('/dashboard')}><FiArrowLeft size={18} /> Kembali</BackButton>
            </PageHeader>
            <MainGrid>
                <Panel>
                    <PanelTitle>Pilih Produk</PanelTitle>
                    <SearchInput placeholder="Cari produk..." onChange={handleSearch} />
                    {loading ? <Skeleton count={10} /> : (
                        <ProductList>
                            {filteredProducts.map(p => (
                                <ListItem key={p.id} onClick={() => handleSelectProduct(p)} $isSelected={selectedProduct?.id === p.id}>
                                    <span>{p.name}</span>
                                    <strong>Stok: {p.stock}</strong>
                                </ListItem>
                            ))}
                        </ProductList>
                    )}
                </Panel>
                <Panel>
                    <PanelTitle>Detail Penyesuaian</PanelTitle>
                    {selectedProduct ? (
                        <Form onSubmit={handleSubmit}>
                            <h3>{selectedProduct.name}</h3>
                            <p>Stok saat ini di sistem: <strong>{selectedProduct.stock}</strong></p>
                            <InputGroup>
                                <Label>Tipe Penyesuaian</Label>
                                <Select name="type" value={formData.type} onChange={handleChange}>
                                    <option value="adjustment">Stok Opname / Penyesuaian</option>
                                    <option value="damage">Barang Rusak</option>
                                    <option value="return">Retur Barang</option>
                                    <option value="other">Lainnya</option>
                                </Select>
                            </InputGroup>
                            <InputGroup>
                                <Label>Jumlah Stok Fisik Baru</Label>
                                <Input type="number" name="newStockQuantity" value={formData.newStockQuantity} onChange={handleChange} required />
                            </InputGroup>
                            <InputGroup>
                                <Label>Alasan/Catatan (Opsional)</Label>
                                <Input as="textarea" rows="3" name="reason" value={formData.reason} onChange={handleChange} />
                            </InputGroup>
                            <SaveButton type="submit" disabled={isSubmitting}>
                                <FiSave /> {isSubmitting ? 'Menyimpan...' : 'Simpan Penyesuaian'}
                            </SaveButton>
                        </Form>
                    ) : (
                        <div style={{ margin: 'auto', textAlign: 'center', color: 'var(--text-secondary)' }}>
                            <p>Silakan pilih produk dari daftar di sebelah kiri untuk melakukan penyesuaian stok.</p>
                        </div>
                    )}
                </Panel>
            </MainGrid>
        </PageContainer>
    );
}

export default StockAdjustmentPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\SupplierPage.jsx =====

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { getSuppliers, createSupplier, updateSupplier, deleteSupplier } from '../services/api';
import SupplierFormModal from '../components/SupplierFormModal';
import { toast } from 'react-toastify';
import { FiEdit, FiTrash2, FiPlus, FiTruck } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';

// --- Styled Components ---
const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
`;

const Title = styled.h1`
    font-size: 1.8rem;
`;

const AddButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover { background-color: var(--primary-hover); }
`;

const TableContainer = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
`;

const TableWrapper = styled.div`
    overflow-x: auto; /* <-- UPDATED: Added horizontal scroll */
    flex-grow: 1; /* <-- UPDATED: Ensure it grows to fill space */
`;

const Table = styled.table`
    width: 100%;
    border-collapse: collapse;
`;

const Th = styled.th`
    text-align: left;
    padding: 15px 20px;
    background-color: var(--bg-main);
    border-bottom: 1px solid var(--border-color);
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.9rem;
    text-transform: uppercase;
`;

const Td = styled.td`
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    vertical-align: middle; /* Added for better alignment */
`;

const Tr = styled.tr`
    &:last-child {
        ${Td} { border-bottom: none; }
    }
`;

const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    margin-right: 15px;
    &:hover { color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'}; }
`;

const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px dashed var(--border-color);
`;

const EmptyStateTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-top: 20px;
    margin-bottom: 10px;
`;


function SupplierPage() {
    const [suppliers, setSuppliers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingSupplier, setEditingSupplier] = useState(null);
    const [isSubmitting, setIsSubmitting] = useState(false); // Tambahkan state baru

    const fetchSuppliers = async () => {
        setLoading(true);
        try {
            const res = await getSuppliers();
            setSuppliers(res.data);
        } catch (error) {
            toast.error("Gagal memuat data pemasok.");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchSuppliers();
    }, []);

    const handleOpenModal = (supplier = null) => {
        setEditingSupplier(supplier);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setEditingSupplier(null);
    };

    const handleSaveSupplier = async (supplierData) => {
        setIsSubmitting(true); // Set true di awal
        const promise = editingSupplier
            ? updateSupplier(editingSupplier.id, supplierData)
            : createSupplier(supplierData);

        try {
            await toast.promise(promise, {
                pending: 'Menyimpan data...',
                success: 'Data berhasil disimpan!',
                error: 'Gagal menyimpan data.'
            });
            fetchSuppliers();
        } catch (err) {
            console.error(err);
        } finally {
            setIsSubmitting(false); // Set false di akhir
            handleCloseModal();
        }
    };

    const handleDeleteSupplier = async (id) => {
        if (window.confirm('Yakin ingin menghapus pemasok ini?')) {
            await toast.promise(deleteSupplier(id), {
                pending: 'Menghapus data...',
                success: 'Pemasok berhasil dihapus!',
                error: 'Gagal menghapus data.'
            });
            fetchSuppliers();
        }
    };

    return (
        <PageContainer>
            <PageHeader>
                <Title>Manajemen Pemasok</Title>
                <AddButton onClick={() => handleOpenModal()}>
                    <FiPlus /> Tambah Pemasok
                </AddButton>
            </PageHeader>
            
            {loading ? (
                <TableContainer>
                    <Skeleton count={5} height={70} style={{borderRadius: '16px', margin: '15px 20px'}}/>
                </TableContainer>
            ) : suppliers.length > 0 ? (
                <TableContainer>
                    <TableWrapper>
                        <Table>
                            <thead>
                                <tr>
                                    <Th>Nama Pemasok</Th>
                                    <Th>Narahubung</Th>
                                    <Th>Telepon</Th>
                                    <Th>Email</Th>
                                    <Th>Aksi</Th>
                                </tr>
                            </thead>
                            <tbody>
                                {suppliers.map(supplier => (
                                    <Tr key={supplier.id}>
                                        <Td>{supplier.name}</Td>
                                        <Td>{supplier.contact_person}</Td>
                                        <Td>{supplier.phone}</Td>
                                        <Td>{supplier.email}</Td>
                                        <Td>
                                            <ActionButton onClick={() => handleOpenModal(supplier)}><FiEdit size={18} /></ActionButton>
                                            <ActionButton $danger onClick={() => handleDeleteSupplier(supplier.id)}><FiTrash2 size={18} /></ActionButton>
                                        </Td>
                                    </Tr>
                                ))}
                            </tbody>
                        </Table>
                    </TableWrapper>
                </TableContainer>
            ) : (
                <EmptyStateContainer>
                    <FiTruck size={48} />
                    <EmptyStateTitle>Belum Ada Pemasok</EmptyStateTitle>
                    <p>Klik tombol di pojok kanan atas untuk menambahkan pemasok pertama Anda.</p>
                </EmptyStateContainer>
            )}

            <SupplierFormModal 
                isOpen={isModalOpen}
                onClose={handleCloseModal}
                onSave={handleSaveSupplier}
                supplier={editingSupplier}
                isSubmitting={isSubmitting} // Kirim prop baru
            />
        </PageContainer>
    );
}

export default SupplierPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\TargetPage.jsx =====

// frontend/src/pages/TargetPage.jsx

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { getRevenueTarget, saveRevenueTarget } from '../services/api';
import { toast } from 'react-toastify';
import { FiArrowLeft, FiTarget, FiDollarSign, FiCalendar, FiSun } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';

// --- Styled Components (Tidak Ada Perubahan) ---
const PageContainer = styled.div`
    padding: 30px;
    max-width: 900px;
    margin: 0 auto;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
`;

const Title = styled.h1`
    font-size: 1.8rem;
    display: flex;
    align-items: center;
    gap: 12px;
`;

const BackButton = styled.button`
    background-color: var(--bg-surface);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 10px 18px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover { background-color: var(--bg-main); }
`;

const Grid = styled.div`
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    @media (max-width: 768px) {
        grid-template-columns: 1fr;
    }
`;

const SettingsCard = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    padding: 25px;
`;

const CardTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    padding-bottom: 15px;
    margin: 0 0 25px 0;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    gap: 10px;
`;

const Form = styled.form`
    display: flex;
    flex-direction: column;
    gap: 20px;
`;

const InputGroup = styled.div``;

const Label = styled.label`
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--text-secondary);
`;

const Input = styled.input`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    font-size: 1rem;
    background-color: var(--bg-main);
    color: var(--text-primary);
    &:focus { outline: none; border-color: var(--primary-color); }
`;

const Button = styled.button`
    padding: 12px 20px;
    border-radius: 8px;
    border: none;
    background-color: var(--primary-color);
    color: white;
    font-weight: 600;
    cursor: pointer;
    align-self: flex-end;
    &:hover { opacity: 0.9; }
`;

const CalculationResult = styled.div`
    background-color: var(--bg-main);
    border-radius: 8px;
    padding: 15px;
    margin-top: 15px;
    p {
        margin: 0 0 8px 0;
        color: var(--text-secondary);
        strong {
            color: var(--text-primary);
        }
    }
`;

// --- FUNGSI HELPER UNTUK FORMAT ANGKA ---
const formatToCurrency = (value) => {
    if (!value) return '';
    const number = Number(String(value).replace(/[^0-9]/g, ''));
    if (isNaN(number)) return '';
    return new Intl.NumberFormat('id-ID').format(number);
};

const parseFromCurrency = (value) => {
    if (!value) return '';
    return String(value).replace(/[^0-9]/g, '');
};


function TargetPage() {
    const navigate = useNavigate();
    const [monthlyTarget, setMonthlyTarget] = useState('');
    const [calculatorTarget, setCalculatorTarget] = useState('');
    const [loading, setLoading] = useState(true);
    const [calculation, setCalculation] = useState(null);

    useEffect(() => {
        const fetchTarget = async () => {
            try {
                const res = await getRevenueTarget();
                const targetValue = res.data.monthly_revenue_target || '';
                setMonthlyTarget(targetValue);
                setCalculatorTarget(targetValue);
            } catch (error) {
                toast.error("Gagal memuat target pendapatan.");
            } finally {
                setLoading(false);
            }
        };
        fetchTarget();
    }, []);

    const handleTargetSave = async (e) => {
        e.preventDefault();
        const targetValue = parseFloat(monthlyTarget);
        if (isNaN(targetValue) || targetValue < 0) {
            toast.error("Mohon masukkan angka yang valid.");
            return;
        }
        try {
            await toast.promise(saveRevenueTarget({ target: targetValue }), {
                pending: 'Menyimpan target...',
                success: 'Target pendapatan berhasil disimpan!',
                error: 'Gagal menyimpan target.'
            });
        } catch (error) {
            console.error("Error saving target:", error);
        }
    };
    
    useEffect(() => {
        const target = parseFloat(calculatorTarget);
        if (!isNaN(target) && target > 0) {
            const daysInMonth = 30; // Asumsi rata-rata 30 hari
            const weeksInMonth = 4; // Asumsi 4 minggu
            setCalculation({
                daily: target / daysInMonth,
                // PERBAIKAN: Target mingguan dibagi 4, bukan dikali 7 dari harian
                weekly: target / weeksInMonth,
            });
        } else {
            setCalculation(null);
        }
    }, [calculatorTarget]);
    
    const formatDisplayCurrency = (value) => `Rp ${formatToCurrency(value)}`;
    const formatCalculatedCurrency = (value) => new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR', minimumFractionDigits: 0, maximumFractionDigits: 2 }).format(value);

    return (
        <PageContainer>
            <PageHeader>
                <Title><FiTarget /> Pengaturan Target</Title>
                <BackButton onClick={() => navigate('/dashboard')}>
                    <FiArrowLeft size={18} />
                    Kembali ke Dashboard
                </BackButton>
            </PageHeader>
            
            {loading ? <Skeleton height={300} /> : (
                <Grid>
                    <SettingsCard>
                        <CardTitle><FiCalendar /> Target Pendapatan Bulanan</CardTitle>
                        <Form onSubmit={handleTargetSave}>
                            <InputGroup>
                                <Label htmlFor="monthlyTarget">Masukkan Target (Rp)</Label>
                                <Input
                                    id="monthlyTarget"
                                    type="text"
                                    value={formatDisplayCurrency(monthlyTarget)}
                                    onChange={(e) => setMonthlyTarget(parseFromCurrency(e.target.value))}
                                    placeholder="Contoh: 50.000.000"
                                />
                                <small style={{ color: 'var(--text-secondary)', marginTop: '5px', display: 'block' }}>
                                    Target ini akan digunakan untuk melacak progres di dasbor.
                                </small>
                            </InputGroup>
                            <Button type="submit">Simpan Target</Button>
                        </Form>
                    </SettingsCard>
                    
                    <SettingsCard>
                        <CardTitle><FiDollarSign /> Kalkulator Target</CardTitle>
                        <InputGroup>
                            <Label htmlFor="calculatorTarget">Jika Saya Ingin Pendapatan (Rp)</Label>
                            <Input
                                id="calculatorTarget"
                                type="text"
                                value={formatDisplayCurrency(calculatorTarget)}
                                onChange={(e) => setCalculatorTarget(parseFromCurrency(e.target.value))}
                                placeholder="Masukkan target bulanan..."
                            />
                        </InputGroup>

                        {calculation && (
                            <CalculationResult>
                                <p>Maka, Anda perlu mendapatkan:</p>
                                <p><FiSun /> Target Harian: <strong>{formatCalculatedCurrency(calculation.daily)}</strong></p>
                                <p><FiCalendar /> Target Mingguan: <strong>{formatCalculatedCurrency(calculation.weekly)}</strong></p>
                            </CalculationResult>
                        )}
                    </SettingsCard>
                </Grid>
            )}
        </PageContainer>
    );
}

export default TargetPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\UsersPage.jsx =====

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { getUsers, createUserByAdmin, updateUser, deleteUser } from '../services/api'; // <-- Ubah import
import UserFormModal from '../components/UserFormModal';
import { toast } from 'react-toastify';
import { FiEdit, FiTrash2, FiPlus, FiUsers } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css'; // Make sure this is imported for Skeleton styles

// --- Styled Components ---
const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
`;

const Title = styled.h1`
    font-size: 1.8rem;
`;

const AddButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover { background-color: var(--primary-hover); }
`;

const TableContainer = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
`;

const TableWrapper = styled.div`
    overflow-x: auto; /* <-- UPDATED: Added horizontal scroll */
    flex-grow: 1; /* <-- UPDATED: Ensure it grows to fill space */
`;

const Table = styled.table`
    width: 100%;
    border-collapse: collapse;
`;

const Th = styled.th`
    text-align: left;
    padding: 15px 20px;
    background-color: var(--bg-main);
    border-bottom: 1px solid var(--border-color);
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.9rem;
    text-transform: uppercase;
`;

const Td = styled.td`
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    vertical-align: middle;
`;

const Tr = styled.tr`
    &:last-child {
        ${Td} { border-bottom: none; }
    }
`;

const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    margin-right: 15px;
    &:hover { color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'}; }
`;

const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px dashed var(--border-color);
`;

const EmptyStateTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-top: 20px;
    margin-bottom: 10px;
`;


function UsersPage() {
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingUser, setEditingUser] = useState(null);
    const [isSubmitting, setIsSubmitting] = useState(false); // Tambahkan state baru

    const fetchUsers = async () => {
        setLoading(true);
        try {
            const res = await getUsers();
            setUsers(res.data);
        } catch (error) {
            toast.error("Gagal memuat data pengguna.");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchUsers();
    }, []);

    const handleOpenModal = (user = null) => {
        setEditingUser(user);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setEditingUser(null);
    };

    const handleSaveUser = async (userData) => {
        setIsSubmitting(true); // Set true di awal
        // Logika IF/ELSE untuk membedakan mode
        const promise = editingUser
            ? updateUser(editingUser.id, userData)
            : createUserByAdmin(userData); // <-- Panggil fungsi baru untuk membuat user

        try {
            await toast.promise(promise, {
                pending: 'Menyimpan data pengguna...',
                success: 'Data berhasil disimpan!',
                error: 'Gagal menyimpan data.'
            });
            fetchUsers();
        } catch (error) {
            console.error(error);
        } finally {
            setIsSubmitting(false); // Set false di akhir
            handleCloseModal();
        }
    };

    const handleDeleteUser = async (id) => {
        if (window.confirm('Apakah Anda yakin ingin menghapus pengguna ini?')) {
            await toast.promise(deleteUser(id), {
                pending: 'Menghapus pengguna...',
                success: 'Pengguna berhasil dihapus!',
                error: 'Gagal menghapus pengguna.'
            });
            fetchUsers();
        }
    };

    return (
        <PageContainer>
            <PageHeader>
                <Title>Manajemen Pengguna</Title>
                <AddButton onClick={() => handleOpenModal()}>
                    <FiPlus /> Tambah Pengguna
                </AddButton>
            </PageHeader>
            
            {loading ? (
                <TableContainer>
                    <Skeleton count={5} height={70} style={{ borderRadius: '16px', margin: '15px 20px' }} />
                </TableContainer>
            ) : users.length > 0 ? (
                <TableContainer>
                    <TableWrapper>
                        <Table>
                            <thead>
                                <tr>
                                    <Th>ID</Th>
                                    <Th>Nama</Th>
                                    <Th>Email</Th>
                                    <Th>Peran</Th>
                                    <Th>Aksi</Th>
                                </tr>
                            </thead>
                            <tbody>
                                {users.map(user => (
                                    <Tr key={user.id}>
                                        <Td>{user.id}</Td>
                                        <Td>{user.name}</Td>
                                        <Td>{user.email}</Td>
                                        <Td>{user.role}</Td>
                                        <Td>
                                            <ActionButton onClick={() => handleOpenModal(user)}><FiEdit size={18} /></ActionButton>
                                            <ActionButton $danger onClick={() => handleDeleteUser(user.id)}><FiTrash2 size={18} /></ActionButton>
                                        </Td>
                                    </Tr>
                                ))}
                            </tbody>
                        </Table>
                    </TableWrapper>
                </TableContainer>
            ) : (
                <EmptyStateContainer>
                    <FiUsers size={48} />
                    <EmptyStateTitle>Belum Ada Pengguna</EmptyStateTitle>
                    <p>Klik tombol di pojok kanan atas untuk menambahkan pengguna pertama Anda.</p>
                </EmptyStateContainer>
            )}

            <UserFormModal 
                isOpen={isModalOpen}
                onClose={handleCloseModal}
                onSave={handleSaveUser}
                user={editingUser}
                isSubmitting={isSubmitting} // Kirim prop baru
            />
        </PageContainer>
    );
}

export default UsersPage;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\DashboardPage.jsx =====

// frontend/src/pages/Dashboard/DashboardPage.jsx

import React, { useState, useEffect, useRef, useCallback } from 'react';
import styled from 'styled-components';
import { useReactToPrint } from 'react-to-print';
import { jwtDecode } from 'jwt-decode';
import { toast } from 'react-toastify';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";
import { useNavigate } from 'react-router-dom';

import {
    getStats, 
    getDailySales, 
    getProductSalesPerformance,
    getTopProducts, 
    getCashierPerformance, 
    getRecentSuppliers,
    getNotifications, 
    getInsights, 
    getRevenueTarget,
    getStockInfo, 
    getStaleProducts, 
    getExpiredProducts,
    getTopCustomers // Ensure this is imported now
} from '../../services/api';

import DashboardHeader from './components/DashboardHeader';
import StatCardGrid from './components/StatCardGrid';
import SalesChart from './components/SalesChart';
import InfoTabs from './components/InfoTabs';
import DailyReport from '../../components/DailyReport';
import NotificationsPanel from './components/NotificationsPanel';
import TopProductsChart from './components/TopProductsChart';
import TargetChart from '../../components/TargetChart';

import { FiCalendar, FiFastForward } from 'react-icons/fi';

// Import ShiftContext and Shift Modals
import { useShift } from '../../context/ShiftContext'; // Assuming this path
import StartShiftModal from '../../components/StartShiftModal'; // Assuming this path
import CloseShiftModal from '../../components/CloseShiftModal'; // Assuming this path

const DashboardGrid = styled.div`
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    gap: 24px;
    width: 100%;
    padding: 24px;
    @media (max-width: 1600px) { grid-template-columns: repeat(8, 1fr); }
    @media (max-width: 1200px) { grid-template-columns: repeat(6, 1fr); }
    @media (max-width: 768px) { grid-template-columns: 1fr; }
`;

const FilterContainer = styled.div`
    grid-column: 1 / -1;
    background-color: var(--bg-surface);
    padding: 20px 25px;
    border-radius: 16px;
    border: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    gap: 15px;
    flex-wrap: wrap;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
`;

const DatePickerWrapper = styled.div`
    .react-datepicker-wrapper input {
        padding: 10px 15px;
        border-radius: 8px;
        border: 1px solid var(--border-color);
        background-color: var(--bg-main);
        color: var(--text-primary);
        font-weight: 500;
        width: 130px;
        cursor: pointer;
        text-align: center;
    }
`;

const QuickAccessCard = styled.div`
    grid-column: 1 / -1;
    background: var(--bg-surface);
    padding: 28px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
    display: flex;
    justify-content: center;
    align-items: center;
`;

const QuickAccessButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 12px;
    padding: 15px 30px;
    font-weight: 600;
    font-size: 1.1rem;
    display: flex;
    align-items: center;
    gap: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    
    &:hover { 
        background-color: var(--primary-hover); 
        transform: translateY(-3px);
        box-shadow: 0 8px 15px rgba(0,0,0,0.1);
    }
`;

function DashboardPage() {
    const navigate = useNavigate();
    const [currentTime, setCurrentTime] = useState(new Date());
    const [userName, setUserName] = useState('Pengguna');
    const [loading, setLoading] = useState(true);
    const [dashboardData, setDashboardData] = useState({
        notifications: [],
        insights: [],
        productSalesPerformance: [],
        stats: {},
        stockInfo: [], 
        staleProducts: [],
        expiredProducts: [],
        topCustomers: [],
        cashierPerformance: [],
        recentSuppliers: [],
        dailySales: [],
        revenueTarget: 0 
    });
    const [dailyReportData, setDailyReportData] = useState(null);
    const [startDate, setStartDate] = useState(() => {
        const d = new Date();
        d.setDate(d.getDate() - 30);
        return d;
    });
    const [endDate, setEndDate] = useState(new Date());
    const reportRef = useRef(null);

    // --- Shift Management State and Handlers ---
    const { activeShift, refreshShiftStatus } = useShift();
    const [startShiftModalOpen, setStartShiftModalOpen] = useState(false);
    const [closeShiftModalOpen, setCloseShiftModalOpen] = useState(false);

    const handleStartShift = () => {
        setStartShiftModalOpen(true);
    };

    const handleCloseShift = () => {
        setCloseShiftModalOpen(true);
    };
    // --- End Shift Management ---

    const handlePrint = useReactToPrint({
        content: () => reportRef.current,
        documentTitle: `Laporan-Harian-${new Date().toISOString().slice(0, 10)}`,
        onAfterPrint: () => setDailyReportData(null),
    });

    const handlePrepareDailyReport = async () => {
        try {
            const [statsRes, topProductsRes] = await Promise.all([
                getStats(startDate, endDate),
                getTopProducts(startDate, endDate)
            ]);
            const transformedData = {
                reportDate: endDate.toISOString(),
                totalRevenue: statsRes.data.totalRevenue || 0,
                totalProfit: statsRes.data.totalProfit || 0,
                totalTransactions: statsRes.data.totalTransactions || 0,
                totalSoldUnits: statsRes.data.totalSoldUnits || 0,
                newCustomers: statsRes.data.newCustomers || 0,
                topProducts: topProductsRes.data || [],
                startDate: startDate.toISOString(),
                endDate: endDate.toISOString()
            };
            setDailyReportData(transformedData);
            toast.success("Laporan lengkap siap, silakan klik 'Cetak Laporan'.", {
                position: "bottom-left"
            });
        } catch (err) {
            console.error('Error preparing daily report:', err);
            toast.error("Gagal memuat data laporan harian yang lengkap.");
        }
    };

    const handleManualPrint = () => {
        if (!dailyReportData) {
            toast.error("Silakan siapkan laporan terlebih dahulu.");
            return;
        }
        if (reportRef.current) {
            handlePrint();
        } else {
            toast.error("Gagal mencetak: Komponen laporan tidak ditemukan.");
        }
    };

    useEffect(() => {
        const timer = setInterval(() => setCurrentTime(new Date()), 1000);
        return () => clearInterval(timer);
    }, []);

    const fetchData = useCallback(async () => {
        setLoading(true);
        try {
            const token = localStorage.getItem('token');
            if (token) {
                const decoded = jwtDecode(token);
                setUserName(decoded.name || 'Kasir');
            }

            const [
                statsRes, dailySalesRes, stockInfoRes, staleProductsRes, 
                expiredProductsRes, topCustomersRes, cashierPerformanceRes, recentSuppliersRes, 
                notificationsRes, insightsRes, productSalesPerformanceRes, revenueTargetRes
            ] = await Promise.all([
                getStats(startDate, endDate), 
                getDailySales(startDate, endDate),
                getStockInfo(), 
                getStaleProducts(30), 
                getExpiredProducts(30),
                getTopCustomers(startDate, endDate), // This line
                getCashierPerformance(startDate, endDate), // This line
                getRecentSuppliers(5), // This line
                getNotifications(startDate, endDate), // This line
                getInsights(startDate, endDate), // This line
                getProductSalesPerformance(startDate, endDate), // This line
                getRevenueTarget() // This line
            ]);

            setDashboardData({
                stats: { ...statsRes.data, monthly_revenue_target: revenueTargetRes.data.monthly_revenue_target },
                dailySales: dailySalesRes.data, 
                stockInfo: stockInfoRes.data, 
                staleProducts: staleProductsRes.data, 
                expiredProducts: expiredProductsRes.data, 
                topCustomers: topCustomersRes.data,
                cashierPerformance: cashierPerformanceRes.data, 
                recentSuppliers: recentSuppliersRes.data,
                notifications: notificationsRes.data, 
                insights: insightsRes.data,
                productSalesPerformance: productSalesPerformanceRes.data
            });
        } catch (err) {
            toast.error("Gagal memuat sebagian data dashboard.");
            console.error("Dashboard data fetch error:", err);
        } finally {
            setLoading(false);
        }
    }, [startDate, endDate]);

    useEffect(() => {
        fetchData();
    }, [fetchData]);

    const handleRefresh = () => fetchData();

    return (
        <DashboardGrid>
            <DashboardHeader
                currentTime={currentTime}
                onRefresh={handleRefresh}
                onPrint={handlePrepareDailyReport}
                onManualPrint={handleManualPrint}
                // Pass shift-related props to DashboardHeader
                activeShift={activeShift}
                onStartShift={handleStartShift}
                onCloseShift={handleCloseShift}
            />
            <FilterContainer>
                <FiCalendar size={20} style={{color: 'var(--text-secondary)'}}/>
                <span>Tampilkan Data Dari:</span>
                <DatePickerWrapper>
                    <DatePicker selected={startDate} onChange={(date) => setStartDate(date)} dateFormat="dd/MM/yyyy" maxDate={endDate} />
                </DatePickerWrapper>
                <span>sampai</span>
                <DatePickerWrapper>
                    <DatePicker selected={endDate} onChange={(date) => setEndDate(date)} dateFormat="dd/MM/yyyy" minDate={startDate} />
                </DatePickerWrapper>
            </FilterContainer>

            <StatCardGrid loading={loading} stats={dashboardData.stats} userName={userName} />
            <NotificationsPanel loading={loading} notifications={dashboardData.notifications || []} insights={dashboardData.insights || []} />
            <TargetChart loading={loading} stats={dashboardData.stats} />
            <SalesChart loading={loading} data={dashboardData.dailySales} />
            <TopProductsChart loading={loading} data={dashboardData.productSalesPerformance} />
            <InfoTabs loading={loading} data={dashboardData} />
            
            <QuickAccessCard>
                <QuickAccessButton onClick={() => navigate('/quick-actions')}>
                    <FiFastForward size={22} />
                    Lihat Semua Aksi & Manajemen
                </QuickAccessButton>
            </QuickAccessCard>

            <div style={{ position: 'absolute', left: '-9999px', top: '-9999px' }}>
                <DailyReport ref={reportRef} data={dailyReportData} />
            </div>

            {/* Shift Modals */}
            {startShiftModalOpen && (
                <StartShiftModal
                    isOpen={startShiftModalOpen}
                    onClose={() => setStartShiftModalOpen(false)}
                    onSuccess={refreshShiftStatus} // Call refreshShiftStatus after successful shift start
                />
            )}
            {closeShiftModalOpen && (
                <CloseShiftModal
                    isOpen={closeShiftModalOpen}
                    onClose={() => setCloseShiftModalOpen(false)}
                    onSuccess={refreshShiftStatus} // Call refreshShiftStatus after successful shift close
                />
            )}
        </DashboardGrid>
    );
}

export default DashboardPage;


===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\DashboardHeader.jsx =====

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { FiRefreshCw, FiPrinter } from 'react-icons/fi';

const HeaderContainer = styled.div`
  grid-column: 1 / -1;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
`;

const TimeDisplay = styled.div`
  font-size: 18px;
  font-weight: 500;
  color: var(--text-primary);
`;

const ButtonGroup = styled.div`
  display: flex;
  gap: 10px;
`;

const Button = styled.button`
  padding: 10px 20px;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  font-weight: 500;
  transition: background-color 0.2s;

  &:hover {
    background-color: var(--primary-hover);
  }

  &:disabled {
    background-color: var(--disabled-color);
    cursor: not-allowed;
  }
`;

const DashboardHeader = ({ currentTime, onRefresh, onPrint, onManualPrint, activeShift, onStartShift, onCloseShift }) => {
  return (
    <HeaderContainer>
      <TimeDisplay>
        {currentTime.toLocaleTimeString('id-ID', {
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
        })}
      </TimeDisplay>
      <ButtonGroup>
        <Button onClick={onRefresh}>
          <FiRefreshCw /> Refresh
        </Button>
        <Button onClick={onPrint}>
          <FiPrinter /> Siapkan Laporan
        </Button>
        <Button onClick={onManualPrint}>
          <FiPrinter /> Cetak Laporan
        </Button>
      </ButtonGroup>
    </HeaderContainer>
  );
};

export default DashboardHeader;

DashboardHeader.propTypes = {
  currentTime: PropTypes.instanceOf(Date).isRequired,
  onRefresh: PropTypes.func.isRequired,
  onPrint: PropTypes.func.isRequired,
  onManualPrint: PropTypes.func.isRequired,
  activeShift: PropTypes.object,
  onStartShift: PropTypes.func.isRequired,
  onCloseShift: PropTypes.func.isRequired,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\InfoTabs.jsx =====

// frontend/src/pages/Dashboard/components/InfoTabs.jsx

import React, { useState } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Skeleton from 'react-loading-skeleton';
import * as FiIcons from 'react-icons/fi';

const ChartContainer = styled.div` background-color: var(--bg-surface); padding: 30px; border-radius: 24px; border: 1px solid var(--border-color); grid-column: 1 / -1; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05); display: flex; flex-direction: column;`;
const TabContainer = styled.div` display: flex; gap: 10px; border-bottom: 1px solid var(--border-color); margin-bottom: 25px; flex-wrap: wrap; justify-content: center; padding: 0 20px;`;
const TabButton = styled.button` padding: 12px 24px; border: none; background: ${props => props.$isActive ? 'var(--primary-color)' : 'transparent'}; cursor: pointer; border-radius: 12px; transition: all 0.3s ease; font-weight: 600; color: ${props => props.$isActive ? 'white' : 'var(--text-secondary)'}; margin: 0 5px -1px 5px; display: flex; align-items: center; justify-content: center; gap: 8px; &:hover { background: ${props => props.$isActive ? 'var(--primary-color)' : 'var(--primary-color)15'}; color: ${props => props.$isActive ? 'white' : 'var(--primary-color)'}; } `;
const TabContent = styled.div` flex-grow: 1; min-height: 350px; display: flex; flex-direction: column; `;
const EmptyStateContainer = styled.div` flex-grow: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; color: var(--text-secondary); padding: 50px 20px; `;
const List = styled.ul` list-style: none; padding: 0; overflow-y: auto; flex-grow: 1; `;
const ListItem = styled.li` display: flex; justify-content: space-between; align-items: center; padding: 12px 16px; border-radius: 12px; border-bottom: 1px solid var(--border-color); margin: 4px 0; &:last-child { border-bottom: none; } `;
const ItemValue = styled.span` color: var(--text-secondary); font-weight: 600; flex-shrink: 0; margin-left: 15px; `;

const ProductInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 15px;
  flex-grow: 1;
`;

const ProductImage = styled.img`
  width: 40px;
  height: 40px;
  border-radius: 8px;
  object-fit: cover;
  flex-shrink: 0;
`;

const ProductName = styled.span`
  font-weight: 500;
  color: var(--text-primary);
`;

function InfoTabs({ loading, data }) {
    const [activeProductStockTab, setActiveProductStockTab] = useState('stockInfo');
    const [activeUserInfoTab, setActiveUserInfoTab] = useState('topCustomers');

    const getStockColor = (stock) => {
        if (stock <= 10) return 'var(--red-color)';
        if (stock <= 40) return '#FFA500'; // Orange
        return 'var(--green-color)';
    };

    return (
        <>
            <ChartContainer>
                <TabContainer>
                    <TabButton $isActive={activeProductStockTab === 'stockInfo'} onClick={() => setActiveProductStockTab('stockInfo')}><FiIcons.FiArchive size={18}/> Informasi Stok</TabButton>
                    <TabButton $isActive={activeProductStockTab === 'staleProducts'} onClick={() => setActiveProductStockTab('staleProducts')}><FiIcons.FiLayers size={18}/> Tidak Laku</TabButton>
                    <TabButton $isActive={activeProductStockTab === 'expiredProducts'} onClick={() => setActiveProductStockTab('expiredProducts')}><FiIcons.FiClipboard size={18}/> Kadaluarsa</TabButton>
                </TabContainer>
                <TabContent>
                    {loading ? <Skeleton count={5} height={50} style={{ marginBottom: '10px' }} /> : (
                        <>
                            {activeProductStockTab === 'stockInfo' && (data.stockInfo?.length > 0 ? (
                                <List>
                                    {data.stockInfo.map(p => {
                                        const stockColor = getStockColor(p.stock);
                                        return (
                                            <ListItem key={p.id}>
                                                <ProductInfo>
                                                    <ProductImage src={p.image_url || 'https://placehold.co/100'} alt={p.name} />
                                                    <ProductName>{p.name}</ProductName>
                                                </ProductInfo>
                                                <ItemValue style={{ color: stockColor, fontSize: '1.1rem', fontWeight: '700' }}>
                                                    {p.stock} unit
                                                </ItemValue>
                                            </ListItem>
                                        );
                                    })}
                                </List>
                            ) : <EmptyStateContainer><FiIcons.FiBox size={48}/><p>Tidak ada produk untuk ditampilkan.</p></EmptyStateContainer> )}
                            
                            {activeProductStockTab === 'staleProducts' && (data.staleProducts?.length > 0 ? (<List>{data.staleProducts.map(p => <ListItem key={p.id}><ProductName>{p.name}</ProductName><ItemValue>{p.stock} Tersisa ({p.lastSoldDate ? new Date(p.lastSoldDate).toLocaleDateString('id-ID') : 'Belum Terjual'})</ItemValue></ListItem>)}</List>) : <EmptyStateContainer><FiIcons.FiLayers size={48}/><p>Tidak ada produk yang tidak laku.</p></EmptyStateContainer> )}
                            
                            {activeProductStockTab === 'expiredProducts' && (data.expiredProducts?.length > 0 ? (<List>{data.expiredProducts.map(p => <ListItem key={p.id}><ProductName>{p.name}</ProductName><ItemValue>{`Exp: ${new Date(p.expiration_date).toLocaleDateString('id-ID')}`}</ItemValue></ListItem>)}</List>) : <EmptyStateContainer><FiIcons.FiClipboard size={48}/><p>Tidak ada produk mendekati kadaluarsa.</p></EmptyStateContainer> )}
                        </>
                    )}
                </TabContent>
            </ChartContainer>
            
            <ChartContainer>
                <TabContainer>
                    <TabButton $isActive={activeUserInfoTab === 'topCustomers'} onClick={() => setActiveUserInfoTab('topCustomers')}><FiIcons.FiUsers size={18}/> Pelanggan</TabButton>
                     <TabButton $isActive={activeUserInfoTab === 'cashierPerf'} onClick={() => setActiveUserInfoTab('cashierPerf')}><FiIcons.FiUserCheck size={18}/> Kasir</TabButton>
                    <TabButton $isActive={activeUserInfoTab === 'recentSuppliers'} onClick={() => setActiveUserInfoTab('recentSuppliers')}><FiIcons.FiTruck size={18}/> Pemasok</TabButton>
                </TabContainer>
                <TabContent>
                    {loading ? <Skeleton count={5} height={40} style={{ marginBottom: '10px' }} /> : (
                        <>
                            {activeUserInfoTab === 'topCustomers' && (data.topCustomers?.length > 0 ? (<List>{data.topCustomers.map(c => <ListItem key={c.id}><ProductName>{c.name}</ProductName><ItemValue>Rp {new Intl.NumberFormat('id-ID').format(c.totalSpent)} ({c.totalOrders} order)</ItemValue></ListItem>)}</List>) : <EmptyStateContainer><FiIcons.FiUsers size={48}/><p>Belum ada data pelanggan.</p></EmptyStateContainer> )}
                            
                            {activeUserInfoTab === 'cashierPerf' && (data.cashierPerformance?.length > 0 ? (<List>{data.cashierPerformance.map(c => <ListItem key={c.id}><ProductName>{c.name}</ProductName><ItemValue>Rp {new Intl.NumberFormat('id-ID').format(c.totalSales)} ({c.totalTransactions} trx)</ItemValue></ListItem>)}</List>) : <EmptyStateContainer><FiIcons.FiUserCheck size={48}/><p>Belum ada data performa kasir.</p></EmptyStateContainer> )}

                            {activeUserInfoTab === 'recentSuppliers' && (data.recentSuppliers?.length > 0 ? (<List>{data.recentSuppliers.map(s => <ListItem key={s.id}><ProductName>{s.name}</ProductName><ItemValue>{new Date(s.created_at).toLocaleDateString('id-ID')}</ItemValue></ListItem>)}</List>) : <EmptyStateContainer><FiIcons.FiTruck size={48}/><p>Belum ada data pemasok.</p></EmptyStateContainer> )}
                        </>
                    )}
                </TabContent>
            </ChartContainer>
        </>
    );
}

export default InfoTabs;

InfoTabs.propTypes = {
  loading: PropTypes.bool.isRequired,
  data: PropTypes.object.isRequired,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\NotificationsPanel.jsx =====

// frontend/src/pages/Dashboard/components/NotificationsPanel.jsx

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Skeleton from 'react-loading-skeleton';
import * as FiIcons from 'react-icons/fi';

const PanelContainer = styled.div`
  background-color: var(--bg-surface);
  padding: 30px;
  border-radius: 24px;
  border: 1px solid var(--border-color);
  grid-column: 1 / -1;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  display: flex;
  flex-direction: column;
`;

const PanelTitle = styled.h3`
  font-size: 1.4rem;
  font-weight: 600;
  margin-bottom: 25px;
  color: var(--text-primary);
  display: flex;
  align-items: center;
  gap: 10px;
  justify-content: center;
  text-align: center;
`;

const NotificationList = styled.div`
  display: flex;
  flex-direction: column;
  gap: 15px;
`;

const NotificationItem = styled.div`
  display: flex;
  align-items: flex-start;
  gap: 15px;
  padding: 15px;
  border-radius: 12px;
  background-color: var(--bg-main);
  border: 1px solid var(--border-color);
  color: var(--text-primary);
  font-size: 0.95rem;

  svg {
    flex-shrink: 0;
    margin-top: 3px;
    color: var(--text-secondary);
  }

  &.warning {
    border-left: 4px solid #ffa500;
    svg {
      color: #ffa500;
    }
  }
  &.danger {
    border-left: 4px solid var(--red-color);
    svg {
      color: var(--red-color);
    }
  }
  &.info {
    border-left: 4px solid var(--primary-color);
    svg {
      color: var(--primary-color);
    }
  }
  &.success {
    border-left: 4px solid var(--green-color);
    svg {
      color: var(--green-color);
    }
  }
`;

const EmptyStateContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  color: var(--text-secondary);
  padding: 40px 20px;
`;

const getFiIconComponent = (iconName) => {
  const IconComponent = FiIcons[iconName] || FiIcons.FiBell;
  return <IconComponent size={20} />;
};

function NotificationsPanel({ loading, notifications, insights }) {
  const allItems = [
    ...(Array.isArray(notifications) ? notifications : []).map((item, index) => ({
      id: item.id || `notification-${index}`,
      type: item.type || 'info',
      icon: item.icon || 'FiBell',
      text: item.text || 'No message',
      source: 'notification',
    })),
    ...(Array.isArray(insights) ? insights : []).map((item, index) => ({
      id: item.id || `insight-${index}`,
      type: item.type || 'info',
      icon: item.icon || 'FiInfo',
      text: item.text || 'No description',
      source: 'insight',
    })),
  ];

  if (loading) {
    return (
      <PanelContainer>
        <PanelTitle>
          <FiIcons.FiZap size={22} /> Notifikasi & Insight
        </PanelTitle>
        <Skeleton count={3} height={60} style={{ borderRadius: '12px', marginBottom: '15px' }} />
      </PanelContainer>
    );
  }

  return (
    <PanelContainer>
      <PanelTitle>
        <FiIcons.FiZap size={22} /> Notifikasi & Insight
      </PanelTitle>
      {allItems.length > 0 ? (
        <NotificationList>
          {allItems.map((item, index) => (
            <NotificationItem key={`${item.source}-${item.id}-${index}`} className={item.type}>
              {getFiIconComponent(item.icon)}
              <span>{item.text}</span>
            </NotificationItem>
          ))}
        </NotificationList>
      ) : (
        <EmptyStateContainer>
          <FiIcons.FiCheckCircle size={48} />
          <p style={{ marginTop: '15px' }}>
            Semua aman. Tidak ada notifikasi penting saat ini.
          </p>
        </EmptyStateContainer>
      )}
    </PanelContainer>
  );
}

export default NotificationsPanel;

NotificationsPanel.propTypes = {
  loading: PropTypes.bool.isRequired,
  notifications: PropTypes.array,
  insights: PropTypes.array,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\QuickActionGrids.jsx =====

// frontend/src/pages/Dashboard/components/QuickActionGrids.jsx

import React from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import * as FiIcons from 'react-icons/fi';

const Grid = styled.div`
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 15px;
    background-color: var(--bg-surface);
    padding: 30px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    justify-content: center;
`;

const GridTitle = styled.h3`
    grid-column: 1 / -1;
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 10px;
    padding-bottom: 15px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 10px;
    justify-content: flex-start;
    text-align: left;
    &:not(:first-child) {
        margin-top: 20px;
    }
`;

const ActionButton = styled.button`
    background: var(--bg-surface);
    border: 1px solid var(--border-color);
    border-radius: 20px;
    padding: 24px 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 12px;
    cursor: pointer;
    font-weight: 600;
    color: var(--text-primary);
    transition: all 0.3s ease;
    
    span { 
        font-size: 0.9rem; 
    }
    svg { 
        transition: all 0.3s ease; 
        color: var(--primary-color); 
    }
    &:hover { 
        background-color: var(--primary-color); 
        color: white; 
        transform: translateY(-3px); 
        svg { color: white; } 
    }
`;

function QuickActionGrids() {
    const navigate = useNavigate();
    return (
        <Grid>
            {/* --- SEKSI 1: OPERASIONAL & TRANSAKSI --- */}
            <GridTitle><FiIcons.FiZap size={22}/> Operasional & Transaksi</GridTitle>
            <ActionButton onClick={() => navigate('/pos')}><FiIcons.FiShoppingCart size={30}/><span>Transaksi Baru</span></ActionButton>
            <ActionButton onClick={() => navigate('/expenses')}><FiIcons.FiDollarSign size={30}/><span>Catat Pengeluaran</span></ActionButton>
            <ActionButton onClick={() => navigate('/targets')}><FiIcons.FiTarget size={30}/><span>Atur Target</span></ActionButton>

            {/* --- SEKSI 2: MANAJEMEN INVENTARIS --- */}
            <GridTitle><FiIcons.FiPackage size={22}/> Manajemen Inventaris</GridTitle>
            <ActionButton onClick={() => navigate('/products/new')}><FiIcons.FiPlusSquare size={30}/><span>Tambah Produk</span></ActionButton>
            <ActionButton onClick={() => navigate('/products')}><FiIcons.FiArchive size={30}/><span>Daftar Produk</span></ActionButton>
            <ActionButton onClick={() => navigate('/receive-stock')}><FiIcons.FiUpload size={30}/><span>Terima Stok</span></ActionButton>
            {/* --- PERBAIKAN DI SINI --- */}
            <ActionButton onClick={() => navigate('/stock-adjustment')}><FiIcons.FiEdit size={30}/><span>Penyesuaian Stok</span></ActionButton>

            {/* --- SEKSI 3: PENGELOLAAN TOKO --- */}
            <GridTitle><FiIcons.FiHome size={22}/> Pengelolaan Toko</GridTitle>
            <ActionButton onClick={() => navigate('/categories')}><FiIcons.FiList size={30}/><span>Kelola Kategori</span></ActionButton>
            {/* --- PERBAIKAN DI SINI --- */}
            <ActionButton onClick={() => navigate('/promotions')}><FiIcons.FiTag size={30}/><span>Kelola Promosi</span></ActionButton>
            <ActionButton onClick={() => navigate('/suppliers')}><FiIcons.FiTruck size={30}/><span>Kelola Pemasok</span></ActionButton>
            <ActionButton onClick={() => navigate('/customers')}><FiIcons.FiUsers size={30}/><span>Kelola Pelanggan</span></ActionButton>
            <ActionButton onClick={() => navigate('/users')}><FiIcons.FiUserCheck size={30}/><span>Kelola Pengguna</span></ActionButton>
            <ActionButton onClick={() => navigate('/settings')}><FiIcons.FiSettings size={30}/><span>Semua Pengaturan</span></ActionButton>
        </Grid>
    );
}

export default QuickActionGrids;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\SalesChart.jsx =====

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import Skeleton from 'react-loading-skeleton';
import { FiBarChart2 } from 'react-icons/fi';

const ChartContainer = styled.div` background-color: var(--bg-surface); padding: 30px; border-radius: 24px; border: 1px solid var(--border-color); grid-column: 1 / -1; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05); `;
const ChartTitle = styled.h3` font-size: 1.4rem; font-weight: 600; margin-bottom: 25px; color: var(--text-primary); display: flex; align-items: center; gap: 10px; justify-content: center; text-align: center;`;
const EmptyStateContainer = styled.div` display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; color: var(--text-secondary); padding: 50px 20px; min-height: 250px; `;
const CustomTooltip = ({ active, payload, label, formatter }) => {
    if (active && payload && payload.length) {
        return ( <div style={{ backgroundColor: 'var(--bg-surface)', border: '1px solid var(--border-color)', borderRadius: '8px', padding: '10px', fontSize: '0.9rem', color: 'var(--text-primary)', boxShadow: '0 2px 10px rgba(0,0,0,0.1)' }}> <p style={{ color: 'var(--text-secondary)', marginBottom: '5px', fontWeight: '500' }}>{label}</p> {payload.map((entry, index) => ( <p key={`item-${index}`} style={{ color: entry.color || 'var(--text-primary)', margin: 0 }}> {entry.name}: <span style={{ fontWeight: '600' }}> {formatter ? formatter(entry.value) : entry.value} </span> </p> ))} </div> );
    } return null;
};
const formatNumberYAxis = (num) => { if (num >= 1000000) return `${(num / 1000000).toFixed(1)}Jt`; if (num >= 1000) return `${(num / 1000).toFixed(0)}Rb`; return num; };

function SalesChart({ loading, data }) {
    if (loading) { return ( <ChartContainer><ChartTitle><FiBarChart2 size={22}/> Penjualan Harian</ChartTitle><Skeleton height={300} /></ChartContainer> ); }
    return (
        <ChartContainer>
            <ChartTitle><FiBarChart2 size={22}/> Penjualan Harian</ChartTitle>
            {data && data.length > 0 ? (
                <ResponsiveContainer width="100%" height={300}>
                    <AreaChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                        <defs><linearGradient id="colorSales" x1="0" y1="0" x2="0" y2="1"><stop offset="5%" stopColor="var(--primary-color)" stopOpacity={0.8}/><stop offset="95%" stopColor="var(--primary-color)" stopOpacity={0}/></linearGradient></defs>
                        <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
                        <XAxis dataKey="date" tick={{ fill: 'var(--text-secondary)', fontSize: 12, fontWeight: 500 }} angle={-45} textAnchor="end" height={60} interval="preserveStartEnd" />
                        <YAxis tick={{ fill: 'var(--text-secondary)', fontSize: 12, fontWeight: 500 }} tickFormatter={formatNumberYAxis} />
                        <Tooltip content={<CustomTooltip formatter={(value) => `Rp ${new Intl.NumberFormat('id-ID').format(value)}`} />} />
                        <Area type="monotone" dataKey="sales" name="Penjualan (Rp)" stroke="var(--primary-color)" fill="url(#colorSales)" strokeWidth={3} activeDot={{ r: 8, stroke: 'var(--primary-color)', strokeWidth: 2, fill: 'white' }} />
                    </AreaChart>
                </ResponsiveContainer>
            ) : ( <EmptyStateContainer><FiBarChart2 size={48}/><p>Belum ada data penjualan harian untuk rentang tanggal ini.</p></EmptyStateContainer> )}
        </ChartContainer>
    );
}

export default SalesChart;

SalesChart.propTypes = {
  loading: PropTypes.bool.isRequired,
  data: PropTypes.array,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\StatCardGrid.jsx =====

// frontend/src/pages/Dashboard/components/StatCardGrid.jsx

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Skeleton from 'react-loading-skeleton';
import { FiTrendingUp, FiDollarSign, FiShoppingBag, FiTag, FiUsers, FiUserCheck, FiList } from 'react-icons/fi';

const StatIcon = styled.div` width: 64px; height: 64px; border-radius: 20px; display: flex; align-items: center; justify-content: center; background-color: ${props => props.color}15; color: ${props => props.color}; flex-shrink: 0; transition: all 0.3s ease;`;

const Card = styled.div`
    background: var(--bg-surface);
    padding: 28px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    gap: 24px;
    transition: all 0.3s ease;
    grid-column: span 3;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
    &:hover { transform: translateY(-4px); box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1); border-color: var(--primary-color); }
    @media (max-width: 1600px) { grid-column: span 4; }
    @media (max-width: 1200px) { grid-column: span 6; }
    @media (max-width: 768px) { grid-column: 1 / -1; }
`;

const StatInfo = styled.div` flex-grow: 1; `;
const StatValue = styled.h2` font-size: 1.8rem; font-weight: 700; color: var(--text-primary); margin: 0; `;
const StatLabel = styled.p` font-size: 0.95rem; color: var(--text-secondary); margin: 0; `;

const StatCard = ({ icon, value, label, color }) => (
    <Card>
        <StatIcon color={color}>{icon}</StatIcon>
        <StatInfo>
            <StatValue>{value}</StatValue>
            <StatLabel>{label}</StatLabel>
        </StatInfo>
    </Card>
);

StatCard.propTypes = {
  icon: PropTypes.node.isRequired,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
  label: PropTypes.string.isRequired,
  color: PropTypes.string.isRequired,
};

const StatCardSkeleton = () => (
    <Card as="div">
        <Skeleton circle width={60} height={60} />
        <div>
            <Skeleton height={30} width={150} style={{marginBottom: '5px'}} />
            <Skeleton height={20} width="60%" />
        </div>
    </Card>
);

function StatCardGrid({ loading, stats, userName }) {
    if (loading) {
        return Array.from({ length: 8 }).map((_, i) => <StatCardSkeleton key={i} />);
    }
    return (
        <>
            <StatCard icon={<FiDollarSign size={28} />} value={`Rp ${new Intl.NumberFormat('id-ID').format(stats?.totalRevenue || 0)}`} label="Pendapatan" color="var(--primary-color)" />
            <StatCard icon={<FiShoppingBag size={28} />} value={stats?.totalTransactions || 0} label="Total Transaksi" color="var(--green-color)" />
            <StatCard icon={<FiTag size={28} />} value={stats?.totalSoldUnits || 0} label="Produk Terjual" color="#007bff" />
            <StatCard icon={<FiTrendingUp size={28} />} value={`Rp ${new Intl.NumberFormat('id-ID').format(stats?.totalProfit || 0)}`} label="Total Laba" color="#FFA500" />
            <StatCard icon={<FiUsers size={28} />} value={stats?.newCustomers || 0} label="Pelanggan Baru" color="#6f42c4" />
            <StatCard icon={<FiUserCheck size={28} />} value={userName} label="Kasir Aktif" color="#20c997" />
            <StatCard icon={<FiDollarSign size={28} />} value={`Rp ${new Intl.NumberFormat('id-ID').format(stats?.totalExpenses || 0)}`} label="Total Pengeluaran" color="#dc3545" />
            <StatCard icon={<FiList size={28} />} value={`Rp ${new Intl.NumberFormat('id-ID').format(stats?.totalRevenue / (stats?.totalTransactions || 1) || 0)} / trx`} label="Rata-rata Transaksi" color="#6c757d" />
        </>
    );
}

export default StatCardGrid;

StatCardGrid.propTypes = {
  loading: PropTypes.bool.isRequired,
  stats: PropTypes.object,
  userName: PropTypes.string,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\TopProductsChart.jsx =====

// frontend/src/pages/Dashboard/components/TopProductsChart.jsx

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, Cell, CartesianGrid } from 'recharts';
import Skeleton from 'react-loading-skeleton';
import { FiTrendingUp } from 'react-icons/fi';

const ChartContainer = styled.div`
    background-color: var(--bg-surface);
    padding: 30px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    grid-column: 1 / -1;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
`;

const ChartTitle = styled.h3`
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 25px;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 10px;
    justify-content: center;
    text-align: center;
`;

const EmptyStateContainer = styled.div`
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    padding: 50px 20px;
    min-height: 250px;
`;

const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
        return (
            <div style={{
                backgroundColor: 'var(--bg-surface)',
                border: '1px solid var(--border-color)',
                borderRadius: '8px',
                padding: '10px',
                fontSize: '0.9rem',
                color: 'var(--text-primary)',
                boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
            }}>
                <p style={{ color: 'var(--text-secondary)', marginBottom: '5px', fontWeight: '500' }}>{label}</p>
                <p style={{ color: 'var(--primary-color)', margin: 0 }}>
                    Terjual: <span style={{ fontWeight: '600' }}>{payload[0].value} unit</span>
                </p>
            </div>
        );
    }
    return null;
};

CustomTooltip.propTypes = {
  active: PropTypes.bool,
  payload: PropTypes.array,
  label: PropTypes.string,
};

const COLORS = ['#9D4EDD', '#A968E3', '#B583E8', '#C19DEC', '#CDA7F1'];

function TopProductsChart({ loading, data }) {
    if (loading) {
        return (
            <ChartContainer>
                <ChartTitle><FiTrendingUp size={22} /> Performa Penjualan Produk</ChartTitle>
                <Skeleton height={300} />
            </ChartContainer>
        );
    }

    const formattedData = data && data.map(item => ({
        ...item,
        shortName: item.name.length > 25 ? `${item.name.substring(0, 22)}...` : item.name,
    }));
    
    const top10Data = formattedData ? formattedData.slice(0, 10) : [];

    return (
        <ChartContainer>
           <ChartTitle><FiTrendingUp size={22} /> Performa Penjualan Produk (Unit Terjual)</ChartTitle>
            {top10Data.length > 0 ? (
                <ResponsiveContainer width="100%" height={350}>
                    <BarChart data={top10Data} layout="vertical" margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                        <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
                        <XAxis type="number" tick={{ fill: 'var(--text-secondary)', fontSize: 12 }} />
                        <YAxis 
                            dataKey="shortName" 
                            type="category" 
                            width={180} 
                            tick={{ fill: 'var(--text-primary)', fontSize: 12 }} 
                            tickLine={false} 
                            axisLine={false}
                        />
                        <Tooltip content={<CustomTooltip />} cursor={{ fill: 'rgba(204, 204, 204, 0.2)' }}/>
                        <Bar dataKey="totalSold" name="Unit Terjual" barSize={20} radius={[0, 10, 10, 0]}>
                            {top10Data.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                            ))}
                        </Bar>
                    </BarChart>
                </ResponsiveContainer>
            ) : (
                <EmptyStateContainer>
                    <FiTrendingUp size={48} />
                    <p>Belum ada data penjualan produk untuk ditampilkan pada periode ini.</p>
                </EmptyStateContainer>
            )}
        </ChartContainer>
    );
}

export default TopProductsChart;

TopProductsChart.propTypes = {
  loading: PropTypes.bool.isRequired,
  data: PropTypes.array,
};

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\services\api.js =====

import axios from 'axios';

const API = axios.create({
    baseURL: 'http://localhost:5000/api',
    timeout: 30000, // Tetapkan di 30 detik. Jangan naikkan kecuali sudah yakin backend responsif.
});

API.interceptors.request.use((config) => {
    const token = localStorage.getItem('token');
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    // Log requests for debugging, hanya di lingkungan pengembangan
    if (import.meta.env.DEV) {
        console.log('Sending request:', config.method, config.url, config.data);
    }
    return config;
}, (error) => {
    // Log request errors, hanya di lingkungan pengembangan
    if (import.meta.env.DEV) {
        console.error('Request error:', error.config?.method, error.config?.url, error.message);
    }
    return Promise.reject(error);
});

// Add a response interceptor to log responses and handle common errors
API.interceptors.response.use(
    (response) => {
        // Log responses, hanya di lingkungan pengembangan
        if (import.meta.env.DEV) {
            console.log('Received response:', response.config.method, response.config.url, response.status, response.data);
        }
        return response;
    },
    (error) => {
        // Log response errors, hanya di lingkungan pengembangan
        if (import.meta.env.DEV) {
            console.error('Response error:', error.response?.config?.method, error.response?.config?.url, error.response?.status, error.message);
        }
        if (error.code === 'ECONNABORTED') {
            return Promise.reject(new Error('Koneksi timeout. Pastikan backend berjalan dan terhubung dengan benar.'));
        }
        if (error.response) {
            // Server responded with a status other than 2xx
            // The `error.response.data.message` is the custom error message from your backend
            return Promise.reject(error.response);
        } else if (error.request) {
            // Request was made but no response was received
            return Promise.reject(new Error('Tidak ada respons dari server. Server mungkin tidak berjalan.'));
        } else {
            // Something happened in setting up the request that triggered an Error
            return Promise.reject(new Error('Terjadi kesalahan saat menyiapkan permintaan.'));
        }
    }
);


// User Routes
export const loginUser = (userData) => API.post('/users/login', userData);
export const createUser = (userData) => API.post('/users/register', userData);
export const createUserByAdmin = (userData) => API.post('/users', userData);
export const getUsers = () => API.get('/users');
export const updateUser = (id, userData) => API.put(`/users/${id}`, userData);
export const deleteUser = (id) => API.delete(`/users/${id}`);
export const forgotPassword = (data) => API.post('/users/forgot-password', data);
export const resetPassword = (token, data) => API.post(`/users/reset-password/${token}`, data);

// Product Routes
export const getProducts = (barcode = '') => {
    const params = new URLSearchParams();
    if (barcode) {
        params.append('barcode', barcode);
    }
    return API.get(`/products?${params.toString()}`);
};
export const getProductById = (id) => API.get(`/products/${id}`);
export const createProduct = (productData) => API.post('/products', productData);
export const updateProduct = (id, productData) => API.put(`/products/${id}`, productData);
export const deleteProduct = (id) => API.delete(`/products/${id}`);
export const receiveStock = (stockData) => API.post('/products/receive-stock', stockData);

// Order Routes
export const createOrder = (orderData) => API.post('/orders', orderData);
export const getOrders = (startDate, endDate) => {
    const params = new URLSearchParams();
    if (startDate instanceof Date && !isNaN(startDate)) params.append('startDate', startDate.toISOString());
    if (endDate instanceof Date && !isNaN(endDate)) params.append('endDate', endDate.toISOString());
    return API.get(`/orders?${params.toString()}`);
};
export const getOrderById = (id) => API.get(`/orders/${id}`);
export const deleteOrder = (id) => API.delete(`/orders/${id}`);
export const sendReceipt = (orderId, email) => API.post(`/orders/${orderId}/send-receipt`, { email });
export const clearOrderHistory = () => API.delete('/orders/clear-history');
export const exportOrders = (startDate, endDate) => {
    const params = new URLSearchParams();
    if (startDate instanceof Date && !isNaN(startDate)) params.append('startDate', startDate.toISOString());
    if (endDate instanceof Date && !isNaN(endDate)) params.append('endDate', endDate.toISOString());
    return API.get(`/orders/export?${params.toString()}`, { responseType: 'blob' });
};

// Analytics Routes
export const getStats = (startDate, endDate) => {
    const params = new URLSearchParams();
    if (startDate instanceof Date && !isNaN(startDate)) params.append('startDate', startDate.toISOString());
    if (endDate instanceof Date && !isNaN(endDate)) params.append('endDate', endDate.toISOString());
    return API.get(`/analytics/stats?${params.toString()}`);
};
export const getDailySales = (startDate, endDate) => {
    const params = new URLSearchParams();
    if (startDate instanceof Date && !isNaN(startDate)) params.append('startDate', startDate.toISOString());
    if (endDate instanceof Date && !isNaN(endDate)) params.append('endDate', endDate.toISOString());
    return API.get(`/analytics/daily-sales?${params.toString()}`);
};
export const getTopProducts = (startDate, endDate) => {
    const params = new URLSearchParams();
    if (startDate instanceof Date && !isNaN(startDate)) params.append('startDate', startDate.toISOString());
    if (endDate instanceof Date && !isNaN(endDate)) params.append('endDate', endDate.toISOString());
    return API.get(`/analytics/top-products?${params.toString()}`);
};
export const getProductSalesPerformance = (startDate, endDate) => {
    const params = new URLSearchParams();
    if (startDate instanceof Date && !isNaN(startDate)) params.append('startDate', startDate.toISOString());
    if (endDate instanceof Date && !isNaN(endDate)) params.append('endDate', endDate.toISOString());
    return API.get(`/analytics/product-sales-performance?${params.toString()}`);
};
export const getTopRevenueProducts = (startDate, endDate) => {
    const params = new URLSearchParams();
    if (startDate instanceof Date && !isNaN(startDate)) params.append('startDate', startDate.toISOString());
    if (endDate instanceof Date && !isNaN(endDate)) params.append('endDate', endDate.toISOString());
    return API.get(`/analytics/top-revenue-products?${params.toString()}`);
};
export const getHourlySales = (startDate, endDate) => {
    const params = new URLSearchParams();
    if (startDate instanceof Date && !isNaN(startDate)) params.append('startDate', startDate.toISOString());
    if (endDate instanceof Date && !isNaN(endDate)) params.append('endDate', endDate.toISOString());
    return API.get(`/analytics/hourly-sales?${params.toString()}`);
};
export const getStaleProducts = (days = 30) => API.get(`/analytics/stale-products?days=${days}`);
export const getExpiredProducts = (days = 30) => API.get(`/analytics/expired-products?days=${days}`);
export const getLowMarginProducts = () => API.get(`/analytics/low-margin-products`);
export const getTopCustomers = (startDate, endDate) => {
    const params = new URLSearchParams();
    if (startDate instanceof Date && !isNaN(startDate)) params.append('startDate', startDate.toISOString());
    if (endDate instanceof Date && !isNaN(endDate)) params.append('endDate', endDate.toISOString());
    return API.get(`/analytics/top-customers?${params.toString()}`);
};
export const getCashierPerformance = (startDate, endDate) => {
    const params = new URLSearchParams();
    if (startDate instanceof Date && !isNaN(startDate)) params.append('startDate', startDate.toISOString());
    if (endDate instanceof Date && !isNaN(endDate)) params.append('endDate', endDate.toISOString());
    return API.get(`/analytics/cashier-performance?${params.toString()}`);
};
export const getRecentSuppliers = (limit = 5) => API.get(`/analytics/recent-suppliers?limit=${limit}`);
export const getActivityLogs = (limit = 5) => API.get(`/analytics/activity-logs?limit=${limit}`);
export const getInsights = (startDate, endDate) => {
    const params = new URLSearchParams();
    if (startDate instanceof Date && !isNaN(startDate)) params.append('startDate', startDate.toISOString());
    if (endDate instanceof Date && !isNaN(endDate)) params.append('endDate', endDate.toISOString());
    return API.get(`/analytics/insights?${params.toString()}`);
};
export const getNotifications = (startDate, endDate) => {
    const params = new URLSearchParams();
    if (startDate instanceof Date && !isNaN(startDate)) params.append('startDate', startDate.toISOString());
    if (endDate instanceof Date && !isNaN(endDate)) params.append('endDate', endDate.toISOString());
    return API.get(`/analytics/notifications?${params.toString()}`);
};
export const getStockInfo = () => API.get('/analytics/stock-info');

// Settings Routes
export const getEmailSettings = () => API.get('/settings/email');
export const saveEmailSettings = (settingsData) => API.post('/settings/email', settingsData);
export const getRevenueTarget = () => API.get('/settings/revenue-target');
export const saveRevenueTarget = (targetData) => API.post('/settings/revenue-target', targetData);
export const getBusinessSettings = () => API.get('/settings/business');
export const saveBusinessSettings = (settingsData) => API.post('/settings/business', settingsData);

// Category Routes
export const getCategories = () => API.get('/categories');
export const createCategory = (name) => API.post('/categories', { name });
export const deleteCategory = (id) => API.delete(`/categories/${id}`);
export const getSubCategories = (categoryId) => API.get(`/categories/${categoryId}/subcategories`);
export const createSubCategory = (categoryId, subCategoryData) => API.post(`/categories/${categoryId}/subcategories`, subCategoryData);
export const deleteSubCategory = (id) => API.delete(`/categories/subcategories/${id}`);
// Supplier Routes
export const getSuppliers = () => API.get('/suppliers');
export const createSupplier = (supplierData) => API.post('/suppliers', supplierData);
export const updateSupplier = (id, supplierData) => API.put(`/suppliers/${id}`, supplierData);
export const deleteSupplier = (id) => API.delete(`/suppliers/${id}`);

// Customer Routes
export const getCustomers = (searchTerm = '') => API.get(`/customers?search=${searchTerm}`);
export const getCustomerById = (id) => API.get(`/customers/${id}`);
export const getCustomerHistory = (id) => API.get(`/customers/${id}/history`);
export const redeemCustomerPoints = (id, data) => API.post(`/customers/${id}/redeem`, data);
export const createCustomer = (customerData) => API.post('/customers', customerData);
export const updateCustomer = (id, customerData) => API.put(`/customers/${id}`, customerData);
export const deleteCustomer = (id) => API.delete(`/customers/${id}`);

// Image Upload Route
export const uploadImage = (formData) => API.post('/upload/image', formData, {
    headers: { 'Content-Type': 'multipart/form-data' },
});

// Expense Routes
export const getExpenses = () => API.get('/expenses');
export const createExpense = (expenseData) => API.post('/expenses', expenseData);
export const updateExpense = (id, expenseData) => API.put(`/expenses/${id}`, expenseData);
export const deleteExpense = (id) => API.delete(`/expenses/${id}`);

// Stock Routes
export const adjustStock = (adjustmentData) => API.post('/stock/adjust', adjustmentData);

// Promotion Routes
export const getPromotions = () => API.get('/promotions');
export const getPromotionById = (id) => API.get(`/promotions/${id}`);
export const createPromotion = (promoData) => API.post('/promotions', promoData);
export const updatePromotion = (id, promoData) => API.put(`/promotions/${id}`, promoData);
export const deletePromotion = (id) => API.delete(`/promotions/${id}`);
export const validateCoupon = (code) => API.get(`/promotions/validate/${code}`);

// Report Routes
export const getSalesReportPdf = (params) => {
    return API.get('/reports/sales-summary', {
        params,
        responseType: 'blob',
    });
};

// Shift Routes
export const getCurrentShift = () => API.get('/shifts/current');
export const startShift = (data) => API.post('/shifts/start', data);
export const closeShift = (id, data) => API.post(`/shifts/close/${id}`, data);
export const getShiftHistory = () => API.get('/shifts/history');
export const deleteShift = (id) => API.delete(`/shifts/${id}`);
export default API;

===== C:\Users\Ibnu\Project\smart-pos\frontend\src\utils\formatters.js =====

// frontend/src/utils/formatters.js

// Fungsi ini akan memformat angka menjadi string Rupiah
export const formatRupiah = (value) => {
    if (value === null || value === undefined || value === '') return '';
    const number = parseFloat(String(value).replace(/[^0-9.-]/g, ''));
    if (isNaN(number)) return '';
    return `Rp ${new Intl.NumberFormat('id-ID', { minimumFractionDigits: 0 }).format(number)}`;
};

// Fungsi ini akan membersihkan string Rupiah menjadi angka mentah (string)
export const parseRupiah = (value) => {
    if (typeof value !== 'string') return String(value);
    return value.replace(/Rp\s?|\./g, '');
};
