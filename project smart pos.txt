===== package-lock.json =====
{
  "name": "smart-pos",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "smart-pos",
      "version": "1.0.0",
      "dependencies": {
        "axios": "^1.7.7",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-icons": "^5.3.0",
        "react-loading-skeleton": "^3.5.0",
        "react-router-dom": "^6.27.0",
        "recharts": "^2.13.0",
        "styled-components": "^6.1.13"
      },
      "devDependencies": {
        "@vitejs/plugin-react": "^4.3.2",
        "eslint": "^9.12.0",
        "vite": "^5.4.8"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.6",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.0",
        "@babel/types": "^7.28.0",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.0",
        "@babel/types": "^7.28.0",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.2.tgz",
      "integrity": "sha512-/V9771t+EgXz62aCcyofnQhGM8DQACbRhvzKFsXKC9QM+5MadF8ZmIm0crDMaz3+o0h0zXfJnd4EhbYbxsrcFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.28.2.tgz",
      "integrity": "sha512-KHp2IflsnGywDjBWDkR9iEqiWSpc8GIi0lgTT3mOElT0PP1tG26P4tmFI2YvAdzgq9RGyoHZQEIEdZy6Ec5xCA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.0",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.2.tgz",
      "integrity": "sha512-ruv7Ae4J5dUYULmeXw1gmb7rYRz57OWCPM57pHojnLq/3Z1CK2lNSLTCVjxVk1F/TZHwOZZrOWi0ur95BbLxNQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@emotion/is-prop-valid": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.2.tgz",
      "integrity": "sha512-uNsoYd37AFmaCdXlg6EYD1KaPOaRWRByMCYzbKUX4+hhMfrxdVSelShywL4JVaAeM/eHUOSprYBQls+/neX3pw==",
      "license": "MIT",
      "dependencies": {
        "@emotion/memoize": "^0.8.1"
      }
    },
    "node_modules/@emotion/memoize": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.1.tgz",
      "integrity": "sha512-W2P2c/VRW1/1tLox0mVUalvnWXxavmv/Oum2aPsRcoDJuob75FC3Y8FbpfLwUegRcxINtGUMPq0tFCvYNTBXNA==",
      "license": "MIT"
    },
    "node_modules/@emotion/unitless": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.8.1.tgz",
      "integrity": "sha512-KOEGMu6dmJZtpadb476IsZBclKvILjopjUii3V+7MnXIQCYh8W3NgNcgwo21n9LXZX6EDIKvqfjYxXebDwxKmQ==",
      "license": "MIT"
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.21.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.0.tgz",
      "integrity": "sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.3.0.tgz",
      "integrity": "sha512-ViuymvFmcJi04qdZeDc2whTHryouGcDlaxPqarTD0ZE10ISpxGUVZGZDx4w01upyIynL3iu6IXH2bS1NhclQMw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.15.1",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.15.1.tgz",
      "integrity": "sha512-bkOp+iumZCCbt1K1CmWf0R9pM5yKpDv+ZXtvSyQpudrI9kuFLp+bM2WOPXImuD/ceQuaa8f5pj93Y7zyECIGNA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.31.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.31.0.tgz",
      "integrity": "sha512-LOm5OVt7D4qiKCqoiPbA7LWmI+tbw1VbTUowBcUMgQSuM6poJufkFkYDcQpo5KfgD39TnNySV26QjOh7VFpSyw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.3.4",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.3.4.tgz",
      "integrity": "sha512-Ul5l+lHEcw3L5+k8POx6r74mxEYKG5kOb6Xpy2gCRW6zweT6TEhAf8vhxGgjhqrd/VO/Dirhsb+1hNpD1ue9hw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.15.1",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
      "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.12",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.29",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.23.0",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.27",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.27.tgz",
      "integrity": "sha512-+d0F4MKMCbeVUJwG96uQ4SgAznZNSq93I3V+9NHA4OpvqG8mRCpGdKmK8l/dl02h2CCDHwW2FqilnTyDcAnqjA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.45.1.tgz",
      "integrity": "sha512-NEySIFvMY0ZQO+utJkgoMiCAjMrGvnbDLHvcmlA33UXJpYBCvlBEbMMtV837uCkS+plG2umfhn0T5mMAxGrlRA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.45.1.tgz",
      "integrity": "sha512-ujQ+sMXJkg4LRJaYreaVx7Z/VMgBBd89wGS4qMrdtfUFZ+TSY5Rs9asgjitLwzeIbhwdEhyj29zhst3L1lKsRQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.45.1.tgz",
      "integrity": "sha512-FSncqHvqTm3lC6Y13xncsdOYfxGSLnP+73k815EfNmpewPs+EyM49haPS105Rh4aF5mJKywk9X0ogzLXZzN9lA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.45.1.tgz",
      "integrity": "sha512-2/vVn/husP5XI7Fsf/RlhDaQJ7x9zjvC81anIVbr4b/f0xtSmXQTFcGIQ/B1cXIYM6h2nAhJkdMHTnD7OtQ9Og==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.45.1.tgz",
      "integrity": "sha512-4g1kaDxQItZsrkVTdYQ0bxu4ZIQ32cotoQbmsAnW1jAE4XCMbcBPDirX5fyUzdhVCKgPcrwWuucI8yrVRBw2+g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.45.1.tgz",
      "integrity": "sha512-L/6JsfiL74i3uK1Ti2ZFSNsp5NMiM4/kbbGEcOCps99aZx3g8SJMO1/9Y0n/qKlWZfn6sScf98lEOUe2mBvW9A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.45.1.tgz",
      "integrity": "sha512-RkdOTu2jK7brlu+ZwjMIZfdV2sSYHK2qR08FUWcIoqJC2eywHbXr0L8T/pONFwkGukQqERDheaGTeedG+rra6Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.45.1.tgz",
      "integrity": "sha512-3kJ8pgfBt6CIIr1o+HQA7OZ9mp/zDk3ctekGl9qn/pRBgrRgfwiffaUmqioUGN9hv0OHv2gxmvdKOkARCtRb8Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.45.1.tgz",
      "integrity": "sha512-k3dOKCfIVixWjG7OXTCOmDfJj3vbdhN0QYEqB+OuGArOChek22hn7Uy5A/gTDNAcCy5v2YcXRJ/Qcnm4/ma1xw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.45.1.tgz",
      "integrity": "sha512-PmI1vxQetnM58ZmDFl9/Uk2lpBBby6B6rF4muJc65uZbxCs0EA7hhKCk2PKlmZKuyVSHAyIw3+/SiuMLxKxWog==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.45.1.tgz",
      "integrity": "sha512-9UmI0VzGmNJ28ibHW2GpE2nF0PBQqsyiS4kcJ5vK+wuwGnV5RlqdczVocDSUfGX/Na7/XINRVoUgJyFIgipoRg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.45.1.tgz",
      "integrity": "sha512-7nR2KY8oEOUTD3pBAxIBBbZr0U7U+R9HDTPNy+5nVVHDXI4ikYniH1oxQz9VoB5PbBU1CZuDGHkLJkd3zLMWsg==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.45.1.tgz",
      "integrity": "sha512-nlcl3jgUultKROfZijKjRQLUu9Ma0PeNv/VFHkZiKbXTBQXhpytS8CIj5/NfBeECZtY2FJQubm6ltIxm/ftxpw==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.45.1.tgz",
      "integrity": "sha512-HJV65KLS51rW0VY6rvZkiieiBnurSzpzore1bMKAhunQiECPuxsROvyeaot/tcK3A3aGnI+qTHqisrpSgQrpgA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.45.1.tgz",
      "integrity": "sha512-NITBOCv3Qqc6hhwFt7jLV78VEO/il4YcBzoMGGNxznLgRQf43VQDae0aAzKiBeEPIxnDrACiMgbqjuihx08OOw==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.45.1.tgz",
      "integrity": "sha512-+E/lYl6qu1zqgPEnTrs4WysQtvc/Sh4fC2nByfFExqgYrqkKWp1tWIbe+ELhixnenSpBbLXNi6vbEEJ8M7fiHw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.45.1.tgz",
      "integrity": "sha512-a6WIAp89p3kpNoYStITT9RbTbTnqarU7D8N8F2CV+4Cl9fwCOZraLVuVFvlpsW0SbIiYtEnhCZBPLoNdRkjQFw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.45.1.tgz",
      "integrity": "sha512-T5Bi/NS3fQiJeYdGvRpTAP5P02kqSOpqiopwhj0uaXB6nzs5JVi2XMJb18JUSKhCOX8+UE1UKQufyD6Or48dJg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.45.1.tgz",
      "integrity": "sha512-lxV2Pako3ujjuUe9jiU3/s7KSrDfH6IgTSQOnDWr9aJ92YsFd7EurmClK0ly/t8dzMkDtd04g60WX6yl0sGfdw==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.45.1.tgz",
      "integrity": "sha512-M/fKi4sasCdM8i0aWJjCSFm2qEnYRR8AMLG2kxp6wD13+tMGA4Z1tVAuHkNRjud5SW2EM3naLuK35w9twvf6aA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/d3-array": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-color": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
      "license": "MIT"
    },
    "node_modules/@types/d3-ease": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
      "license": "MIT"
    },
    "node_modules/@types/d3-interpolate": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-color": "*"
      }
    },
    "node_modules/@types/d3-path": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-scale": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-time": "*"
      }
    },
    "node_modules/@types/d3-shape": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-path": "*"
      }
    },
    "node_modules/@types/d3-time": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
      "license": "MIT"
    },
    "node_modules/@types/d3-timer": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
      "license": "MIT"
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/stylis": {
      "version": "4.2.5",
      "resolved": "https://registry.npmjs.org/@types/stylis/-/stylis-4.2.5.tgz",
      "integrity": "sha512-1Xve+NMN7FWjY14vLoY5tL3BVEQ/n42YLwaqJIPYhotZ9uBHt87VceMwWQpzmdEt2TNXIorIFG+YeCUUW7RInw==",
      "license": "MIT"
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.7.0.tgz",
      "integrity": "sha512-gUu9hwfWvvEDBBmgtAowQCojwZmJ5mcLn3aufeCsitijs3+f2NsrPtlAWIR6OPiqljl96GVCUbLe0HyqIpVaoA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.28.0",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.27",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.11.0.tgz",
      "integrity": "sha512-1Lx3WLFQWm3ooKDYZD1eXmoGO9fxYQjrycfHFC8P0sCfQVXyROp0p9PFWBehewBOdCwHc+f/b8I0fMto5eSfwA==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.4",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.1",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001726",
        "electron-to-chromium": "^1.5.173",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelize": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/camelize/-/camelize-1.0.1.tgz",
      "integrity": "sha512-dU+Tx2fsypxTgtLoE36npi3UqcjSSMNYfkqgmoEhtZrraP5VWq0K7FkWVTYa8eMPtnU/G2txVsfdCJTn9uzpuQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001727",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/css-color-keywords": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/css-color-keywords/-/css-color-keywords-1.0.0.tgz",
      "integrity": "sha512-FyyrDHZKEjXDpNJYvVsV960FiqQyXc/LlYmsxl2BcdMb2WPx0OGRVgTg55rPSyLSNMqP52R9r8geSp7apN3Ofg==",
      "license": "ISC",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/css-to-react-native": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/css-to-react-native/-/css-to-react-native-3.2.0.tgz",
      "integrity": "sha512-e8RKaLXMOFii+02mOlqwjbD00KSEKqblnpO9e++1aXS1fPQOpS1YoqdVHBqPjHNoxeF2mimzVqawm2KCbEdtHQ==",
      "license": "MIT",
      "dependencies": {
        "camelize": "^1.0.0",
        "css-color-keywords": "^1.0.0",
        "postcss-value-parser": "^4.0.2"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js-light": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/dom-helpers": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.8.7",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.191",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.191.tgz",
      "integrity": "sha512-xcwe9ELcuxYLUFqZZxL19Z6HVKcvNkIwhbHUz7L3us6u12yR+7uY89dSl570f/IqNthx8dAw3tojG7i4Ni4tDA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.21.5",
        "@esbuild/android-arm": "0.21.5",
        "@esbuild/android-arm64": "0.21.5",
        "@esbuild/android-x64": "0.21.5",
        "@esbuild/darwin-arm64": "0.21.5",
        "@esbuild/darwin-x64": "0.21.5",
        "@esbuild/freebsd-arm64": "0.21.5",
        "@esbuild/freebsd-x64": "0.21.5",
        "@esbuild/linux-arm": "0.21.5",
        "@esbuild/linux-arm64": "0.21.5",
        "@esbuild/linux-ia32": "0.21.5",
        "@esbuild/linux-loong64": "0.21.5",
        "@esbuild/linux-mips64el": "0.21.5",
        "@esbuild/linux-ppc64": "0.21.5",
        "@esbuild/linux-riscv64": "0.21.5",
        "@esbuild/linux-s390x": "0.21.5",
        "@esbuild/linux-x64": "0.21.5",
        "@esbuild/netbsd-x64": "0.21.5",
        "@esbuild/openbsd-x64": "0.21.5",
        "@esbuild/sunos-x64": "0.21.5",
        "@esbuild/win32-arm64": "0.21.5",
        "@esbuild/win32-ia32": "0.21.5",
        "@esbuild/win32-x64": "0.21.5"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.31.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.31.0.tgz",
      "integrity": "sha512-QldCVh/ztyKJJZLr4jXNUByx3gR+TDYZCRXEktiZoUR3PGy4qCmSbkxcIle8GEwGpb5JBZazlaJ/CxLidXdEbQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.21.0",
        "@eslint/config-helpers": "^0.3.0",
        "@eslint/core": "^0.15.0",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.31.0",
        "@eslint/plugin-kit": "^0.3.1",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.4.0",
        "eslint-visitor-keys": "^4.2.1",
        "espree": "^10.4.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.4.0.tgz",
      "integrity": "sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.4.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.4.0.tgz",
      "integrity": "sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.15.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-equals": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/fast-equals/-/fast-equals-5.2.2.tgz",
      "integrity": "sha512-V7/RktU11J3I36Nwq2JnZEM7tNm17eBJz+u25qdxBZeCKiX6BkVSZQjwWIr+IobgnZy+ag73tTZgZi7tr0LrBw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/postcss": {
      "version": "8.4.49",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.49.tgz",
      "integrity": "sha512-OCVPnIObs4N29kxTjzLfUryOkvZEq+pf8jTF0lg8E7uETuWHA+v7j3c/xJmiqpX450191LlmZfUKkXxkTry7nA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.7",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "license": "MIT"
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/prop-types/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-icons": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/react-icons/-/react-icons-5.5.0.tgz",
      "integrity": "sha512-MEFcXdkP3dLo8uumGI5xN3lDFNsRtrjbOEKDLD7yv76v4wpnEq2Lt2qeHaQOr34I/wPN3s3+N08WkQ+CW37Xiw==",
      "license": "MIT",
      "peerDependencies": {
        "react": "*"
      }
    },
    "node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "license": "MIT"
    },
    "node_modules/react-loading-skeleton": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/react-loading-skeleton/-/react-loading-skeleton-3.5.0.tgz",
      "integrity": "sha512-gxxSyLbrEAdXTKgfbpBEFZCO/P153DnqSCQau2+o6lNy1jgMRr2MmRmOzMmyrwSaSYLRB8g7b0waYPmUjz7IhQ==",
      "license": "MIT",
      "peerDependencies": {
        "react": ">=16.8.0"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.1.tgz",
      "integrity": "sha512-X1m21aEmxGXqENEPG3T6u0Th7g0aS4ZmoNynhbs+Cn+q+QGTLt+d5IQ2bHAXKzKcxGJjxACpVbnYQSCRcfxHlQ==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.1.tgz",
      "integrity": "sha512-llKsgOkZdbPU1Eg3zK8lCn+sjD9wMRZZPuzmdWWX5SUs8OFkN5HnFVC0u5KMeMaC9aoancFI/KoLuKPqN+hxHw==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0",
        "react-router": "6.30.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/react-smooth": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/react-smooth/-/react-smooth-4.0.4.tgz",
      "integrity": "sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==",
      "license": "MIT",
      "dependencies": {
        "fast-equals": "^5.0.1",
        "prop-types": "^15.8.1",
        "react-transition-group": "^4.4.5"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/react-transition-group": {
      "version": "4.4.5",
      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/runtime": "^7.5.5",
        "dom-helpers": "^5.0.1",
        "loose-envify": "^1.4.0",
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": ">=16.6.0",
        "react-dom": ">=16.6.0"
      }
    },
    "node_modules/recharts": {
      "version": "2.15.4",
      "resolved": "https://registry.npmjs.org/recharts/-/recharts-2.15.4.tgz",
      "integrity": "sha512-UT/q6fwS3c1dHbXv2uFgYJ9BMFHu3fwnd7AYZaEQhXuYQ4hgsxLvsUXzGdKeZrW5xopzDCvuA2N41WJ88I7zIw==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.0.0",
        "eventemitter3": "^4.0.1",
        "lodash": "^4.17.21",
        "react-is": "^18.3.1",
        "react-smooth": "^4.0.4",
        "recharts-scale": "^0.4.4",
        "tiny-invariant": "^1.3.1",
        "victory-vendor": "^36.6.8"
      },
      "engines": {
        "node": ">=14"
      },
      "peerDependencies": {
        "react": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/recharts-scale": {
      "version": "0.4.5",
      "resolved": "https://registry.npmjs.org/recharts-scale/-/recharts-scale-0.4.5.tgz",
      "integrity": "sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==",
      "license": "MIT",
      "dependencies": {
        "decimal.js-light": "^2.4.1"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/rollup": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.45.1.tgz",
      "integrity": "sha512-4iya7Jb76fVpQyLoiVpzUrsjQ12r3dM7fIVz+4NwoYvZOShknRmiv+iu9CClZml5ZLGb0XMcYLutK6w9tgxHDw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.45.1",
        "@rollup/rollup-android-arm64": "4.45.1",
        "@rollup/rollup-darwin-arm64": "4.45.1",
        "@rollup/rollup-darwin-x64": "4.45.1",
        "@rollup/rollup-freebsd-arm64": "4.45.1",
        "@rollup/rollup-freebsd-x64": "4.45.1",
        "@rollup/rollup-linux-arm-gnueabihf": "4.45.1",
        "@rollup/rollup-linux-arm-musleabihf": "4.45.1",
        "@rollup/rollup-linux-arm64-gnu": "4.45.1",
        "@rollup/rollup-linux-arm64-musl": "4.45.1",
        "@rollup/rollup-linux-loongarch64-gnu": "4.45.1",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.45.1",
        "@rollup/rollup-linux-riscv64-gnu": "4.45.1",
        "@rollup/rollup-linux-riscv64-musl": "4.45.1",
        "@rollup/rollup-linux-s390x-gnu": "4.45.1",
        "@rollup/rollup-linux-x64-gnu": "4.45.1",
        "@rollup/rollup-linux-x64-musl": "4.45.1",
        "@rollup/rollup-win32-arm64-msvc": "4.45.1",
        "@rollup/rollup-win32-ia32-msvc": "4.45.1",
        "@rollup/rollup-win32-x64-msvc": "4.45.1",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/shallowequal": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/shallowequal/-/shallowequal-1.1.0.tgz",
      "integrity": "sha512-y0m1JoUZSlPAjXVtPPW70aZWfIL/dSP7AFkRnniLCrK/8MDKog3TySTBmckD+RObVxH0v4Tox67+F14PdED2oQ==",
      "license": "MIT"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/styled-components": {
      "version": "6.1.19",
      "resolved": "https://registry.npmjs.org/styled-components/-/styled-components-6.1.19.tgz",
      "integrity": "sha512-1v/e3Dl1BknC37cXMhwGomhO8AkYmN41CqyX9xhUDxry1ns3BFQy2lLDRQXJRdVVWB9OHemv/53xaStimvWyuA==",
      "license": "MIT",
      "dependencies": {
        "@emotion/is-prop-valid": "1.2.2",
        "@emotion/unitless": "0.8.1",
        "@types/stylis": "4.2.5",
        "css-to-react-native": "3.2.0",
        "csstype": "3.1.3",
        "postcss": "8.4.49",
        "shallowequal": "1.1.0",
        "stylis": "4.3.2",
        "tslib": "2.6.2"
      },
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/styled-components"
      },
      "peerDependencies": {
        "react": ">= 16.8.0",
        "react-dom": ">= 16.8.0"
      }
    },
    "node_modules/styled-components/node_modules/tslib": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
      "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==",
      "license": "0BSD"
    },
    "node_modules/stylis": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.3.2.tgz",
      "integrity": "sha512-bhtUjWd/z6ltJiQwg0dUfxEJ+W+jdqQd8TbWLWyeIJHlnsqmGLRFFd8e5mA0AZi/zx90smXRlN66YMTcaSFifg==",
      "license": "MIT"
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
      "license": "MIT"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/victory-vendor": {
      "version": "36.9.2",
      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-36.9.2.tgz",
      "integrity": "sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==",
      "license": "MIT AND ISC",
      "dependencies": {
        "@types/d3-array": "^3.0.3",
        "@types/d3-ease": "^3.0.0",
        "@types/d3-interpolate": "^3.0.1",
        "@types/d3-scale": "^4.0.2",
        "@types/d3-shape": "^3.1.0",
        "@types/d3-time": "^3.0.0",
        "@types/d3-timer": "^3.0.0",
        "d3-array": "^3.1.6",
        "d3-ease": "^3.0.1",
        "d3-interpolate": "^3.0.1",
        "d3-scale": "^4.0.2",
        "d3-shape": "^3.1.0",
        "d3-time": "^3.0.0",
        "d3-timer": "^3.0.1"
      }
    },
    "node_modules/vite": {
      "version": "5.4.19",
      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.19.tgz",
      "integrity": "sha512-qO3aKv3HoQC8QKiNSTuUM1l9o/XX3+c+VTgLHbJWHZGeTPVAg2XwazI9UWzoxjIJCGCV2zU60uqMzjeLZuULqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.21.3",
        "postcss": "^8.4.43",
        "rollup": "^4.20.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || >=20.0.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}


===== package.json =====
{
  "name": "smart-pos",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "format": "prettier --write ."
  },
  "dependencies": {
    "axios": "^1.7.7",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "react-loading-skeleton": "^3.5.0",
    "react-router-dom": "^6.27.0",
    "recharts": "^2.13.0",
    "styled-components": "^6.1.13"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.3.2",
    "eslint": "^9.12.0",
    "vite": "^5.4.8"
  }
}

===== backend\.env =====
# ===================================================================
# KONFIGURASI LINGKUNGAN APLIKASI
# SALIN FILE INI MENJADI .env DAN ISI DENGAN NILAI ANDA SENDIRI.
# JANGAN PERNAH UNGGAH FILE .env KE REPOSITORI GIT.
# ===================================================================

# ===================================================================
# KONFIGURASI DATABASE
# Sesuaikan dengan pengaturan database MySQL/MariaDB Anda.
# ===================================================================
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=
DB_NAME=smart_pos_db
DB_TIMEZONE=Asia/Jakarta

# ===================================================================
# KUNCI RAHASIA APLIKASI (WAJIB DIISI DENGAN NILAI ACAK!)
# Gunakan generator online seperti https://randomkeygen.com/ untuk membuat nilai ini.
# JANGAN GUNAKAN NILAI DEFAULT INI DI PRODUKSI.
# ===================================================================
# Untuk JWT: Ganti dengan string acak yang sangat panjang (minimal 64 karakter).
JWT_SECRET=T+pM+b2u/RObTYgl60p68bDzVpG0ieqW5+Twv7jZ6Ywachdpbs/TIh1BLS3pYd0G
wqkQ5h2iuQBYjOhP4zfGng==

# Untuk Enkripsi: Ganti dengan string acak TEPAT 32 KARAKTER.
ENCRYPTION_KEY=q90KbPMKh/A/PpOm5xsT83WtJLpg5zl6ZHEzHcXfs3s=

# Kunci untuk registrasi admin pertama kali (opsional setelah setup).
# Ganti dengan frasa yang unik dan sulit ditebak.
ADMIN_REGISTRATION_KEY="zee"

# ===================================================================
# URL FRONTEND (PENTING UNTUK KEBIJAKAN CORS)
# Ganti dengan URL domain frontend Anda saat sudah online.
# ===================================================================
FRONTEND_URL=http://localhost:5173

# ===================================================================
# PENGATURAN EMAIL (OPSIONAL: UNTUK KIRIM STRUK)
# Gunakan kredensial email yang valid dan "Sandi Aplikasi" (App Password) dari Google.
# Lihat tutorial di aplikasi untuk cara mendapatkannya.
# ===================================================================
EMAIL_USER=email.anda@gmail.com
EMAIL_PASS=sandi_aplikasi_16_digit_dari_google_disini

===== backend\example.env =====
# ===================================================================
# KONFIGURASI LINGKUNGAN APLIKASI
# SALIN FILE INI MENJADI .env DAN ISI DENGAN NILAI ANDA SENDIRI.
# JANGAN PERNAH UNGGAH FILE .env KE REPOSITORI GIT.
# ===================================================================

# ===================================================================
# KONFIGURASI DATABASE
# Sesuaikan dengan pengaturan database MySQL/MariaDB Anda.
# ===================================================================
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=
DB_NAME=smart_pos_db
DB_TIMEZONE=Asia/Jakarta

# ===================================================================
# KUNCI RAHASIA APLIKASI (WAJIB DIISI DENGAN NILAI ACAK!)
# Gunakan generator online seperti https://randomkeygen.com/ untuk membuat nilai ini.
# JANGAN GUNAKAN NILAI DEFAULT INI DI PRODUKSI.
# ===================================================================

# Untuk JWT: Ganti dengan string acak yang sangat panjang (minimal 64 karakter).
JWT_SECRET=ubah_dengan_string_acak_minimal_64_karakter

# Untuk Enkripsi: Ganti dengan string acak TEPAT 32 KARAKTER.
ENCRYPTION_KEY=ubah_dengan_32_karakter_acak

# Kunci untuk registrasi admin pertama kali (opsional setelah setup).
# Ganti dengan frasa yang unik dan sulit ditebak.
ADMIN_REGISTRATION_KEY=zee

# ===================================================================
# URL FRONTEND (PENTING UNTUK KEBIJAKAN CORS)
# Ganti dengan URL domain frontend Anda saat sudah online.
# ===================================================================
FRONTEND_URL=http://localhost:5173

# ===================================================================
# PENGATURAN EMAIL (OPSIONAL: UNTUK KIRIM STRUK)
# Gunakan kredensial email yang valid dan "Sandi Aplikasi" (App Password) dari Google.
# Lihat tutorial di aplikasi untuk cara mendapatkannya.
# ===================================================================
EMAIL_USER=email.anda@gmail.com
EMAIL_PASS=sandi_aplikasi_16_digit_dari_google_disini


===== backend\index.js =====
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');
const rateLimit = require('express-rate-limit'); // Tambah: Express Rate Limit

const allowedOrigins = [process.env.FRONTEND_URL];
const corsOptions = {
    origin: (origin, callback) => {
        if (!origin || allowedOrigins.indexOf(origin) !== -1) {
            callback(null, true);
        } else {
            callback(new Error('Akses ditolak oleh kebijakan CORS'));
        }
    },
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true,
    exposedHeaders: ['Content-Disposition'],
};

const app = express();

app.options('*', cors(corsOptions));
app.use(cors(corsOptions));

// Konfigurasi Rate Limiter untuk mencegah brute-force attacks
const apiLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 menit
    max: 100, // maks 100 request per IP per windowMs
    message: "Terlalu banyak permintaan dari IP ini, silakan coba lagi setelah 15 menit."
});

// Gunakan rate limiter pada semua rute API
app.use('/api/', apiLimiter);

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Impor semua rute aplikasi
const userRoutes = require('./routes/userRoutes');
const productRoutes = require('./routes/productRoutes');
const orderRoutes = require('./routes/orderRoutes');
const analyticsRoutes = require('./routes/analyticsRoutes');
const settingsRoutes = require('./routes/settingsRoutes');
const categoryRoutes = require('./routes/categoryRoutes');
const supplierRoutes = require('./routes/supplierRoutes');
const customerRoutes = require('./routes/customerRoutes');
const uploadRoutes = require('./routes/uploadRoutes');
const expenseRoutes = require('./routes/expenseRoutes');
const reportRoutes = require('./routes/reportRoutes');
const shiftRoutes = require('./routes/shiftRoutes');
const promotionRoutes = require('./routes/promotionRoutes');
const stockRoutes = require('./routes/stockRoutes');
const purchaseOrderRoutes = require('./routes/purchaseOrderRoutes');
const rawMaterialRoutes = require('./routes/rawMaterialRoutes');
const roleRoutes = require('./routes/roleRoutes');
const rewardsRoutes = require('./routes/rewardsRoutes');

// Pendaftaran semua rute
app.use('/api/users', userRoutes);
app.use('/api/products', productRoutes);
app.use('/api/orders', orderRoutes);
app.use('/api/analytics', analyticsRoutes);
app.use('/api/settings', settingsRoutes);
app.use('/api/categories', categoryRoutes);
app.use('/api/suppliers', supplierRoutes);
app.use('/api/customers', customerRoutes);
app.use('/api/upload', uploadRoutes);
app.use('/api/expenses', expenseRoutes);
app.use('/api/reports', reportRoutes);
app.use('/api/promotions', promotionRoutes);
app.use('/api/stock', stockRoutes);
app.use('/api/purchase-orders', purchaseOrderRoutes);
app.use('/api/raw-materials', rawMaterialRoutes);
app.use('/api/roles', roleRoutes);
app.use('/api/shifts', shiftRoutes);
app.use('/api/rewards', rewardsRoutes);


app.get('/', (req, res) => res.status(200).send('Smart POS Backend API is running!'));

// Middleware Penanganan Error Terpusat
// Ini akan menangkap semua error yang dilempar dari rute async Anda
const errorHandler = (err, req, res, next) => {
    console.error(`[GLOBAL ERROR HANDLER]: ${err.stack}`);
    
    // Default ke 500 jika tidak ada status code spesifik
    const statusCode = res.statusCode === 200 ? 500 : res.statusCode;
    
    res.status(statusCode).json({
        message: err.message || 'Terjadi kesalahan pada server.',
        // Hanya tampilkan stack trace di mode development untuk keamanan
        stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,
    });
};

app.use(errorHandler);


const port = process.env.PORT || 5000;
app.listen(port, () => console.log(`🚀 Backend server running at http://localhost:${port}`));

===== backend\package-lock.json =====
{
  "name": "backend",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "backend",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "are-we-there-yet": "^4.0.2",
        "bcrypt": "^5.1.1",
        "body-parser": "^1.20.2",
        "cors": "^2.8.5",
        "csv-writer": "^1.6.0",
        "dotenv": "^16.4.5",
        "express": "^4.19.2",
        "express-rate-limit": "^8.0.1",
        "express-validator": "^7.1.0",
        "jsonwebtoken": "^9.0.2",
        "multer": "^2.0.2",
        "mysql2": "^3.10.0",
        "nodemailer": "^6.9.14",
        "npmlog": "^7.0.1",
        "pdfkit": "^0.15.0"
      },
      "devDependencies": {
        "nodemon": "^3.1.2"
      }
    },
    "node_modules/@mapbox/node-pre-gyp": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
      "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "detect-libc": "^2.0.0",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.7",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      },
      "bin": {
        "node-pre-gyp": "bin/node-pre-gyp"
      }
    },
    "node_modules/@mapbox/node-pre-gyp/node_modules/are-we-there-yet": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@mapbox/node-pre-gyp/node_modules/gauge": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@mapbox/node-pre-gyp/node_modules/npmlog": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "node_modules/@mapbox/node-pre-gyp/node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "license": "ISC"
    },
    "node_modules/@swc/helpers": {
      "version": "0.3.17",
      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.3.17.tgz",
      "integrity": "sha512-tb7Iu+oZ+zWJZ3HJqwx8oNwSDIU440hmVMDPhpACWQWnrZHK99Bxs70gT1L2dnr5Hg50ZRWEFkQCAnOVVV0z1Q==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
      "license": "ISC"
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/agent-base/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/agent-base/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/append-field": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
      "integrity": "sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw==",
      "license": "MIT"
    },
    "node_modules/aproba": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.1.0.tgz",
      "integrity": "sha512-tLIEcj5GuR2RSTnxNKdkK0dJ/GrC7P38sUkiDmDuHfsHmbagTFAxDVIBltoklXEVIQ/f14IL8IMJ5pn9Hez1Ew==",
      "license": "ISC"
    },
    "node_modules/are-we-there-yet": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-4.0.2.tgz",
      "integrity": "sha512-ncSWAawFhKMJDTdoAeOV+jyW1VCMj5QIAwULIBV0SSR7B/RLPPEQiknKcg/RIIZlUQrxELpsxMiTUoAQ4sIUyg==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "engines": {
        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
      }
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/aws-ssl-profiles": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/aws-ssl-profiles/-/aws-ssl-profiles-1.1.2.tgz",
      "integrity": "sha512-NZKeq9AfyQvEeNlN0zSYAaWrmBffJh3IELMZfRpJVWgrpEbtEpnjvzqBPf+mxoI287JohRDoa+/nsfqqiZmF6g==",
      "license": "MIT",
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "license": "MIT"
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/bcrypt": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.1.tgz",
      "integrity": "sha512-AGBHOG5hPYZ5Xl9KXzU5iKq9516yEmvCKDg3ecP5kX2aB6UqTeXZxk2ELnDgDm6BQSMlLt9rDB4LoSMx0rYwww==",
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "@mapbox/node-pre-gyp": "^1.0.11",
        "node-addon-api": "^5.0.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/brotli": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/brotli/-/brotli-1.3.3.tgz",
      "integrity": "sha512-oTKjJdShmDuGW94SyyaoQvAjf30dZaHnjJ8uAF+u2/vGJkJbJPJAT1gDiOJP5v1Zb6f9KEyW/1HpuaWIXtGHPg==",
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.1.2"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "license": "MIT"
    },
    "node_modules/busboy": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.16.0"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/clone": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/clone/-/clone-2.1.2.tgz",
      "integrity": "sha512-3Pe/CF1Nn94hyhIYpjtiLhdCoEoz0DqQ+988E9gmeEdQZlojxnOb74wctFyuwWQHzqyf9X7C7MG8juUpqBJT8w==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
      "license": "ISC",
      "bin": {
        "color-support": "bin.js"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "license": "MIT"
    },
    "node_modules/concat-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-2.0.0.tgz",
      "integrity": "sha512-MWufYdFw53ccGjCA+Ol7XJYpAlW6/prSMzuPOTRnJGcGzuhLn4Scrz7qf6o8bROZ514ltazcIFJZevcfbo0x7A==",
      "engines": [
        "node >= 6.0"
      ],
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^3.0.2",
        "typedarray": "^0.0.6"
      }
    },
    "node_modules/console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ==",
      "license": "ISC"
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/crypto-js": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-4.2.0.tgz",
      "integrity": "sha512-KALDyEYgpY+Rlob/iriUtjV6d5Eq+Y191A5g4UqLAi8CyGP9N1+FdVbkc1SxKc2r4YAYqG8JzO2KGL+AizD70Q==",
      "license": "MIT"
    },
    "node_modules/csv-writer": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/csv-writer/-/csv-writer-1.6.0.tgz",
      "integrity": "sha512-NOx7YDFWEsM/fTRAJjRpPp8t+MKRVvniAg9wQlUKx20MFrPs73WLJhFf5iteqrxNYnsy924K3Iroh3yNHeYd2g==",
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/deep-equal": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/deep-equal/-/deep-equal-2.2.3.tgz",
      "integrity": "sha512-ZIwpnevOurS8bpT4192sqAowWM76JDKSHYzMLty3BZGSswgq6pBaH3DhCSW5xVAZICZyKdOBPjwww5wfgT/6PA==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.0",
        "call-bind": "^1.0.5",
        "es-get-iterator": "^1.1.3",
        "get-intrinsic": "^1.2.2",
        "is-arguments": "^1.1.1",
        "is-array-buffer": "^3.0.2",
        "is-date-object": "^1.0.5",
        "is-regex": "^1.1.4",
        "is-shared-array-buffer": "^1.0.2",
        "isarray": "^2.0.5",
        "object-is": "^1.1.5",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.4",
        "regexp.prototype.flags": "^1.5.1",
        "side-channel": "^1.0.4",
        "which-boxed-primitive": "^1.0.2",
        "which-collection": "^1.0.1",
        "which-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ==",
      "license": "MIT"
    },
    "node_modules/denque": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dfa": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/dfa/-/dfa-1.2.0.tgz",
      "integrity": "sha512-ED3jP8saaweFTjeGX8HQPjeC1YYyZs98jGNZx6IiBvxW7JG5v492kamAQB3m2wop07CvU/RQmzcKr6bgcC5D/Q==",
      "license": "MIT"
    },
    "node_modules/dotenv": {
      "version": "16.6.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
      "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-get-iterator": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/es-get-iterator/-/es-get-iterator-1.1.3.tgz",
      "integrity": "sha512-sPZmqHBe6JIiTfN5q2pEi//TwxmAFHwj/XEuYjTuse78i8KxaqMTTzxPoFKuzRpDpTJ+0NAbpfenkmH2rePtuw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "get-intrinsic": "^1.1.3",
        "has-symbols": "^1.0.3",
        "is-arguments": "^1.1.1",
        "is-map": "^2.0.2",
        "is-set": "^2.0.2",
        "is-string": "^1.0.7",
        "isarray": "^2.0.5",
        "stop-iteration-iterator": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express-rate-limit": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-8.1.0.tgz",
      "integrity": "sha512-4nLnATuKupnmwqiJc27b4dCFmB/T60ExgmtDD7waf4LdrbJ8CPZzZRHYErDYNhoz+ql8fUdYwM/opf90PoPAQA==",
      "license": "MIT",
      "dependencies": {
        "ip-address": "10.0.1"
      },
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "url": "https://github.com/sponsors/express-rate-limit"
      },
      "peerDependencies": {
        "express": ">= 4.11"
      }
    },
    "node_modules/express-validator": {
      "version": "7.2.1",
      "resolved": "https://registry.npmjs.org/express-validator/-/express-validator-7.2.1.tgz",
      "integrity": "sha512-CjNE6aakfpuwGaHQZ3m8ltCG2Qvivd7RHtVMS/6nVxOM7xVGqr4bhflsm4+N5FP5zI7Zxp+Hae+9RE+o8e3ZOQ==",
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.17.21",
        "validator": "~13.12.0"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/fontkit": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/fontkit/-/fontkit-1.9.0.tgz",
      "integrity": "sha512-HkW/8Lrk8jl18kzQHvAw9aTHe1cqsyx5sDnxncx652+CIfhawokEPkeM3BoIC+z/Xv7a0yMr0f3pRRwhGH455g==",
      "license": "MIT",
      "dependencies": {
        "@swc/helpers": "^0.3.13",
        "brotli": "^1.3.2",
        "clone": "^2.1.2",
        "deep-equal": "^2.0.5",
        "dfa": "^1.2.0",
        "restructure": "^2.0.1",
        "tiny-inflate": "^1.0.3",
        "unicode-properties": "^1.3.1",
        "unicode-trie": "^2.0.0"
      }
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "license": "ISC",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs-minipass/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gauge": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-5.0.2.tgz",
      "integrity": "sha512-pMaFftXPtiGIHCJHdcUUx9Rby/rFT/Kkt3fIIGCs+9PMDIljSyRiqraTlxNtBReJRDfUefpa263RQ3vnp5G/LQ==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.3",
        "console-control-strings": "^1.1.0",
        "has-unicode": "^2.0.1",
        "signal-exit": "^4.0.1",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.5"
      },
      "engines": {
        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
      }
    },
    "node_modules/generate-function": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/generate-function/-/generate-function-2.3.1.tgz",
      "integrity": "sha512-eeB5GfMNeevm/GRYq20ShmsaGcmI81kIX2K9XQx5miC8KdHaC6Jm0qQ8ZNeGOi7wYB8OsdxKs+Y2oVuTFuVwKQ==",
      "license": "MIT",
      "dependencies": {
        "is-property": "^1.0.2"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ==",
      "license": "ISC"
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/https-proxy-agent/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/https-proxy-agent/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ip-address": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/ip-address/-/ip-address-10.0.1.tgz",
      "integrity": "sha512-NWv9YLW4PoW2B7xtzaS3NCot75m6nK7Icdv0o3lfMceJVRfSoQwqD4wEH5rLwoKJwUiZ/rfpiVBhnaF0FK4HoA==",
      "license": "MIT",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-arguments": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/is-arguments/-/is-arguments-1.2.0.tgz",
      "integrity": "sha512-7bVbi0huj/wrIAOzb8U1aszg9kdi3KN/CyU19CTI7tAoZYEZoL9yCDXpbXN+uPsuWnP02cyug1gleqq+TU+YCA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-property": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz",
      "integrity": "sha512-Ks/IoX00TtClbGQr4TWXemAnktAQvYB7HzcCxDGqEZU6oCmb2INHuOoKxbtR+HFkmYWBKv/dOZtGRiAjDhj92g==",
      "license": "MIT"
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "license": "MIT"
    },
    "node_modules/jpeg-exif": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/jpeg-exif/-/jpeg-exif-1.1.4.tgz",
      "integrity": "sha512-a+bKEcCjtuW5WTdgeXFzswSrdqi0jk4XlEtZlx5A94wCoBpFjfFTbo/Tra5SpNCl/YFZPvcV1dJc+TAYeg6ROQ==",
      "license": "MIT"
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/jwa": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/linebreak": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/linebreak/-/linebreak-1.1.0.tgz",
      "integrity": "sha512-MHp03UImeVhB7XZtjd0E4n6+3xr5Dq/9xI/5FptGk5FrbDR3zagPa2DS6U8ks/3HjbKWG9Q1M2ufOzxV2qLYSQ==",
      "license": "MIT",
      "dependencies": {
        "base64-js": "0.0.8",
        "unicode-trie": "^2.0.0"
      }
    },
    "node_modules/linebreak/node_modules/base64-js": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-0.0.8.tgz",
      "integrity": "sha512-3XSA2cR/h/73EzlXXdU6YNycmYI7+kicTxks4eJg2g39biHR84slg2+des+p7iHYhbRg/udIS4TD53WabcOUkw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT"
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT"
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT"
    },
    "node_modules/long": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/long/-/long-5.3.2.tgz",
      "integrity": "sha512-mNAgZ1GmyNhD7AuqnTG3/VQ26o760+ZYBPKjPvugO8+nLbYfX6TVpJPseBvopbdY+qpZ/lKUnmEc1LeZYS3QAA==",
      "license": "Apache-2.0"
    },
    "node_modules/lru-cache": {
      "version": "7.18.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-7.18.3.tgz",
      "integrity": "sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/lru.min": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/lru.min/-/lru.min-1.1.2.tgz",
      "integrity": "sha512-Nv9KddBcQSlQopmBHXSsZVY5xsdlZkdH/Iey0BlcBYggMd4two7cZnKOK9vmy3nY0O5RGH99z1PCeTpPqszUYg==",
      "license": "MIT",
      "engines": {
        "bun": ">=1.0.0",
        "deno": ">=1.30.0",
        "node": ">=8.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wellwelwel"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "license": "MIT",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "license": "MIT",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minizlib/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.6"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/multer": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/multer/-/multer-2.0.2.tgz",
      "integrity": "sha512-u7f2xaZ/UG8oLXHvtF/oWTRvT44p9ecwBBqTwgJVq0+4BW1g8OW01TyMEGWBHbyMOYVHXslaut7qEQ1meATXgw==",
      "license": "MIT",
      "dependencies": {
        "append-field": "^1.0.0",
        "busboy": "^1.6.0",
        "concat-stream": "^2.0.0",
        "mkdirp": "^0.5.6",
        "object-assign": "^4.1.1",
        "type-is": "^1.6.18",
        "xtend": "^4.0.2"
      },
      "engines": {
        "node": ">= 10.16.0"
      }
    },
    "node_modules/mysql2": {
      "version": "3.14.4",
      "resolved": "https://registry.npmjs.org/mysql2/-/mysql2-3.14.4.tgz",
      "integrity": "sha512-Cs/jx3WZPNrYHVz+Iunp9ziahaG5uFMvD2R8Zlmc194AqXNxt9HBNu7ZsPYrUtmJsF0egETCWIdMIYAwOGjL1w==",
      "license": "MIT",
      "dependencies": {
        "aws-ssl-profiles": "^1.1.1",
        "denque": "^2.1.0",
        "generate-function": "^2.3.1",
        "iconv-lite": "^0.7.0",
        "long": "^5.2.1",
        "lru.min": "^1.0.0",
        "named-placeholders": "^1.1.3",
        "seq-queue": "^0.0.5",
        "sqlstring": "^2.3.2"
      },
      "engines": {
        "node": ">= 8.0"
      }
    },
    "node_modules/mysql2/node_modules/iconv-lite": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.7.0.tgz",
      "integrity": "sha512-cf6L2Ds3h57VVmkZe+Pn+5APsT7FpqJtEhhieDCvrE2MK5Qk9MyffgQyuxQTm6BChfeZNtcOLHp9IcWRVcIcBQ==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/named-placeholders": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/named-placeholders/-/named-placeholders-1.1.3.tgz",
      "integrity": "sha512-eLoBxg6wE/rZkJPhU/xRX1WTpkFEwDJEN96oxFrTsqBdbT5ec295Q+CoHrL9IT0DipqKhmGcaZmwOt8OON5x1w==",
      "license": "MIT",
      "dependencies": {
        "lru-cache": "^7.14.1"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-addon-api": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA==",
      "license": "MIT"
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/nodemailer": {
      "version": "6.10.1",
      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.10.1.tgz",
      "integrity": "sha512-Z+iLaBGVaSjbIzQ4pX6XV41HrooLsQ10ZWPUehGmuantvzWoDVBnmsdUcOIDM1t+yPor5pDhVlDESgOMEGxhHA==",
      "license": "MIT-0",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/nodemon": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.10.tgz",
      "integrity": "sha512-WDjw3pJ0/0jMFmyNDp3gvY2YizjLmmOUQo6DEBY+JgdvW/yQ9mEeSw6H5ythl5Ny2ytb7f9C2nIbjSxMNzbJXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^4",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^7.5.3",
        "simple-update-notifier": "^2.0.0",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "license": "ISC",
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/npmlog": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-7.0.1.tgz",
      "integrity": "sha512-uJ0YFk/mCQpLBt+bxN88AKd+gyqZvZDbtiNxk6Waqcj2aPRyfVx8ITawkyQynxUagInjdYT1+qj4NfA5KJJUxg==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "are-we-there-yet": "^4.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^5.0.0",
        "set-blocking": "^2.0.0"
      },
      "engines": {
        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-is": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/object-is/-/object-is-1.1.6.tgz",
      "integrity": "sha512-F8cZ+KfGlSGi09lJT7/Nd6KJZ9ygtvYC0/UYYLI9nmQKLMnydpB9yvbv9K1uSkEu7FU9vYPmVwLg328tX+ot3Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/pako": {
      "version": "0.2.9",
      "resolved": "https://registry.npmjs.org/pako/-/pako-0.2.9.tgz",
      "integrity": "sha512-NUcwaKxUxWrZLpDG+z/xZaCgQITkA/Dv4V/T6bw7VON6l1Xz/VnrBqrYjZQ12TamKHzITTfOEIYUj48y2KXImA==",
      "license": "MIT"
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/pdfkit": {
      "version": "0.15.2",
      "resolved": "https://registry.npmjs.org/pdfkit/-/pdfkit-0.15.2.tgz",
      "integrity": "sha512-s3GjpdBFSCaeDSX/v73MI5UsPqH1kjKut2AXCgxQ5OH10lPVOu5q5vLAG0OCpz/EYqKsTSw1WHpENqMvp43RKg==",
      "license": "MIT",
      "dependencies": {
        "crypto-js": "^4.2.0",
        "fontkit": "^1.8.1",
        "jpeg-exif": "^1.1.4",
        "linebreak": "^1.0.2",
        "png-js": "^1.0.0"
      }
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/png-js": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/png-js/-/png-js-1.0.0.tgz",
      "integrity": "sha512-k+YsbhpA9e+EFfKjTCH3VW6aoKlyNYI6NYdTfDL4CIvFnvsuO84ttonmZE7rc+v23SLTH8XX+5w/Ak9v0xGY4g=="
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/restructure": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/restructure/-/restructure-2.0.1.tgz",
      "integrity": "sha512-e0dOpjm5DseomnXx2M5lpdZ5zoHqF1+bqdMJUohoYVVQa7cBdnk7fdmeI6byNWP/kiME72EeTiSypTCVnpLiDg==",
      "license": "MIT"
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/seq-queue": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/seq-queue/-/seq-queue-0.0.5.tgz",
      "integrity": "sha512-hr3Wtp/GZIc/6DAGPDcV4/9WoZhjrkXsi5B/07QgX8tsdc6ilr7BFM6PM6rbdAX1kFSDYeZGLipIZZKyQP0O5Q=="
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==",
      "license": "ISC"
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "license": "ISC",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/simple-update-notifier": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
      "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/sqlstring": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.3.tgz",
      "integrity": "sha512-qC9iz2FlN7DQl3+wjwn3802RTyjCx7sDvfQEXchwa6CWOx07/WVfh91gBmQ9fahw8snwGEWU3xGzOt4tFyHLxg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/tar": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.2.1.tgz",
      "integrity": "sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==",
      "license": "ISC",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/tar/node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "license": "MIT",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/tiny-inflate": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tiny-inflate/-/tiny-inflate-1.0.3.tgz",
      "integrity": "sha512-pkY1fj1cKHb2seWDy0B16HeWyczlJA9/WW3u3c4z/NiWDsO3DOU5D7nhTLE9CF0yXv/QZFY7sEJmj24dK+Rrqw==",
      "license": "MIT"
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typedarray": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
      "integrity": "sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA==",
      "license": "MIT"
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/unicode-properties": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/unicode-properties/-/unicode-properties-1.4.1.tgz",
      "integrity": "sha512-CLjCCLQ6UuMxWnbIylkisbRj31qxHPAurvena/0iwSVbQ2G1VY5/HjV0IRabOEbDHlzZlRdCrD4NhB0JtU40Pg==",
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.0",
        "unicode-trie": "^2.0.0"
      }
    },
    "node_modules/unicode-trie": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unicode-trie/-/unicode-trie-2.0.0.tgz",
      "integrity": "sha512-x7bc76x0bm4prf1VLg79uhAzKw8DVboClSN5VxJuQ+LKDOVEW9CdH+VY7SP+vX7xCYQqzzgQpFqz15zeLvAtZQ==",
      "license": "MIT",
      "dependencies": {
        "pako": "^0.2.5",
        "tiny-inflate": "^1.0.0"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/validator": {
      "version": "13.12.0",
      "resolved": "https://registry.npmjs.org/validator/-/validator-13.12.0.tgz",
      "integrity": "sha512-c1Q0mCiPlgdTVVVIJIrBuxNicYE+t/7oKeI9MWLj3fh/uq2Pxh/3eeWbVZ4OcGW1TUf53At0njHw5SMdA3tmMg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    }
  }
}


===== backend\package.json =====
{
  "name": "backend",
  "version": "1.0.0",
  "description": "Smart POS Backend",
  "main": "index.js",
  "scripts": {
    "start": "nodemon index.js",
    "test": "echo \"Error: no test specified && exit 1\""
  },
  "author": "Muhammad Ibnu Fauzi",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "csv-writer": "^1.6.0",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-rate-limit": "^8.0.1",
    "express-validator": "^7.1.0",
    "jsonwebtoken": "^9.0.2",
    "multer": "^2.0.2",
    "mysql2": "^3.10.0",
    "nodemailer": "^6.9.14",
    "pdfkit": "^0.15.0"
  },
  "devDependencies": {
    "nodemon": "^3.1.2"
  }
}

===== backend\config\db.js =====
// backend/config/db.js
const mysql = require('mysql2/promise');
require('dotenv').config();

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
  timezone: process.env.DB_TIMEZONE || '+07:00', // Gunakan dari .env atau default ke WIB
  dateStrings: true 
});

module.exports = pool;

===== backend\middleware\authMiddleware.js =====
// backend/middleware/authMiddleware.js
const jwt = require('jsonwebtoken');

const protect = async (req, res, next) => {
    let token;
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
        try {
            token = req.headers.authorization.split(' ')[1];
            const decoded = jwt.verify(token, process.env.JWT_SECRET);

            req.user = {
                id: decoded.id,
                name: decoded.name,
                email: decoded.email,
                business_id: decoded.business_id,
                role: decoded.role,
                // PERBAIKAN: Sintaks array yang benar
                permissions: decoded.permissions || [] 
            };

            next();
        } catch (error) {
            return res.status(401).json({ message: 'Token not valid or expired.' });
        }
    }
    if (!token) {
        return res.status(401).json({ message: 'No token, authorization failed.' });
    }
};

const isAdmin = (req, res, next) => {
    if (req.user && req.user.role?.toLowerCase() === 'admin') {
        next();
    } else {
        res.status(403).json({ message: 'Access denied. Admin role required.' });
    }
};

const hasPermission = (permissionName) => {
    return (req, res, next) => {
        // PERBAIKAN: Sintaks if-else yang benar
        if (req.user && req.user.permissions && req.user.permissions.includes(permissionName)) {
            next();
        } else {
            res.status(403).json({ message: `Akses ditolak. Izin '${permissionName}' diperlukan.` });
        }
    };
};

module.exports = { protect, isAdmin, hasPermission };

===== backend\routes\analyticsRoutes.js =====
// C:\Users\Ibnu\Project\smart-pos\backend\routes\analyticsRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware');
const { getValidDateRange } = require('../utils/dateUtils');

const router = express.Router();

const getStatsForPeriod = async (businessId, startDate, endDate) => {
    if (!startDate || !endDate) {
        throw new Error("Invalid date range provided for stats query.");
    }
    const statsQuery = `
        SELECT
            (SELECT CAST(COALESCE(SUM(total_amount), 0) AS DECIMAL(15,2)) FROM orders WHERE business_id = ? AND created_at BETWEEN ? AND ?) as totalRevenue,
            (SELECT COUNT(id) FROM orders WHERE business_id = ? AND created_at BETWEEN ? AND ?) as totalTransactions,
            CAST(
                COALESCE(
                    (SELECT SUM((oi.price - COALESCE(oi.cost_price, 0)) * oi.quantity)
                    FROM order_items oi JOIN orders o2 ON oi.order_id = o2.id
                    WHERE o2.business_id = ? AND o2.created_at BETWEEN ? AND ?)
                , 0)
            AS DECIMAL(15,2)) as totalProfit,
             COALESCE((
                SELECT SUM(oi.quantity)
                FROM order_items oi JOIN orders o2 ON oi.order_id = o2.id
                WHERE o2.business_id = ? AND created_at BETWEEN ? AND ?
            ), 0) as totalSoldUnits,
            (SELECT COUNT(id) FROM customers WHERE business_id = ? AND created_at BETWEEN ? AND ?) as newCustomers,
            (SELECT SUM(amount) FROM expenses WHERE business_id = ? AND created_at BETWEEN ? AND ?) as totalExpenses,
            (SELECT expected_cash FROM cashier_shifts WHERE business_id = ? AND status = 'closed' ORDER BY end_time DESC LIMIT 1) as cashInDrawer
    `;
    const params = [
        businessId, startDate, endDate,
        businessId, startDate, endDate,
        businessId, startDate, endDate,
        businessId, startDate, endDate,
        businessId, startDate, endDate,
        businessId, startDate, endDate,
        businessId
    ];
    const [[stats]] = await db.query(statsQuery, params);
    const [[defaultCashSetting]] = await db.query('SELECT default_starting_cash FROM businesses WHERE id = ?', [businessId]);
    return {
        totalRevenue: Number(stats.totalRevenue),
        totalTransactions: Number(stats.totalTransactions),
        totalProfit: Number(stats.totalProfit),
        totalSoldUnits: Number(stats.totalSoldUnits),
        newCustomers: Number(stats.newCustomers),
        totalExpenses: Number(stats.totalExpenses) || 0,
        cashInDrawer: Number(stats.cashInDrawer) || Number(defaultCashSetting.default_starting_cash),
    };
};

router.get('/debug-token', protect, isAdmin, async (req, res) => {
    res.json({
        headers: req.headers,
        user: req.user,
        token: req.headers.authorization
    });
});

router.get('/stats', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;

        if (!businessId) {
            return res.status(400).json({ message: 'Invalid business ID' });
        }

        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const currentPeriodStats = await getStatsForPeriod(businessId, startDate, endDate);

        let previousPeriodStats = null;
        if (req.query.compareStartDate && req.query.compareEndDate) {
            const { startDate: compareStartDate, endDate: compareEndDate } = getValidDateRange(req.query.compareStartDate, req.query.compareEndDate);
            previousPeriodStats = await getStatsForPeriod(businessId, compareStartDate, compareEndDate);
        }

        res.json({
            current: currentPeriodStats,
            previous: previousPeriodStats,
        });

    } catch (error) {
        console.error("Error fetching stats:", error);
        res.status(500).json({
            message: "Failed to fetch stats data.",
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

router.get('/daily-revenue-profit', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;

        const query = `
            WITH RECURSIVE dates AS (
                SELECT ? as date
                UNION ALL
                SELECT DATE_ADD(date, INTERVAL 1 DAY)
                FROM dates
                WHERE date < ?
            )
            SELECT
                d.date,
                CAST(COALESCE(SUM(o.total_amount), 0) AS DECIMAL(15,2)) as revenue,
                CAST(COALESCE(SUM(oi.price * oi.quantity) - SUM(COALESCE(oi.cost_price, 0) * oi.quantity), 0) AS DECIMAL(15,2)) as profit
            FROM dates d
            LEFT JOIN orders o ON DATE(o.created_at) = d.date AND o.business_id = ?
            LEFT JOIN order_items oi ON oi.order_id = o.id
            GROUP BY d.date
            ORDER BY d.date ASC;
        `;

        const [results] = await db.query(query, [startDate, endDate, businessId]);

        const formattedResults = results.map(item => ({
            date: new Date(item.date).toLocaleDateString('id-ID', { day: 'numeric', month: 'short' }),
            revenue: Number(item.revenue),
            profit: Number(item.profit)
        }));

        res.json(formattedResults);

    } catch (error) {
        console.error("Error fetching daily revenue vs profit data:", error);
        res.status(500).json({ message: "Gagal mengambil data grafik." });
    }
});

router.get('/daily-sales', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;

        const dailySalesQuery = `
            WITH RECURSIVE dates AS (
                SELECT ? as date
                UNION ALL
                SELECT DATE_ADD(date, INTERVAL 1 DAY)
                FROM dates
                WHERE date < ?
            )
            SELECT
                dates.date,
                COALESCE(SUM(o.total_amount), 0) as sales
            FROM dates
            LEFT JOIN orders o ON DATE(o.created_at) = dates.date AND o.business_id = ?
            GROUP BY dates.date
            ORDER BY date ASC
        `;
        const [dailySales] = await db.query(dailySalesQuery, [startDate, endDate, businessId]);

        const formattedSales = dailySales.map(item => ({
            ...item,
            sales: parseFloat(item.sales),
            date: new Date(item.date).toLocaleDateString('id-ID', { day: 'numeric', month: 'short' })
        }));
        res.json(formattedSales);

    } catch (error) {
        console.error("Error fetching daily sales:", error);
        res.status(500).json({ message: "Failed to fetch daily sales data." });
    }
});

router.get('/top-products', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;

        const topProductsQuery = `
            SELECT
                p.name,
                COALESCE(SUM(oi.quantity), 0) as totalSold
            FROM products p
            LEFT JOIN product_variants pv ON p.id = pv.product_id
            LEFT JOIN order_items oi ON pv.id = oi.variant_id
            LEFT JOIN orders o ON oi.order_id = o.id AND o.created_at BETWEEN ? AND ?
            WHERE p.business_id = ? AND p.is_archived = 0
            GROUP BY p.id, p.name
            ORDER BY totalSold DESC
            LIMIT 10
        `;
        const [topProducts] = await db.query(topProductsQuery, [startDate, endDate, businessId]);
        
        const formattedTopProducts = topProducts.map(product => ({
            ...product,
            totalSold: Number(product.totalSold)
        }));
        
        res.json(formattedTopProducts);
    } catch (error) {
        console.error("Error fetching top products:", error);
        res.status(500).json({ message: "Failed to fetch top products data." });
    }
});

router.get('/product-sales-performance', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;

        const query = `
            SELECT
                p.id, p.name, COALESCE(SUM(oi.quantity), 0) as totalSold
            FROM products p
            LEFT JOIN product_variants pv ON p.id = pv.product_id
            LEFT JOIN order_items oi ON pv.id = oi.variant_id AND oi.order_id IN (
                SELECT id FROM orders WHERE business_id = ? AND created_at BETWEEN ? AND ?
            )
            WHERE p.business_id = ? AND p.is_archived = 0
            GROUP BY p.id, p.name
            ORDER BY totalSold DESC, p.name ASC;
        `;

        const [productPerformance] = await db.query(query, [businessId, startDate, endDate, businessId]);
        res.json(productPerformance);
    } catch (error) {
        console.error("Error fetching product sales performance:", error);
        res.status(500).json({ message: "Failed to fetch product sales performance." });
    }
});

router.get('/cashier-performance', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;
        const query = `
            SELECT
                u.id, 
                u.name,
                COALESCE(COUNT(o.id), 0) as totalTransactions,
                COALESCE(SUM(o.total_amount), 0) as totalSales
            FROM users u
            LEFT JOIN orders o ON u.id = o.user_id AND o.business_id = u.business_id AND o.created_at BETWEEN ? AND ?
            WHERE u.business_id = ? AND u.is_active = 1
            GROUP BY u.id, u.name
            ORDER BY totalSales DESC
        `;
        const [cashierPerformance] = await db.query(query, [startDate, endDate, businessId]);
        const formattedPerformance = cashierPerformance.map(item => ({
            ...item,
            totalTransactions: Number(item.totalTransactions),
            totalSales: Number(item.totalSales)
        }));
        res.json(formattedPerformance);
    } catch (error) {
        console.error("Error fetching cashier performance:", error);
        res.status(500).json({ message: "Failed to fetch cashier performance." });
    }
});

router.get('/notifications', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        let notifications = [];

        const [outOfStockProducts] = await db.query(
            `SELECT id, name FROM products WHERE business_id = ? AND stock = 0 AND is_archived = 0`,
            [businessId]
        );
        outOfStockProducts.forEach(p => {
            notifications.push({
                id: `oos-${p.id}`,
                type: 'danger',
                icon: 'FiPackage',
                text: `Stok produk "${p.name}" telah habis.`,
            });
        });

        const [lowStockProducts] = await db.query(
            `SELECT id, name, stock, low_stock_threshold FROM products WHERE business_id = ? AND stock > 0 AND stock <= low_stock_threshold AND is_archived = 0`,
            [businessId]
        );
        lowStockProducts.forEach(p => {
            notifications.push({
                id: `low-${p.id}`,
                type: 'warning',
                icon: 'FiAlertTriangle',
                text: `Stok produk "${p.name}" menipis. Sisa ${p.stock} unit (Batas: ${p.low_stock_threshold}).`,
            });
        });

        res.json(notifications);

    } catch (error) {
        console.error("Error fetching notifications:", error);
        res.status(500).json({ message: "Failed to fetch notifications." });
    }
});

router.get('/stock-info', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [products] = await db.query(
            `SELECT p.id, p.name, p.stock, p.image_url FROM products p WHERE p.business_id = ? AND p.is_archived = 0 ORDER BY p.stock ASC, p.name ASC`,
            [businessId]
        );
        res.json(products);
    } catch (error) {
        console.error("Failed to fetch all product stock info", error);
        res.status(500).json({ message: "Server Error" });
    }
});

router.get('/stale-products', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const days = parseInt(req.query.days) || 30;

        const query = `
            SELECT
                p.id, p.name, p.stock, MAX(o.created_at) AS lastSoldDate
            FROM products p
            LEFT JOIN product_variants pv ON p.id = pv.product_id
            LEFT JOIN order_items oi ON pv.id = oi.variant_id
            LEFT JOIN orders o ON oi.order_id = o.id AND o.business_id = p.business_id
            WHERE p.business_id = ? AND p.is_archived = 0
            GROUP BY p.id, p.name, p.stock
            HAVING (lastSoldDate IS NULL AND p.stock > 0) OR (DATEDIFF(NOW(), lastSoldDate) > ? AND p.stock > 0)
            ORDER BY lastSoldDate ASC, p.name ASC;
        `;
        const [staleProducts] = await db.query(query, [businessId, days]);
        res.json(staleProducts);
    } catch (error) {
        console.error("Error fetching stale products:", error);
        res.status(500).json({ message: "Failed to fetch stale products data." });
    }
});

router.get('/expired-products', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const days = parseInt(req.query.days) || 30;

        const query = `
            SELECT id, name, stock, expiration_date FROM products
            WHERE business_id = ? AND expiration_date IS NOT NULL AND expiration_date <= DATE_ADD(NOW(), INTERVAL ? DAY) AND is_archived = 0
            ORDER BY expiration_date ASC;
        `;
        const [expiredProducts] = await db.query(query, [businessId, days]);
        res.json(expiredProducts);
    } catch (error) {
        console.error("Error fetching expired products:", error);
        res.status(500).json({ message: "Failed to fetch expired products data." });
    }
});

router.get('/top-customers', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;

        const query = `
            SELECT
                c.id, c.name,
                COALESCE(SUM(o.total_amount), 0) as totalSpent,
                COALESCE(COUNT(o.id), 0) as totalOrders
            FROM customers c
            LEFT JOIN orders o ON c.id = o.customer_id AND o.business_id = c.business_id AND o.created_at BETWEEN ? AND ?
            WHERE c.business_id = ?
            GROUP BY c.id, c.name
            ORDER BY totalSpent DESC
            LIMIT 5;
        `;
        const [topCustomers] = await db.query(query, [startDate, endDate, businessId]);
        
        const formattedTopCustomers = topCustomers.map(customer => ({
            ...customer,
            totalSpent: Number(customer.totalSpent),
            totalOrders: Number(customer.totalOrders)
        }));

        res.json(formattedTopCustomers);
    } catch (error) {
        console.error("Error fetching top customers:", error);
        res.status(500).json({ message: "Failed to fetch top customers data." });
    }
});

router.get('/recent-suppliers', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const limit = parseInt(req.query.limit) || 5;

        const query = `
            SELECT id, name, created_at FROM suppliers
            WHERE business_id = ? AND is_archived = 0
            ORDER BY created_at DESC
            LIMIT ?;
        `;
        const [recentSuppliers] = await db.query(query, [businessId, limit]);
        res.json(recentSuppliers);
    } catch (error) {
        console.error("Error fetching recent suppliers:", error);
        res.status(500).json({ message: "Failed to fetch recent suppliers data." });
    }
});

router.get('/insights', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const insights = [];

        const [[revenueTarget]] = await db.query('SELECT monthly_revenue_target FROM businesses WHERE id = ?', [businessId]);
        const [[currentMonthSales]] = await db.query(
            `SELECT COALESCE(SUM(total_amount), 0) as totalSales FROM orders WHERE business_id = ? AND created_at BETWEEN ? AND ?`,
            [businessId, startDate, endDate]
        );

        if (revenueTarget && revenueTarget.monthly_revenue_target > 0) {
            if (currentMonthSales.totalSales >= revenueTarget.monthly_revenue_target) {
                insights.push({ id: 'insight-sales-target-met', type: 'success', icon: 'FiTrendingUp', text: 'Target pendapatan bulanan tercapai!' });
            } else {
                const remaining = revenueTarget.monthly_revenue_target - currentMonthSales.totalSales;
                if (remaining > 0) {
                    insights.push({ id: 'insight-sales-target-remaining', type: 'info', icon: 'FiBarChart', text: `Perlu Rp ${new Intl.NumberFormat('id-ID').format(remaining)} lagi untuk mencapai target.` });
                }
            }
        }

        const [[topDay]] = await db.query(
            `SELECT DATE(created_at) as date, SUM(total_amount) as sales
            FROM orders WHERE business_id = ? AND created_at BETWEEN ? AND ?
            GROUP BY DATE(created_at) ORDER BY sales DESC LIMIT 1`,
            [businessId, startDate, endDate]
        );
        if (topDay && topDay.sales > 0) {
            insights.push({ id: 'insight-high-sales-day', type: 'info', icon: 'FiDollarSign', text: `Hari penjualan tertinggi Anda adalah ${new Date(topDay.date).toLocaleDateString('id-ID')}: Rp ${new Intl.NumberFormat('id-ID').format(topDay.sales)}.` });
        }

        const [[newCustCount]] = await db.query(`SELECT COALESCE(COUNT(id), 0) as count FROM customers WHERE business_id = ? AND created_at BETWEEN ? AND ?`, [businessId, startDate, endDate]);
        if (newCustCount.count === 0) {
            insights.push({ id: 'insight-no-new-customers', type: 'info', icon: 'FiUsers', text: 'Tidak ada pelanggan baru dalam periode ini. Coba program loyalitas!' });
        }

        res.json(insights);
    } catch (error) {
        console.error("Error fetching insights:", error);
        res.status(500).json({ message: "Failed to fetch insights data." });
    }
});

router.get('/product-profitability', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;

        const profitabilityQuery = `
            SELECT
                p.id, p.name,
                COALESCE(SUM(oi.quantity), 0) as total_quantity_sold,
                CAST(COALESCE(SUM(oi.quantity * oi.price), 0) AS DECIMAL(15,2)) as total_revenue,
                CAST(COALESCE(SUM(oi.quantity * oi.cost_price), 0) AS DECIMAL(15,2)) as total_cost,
                CAST(COALESCE(SUM(oi.quantity * (oi.price - oi.cost_price)), 0) AS DECIMAL(15,2)) as total_profit,
                CAST(
                    CASE
                        WHEN SUM(oi.quantity * oi.price) > 0
                        THEN (SUM(oi.quantity * (oi.price - oi.cost_price)) / SUM(oi.quantity * oi.price)) * 100
                        ELSE 0
                    END
                AS DECIMAL(10,2)) as profit_margin_percentage
            FROM products p
            LEFT JOIN product_variants pv ON p.id = pv.product_id
            JOIN order_items oi ON pv.id = oi.variant_id
            JOIN orders o ON oi.order_id = o.id
            WHERE p.business_id = ? AND o.created_at BETWEEN ? AND ? AND p.is_archived = 0
            GROUP BY p.id, p.name
            ORDER BY total_profit DESC;
        `;

        const [results] = await db.query(profitabilityQuery, [businessId, startDate, endDate]);

        const formattedResults = results.map(item => ({
            ...item,
            total_quantity_sold: Number(item.total_quantity_sold),
            total_revenue: Number(item.total_revenue),
            total_cost: Number(item.total_cost),
            total_profit: Number(item.total_profit),
            profit_margin_percentage: Number(item.profit_margin_percentage)
        }));

        res.json(formattedResults);

    } catch (error) {
        console.error("Error fetching product profitability:", error);
        res.status(500).json({ message: "Gagal mengambil data profitabilitas produk." });
    }
});

module.exports = router;

===== backend\routes\categoryRoutes.js =====
// C:\Users\Ibnu\Project\smart-pos\backend\routes\categoryRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware'); // Updated: Import isAdmin
const { logActivity } = require('../utils/logUtils');
const { body, validationResult } = require('express-validator');

const router = express.Router();

// --- Validation Rules ---

// Define validation rules for Category
const categoryValidationRules = [
    body('name')
        .trim()
        .notEmpty().withMessage('Nama kategori tidak boleh kosong.')
        .isLength({ min: 3 }).withMessage('Nama kategori minimal 3 karakter.')
        .isLength({ max: 50 }).withMessage('Nama kategori maksimal 50 karakter.') // Added max length
];

// Define validation rules for Sub-category
const subCategoryValidationRules = [
    body('name')
        .trim()
        .notEmpty().withMessage('Nama sub-kategori tidak boleh kosong.')
        .isLength({ min: 3 }).withMessage('Nama sub-kategori minimal 3 karakter.')
        .isLength({ max: 50 }).withMessage('Nama sub-kategori maksimal 50 karakter.') // Added max length
];

// --- Category Endpoints ---

/**
 * @route POST /api/categories
 * @desc Create a new category
 * @access Private (Admin only)
 */
router.post('/', protect, isAdmin, categoryValidationRules, async (req, res) => {
    // Check for validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { name } = req.body;
    const businessId = req.user.business_id;

    try {
        // Check if category name already exists for this business
        const [[existingCategory]] = await db.query('SELECT id FROM categories WHERE business_id = ? AND name = ?', [businessId, name]);
        if (existingCategory) {
            return res.status(409).json({ message: 'Nama kategori sudah ada.' });
        }

        const [result] = await db.query('INSERT INTO categories (business_id, name) VALUES (?, ?)', [businessId, name]);
        const categoryId = result.insertId;
        // FIXED: Added await to ensure logging completes
        await logActivity(businessId, req.user.id, 'CREATE_CATEGORY', `Created category: ${name} (ID: ${categoryId}).`);
        res.status(201).json({ message: 'Kategori berhasil ditambahkan!', categoryId });
    } catch (error) {
        console.error('Error creating category:', error);
        await logActivity(businessId, req.user.id, 'CREATE_CATEGORY_FAILED', `Failed to create category ${name}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

/**
 * @route GET /api/categories
 * @desc Read all categories for the business
 * @access Private (Authenticated users)
 */
router.get('/', protect, async (req, res) => {
    const businessId = req.user.business_id;
    try {
        const [categories] = await db.query('SELECT id, name FROM categories WHERE business_id = ? ORDER BY name ASC', [businessId]);
        res.json(categories);
    } catch (error) {
        console.error('Error fetching categories:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

/**
 * @route PUT /api/categories/:id
 * @desc Update an existing category
 * @access Private (Admin only)
 */
router.put('/:id', protect, isAdmin, categoryValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const categoryId = req.params.id;
    const { name } = req.body;
    const businessId = req.user.business_id;

    try {
        // Check if category exists and belongs to the business
        const [[existingCategory]] = await db.query('SELECT name FROM categories WHERE id = ? AND business_id = ?', [categoryId, businessId]);
        if (!existingCategory) {
            return res.status(404).json({ message: 'Kategori tidak ditemukan atau Anda tidak memiliki akses.' });
        }

        // Check if the new name already exists for another category in the same business
        const [[duplicateName]] = await db.query('SELECT id FROM categories WHERE business_id = ? AND name = ? AND id != ?', [businessId, name, categoryId]);
        if (duplicateName) {
            return res.status(409).json({ message: 'Nama kategori sudah digunakan oleh kategori lain.' });
        }

        const [result] = await db.query(
            'UPDATE categories SET name = ? WHERE id = ? AND business_id = ?',
            [name, categoryId, businessId]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Kategori tidak ditemukan atau tidak ada perubahan.' });
        }

        await logActivity(businessId, req.user.id, 'UPDATE_CATEGORY', `Updated category from "${existingCategory.name}" to "${name}" (ID: ${categoryId}).`);
        res.json({ message: 'Kategori berhasil diperbarui!' });
    } catch (error) {
        console.error('Error updating category:', error);
        await logActivity(businessId, req.user.id, 'UPDATE_CATEGORY_FAILED', `Failed to update category ID ${categoryId}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});


/**
 * @route DELETE /api/categories/:id
 * @desc Delete a category and its associated sub-categories, unlinking products
 * @access Private (Admin only)
 */
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const categoryId = req.params.id;
    const businessId = req.user.business_id;
    const connection = await db.getConnection(); // Get a connection for transaction
    try {
        await connection.beginTransaction();

        // Get category name for logging before deletion
        const [[categoryName]] = await connection.query('SELECT name FROM categories WHERE id = ? AND business_id = ?', [categoryId, businessId]);
        if (!categoryName) {
            await logActivity(businessId, req.user.id, 'DELETE_CATEGORY_FAILED', `Attempted to delete non-existent or unauthorized category ID ${categoryId}.`);
            await connection.rollback();
            return res.status(404).json({ message: 'Kategori tidak ditemukan atau Anda tidak punya akses.' });
        }

        // Unlink products from this category and its sub-categories
        await connection.query('UPDATE products SET category_id = NULL WHERE category_id = ? AND business_id = ?', [categoryId, businessId]);
        await connection.query('UPDATE products SET sub_category_id = NULL WHERE sub_category_id IN (SELECT id FROM sub_categories WHERE category_id = ?) AND business_id = ?', [categoryId, businessId]);

        // Delete all sub-categories belonging to this category
        await connection.query('DELETE FROM sub_categories WHERE category_id = ? AND business_id = ?', [categoryId, businessId]);

        // Delete the category itself
        const [result] = await connection.query('DELETE FROM categories WHERE id = ? AND business_id = ?', [categoryId, businessId]);

        if (result.affectedRows === 0) {
            // This case might be hit if the category somehow disappeared between the initial SELECT and DELETE
            throw new Error('Failed to delete category, possibly concurrency issue or not found during final delete.');
        }

        await connection.commit(); // Commit the transaction
        await logActivity(businessId, req.user.id, 'DELETE_CATEGORY', `Deleted category: ${categoryName.name} (ID: ${categoryId}).`);
        res.json({ message: 'Kategori dan sub-kategorinya berhasil dihapus.' });
    } catch (error) {
        await connection.rollback(); // Rollback on error
        console.error('Error deleting category:', error);
        await logActivity(businessId, req.user.id, 'DELETE_CATEGORY_FAILED', `Failed to delete category ID ${categoryId}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    } finally {
        if (connection) connection.release(); // Always release the connection
    }
});

// --- Sub-Category Endpoints ---

/**
 * @route GET /api/categories/:categoryId/subcategories
 * @desc Read all sub-categories for a specific category
 * @access Private (Authenticated users)
 */
router.get('/:categoryId/subcategories', protect, async (req, res) => {
    const categoryId = req.params.categoryId;
    const businessId = req.user.business_id;
    try {
        // Optional: Check if the category exists and belongs to the business for stricter access control
        const [[categoryExists]] = await db.query('SELECT id FROM categories WHERE id = ? AND business_id = ?', [categoryId, businessId]);
        if (!categoryExists) {
            return res.status(404).json({ message: 'Kategori tidak ditemukan atau Anda tidak memiliki akses.' });
        }

        const [subCategories] = await db.query(
            'SELECT id, name FROM sub_categories WHERE category_id = ? AND business_id = ? ORDER BY name ASC',
            [categoryId, businessId]
        );
        res.json(subCategories);
    } catch (error) {
        console.error('Error fetching subcategories:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

/**
 * @route POST /api/categories/:categoryId/subcategories
 * @desc Create a new sub-category for a specific category
 * @access Private (Admin only)
 */
router.post('/:categoryId/subcategories', protect, isAdmin, subCategoryValidationRules, async (req, res) => {
    // Check for validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const categoryId = req.params.categoryId;
    const { name } = req.body;
    const businessId = req.user.business_id;

    try {
        // Verify the category exists and belongs to the business
        const [[category]] = await db.query('SELECT id FROM categories WHERE id = ? AND business_id = ?', [categoryId, businessId]);
        if (!category) {
            return res.status(404).json({ message: 'Kategori tidak ditemukan atau Anda tidak memiliki akses.' });
        }

        // Check if sub-category name already exists under this category
        const [[existingSubCategory]] = await db.query('SELECT id FROM sub_categories WHERE category_id = ? AND business_id = ? AND name = ?', [categoryId, businessId, name]);
        if (existingSubCategory) {
            return res.status(409).json({ message: 'Nama sub-kategori sudah ada dalam kategori ini.' });
        }

        const [result] = await db.query(
            'INSERT INTO sub_categories (category_id, business_id, name) VALUES (?, ?, ?)',
            [categoryId, businessId, name]
        );
        const subCategoryId = result.insertId;
        await logActivity(businessId, req.user.id, 'CREATE_SUB_CATEGORY', `Created sub-category: ${name} (Category ID: ${categoryId}, Sub-category ID: ${subCategoryId}).`);
        res.status(201).json({ message: 'Sub-kategori berhasil ditambahkan!', subCategoryId });
    } catch (error) {
        console.error('Error creating sub-category:', error);
        await logActivity(businessId, req.user.id, 'CREATE_SUB_CATEGORY_FAILED', `Failed to create sub-category ${name} for category ID ${categoryId}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

/**
 * @route PUT /api/categories/subcategories/:id
 * @desc Update an existing sub-category
 * @access Private (Admin only)
 */
router.put('/subcategories/:id', protect, isAdmin, subCategoryValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const subCategoryId = req.params.id;
    const { name } = req.body;
    const businessId = req.user.business_id;

    try {
        // Check if sub-category exists and belongs to the business
        const [[existingSubCategory]] = await db.query('SELECT name, category_id FROM sub_categories WHERE id = ? AND business_id = ?', [subCategoryId, businessId]);
        if (!existingSubCategory) {
            return res.status(404).json({ message: 'Sub-kategori tidak ditemukan atau Anda tidak memiliki akses.' });
        }

        // Check if the new name already exists for another sub-category under the same parent category
        const [[duplicateName]] = await db.query('SELECT id FROM sub_categories WHERE category_id = ? AND business_id = ? AND name = ? AND id != ?', [existingSubCategory.category_id, businessId, name, subCategoryId]);
        if (duplicateName) {
            return res.status(409).json({ message: 'Nama sub-kategori sudah digunakan oleh sub-kategori lain dalam kategori ini.' });
        }

        const [result] = await db.query(
            'UPDATE sub_categories SET name = ? WHERE id = ? AND business_id = ?',
            [name, subCategoryId, businessId]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Sub-kategori tidak ditemukan atau tidak ada perubahan.' });
        }

        await logActivity(businessId, req.user.id, 'UPDATE_SUB_CATEGORY', `Updated sub-category from "${existingSubCategory.name}" to "${name}" (ID: ${subCategoryId}).`);
        res.json({ message: 'Sub-kategori berhasil diperbarui!' });
    } catch (error) {
        console.error('Error updating sub-category:', error);
        await logActivity(businessId, req.user.id, 'UPDATE_SUB_CATEGORY_FAILED', `Failed to update sub-category ID ${subCategoryId}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});


/**
 * @route DELETE /api/categories/subcategories/:id
 * @desc Delete a sub-category, unlinking products
 * @access Private (Admin only)
 */
router.delete('/subcategories/:id', protect, isAdmin, async (req, res) => {
    const subCategoryId = req.params.id;
    const businessId = req.user.business_id;
    const connection = await db.getConnection(); // Get a connection for transaction
    try {
        await connection.beginTransaction();

        // Get sub-category name for logging before deletion
        const [[subCategoryName]] = await connection.query('SELECT name FROM sub_categories WHERE id = ? AND business_id = ?', [subCategoryId, businessId]);
        if (!subCategoryName) {
            await logActivity(businessId, req.user.id, 'DELETE_SUB_CATEGORY_FAILED', `Attempted to delete non-existent or unauthorized sub-category ID ${subCategoryId}.`);
            await connection.rollback();
            return res.status(404).json({ message: 'Sub-kategori tidak ditemukan atau Anda tidak punya akses.' });
        }

        // Unlink products from this sub-category
        await connection.query('UPDATE products SET sub_category_id = NULL WHERE sub_category_id = ? AND business_id = ?', [subCategoryId, businessId]);

        // Delete the sub-category itself
        const [result] = await connection.query('DELETE FROM sub_categories WHERE id = ? AND business_id = ?', [subCategoryId, businessId]);

        if (result.affectedRows === 0) {
            // This case might be hit if the sub-category somehow disappeared between the initial SELECT and DELETE
            throw new Error('Failed to delete sub-category, possibly concurrency issue or not found during final delete.');
        }

        await connection.commit(); // Commit the transaction
        await logActivity(businessId, req.user.id, 'DELETE_SUB_CATEGORY', `Deleted sub-category: ${subCategoryName.name} (ID: ${subCategoryId}).`);
        res.json({ message: 'Sub-kategori berhasil dihapus.' });
    } catch (error) {
        await connection.rollback(); // Rollback on error
        console.error('Error deleting sub-category:', error);
        await logActivity(businessId, req.user.id, 'DELETE_SUB_CATEGORY_FAILED', `Failed to delete sub-category ID ${subCategoryId}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    } finally {
        if (connection) connection.release(); // Always release the connection
    }
});

module.exports = router;

===== backend\routes\customerRoutes.js =====
// C:\Users\Ibnu\Project\smart-pos\backend\routes\customerRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const { body, validationResult } = require('express-validator');

const router = express.Router();

const customerValidationRules = [
    body('name').trim().notEmpty().withMessage('Nama pelanggan tidak boleh kosong.'),
    body('phone').optional({ checkFalsy: true }).trim(),
    body('email').optional({ checkFalsy: true }).isEmail().withMessage('Email tidak valid.').normalizeEmail(),
    body('address').optional({ checkFalsy: true }).trim()
];

// --- Endpoint CRUD Pelanggan ---

router.get('/', protect, async (req, res) => {
    const { search } = req.query;
    const businessId = req.user.business_id;
    try {
        let query = 'SELECT id, name, phone, email, points FROM customers WHERE business_id = ?';
        const params = [businessId];

        if (search && search.trim() !== '') {
            query += ' AND (name LIKE ? OR phone LIKE ?)';
            const searchTerm = `%${search}%`;
            params.push(searchTerm, searchTerm);
        }

        query += ' ORDER BY name ASC';
        const [customers] = await db.query(query, params);
        res.json(customers);
    } catch (error) {
        console.error("Error fetching customers:", error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

router.get('/:id', protect, async (req, res) => {
    const customerId = req.params.id;
    const businessId = req.user.business_id;
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const [[customer]] = await connection.query('SELECT * FROM customers WHERE id = ? AND business_id = ? FOR UPDATE', [customerId, businessId]);

        if (!customer) {
            await connection.rollback();
            return res.status(404).json({ message: 'Pelanggan tidak ditemukan.' });
        }

        const [[correctPointsData]] = await connection.query('SELECT COALESCE(SUM(points_change), 0) as total FROM customer_points_log WHERE customer_id = ?', [customerId]);
        const correctTotalPoints = correctPointsData.total;

        if (customer.points !== correctTotalPoints) {
            await connection.query('UPDATE customers SET points = ? WHERE id = ?', [correctTotalPoints, customerId]);
            await logActivity(businessId, req.user.id, 'SYNC_POINTS', `Menyesuaikan poin pelanggan ID ${customerId}. Poin Lama: ${customer.points}, Poin Baru: ${correctTotalPoints}.`);
            customer.points = correctTotalPoints;
        }

        await connection.commit();
        res.json(customer);
    } catch (error) {
        await connection.rollback();
        console.error("Error fetching single customer:", error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    } finally {
        if (connection) connection.release();
    }
});

router.get('/:id/history', protect, async (req, res) => {
    const customerId = req.params.id;
    const businessId = req.user.business_id;
    try {
        // ✅ PERBAIKAN: Query ditulis ulang tanpa spasi/karakter aneh
        const query = `
            (SELECT 
                o.id, o.created_at, o.total_amount, 
                o.points_earned as points_change,
                'Penjualan' as type,
                CONCAT('Transaksi #', o.id) as description
            FROM orders o
            WHERE o.customer_id = ? AND o.business_id = ?)
            UNION ALL
            (SELECT 
                cpl.id, cpl.created_at, 0 as total_amount,
                cpl.points_change,
                'Poin' as type,
                cpl.description
            FROM customer_points_log cpl
            WHERE cpl.customer_id = ? AND cpl.order_id IS NULL)
            ORDER BY created_at DESC;
        `;
        const [history] = await db.query(query, [customerId, businessId, customerId]);
        res.json(history);
    } catch (error) {
        console.error("Error fetching customer history:", error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

router.get('/:id/stats', protect, async (req, res) => {
    const customerId = req.params.id;
    const businessId = req.user.business_id;
    try {
        // ✅ PERBAIKAN: Query ditulis ulang tanpa spasi/karakter aneh
        const statsQuery = `
            SELECT
                (SELECT COUNT(id) FROM orders WHERE customer_id = ? AND business_id = ?) as totalOrders,
                (SELECT COALESCE(SUM(total_amount), 0) FROM orders WHERE customer_id = ? AND business_id = ?) as totalSpent,
                (SELECT COALESCE(SUM(points_change), 0) FROM customer_points_log WHERE customer_id = ? AND points_change > 0) as totalPointsEarned
        `;
        const [[stats]] = await db.query(statsQuery, [customerId, businessId, customerId, businessId, customerId]);
        
        const [salesOrders] = await db.query('SELECT total_amount FROM orders WHERE customer_id = ? AND business_id = ? AND total_amount > 0', [customerId, businessId]);
        const totalSalesOrders = salesOrders.length;
        const totalAmountFromSales = salesOrders.reduce((sum, order) => sum + parseFloat(order.total_amount), 0);
        stats.avgOrderValue = totalSalesOrders > 0 ? totalAmountFromSales / totalSalesOrders : 0;

        res.json(stats);
    } catch (error) {
        console.error("Error fetching customer stats:", error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

router.post('/', protect, isAdmin, customerValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

    const { name, phone, email, address } = req.body;
    const { business_id: businessId, id: userId } = req.user;

    try {
        const [result] = await db.query('INSERT INTO customers (business_id, name, phone, email, address) VALUES (?, ?, ?, ?, ?)', [businessId, name, phone || null, email || null, address || null]);
        await logActivity(businessId, userId, 'CREATE_CUSTOMER', `Membuat pelanggan baru: ${name}`);
        res.status(201).json({ message: 'Pelanggan berhasil ditambahkan.', customerId: result.insertId });
    } catch (error) {
        console.error("Error creating customer:", error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

router.put('/:id', protect, isAdmin, customerValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

    const customerId = req.params.id;
    const { name, phone, email, address } = req.body;
    const { business_id: businessId, id: userId } = req.user;

    try {
        const [result] = await db.query('UPDATE customers SET name = ?, phone = ?, email = ?, address = ? WHERE id = ? AND business_id = ?', [name, phone || null, email || null, address || null, customerId, businessId]);
        if (result.affectedRows === 0) return res.status(404).json({ message: 'Pelanggan tidak ditemukan.' });
        
        await logActivity(businessId, userId, 'UPDATE_CUSTOMER', `Memperbarui pelanggan: ${name}`);
        res.json({ message: 'Data pelanggan berhasil diperbarui.' });
    } catch (error) {
        console.error("Error updating customer:", error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

router.delete('/:id', protect, isAdmin, async (req, res) => {
    const customerId = req.params.id;
    const { business_id: businessId, id: userId } = req.user;
    try {
        const [result] = await db.query('DELETE FROM customers WHERE id = ? AND business_id = ?', [customerId, businessId]);
        if (result.affectedRows === 0) return res.status(404).json({ message: 'Pelanggan tidak ditemukan.' });
        
        await logActivity(businessId, userId, 'DELETE_CUSTOMER', `Menghapus pelanggan ID: ${customerId}`);
        res.json({ message: 'Pelanggan berhasil dihapus.' });
    } catch (error) {
        console.error("Error deleting customer:", error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

router.post('/:id/redeem', protect, async (req, res) => {
    const { id: customerId } = req.params;
    const { business_id: businessId, id: userId } = req.user;
    const { pointsToRedeem, description } = req.body;

    const points = Math.abs(parseInt(pointsToRedeem, 10));

    if (!points || points <= 0 || !description) {
        return res.status(400).json({ message: 'Jumlah poin dan deskripsi harus diisi dengan benar.' });
    }

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const [[customer]] = await connection.query('SELECT points FROM customers WHERE id = ? AND business_id = ? FOR UPDATE', [customerId, businessId]);

        if (!customer) {
            await connection.rollback();
            return res.status(404).json({ message: 'Pelanggan tidak ditemukan.' });
        }

        if (customer.points < points) {
            await connection.rollback();
            return res.status(400).json({ message: 'Poin pelanggan tidak mencukupi.' });
        }

        await connection.query('UPDATE customers SET points = points - ? WHERE id = ?', [points, customerId]);
        await connection.query('INSERT INTO customer_points_log (customer_id, points_change, description, user_id) VALUES (?, ?, ?, ?)', [customerId, -points, description, userId]);

        await connection.commit();

        await logActivity(businessId, userId, 'REDEEM_POINTS', `Menukarkan ${points} poin untuk pelanggan ID ${customerId}. Alasan: ${description}`);
        res.status(200).json({ message: 'Poin berhasil ditukarkan.' });
    } catch (error) {
        await connection.rollback();
        console.error("Error redeeming points:", error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    } finally {
        if (connection) connection.release();
    }
});

router.post('/:id/redeem-reward', protect, async (req, res) => {
    const { id: customerId } = req.params;
    const { reward_id } = req.body;
    const { business_id: businessId, id: userId } = req.user;

    if (!reward_id) {
        return res.status(400).json({ message: 'ID Hadiah harus disertakan.' });
    }

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const [[customer]] = await connection.query('SELECT points FROM customers WHERE id = ? AND business_id = ? FOR UPDATE', [customerId, businessId]);
        const [[reward]] = await connection.query('SELECT name, points_cost FROM rewards WHERE id = ? AND business_id = ? AND is_active = TRUE', [reward_id, businessId]);

        if (!customer) {
            await connection.rollback();
            return res.status(404).json({ message: 'Pelanggan tidak ditemukan.' });
        }
        if (!reward) {
            await connection.rollback();
            return res.status(404).json({ message: 'Hadiah tidak ditemukan atau tidak aktif.' });
        }
        if (customer.points < reward.points_cost) {
            await connection.rollback();
            return res.status(400).json({ message: 'Poin pelanggan tidak mencukupi untuk menukarkan hadiah ini.' });
        }

        // Jalankan operasi database
        await connection.query('UPDATE customers SET points = points - ? WHERE id = ?', [reward.points_cost, customerId]);
        const logDescription = `Menukarkan Hadiah: ${reward.name}`;
        await connection.query('INSERT INTO customer_points_log (customer_id, points_change, description, user_id) VALUES (?, ?, ?, ?)', [customerId, -reward.points_cost, logDescription, userId]);
        await connection.query('INSERT INTO reward_redemptions (customer_id, reward_id, user_id, points_spent) VALUES (?, ?, ?, ?)', [customerId, reward_id, userId, reward.points_cost]);

        await connection.commit();

        await logActivity(businessId, userId, 'REDEEM_REWARD', `Pelanggan ID ${customerId} menukarkan ${reward.points_cost} poin untuk "${reward.name}".`);
        res.status(200).json({ message: 'Hadiah berhasil ditukarkan!' });
    } catch (error) {
        await connection.rollback();
        console.error("Error redeeming reward:", error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    } finally {
        if (connection) connection.release();
    }
});

module.exports = router;

===== backend\routes\expenseRoutes.js =====
// backend/routes/expenses.js
const express = require('express');
const db = require('../config/db'); // Assuming this connects to your database
const { protect, isAdmin } = require('../middleware/authMiddleware'); // Updated: Import isAdmin
const { logActivity } = require('../utils/logUtils'); // Your activity logging utility
const { body, validationResult } = require('express-validator'); // Import validator

const router = express.Router();

// --- Validation Rules ---

// Define validation rules for Expense creation and update
const expenseValidationRules = [
    body('description')
        .trim()
        .notEmpty().withMessage('Deskripsi pengeluaran tidak boleh kosong.')
        .isLength({ min: 3 }).withMessage('Deskripsi pengeluaran minimal 3 karakter.')
        .isLength({ max: 255 }).withMessage('Deskripsi pengeluaran maksimal 255 karakter.'),
    body('amount')
        .notEmpty().withMessage('Jumlah pengeluaran tidak boleh kosong.')
        .isFloat({ gt: 0 }).withMessage('Jumlah pengeluaran harus angka positif yang valid.')
];

// --- Expense Endpoints ---

/**
 * @route GET /api/expenses
 * @desc Get all expenses for the business
 * @access Private (Admin only)
 */
router.get('/', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [expenses] = await db.query(
            `SELECT e.id, e.description, e.amount, e.created_at, u.name as user_name
             FROM expenses e
             JOIN users u ON e.created_by = u.id
             WHERE e.business_id = ? ORDER BY e.created_at DESC`,
            [businessId]
        );
        res.json(expenses);
    } catch (error) {
        console.error("Error fetching expenses:", error);
        res.status(500).json({ message: "Server Error" });
    }
});

/**
 * @route POST /api/expenses
 * @desc Create a new expense
 * @access Private (Admin only)
 */
router.post('/', protect, isAdmin, expenseValidationRules, async (req, res) => {
    // Check for validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { description, amount } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    try {
        const [result] = await db.query(
            'INSERT INTO expenses (business_id, created_by, description, amount) VALUES (?, ?, ?, ?)',
            [businessId, userId, description, parseFloat(amount)]
        );
        const expenseId = result.insertId;
        await logActivity(businessId, userId, 'CREATE_EXPENSE', `Created expense: ${description} for Rp ${amount} (ID: ${expenseId}).`);
        res.status(201).json({ message: 'Pengeluaran berhasil dicatat!', id: expenseId });
    } catch (error) {
        console.error("Error creating expense:", error);
        await logActivity(businessId, userId, 'CREATE_EXPENSE_FAILED', `Failed to create expense. Error: ${error.message}`);
        res.status(500).json({ message: "Server Error", error: error.message });
    }
});

/**
 * @route PUT /api/expenses/:id
 * @desc Update an existing expense by ID
 * @access Private (Admin only)
 */
router.put('/:id', protect, isAdmin, expenseValidationRules, async (req, res) => {
    // Check for validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { id } = req.params;
    const { description, amount } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id; // User who is performing the update

    try {
        // Verify expense belongs to the current business_id for security
        const [existingExpense] = await db.query('SELECT * FROM expenses WHERE id = ? AND business_id = ?', [id, businessId]);
        if (existingExpense.length === 0) {
            return res.status(404).json({ message: 'Pengeluaran tidak ditemukan atau Anda tidak memiliki izin untuk mengeditnya.' });
        }

        const [result] = await db.query(
            'UPDATE expenses SET description = ?, amount = ? WHERE id = ? AND business_id = ?',
            [description, parseFloat(amount), id, businessId]
        );

        if (result.affectedRows === 0) {
            // This might happen if the data sent is identical to existing data
            return res.status(200).json({ message: 'Pengeluaran ditemukan tetapi tidak ada perubahan yang dibuat.' });
        }

        await logActivity(businessId, userId, 'UPDATE_EXPENSE', `Updated expense: ${description} (ID: ${id}).`);
        res.status(200).json({ message: 'Pengeluaran berhasil diperbarui!' });
    } catch (error) {
        console.error("Error updating expense:", error);
        await logActivity(businessId, userId, 'UPDATE_EXPENSE_FAILED', `Failed to update expense (ID: ${id}). Error: ${error.message}`);
        res.status(500).json({ message: "Server Error", error: error.message });
    }
});

/**
 * @route DELETE /api/expenses/:id
 * @desc Delete an expense by ID
 * @access Private (Admin only)
 */
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const { id } = req.params;
    const businessId = req.user.business_id;
    const userId = req.user.id; // User who is performing the deletion

    try {
        // Verify expense belongs to the current business_id for security
        const [existingExpense] = await db.query('SELECT * FROM expenses WHERE id = ? AND business_id = ?', [id, businessId]);
        if (existingExpense.length === 0) {
            return res.status(404).json({ message: 'Pengeluaran tidak ditemukan atau Anda tidak memiliki izin untuk menghapusnya.' });
        }

        const [result] = await db.query(
            'DELETE FROM expenses WHERE id = ? AND business_id = ?',
            [id, businessId]
        );

        if (result.affectedRows === 0) {
            // This case might be hit if the expense somehow disappeared between the initial SELECT and DELETE
            throw new Error('Failed to delete expense, possibly concurrency issue or not found during final delete.');
        }

        await logActivity(businessId, userId, 'DELETE_EXPENSE', `Deleted expense (ID: ${id}).`);
        res.status(200).json({ message: 'Pengeluaran berhasil dihapus!' });
    } catch (error) {
        console.error("Error deleting expense:", error);
        await logActivity(businessId, userId, 'DELETE_EXPENSE_FAILED', `Failed to delete expense (ID: ${id}). Error: ${error.message}`);
        res.status(500).json({ message: "Server Error", error: error.message });
    }
});

module.exports = router;

===== backend\routes\orderRoutes.js =====
const express = require('express');
const db = require('../config/db');
// Impor middleware baru
const { protect, isAdmin, hasPermission } = require('../middleware/authMiddleware');
const { getValidDateRange } = require('../utils/dateUtils');
const { sendReceiptEmail } = require('../utils/emailService');
const { logActivity } = require('../utils/logUtils');
const createCsvWriter = require('csv-writer').createObjectCsvWriter;
const path = require('path');
const fs = require('fs');

// Impor fungsi handleStockUpdate dari service terpisah
const { handleStockUpdate } = require('../services/stockService');

const router = express.Router();

// =================================================================
// ENDPOINTS
// =================================================================

/**
 * @route   POST /api/orders
 * @desc    Membuat pesanan baru
 * @access  Private
 */
router.post('/', protect, async (req, res) => {
    const { items, customer_id, payment_method, amount_paid, subtotal_amount, tax_amount, total_amount, promotion_id, discount_amount } = req.body;
    const userId = req.user.id;
    const businessId = req.user.business_id;

    if (!items || items.length === 0) {
        return res.status(400).json({ message: 'Keranjang belanja tidak boleh kosong.' });
    }

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        // Langkah 1: Validasi stok (tanpa update)
        await handleStockUpdate(connection, items, 1, true);

        // Menghitung poin yang didapat
        const pointsEarned = Math.floor(total_amount / 10000);

        // Memasukkan data pesanan utama
        const orderSql = 'INSERT INTO orders (business_id, user_id, customer_id, subtotal_amount, tax_amount, total_amount, payment_method, amount_paid, promotion_id, discount_amount, points_earned) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
        const [orderResult] = await connection.execute(orderSql, [businessId, userId, customer_id || null, subtotal_amount, tax_amount || 0, total_amount, payment_method || 'Tunai', amount_paid, promotion_id || null, discount_amount || 0, pointsEarned]);
        const orderId = orderResult.insertId;

        // Memasukkan item-item pesanan
        for (const item of items) {
            const [[variant]] = await connection.query('SELECT product_id, price, cost_price FROM product_variants WHERE id = ?', [item.variantId]);
            const orderItemSql = 'INSERT INTO order_items (order_id, product_id, variant_id, quantity, price, cost_price) VALUES (?, ?, ?, ?, ?, ?)';
            await connection.execute(orderItemSql, [orderId, variant.product_id, item.variantId, item.quantity, variant.price, variant.cost_price]);
        }

        // Langkah 2: Update stok produk dan bahan baku yang sebenarnya
        await handleStockUpdate(connection, items, 1, false);

        // Jika ada pelanggan, perbarui poinnya
        if (customer_id) {
            if (pointsEarned > 0) {
                await connection.execute('INSERT INTO customer_points_log (customer_id, order_id, points_change, description, user_id) VALUES (?, ?, ?, ?, ?)', [customer_id, orderId, pointsEarned, `Poin dari Transaksi #${orderId}`, userId]);
            }
            // Sinkronisasi total poin pelanggan
            const [[newTotalPoints]] = await connection.query('SELECT SUM(points_change) as total FROM customer_points_log WHERE customer_id = ?', [customer_id]);
            await connection.execute('UPDATE customers SET points = ? WHERE id = ?', [newTotalPoints.total || 0, customer_id]);
        }

        await connection.commit();
        await logActivity(businessId, userId, 'CREATE_ORDER', `Membuat order ID ${orderId} dengan total ${total_amount}.`);
        res.status(201).json({ message: 'Transaksi berhasil dibuat!', orderId: orderId });
    } catch (error) {
        await connection.rollback();
        console.error("Create Order Error:", error);
        await logActivity(businessId, userId, 'CREATE_ORDER_FAILED', `Gagal membuat order. Error: ${error.message}`);
        res.status(500).json({ message: error.message || 'Transaksi gagal.' });
    } finally {
        connection.release();
    }
});

/**
 * @route   GET /api/orders
 * @desc    Mendapatkan daftar semua pesanan dalam rentang tanggal
 * @access  Private (hanya untuk Admin)
 */
router.get('/', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const sql = `
            SELECT o.id, o.created_at, o.total_amount, o.payment_method, u.name as cashier_name, c.name as customer_name
            FROM orders o
            JOIN users u ON o.user_id = u.id
            LEFT JOIN customers c ON o.customer_id = c.id
            WHERE o.business_id = ? AND o.created_at BETWEEN ? AND ?
            ORDER BY o.created_at DESC
        `;
        const [orders] = await db.query(sql, [businessId, startDate, endDate]);
        res.json(orders);
    } catch (error) {
        console.error("Error fetching orders:", error);
        res.status(500).json({ message: 'Server Error' });
    }
});

/**
 * @route   GET /api/orders/:id
 * @desc    Mendapatkan detail pesanan tunggal
 * @access  Private
 */
router.get('/:id', protect, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const orderId = req.params.id;
        const orderSql = `
            SELECT o.*, u.name as cashier_name, c.name as customer_name
            FROM orders o
            JOIN users u ON o.user_id = u.id
            LEFT JOIN customers c ON o.customer_id = c.id
            WHERE o.id = ? AND o.business_id = ?`;
        const [[order]] = await db.query(orderSql, [orderId, businessId]);
        if (!order) {
            return res.status(404).json({ message: 'Pesanan tidak ditemukan.' });
        }
        const itemsSql = `SELECT oi.*, p.name as product_name, pv.name as variant_name FROM order_items oi JOIN products p ON oi.product_id = p.id LEFT JOIN product_variants pv ON oi.variant_id = pv.id WHERE oi.order_id = ?`;
        const [items] = await db.query(itemsSql, [orderId]);
        res.json({ ...order, items });
    } catch (error) {
        console.error("Error fetching single order:", error);
        res.status(500).json({ message: 'Server Error' });
    }
});

/**
 * @route   DELETE /api/orders/clear-history
 * @desc    Menghapus semua riwayat transaksi (hard reset)
 * @access  Private (hanya untuk Admin)
 */
router.delete('/clear-history', protect, isAdmin, async (req, res) => {
    const connection = await db.getConnection();
    const businessId = req.user.business_id;
    const userId = req.user.id;
    try {
        await connection.beginTransaction();

        await connection.query('DELETE cpl FROM customer_points_log cpl JOIN customers c ON cpl.customer_id = c.id WHERE c.business_id = ?', [businessId]);
        await connection.query('DELETE oi FROM order_items oi JOIN orders o ON oi.order_id = o.id WHERE o.business_id = ?', [businessId]);
        const [ordersDeleteResult] = await connection.query('DELETE FROM orders WHERE business_id = ?', [businessId]);
        await connection.query('UPDATE customers SET points = 0 WHERE business_id = ?', [businessId]);

        // Mereset AUTO_INCREMENT agar ID dimulai dari 1 lagi
        await connection.query('ALTER TABLE orders AUTO_INCREMENT = 1');
        await connection.query('ALTER TABLE customer_points_log AUTO_INCREMENT = 1');

        await connection.commit();
        await logActivity(businessId, userId, 'HARD_RESET_HISTORY', `Menghapus ${ordersDeleteResult.affectedRows} order dan SEMUA poin pelanggan.`);
        res.status(200).json({ message: 'Semua riwayat transaksi dan poin pelanggan telah di-reset sepenuhnya.' });

    } catch (error) {
        await connection.rollback();
        console.error("Error clearing history:", error);
        await logActivity(businessId, userId, 'CLEAR_ORDER_HISTORY_FAILED', `Gagal menghapus riwayat order. Error: ${error.message}`);
        res.status(500).json({ message: error.message || 'Gagal menghapus riwayat.' });
    } finally {
        connection.release();
    }
});

/**
 * @route   DELETE /api/orders/:id
 * @desc    Menghapus pesanan tunggal dan mengembalikan stok/poin
 * @access  Private (hanya untuk Admin)
 */
// Menerapkan middleware hasPermission untuk izin 'delete_orders'
router.delete('/:id', protect, hasPermission('delete_orders'), async (req, res) => {
    const connection = await db.getConnection();
    const businessId = req.user.business_id;
    const userId = req.user.id;
    const orderId = req.params.id;

    try {
        await connection.beginTransaction();

        const [[order]] = await connection.query('SELECT * FROM orders WHERE id = ? AND business_id = ?', [orderId, businessId]);
        if (!order) {
            await connection.rollback();
            return res.status(404).json({ message: 'Pesanan tidak ditemukan atau Anda tidak memiliki akses.' });
        }

        const [itemsToRevert] = await connection.query('SELECT * FROM order_items WHERE order_id = ?', [orderId]);
        if (itemsToRevert.length > 0) {
            // Mengembalikan stok produk dan bahan baku
            await handleStockUpdate(connection, itemsToRevert, -1, false);
        }

        // Mengembalikan poin pelanggan jika ada
        if (order.customer_id) {
            if (order.points_earned > 0) {
                // Mencatat poin negatif di log
                await connection.execute('INSERT INTO customer_points_log (customer_id, order_id, points_change, description, user_id) VALUES (?, ?, ?, ?, ?)', [order.customer_id, order.id, -Math.abs(order.points_earned), `Pembatalan Poin dari Order #${order.id}`, userId]);
            }
            // Sinkronisasi total poin pelanggan
            const [[newTotalPoints]] = await connection.query('SELECT SUM(points_change) as total FROM customer_points_log WHERE customer_id = ?', [order.customer_id]);
            await connection.execute('UPDATE customers SET points = ? WHERE id = ?', [newTotalPoints.total || 0, order.customer_id]);
        }

        // Menghapus data pesanan
        await connection.query('DELETE FROM order_items WHERE order_id = ?', [orderId]);
        await connection.query('DELETE FROM orders WHERE id = ?', [orderId]);

        await connection.commit();
        await logActivity(businessId, userId, 'DELETE_ORDER', `Deleted order ID ${orderId}. Stock and points reverted.`);
        res.json({ message: 'Pesanan berhasil dihapus dan stok serta poin telah dikembalikan.' });
    } catch (error) {
        await connection.rollback();
        console.error("Error deleting order:", error);
        await logActivity(businessId, userId, 'DELETE_ORDER_ERROR', `Error deleting order ID ${orderId}. Error: ${error.message}`);
        res.status(500).json({ message: error.message || 'Gagal menghapus pesanan.' });
    } finally {
        connection.release();
    }
});

/**
 * @route   GET /api/orders/export
 * @desc    Mengekspor data transaksi ke file CSV
 * @access  Private (hanya untuk Admin)
 */
router.get('/export', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = getValidDateRange(req.query.startDate, req.query.endDate);
        const businessId = req.user.business_id;
        const exportsDir = path.join(__dirname, '..', 'exports');

        if (!fs.existsSync(exportsDir)) {
            fs.mkdirSync(exportsDir, { recursive: true });
        }

        const query = `
            SELECT o.id, o.created_at, u.name as cashier_name, c.name as customer_name, o.payment_method, oi.quantity, p.name as product_name, pv.name as variant_name, oi.price as price_per_item, (oi.price * oi.quantity) as subtotal
            FROM orders o
            JOIN users u ON o.user_id = u.id
            JOIN order_items oi ON o.id = oi.order_id
            JOIN products p ON oi.product_id = p.id
            LEFT JOIN product_variants pv ON oi.variant_id = pv.id
            LEFT JOIN customers c ON o.customer_id = c.id
            WHERE o.business_id = ? AND o.created_at BETWEEN ? AND ?
            ORDER BY o.created_at DESC
        `;
        const [transactions] = await db.query(query, [businessId, startDate, endDate]);

        if (transactions.length === 0) {
            return res.status(404).json({ message: "Tidak ada data transaksi untuk diekspor pada rentang tanggal ini." });
        }

        const filePath = path.join(exportsDir, `transactions-${Date.now()}.csv`);
        const csvWriter = createCsvWriter({
            path: filePath,
            header: [
                { id: 'id', title: 'ORDER_ID' }, { id: 'created_at', title: 'TANGGAL' }, { id: 'cashier_name', title: 'KASIR' }, { id: 'customer_name', title: 'PELANGGAN' },
                { id: 'payment_method', title: 'METODE_BAYAR' }, { id: 'product_name', title: 'PRODUK' }, { id: 'variant_name', title: 'VARIAN' },
                { id: 'quantity', title: 'JUMLAH' }, { id: 'price_per_item', title: 'HARGA_SATUAN' }, { id: 'subtotal', title: 'SUBTOTAL' },
            ]
        });

        await csvWriter.writeRecords(transactions);
        res.download(filePath, (err) => {
            if (err) console.error("Error sending file:", err);
            fs.unlink(filePath, (unlinkErr) => {
                if (unlinkErr) console.error("Error deleting file:", unlinkErr);
            });
        });
    } catch (error) {
        console.error("Error exporting transactions:", error);
        res.status(500).json({ message: "Gagal mengekspor data." });
    }
});

/**
 * @route   POST /api/orders/:id/send-receipt
 * @desc    Mengirim struk pesanan melalui email
 * @access  Private
 */
router.post('/:id/send-receipt', protect, async (req, res) => {
    const orderId = req.params.id;
    const { email: recipientEmail } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    if (!recipientEmail) {
        return res.status(400).json({ message: 'Alamat email penerima diperlukan.' });
    }

    try {
        const orderSql = `SELECT o.*, u.name as cashier_name, c.name as customer_name FROM orders o JOIN users u ON o.user_id = u.id LEFT JOIN customers c ON o.customer_id = c.id WHERE o.id = ? AND o.business_id = ?`;
        const [[order]] = await db.query(orderSql, [orderId, businessId]);

        if (!order) {
            await logActivity(businessId, userId, 'SEND_RECEIPT_FAILED', `Order ID ${orderId} not found.`);
            return res.status(404).json({ message: 'Pesanan tidak ditemukan.' });
        }

        const itemsSql = `SELECT oi.quantity, oi.price, p.name as product_name, pv.name as variant_name FROM order_items oi JOIN products p ON oi.product_id = p.id LEFT JOIN product_variants pv ON oi.variant_id = pv.id WHERE oi.order_id = ?`;
        const [items] = await db.query(itemsSql, [orderId]);
        order.items = items;

        const [[businessInfo]] = await db.query('SELECT id, business_name, receipt_footer_text, receipt_logo_url FROM businesses WHERE id = ?', [businessId]);

        await sendReceiptEmail(recipientEmail, order, businessInfo);
        await logActivity(businessId, userId, 'SEND_RECEIPT_SUCCESS', `Struk untuk order ID ${orderId} dikirim ke ${recipientEmail}.`);
        res.status(200).json({ message: 'Struk berhasil dikirim.' });
    } catch (error) {
        console.error("Error sending receipt:", error);
        await logActivity(businessId, userId, 'SEND_RECEIPT_FAILED', `Gagal mengirim struk untuk order ID ${orderId}. Error: ${error.message}`);
        if (error.responseCode === 535) {
            return res.status(500).json({ message: 'Gagal mengirim struk: Kesalahan otentikasi. Periksa setelan email Anda.' });
        }
        res.status(500).json({ message: error.message || 'Gagal mengirim struk.' });
    }
});

module.exports = router;

===== backend\routes\productRoutes.js =====
// C:\Users\Ibnu\Project\smart-pos\backend\routes\productRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const { body, validationResult } = require('express-validator');

const router = express.Router();

// --- Validation Rules ---
const productValidationRules = [
    body('name').trim().notEmpty().withMessage('Nama produk tidak boleh kosong.').isLength({ max: 100 }).withMessage('Nama produk maksimal 100 karakter.'),
    body('stock').isNumeric().withMessage('Stok harus berupa angka.').isInt({ min: 0 }).withMessage('Stok tidak boleh negatif.'),
    body('low_stock_threshold').isNumeric().withMessage('Ambang batas stok rendah harus berupa angka.').isInt({ min: 0 }).withMessage('Ambang batas stok rendah tidak boleh negatif.'),
    body('variants').isArray({ min: 1 }).withMessage('Produk harus memiliki setidaknya satu varian.'),
    body('variants.*.name').trim().notEmpty().withMessage('Nama setiap varian tidak boleh kosong.').isLength({ max: 100 }).withMessage('Nama varian maksimal 100 karakter.'),
    body('variants.*.price').isNumeric().withMessage('Harga jual setiap varian harus berupa angka.').isFloat({ min: 0 }).withMessage('Harga jual tidak boleh negatif.'),
    body('variants.*.cost_price').isNumeric().withMessage('Harga beli (modal) setiap varian harus berupa angka.').isFloat({ min: 0 }).withMessage('Harga beli (modal) tidak boleh negatif.'),
    body('variants.*.barcode').optional({ checkFalsy: true }).isLength({ max: 50 }).withMessage('Barcode maksimal 50 karakter.'),
    body('recipeItems').optional().isArray().withMessage('Resep harus berupa array jika ada.'),
    body('recipeItems.*.raw_material_id').optional().isInt({ min: 1 }).withMessage('ID bahan baku resep tidak valid.'),
    body('recipeItems.*.quantity_used').optional().isFloat({ min: 0.01 }).withMessage('Jumlah bahan baku yang digunakan harus angka positif.')
];

const receiveStockValidationRules = [
    body('items').isArray({ min: 1 }).withMessage('Daftar item untuk penambahan stok harus diisi.'),
    body('items.*.productId').isInt({ min: 1 }).withMessage('ID produk tidak valid.'),
    body('items.*.quantity').isInt({ min: 0 }).withMessage('Kuantitas harus angka non-negatif.'),
    body('purchase_order_id').optional({ nullable: true }).isInt({ min: 1 }).withMessage('ID pesanan pembelian tidak valid.')
];

// --- Product Endpoints ---

// POST /api/products (Create a new product)
router.post('/', protect, isAdmin, productValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }
    const { name, description, category_id, sub_category_id, supplier_id, stock, image_url, expiration_date, variants, low_stock_threshold, recipeItems } = req.body;
    const businessId = req.user.business_id;
    const connection = await db.getConnection();

    try {
        await connection.beginTransaction();
        const [[existingProduct]] = await connection.query('SELECT id FROM products WHERE business_id = ? AND name = ? AND is_archived = 0', [businessId, name]);
        if (existingProduct) {
            await connection.rollback();
            return res.status(409).json({ message: 'Nama produk sudah ada.' });
        }
        const productSql = 'INSERT INTO products (business_id, name, description, category_id, sub_category_id, supplier_id, stock, image_url, expiration_date, low_stock_threshold) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
        const [productResult] = await connection.query(productSql, [businessId, name, description || null, category_id || null, sub_category_id || null, supplier_id || null, stock, image_url || null, expiration_date || null, low_stock_threshold || 5]);
        const productId = productResult.insertId;
        for (const variant of variants) {
            const variantSql = 'INSERT INTO product_variants (product_id, name, price, cost_price, barcode) VALUES (?, ?, ?, ?, ?)';
            await connection.query(variantSql, [productId, variant.name, variant.price, variant.cost_price, variant.barcode || null]);
        }
        if (recipeItems && Array.isArray(recipeItems) && recipeItems.length > 0) {
            for (const item of recipeItems) {
                const [[rawMaterial]] = await connection.query('SELECT id FROM raw_materials WHERE id = ? AND business_id = ?', [item.raw_material_id, businessId]);
                if (!rawMaterial) {
                    await connection.rollback();
                    return res.status(400).json({ message: `Bahan baku dengan ID ${item.raw_material_id} tidak ditemukan.` });
                }
                const recipeSql = 'INSERT INTO recipes (product_id, raw_material_id, quantity_used) VALUES (?, ?, ?)';
                await connection.query(recipeSql, [productId, item.raw_material_id, item.quantity_used]);
            }
        }
        await connection.commit();
        await logActivity(businessId, req.user.id, 'CREATE_PRODUCT', `Created product: ${name} (ID: ${productId}).`);
        res.status(201).json({ message: 'Produk berhasil ditambahkan!', productId });
    } catch (error) {
        await connection.rollback();
        console.error('Error creating product:', error);
        res.status(500).json({ message: error.message || 'Server Error' });
    } finally {
        if (connection) connection.release();
    }
});

// GET /api/products/:id (Get a single product)
router.get('/:id', protect, async (req, res) => {
    try {
        const productId = req.params.id;
        const businessId = req.user.business_id;
        const productSql = `
            SELECT
                p.id, p.name, p.description, p.category_id, p.sub_category_id, p.supplier_id,
                p.stock, p.image_url, p.expiration_date, p.low_stock_threshold, p.created_at,
                c.name AS category_name,
                sc.name AS sub_category_name,
                s.name AS supplier_name
            FROM products p
            LEFT JOIN categories c ON p.category_id = c.id
            LEFT JOIN sub_categories sc ON p.sub_category_id = sc.id
            LEFT JOIN suppliers s ON p.supplier_id = s.id
            WHERE p.id = ? AND p.business_id = ? AND p.is_archived = 0`;
        const [[product]] = await db.query(productSql, [productId, businessId]);
        if (!product) return res.status(404).json({ message: 'Produk tidak ditemukan.' });
        const variantsSql = `SELECT id, product_id, name, price, cost_price, barcode FROM product_variants WHERE product_id = ?`;
        const [variants] = await db.query(variantsSql, [productId]);
        product.variants = variants;
        const recipeSql = `
            SELECT r.raw_material_id, r.quantity_used, rm.name as raw_material_name, rm.unit as raw_material_unit
            FROM recipes r
            JOIN raw_materials rm ON r.raw_material_id = rm.id
            WHERE r.product_id = ?
        `;
        const [recipeItems] = await db.query(recipeSql, [productId]);
        product.recipeItems = recipeItems;
        res.json(product);
    } catch (error) {
        console.error('Error fetching single product:', error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

// PUT /api/products/:id (Update a product)
router.put('/:id', protect, isAdmin, productValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }
    const productId = req.params.id;
    const { name, description, category_id, sub_category_id, supplier_id, stock, image_url, expiration_date, variants, low_stock_threshold, recipeItems } = req.body;
    const businessId = req.user.business_id;
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();
        const [[originalProduct]] = await connection.query('SELECT name FROM products WHERE id = ? AND business_id = ? AND is_archived = 0', [productId, businessId]);
        if (!originalProduct) {
            await connection.rollback();
            return res.status(404).json({ message: 'Produk tidak ditemukan atau Anda tidak memiliki akses.' });
        }
        if (originalProduct.name !== name) {
            const [[duplicateNameProduct]] = await connection.query('SELECT id FROM products WHERE business_id = ? AND name = ? AND id != ? AND is_archived = 0', [businessId, name, productId]);
            if (duplicateNameProduct) {
                await connection.rollback();
                return res.status(409).json({ message: 'Nama produk sudah digunakan oleh produk lain.' });
            }
        }
        const productSql = 'UPDATE products SET name = ?, description = ?, category_id = ?, sub_category_id = ?, supplier_id = ?, stock = ?, image_url = ?, expiration_date = ?, low_stock_threshold = ? WHERE id = ? AND business_id = ?';
        await connection.query(productSql, [name, description || null, category_id || null, sub_category_id || null, supplier_id || null, stock, image_url || null, expiration_date || null, low_stock_threshold || 5, productId, businessId]);
        await connection.query('DELETE FROM product_variants WHERE product_id = ?', [productId]);
        await connection.query('DELETE FROM recipes WHERE product_id = ?', [productId]);
        for (const variant of variants) {
            const variantSql = 'INSERT INTO product_variants (product_id, name, price, cost_price, barcode) VALUES (?, ?, ?, ?, ?)';
            await connection.query(variantSql, [productId, variant.name, variant.price, variant.cost_price, variant.barcode || null]);
        }
        if (recipeItems && Array.isArray(recipeItems) && recipeItems.length > 0) {
            for (const item of recipeItems) {
                const [[rawMaterial]] = await connection.query('SELECT id FROM raw_materials WHERE id = ? AND business_id = ?', [item.raw_material_id, businessId]);
                if (!rawMaterial) {
                    await connection.rollback();
                    return res.status(400).json({ message: `Bahan baku dengan ID ${item.raw_material_id} tidak ditemukan.` });
                }
                const recipeSql = 'INSERT INTO recipes (product_id, raw_material_id, quantity_used) VALUES (?, ?, ?)';
                await connection.query(recipeSql, [productId, item.raw_material_id, item.quantity_used]);
            }
        }
        await connection.commit();
        await logActivity(businessId, req.user.id, 'UPDATE_PRODUCT', `Updated product: ${name} (ID: ${productId}).`);
        res.json({ message: 'Produk berhasil diperbarui!' });
    } catch (error) {
        await connection.rollback();
        console.error("Error updating product:", error);
        res.status(500).json({ message: error.message || 'Server Error' });
    } finally {
        if (connection) connection.release();
    }
});

// GET /api/products (Get all products) - DIKEMBALIKAN KE VERSI AWAL
router.get('/', protect, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const { search, barcode } = req.query;
        let productsSql;
        let params = [];

        if (barcode) {
            productsSql = `SELECT p.* FROM products p 
                          JOIN product_variants pv ON p.id = pv.product_id 
                          WHERE pv.barcode = ? AND p.business_id = ? AND p.is_archived = 0`;
            params = [barcode, businessId];
        } else {
            productsSql = `
                SELECT
                    p.id, p.name, p.description, p.image_url, p.category_id, p.sub_category_id,
                    p.supplier_id, p.stock, p.expiration_date, p.low_stock_threshold, p.created_at,
                    c.name AS category_name,
                    sc.name AS sub_category_name,
                    s.name as supplier_name
                FROM products AS p
                LEFT JOIN categories AS c ON p.category_id = c.id
                LEFT JOIN sub_categories AS sc ON p.sub_category_id = sc.id
                LEFT JOIN suppliers AS s ON p.supplier_id = s.id
                WHERE p.business_id = ? AND p.is_archived = 0
            `;
            params = [businessId];

            if (search && search.trim() !== '') {
                productsSql += ` AND (p.name LIKE ? OR EXISTS (
                                 SELECT 1 FROM product_variants pv_search WHERE pv_search.product_id = p.id AND pv_search.barcode = ?
                               ))`;
                const searchTerm = `%${search.trim()}%`;
                params.push(searchTerm, search.trim());
            }

            productsSql += ' GROUP BY p.id ORDER BY p.created_at DESC';
        }
        
        const [products] = await db.query(productsSql, params);

        if (products.length > 0) {
            const productIds = products.map(p => p.id);
            const variantsSql = `SELECT id, product_id, name, price, cost_price, barcode FROM product_variants WHERE product_id IN (?)`;
            const [variants] = await db.query(variantsSql, [productIds]);
            
            // Gabungkan varian ke setiap produk di JavaScript
            const productsWithVariants = products.map(product => ({
                ...product,
                variants: variants.filter(variant => variant.product_id === product.id)
            }));
            res.json(productsWithVariants);
        } else {
            res.json([]);
        }

    } catch (error) {
        console.error('Error fetching products:', error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});
// --- AKHIR PERBAIKAN ---


// DELETE /api/products/:id (Archive a product)
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const productId = req.params.id;
    const businessId = req.user.business_id;
    try {
        const [[productName]] = await db.query('SELECT name FROM products WHERE id = ? AND business_id = ? AND is_archived = 0', [productId, businessId]);
        if (!productName) {
            return res.status(404).json({ message: 'Produk tidak ditemukan atau Anda tidak punya akses.' });
        }
        const [result] = await db.query('UPDATE products SET is_archived = 1 WHERE id = ? AND business_id = ?', [productId, businessId]);
        if (result.affectedRows === 0) {
            throw new Error('Failed to archive product, possibly concurrency issue.');
        }
        await logActivity(businessId, req.user.id, 'ARCHIVE_PRODUCT', `Archived product: ${productName.name} (ID: ${productId}).`);
        res.json({ message: 'Produk berhasil diarsipkan.' });
    } catch (error) {
        console.error('Error archiving product:', error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

// POST /api/products/receive-stock
router.post('/receive-stock', protect, isAdmin, receiveStockValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { items, purchase_order_id } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    const productIds = items.map(item => item.productId);
    if (productIds.length === 0) {
        return res.status(400).json({ message: 'Daftar item tidak boleh kosong.' });
    }

    try {
        const [validProducts] = await db.query(
            'SELECT id FROM products WHERE business_id = ? AND is_archived = 0 AND id IN (?)',
            [businessId, productIds]
        );
        const validProductIds = new Set(validProducts.map(p => p.id));
        const invalidProductIds = productIds.filter(id => !validProductIds.has(parseInt(id)));

        if (invalidProductIds.length > 0) {
            return res.status(404).json({
                message: `Beberapa produk tidak ditemukan atau bukan milik bisnis Anda. ID tidak valid: [${invalidProductIds.join(', ')}]`,
            });
        }

        const connection = await db.getConnection();
        try {
            await connection.beginTransaction();

            for (const item of items) {
                await connection.query(
                    'UPDATE products SET stock = stock + ? WHERE id = ?',
                    [parseInt(item.quantity, 10), item.productId]
                );
            }

            if (purchase_order_id) {
                await connection.query(
                    'UPDATE purchase_orders SET status = "COMPLETED" WHERE id = ? AND business_id = ?',
                    [purchase_order_id, businessId]
                );
                await logActivity(businessId, userId, 'PO_COMPLETED', `Purchase Order ID ${purchase_order_id} ditandai selesai via penerimaan stok.`);
            }

            await connection.commit();
            const itemDetails = items.map(i => `(ID: ${i.productId}, Qty: ${i.quantity})`).join(', ');
            await logActivity(businessId, userId, 'RECEIVE_STOCK', `Stok diterima untuk item: ${itemDetails}${purchase_order_id ? ` (PO: ${purchase_order_id})` : ''}`);
            res.status(200).json({ message: 'Stok berhasil diperbarui untuk semua produk.' });

        } catch (error) {
            await connection.rollback();
            console.error('Error in transaction while receiving stock:', error);
            await logActivity(businessId, userId, 'RECEIVE_STOCK_FAILED_TRANSACTION', `Error: ${error.message}`);
            res.status(500).json({ message: error.message || 'Gagal memperbarui stok saat transaksi.' });
        } finally {
            if (connection) connection.release();
        }

    } catch (error) {
        console.error('Error validating products before receiving stock:', error);
        await logActivity(businessId, userId, 'RECEIVE_STOCK_FAILED_VALIDATION', `Error: ${error.message}`);
        res.status(500).json({ message: error.message || 'Gagal memvalidasi produk.' });
    }
});

module.exports = router;

===== backend\routes\promotionRoutes.js =====
const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const { body, validationResult } = require('express-validator');

const router = express.Router();

// --- Validation Rules ---

const promotionValidationRules = [
    body('name')
        .trim()
        .notEmpty().withMessage('Nama promosi tidak boleh kosong.')
        .isLength({ max: 100 }).withMessage('Nama promosi maksimal 100 karakter.'),
    body('description')
        .optional({ checkFalsy: true })
        .trim()
        .isLength({ max: 500 }).withMessage('Deskripsi promosi maksimal 500 karakter.'),
    body('type')
        .notEmpty().withMessage('Tipe promosi tidak boleh kosong.')
        .isIn(['percentage', 'fixed_amount']).withMessage('Tipe promosi tidak valid (harus "percentage" atau "fixed_amount").'),
    body('value')
        .isFloat({ gt: 0 }).withMessage('Nilai promosi harus angka positif.'),
    body('code')
        .optional({ checkFalsy: true })
        .trim()
        .isAlphanumeric().withMessage('Kode promo hanya boleh berisi huruf dan angka.')
        .isLength({ min: 3, max: 20 }).withMessage('Kode promo harus antara 3 dan 20 karakter.'),
    body('start_date')
        .optional({ checkFalsy: true })
        .isISO8601().toDate().withMessage('Tanggal mulai tidak valid.'),
    body('end_date')
        .optional({ checkFalsy: true })
        .isISO8601().toDate().withMessage('Tanggal berakhir tidak valid.')
        .custom((value, { req }) => {
            if (req.body.start_date && value && new Date(value) < new Date(req.body.start_date)) {
                throw new Error('Tanggal berakhir tidak boleh sebelum tanggal mulai.');
            }
            return true;
        }),
    body('is_active')
        .isBoolean().withMessage('Status aktif harus berupa boolean (true/false).')
        .toBoolean()
];

// --- Promotion Endpoints ---

/**
 * @route GET /api/promotions
 * @desc Get all promotions for the business
 * @access Private (Admin only)
 */
router.get('/', protect, isAdmin, async (req, res) => {
    try {
        // Log untuk memeriksa req.user.business_id
        if (!req.user || !req.user.business_id) {
            console.error('Error: req.user or req.user.business_id is missing.');
            return res.status(401).json({ message: "Tidak terautentikasi atau business_id tidak ditemukan." });
        }
        console.log('Fetching promotions for business_id:', req.user.business_id);

        const [promotions] = await db.query(
            'SELECT id, name, description, type, value, code, start_date, end_date, is_active, created_at, updated_at FROM promotions WHERE business_id = ? ORDER BY created_at DESC',
            [req.user.business_id]
        );
        res.json(promotions);
    } catch (error) {
        console.error('Error fetching promotions:', error);
        // Sertakan detail error di respons untuk debugging lebih lanjut (hanya di lingkungan dev)
        res.status(500).json({ message: "Server Error", error: error.message });
    }
});

/**
 * @route POST /api/promotions
 * @desc Create a new promotion
 * @access Private (Admin only)
 */
router.post('/', protect, isAdmin, promotionValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { name, description, type, value, code, start_date, end_date, is_active } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    try {
        // Check for duplicate code within the same business if code is provided
        if (code) {
            const [[existingCode]] = await db.query('SELECT id FROM promotions WHERE business_id = ? AND code = ?', [businessId, code]);
            if (existingCode) {
                return res.status(409).json({ message: 'Kode promo sudah digunakan oleh promosi lain.' });
            }
        }

        const [result] = await db.query(
            'INSERT INTO promotions (business_id, name, description, type, value, code, start_date, end_date, is_active) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [businessId, name, description || null, type, value, code || null, start_date || null, end_date || null, is_active]
        );
        await logActivity(businessId, userId, 'CREATE_PROMOTION', `Membuat promosi: ${name} (ID: ${result.insertId}, Kode: ${code || 'N/A'}).`);
        res.status(201).json({ message: 'Promosi berhasil dibuat.', id: result.insertId });
    } catch (error) {
        console.error('Error creating promotion:', error);
        await logActivity(businessId, userId, 'CREATE_PROMOTION_FAILED', `Gagal membuat promosi ${name}. Error: ${error.message}`);
        res.status(500).json({ message: "Server Error", error: error.message });
    }
});

/**
 * @route PUT /api/promotions/:id
 * @desc Update an existing promotion
 * @access Private (Admin only)
 */
router.put('/:id', protect, isAdmin, promotionValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const promotionId = req.params.id;
    const { name, description, type, value, code, start_date, end_date, is_active } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    try {
        // Verify promotion exists and belongs to the current business
        const [[originalPromotion]] = await db.query('SELECT name, code FROM promotions WHERE id = ? AND business_id = ?', [promotionId, businessId]);
        if (!originalPromotion) {
            return res.status(404).json({ message: 'Promosi tidak ditemukan atau Anda tidak memiliki akses.' });
        }

        // Check for duplicate code if code is changing and provided
        if (code && originalPromotion.code !== code) {
            const [[existingCode]] = await db.query('SELECT id FROM promotions WHERE business_id = ? AND code = ? AND id != ?', [businessId, code, promotionId]);
            if (existingCode) {
                return res.status(409).json({ message: 'Kode promo sudah digunakan oleh promosi lain.' });
            }
        }

        const [result] = await db.query(
            'UPDATE promotions SET name = ?, description = ?, type = ?, value = ?, code = ?, start_date = ?, end_date = ?, is_active = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ? AND business_id = ?',
            [name, description || null, type, value, code || null, start_date || null, end_date || null, is_active, promotionId, businessId]
        );

        if (result.affectedRows === 0) {
            return res.status(200).json({ message: 'Promosi ditemukan tetapi tidak ada perubahan yang dibuat.' });
        }

        await logActivity(businessId, userId, 'UPDATE_PROMOTION', `Memperbarui promosi: ${name} (ID: ${promotionId}, Kode: ${code || 'N/A'}).`);
        res.status(200).json({ message: 'Promosi berhasil diperbarui!' });
    } catch (error) {
        console.error('Error updating promotion:', error);
        await logActivity(businessId, userId, 'UPDATE_PROMOTION_FAILED', `Gagal memperbarui promosi ID ${promotionId}. Error: ${error.message}`);
        res.status(500).json({ message: "Server Error", error: error.message });
    }
});


/**
 * @route GET /api/promotions/validate/:code
 * @desc Validate a promotion code for cashier use
 * @access Private (Authenticated users)
 */
router.get('/validate/:code', protect, async (req, res) => {
    const { code } = req.params;
    const businessId = req.user.business_id;

    if (!code || code.trim().length === 0) {
        return res.status(400).json({ message: 'Kode promo tidak boleh kosong.' });
    }

    try {
        const query = `
            SELECT id, name, description, type, value, code, start_date, end_date, is_active
            FROM promotions
            WHERE code = ? AND business_id = ? AND is_active = TRUE
            AND (start_date IS NULL OR NOW() >= start_date)
            AND (end_date IS NULL OR NOW() <= end_date)
        `;
        const [[promotion]] = await db.query(query, [code, businessId]);

        if (!promotion) {
            await logActivity(businessId, req.user.id, 'VALIDATE_PROMOTION_FAILED', `Gagal memvalidasi kode promo: ${code}. Tidak valid atau kedaluwarsa.`);
            return res.status(404).json({ message: 'Kode promo tidak valid atau sudah kedaluwarsa.' });
        }

        await logActivity(businessId, req.user.id, 'VALIDATE_PROMOTION_SUCCESS', `Kode promo ${code} berhasil divalidasi.`);
        res.json(promotion);
    } catch (error) {
        console.error('Error validating promotion code:', error);
        await logActivity(businessId, req.user.id, 'VALIDATE_PROMOTION_ERROR', `Error saat memvalidasi kode promo ${code}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

/**
 * @route DELETE /api/promotions/:id
 * @desc Delete a promotion
 * @access Private (Admin only)
 */
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const promotionId = req.params.id;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    try {
        // Get promotion name for logging before deletion
        const [[promotionName]] = await db.query('SELECT name FROM promotions WHERE id = ? AND business_id = ?', [promotionId, businessId]);
        if (!promotionName) {
            return res.status(404).json({ message: 'Promosi tidak ditemukan atau Anda tidak punya akses.' });
        }

        const [result] = await db.query(
            'DELETE FROM promotions WHERE id = ? AND business_id = ?',
            [promotionId, businessId]
        );
        if (result.affectedRows === 0) {
            // This might happen if the promotion was already deleted by another process
            throw new Error('Gagal menghapus promosi, kemungkinan masalah konkurensi.');
        }

        await logActivity(businessId, userId, 'DELETE_PROMOTION', `Menghapus promosi: ${promotionName.name} (ID: ${promotionId}).`);
        res.json({ message: 'Promosi berhasil dihapus.' });
    } catch (error) {
        console.error('Error deleting promotion:', error);
        await logActivity(businessId, userId, 'DELETE_PROMOTION_FAILED', `Gagal menghapus promosi ID ${promotionId}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

module.exports = router;


===== backend\routes\purchaseOrderRoutes.js =====
// C:\Users\Ibnu\Project\smart-pos\backend\routes\purchaseOrderRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const router = express.Router();

// POST /api/purchase-orders - Membuat Purchase Order baru
router.post('/', protect, isAdmin, async (req, res) => {
    const { supplier_id, notes, items } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    if (!supplier_id || !items || !Array.isArray(items) || items.length === 0) {
        return res.status(400).json({ message: 'Pemasok dan minimal satu item harus dipilih.' });
    }

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const poSql = 'INSERT INTO purchase_orders (business_id, supplier_id, po_number, notes, status) VALUES (?, ?, ?, ?, ?)';
        const [poResult] = await connection.query(poSql, [businessId, supplier_id, 'PENDING', notes || null, 'DRAFT']);
        const purchaseOrderId = poResult.insertId;

        const date = new Date();
        const yyyymmdd = date.getFullYear().toString() + (date.getMonth() + 1).toString().padStart(2, '0') + date.getDate().toString().padStart(2, '0');
        const po_number = `PO-${yyyymmdd}-${purchaseOrderId}`;

        await connection.query('UPDATE purchase_orders SET po_number = ? WHERE id = ?', [po_number, purchaseOrderId]);

        for (const item of items) {
            if (!item.product_id || !item.quantity || !item.cost_price) {
                throw new Error('Setiap item harus memiliki produk, kuantitas, dan harga beli.');
            }
            const itemSql = 'INSERT INTO purchase_order_items (purchase_order_id, product_id, quantity, cost_price) VALUES (?, ?, ?, ?)';
            await connection.query(itemSql, [purchaseOrderId, item.product_id, item.quantity, item.cost_price]);
        }

        await connection.commit();
        await logActivity(businessId, userId, 'CREATE_PO', `Membuat Purchase Order ${po_number} (ID: ${purchaseOrderId}).`);
        res.status(201).json({ message: 'Purchase Order berhasil dibuat!', purchaseOrderId });

    } catch (error) {
        await connection.rollback();
        console.error("Error creating Purchase Order:", error);
        await logActivity(businessId, userId, 'CREATE_PO_FAILED', `Gagal membuat PO. Error: ${error.message}`);
        res.status(500).json({ message: error.message || 'Server Error' });
    } finally {
        connection.release();
    }
});

// GET /api/purchase-orders - Mengambil semua Purchase Order
router.get('/', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const query = `
            SELECT
                po.id,
                po.po_number,
                po.status,
                po.created_at,
                s.name as supplier_name,
                (SELECT CAST(SUM(quantity * cost_price) AS DECIMAL(15,2)) FROM purchase_order_items WHERE purchase_order_id = po.id) as total_amount
            FROM purchase_orders po
            JOIN suppliers s ON po.supplier_id = s.id
            WHERE po.business_id = ?
            ORDER BY po.created_at DESC;
        `;
        const [purchaseOrders] = await db.query(query, [businessId]);
        res.json(purchaseOrders);
    } catch (error) {
        console.error('Error fetching purchase orders:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// GET /api/purchase-orders/:id - Detail PO
router.get('/:id', protect, isAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const businessId = req.user.business_id;
        const poQuery = `
            SELECT 
                po.*, 
                s.name as supplier_name, 
                s.address as supplier_address, 
                s.phone as supplier_phone,
                (SELECT CAST(SUM(quantity * cost_price) AS DECIMAL(15,2)) FROM purchase_order_items WHERE purchase_order_id = po.id) as total_amount
            FROM purchase_orders po
            JOIN suppliers s ON po.supplier_id = s.id
            WHERE po.id = ? AND po.business_id = ?;
        `;
        const [[poDetails]] = await db.query(poQuery, [id, businessId]);

        if (!poDetails) {
            return res.status(404).json({ message: 'Purchase Order tidak ditemukan.' });
        }

        const itemsQuery = `
            SELECT poi.*, p.name as product_name
            FROM purchase_order_items poi
            JOIN products p ON poi.product_id = p.id
            WHERE poi.purchase_order_id = ?;
        `;
        const [items] = await db.query(itemsQuery, [id]);

        res.json({ ...poDetails, items });

    } catch (error) {
        console.error('Error fetching PO details:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});


// PATCH /api/purchase-orders/:id/status - Update status
router.patch('/:id/status', protect, isAdmin, async (req, res) => {
    const { id: purchaseOrderId } = req.params;
    const { status: newStatus } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    const validStatuses = ['DRAFT', 'SUBMITTED', 'COMPLETED', 'CANCELLED'];
    if (!validStatuses.includes(newStatus)) {
        return res.status(400).json({ message: 'Status tidak valid.' });
    }

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        if (newStatus === 'COMPLETED') {
            const [items] = await connection.query('SELECT product_id, quantity FROM purchase_order_items WHERE purchase_order_id = ?', [purchaseOrderId]);
            if (items.length === 0) throw new Error('Tidak ada item di dalam Purchase Order ini.');

            for (const item of items) {
                await connection.query('UPDATE products SET stock = stock + ? WHERE id = ? AND business_id = ?', [item.quantity, item.product_id, businessId]);
            }
        }

        const [result] = await connection.query('UPDATE purchase_orders SET status = ? WHERE id = ? AND business_id = ?', [newStatus, purchaseOrderId, businessId]);

        if (result.affectedRows === 0) {
            throw new Error('Purchase Order tidak ditemukan atau Anda tidak memiliki akses.');
        }

        await connection.commit();
        await logActivity(businessId, userId, 'UPDATE_PO_STATUS', `Status PO ID ${purchaseOrderId} diubah menjadi ${newStatus}. Stok diperbarui jika selesai.`);
        res.status(200).json({ message: `Status Purchase Order berhasil diubah menjadi ${newStatus}.` });

    } catch (error) {
        await connection.rollback();
        console.error('Error updating PO status:', error);
        await logActivity(businessId, userId, 'UPDATE_PO_STATUS_FAILED', `Gagal mengubah status PO ID ${purchaseOrderId}. Error: ${error.message}`);
        res.status(500).json({ message: error.message || 'Server Error' });
    } finally {
        connection.release();
    }
});

module.exports = router;

===== backend\routes\rawMaterialRoutes.js =====
const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware'); // Updated: Import isAdmin
const { logActivity } = require('../utils/logUtils');
const { body, validationResult } = require('express-validator'); // Import validator

const router = express.Router();

// The local isAdmin function has been removed from here.
// It should now be defined and exported from '../middleware/authMiddleware.js'.

// --- Validation Rules ---

const rawMaterialValidationRules = [
    body('name')
        .trim()
        .notEmpty().withMessage('Nama bahan baku tidak boleh kosong.')
        .isLength({ max: 100 }).withMessage('Nama bahan baku maksimal 100 karakter.'),
    body('stock_quantity')
        .notEmpty().withMessage('Kuantitas stok tidak boleh kosong.')
        .isFloat({ min: 0 }).withMessage('Kuantitas stok harus berupa angka non-negatif.'),
    body('unit')
        .trim()
        .notEmpty().withMessage('Unit bahan baku tidak boleh kosong.')
        .isLength({ max: 50 }).withMessage('Unit bahan baku maksimal 50 karakter.'),
    body('cost_per_unit')
        .notEmpty().withMessage('Harga beli per unit tidak boleh kosong.')
        .isFloat({ gt: 0 }).withMessage('Harga beli per unit harus berupa angka positif.')
];

// --- Raw Material Endpoints ---

/**
 * @route GET /api/raw-materials
 * @desc Get all raw materials for the business
 * @access Private (Admin only)
 */
router.get('/', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [materials] = await db.query(
            'SELECT id, name, stock_quantity, unit, cost_per_unit, created_at, updated_at FROM raw_materials WHERE business_id = ? ORDER BY name ASC',
            [businessId]
        );
        res.json(materials);
    } catch (error) {
        console.error('Error fetching raw materials:', error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

/**
 * @route GET /api/raw-materials/:id
 * @desc Get a single raw material by ID
 * @access Private (Admin only)
 */
router.get('/:id', protect, isAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const businessId = req.user.business_id;

        const [[material]] = await db.query(
            'SELECT id, name, stock_quantity, unit, cost_per_unit, created_at, updated_at FROM raw_materials WHERE id = ? AND business_id = ?',
            [id, businessId]
        );

        if (!material) {
            return res.status(404).json({ message: 'Bahan baku tidak ditemukan atau Anda tidak memiliki akses.' });
        }
        res.json(material);
    } catch (error) {
        console.error('Error fetching single raw material:', error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});


/**
 * @route POST /api/raw-materials
 * @desc Create a new raw material
 * @access Private (Admin only)
 */
router.post('/', protect, isAdmin, rawMaterialValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { name, stock_quantity, unit, cost_per_unit } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    try {
        // Check for duplicate name within the same business
        const [[existingMaterial]] = await db.query('SELECT id FROM raw_materials WHERE business_id = ? AND name = ?', [businessId, name]);
        if (existingMaterial) {
            return res.status(409).json({ message: 'Nama bahan baku sudah ada.' });
        }

        const [result] = await db.query(
            'INSERT INTO raw_materials (business_id, name, stock_quantity, unit, cost_per_unit) VALUES (?, ?, ?, ?, ?)',
            [businessId, name, stock_quantity, unit, cost_per_unit]
        );
        const materialId = result.insertId;
        await logActivity(businessId, userId, 'CREATE_RAW_MATERIAL', `Membuat bahan baku: ${name} (ID: ${materialId}).`);
        res.status(201).json({ message: 'Bahan baku berhasil ditambahkan!', materialId });
    } catch (error) {
        console.error('Error creating raw material:', error);
        await logActivity(businessId, userId, 'CREATE_RAW_MATERIAL_FAILED', `Gagal membuat bahan baku ${name}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

/**
 * @route PUT /api/raw-materials/:id
 * @desc Update an existing raw material
 * @access Private (Admin only)
 */
router.put('/:id', protect, isAdmin, rawMaterialValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { id } = req.params;
    const { name, stock_quantity, unit, cost_per_unit } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    try {
        // Verify raw material exists and belongs to the current business
        const [[originalMaterial]] = await db.query('SELECT name FROM raw_materials WHERE id = ? AND business_id = ?', [id, businessId]);
        if (!originalMaterial) {
            return res.status(404).json({ message: 'Bahan baku tidak ditemukan atau Anda tidak memiliki akses.' });
        }

        // Check for duplicate name if changing
        if (originalMaterial.name !== name) {
            const [[duplicateNameMaterial]] = await db.query('SELECT id FROM raw_materials WHERE business_id = ? AND name = ? AND id != ?', [businessId, name, id]);
            if (duplicateNameMaterial) {
                return res.status(409).json({ message: 'Nama bahan baku sudah digunakan oleh bahan baku lain.' });
            }
        }

        const [result] = await db.query(
            'UPDATE raw_materials SET name = ?, stock_quantity = ?, unit = ?, cost_per_unit = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ? AND business_id = ?',
            [name, stock_quantity, unit, cost_per_unit, id, businessId]
        );

        if (result.affectedRows === 0) {
            return res.status(200).json({ message: 'Bahan baku ditemukan tetapi tidak ada perubahan yang dibuat.' });
        }
        await logActivity(businessId, userId, 'UPDATE_RAW_MATERIAL', `Memperbarui bahan baku: ${name} (ID: ${id}).`);
        res.json({ message: 'Bahan baku berhasil diperbarui.' });
    } catch (error) {
        console.error('Error updating raw material:', error);
        await logActivity(businessId, userId, 'UPDATE_RAW_MATERIAL_FAILED', `Gagal memperbarui bahan baku ID ${id}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

/**
 * @route DELETE /api/raw-materials/:id
 * @desc Delete a raw material
 * @access Private (Admin only)
 */
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const { id } = req.params;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    try {
        // Get raw material name for logging before deletion
        const [[materialName]] = await db.query('SELECT name FROM raw_materials WHERE id = ? AND business_id = ?', [id, businessId]);
        if (!materialName) {
            return res.status(404).json({ message: 'Bahan baku tidak ditemukan atau Anda tidak punya akses.' });
        }

        // Check if raw material is used in any recipes
        const [[inRecipe]] = await db.query('SELECT COUNT(*) as count FROM recipes WHERE raw_material_id = ?', [id]);
        if (inRecipe.count > 0) {
            return res.status(400).json({ message: 'Bahan baku tidak bisa dihapus karena masih digunakan dalam resep produk.' });
        }

        const [result] = await db.query(
            'DELETE FROM raw_materials WHERE id = ? AND business_id = ?',
            [id, businessId]
        );

        if (result.affectedRows === 0) {
            // This case might be hit if the raw material somehow disappeared between the initial SELECT and DELETE
            throw new Error('Gagal menghapus bahan baku, kemungkinan masalah konkurensi.');
        }
        await logActivity(businessId, userId, 'DELETE_RAW_MATERIAL', `Menghapus bahan baku: ${materialName.name} (ID: ${id}).`);
        res.json({ message: 'Bahan baku berhasil dihapus.' });
    } catch (error) {
        console.error('Error deleting raw material:', error);
        await logActivity(businessId, userId, 'DELETE_RAW_MATERIAL_FAILED', `Gagal menghapus bahan baku ID ${id}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

module.exports = router;

===== backend\routes\reportRoutes.js =====
const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware');
const { getValidDateRange } = require('../utils/dateUtils');
const createCsvWriter = require('csv-writer').createObjectCsvWriter;
const path = require('path');
const fs = require('fs');

const router = express.Router();

// --- MENGGANTI FUNGSI PDF DENGAN CSV YANG LEBIH STABIL ---
router.get('/sales-summary', protect, isAdmin, async (req, res) => {
    try {
        const { startDate, endDate } = req.query;
        const businessId = req.user.business_id;
        const { startDate: validStartDate, endDate: validEndDate } = getValidDateRange(startDate, endDate);

        const query = `
            SELECT o.id, o.created_at, o.total_amount, o.payment_method, u.name as cashier_name, c.name as customer_name
            FROM orders o
            JOIN users u ON o.user_id = u.id
            LEFT JOIN customers c ON o.customer_id = c.id
            WHERE o.business_id = ? AND o.created_at BETWEEN ? AND ?
            ORDER BY o.created_at ASC
        `;
        const [transactions] = await db.query(query, [businessId, validStartDate, validEndDate]);

        if (transactions.length === 0) {
            return res.status(404).json({ message: "Tidak ada data untuk dilaporkan pada rentang tanggal ini." });
        }

        const exportsDir = path.join(__dirname, '..', 'exports');
        if (!fs.existsSync(exportsDir)) {
            fs.mkdirSync(exportsDir, { recursive: true });
        }

        const filePath = path.join(exportsDir, `laporan-penjualan-${Date.now()}.csv`);
        const csvWriter = createCsvWriter({
            path: filePath,
            header: [
                { id: 'id', title: 'ID Transaksi' },
                { id: 'created_at', title: 'Tanggal' },
                { id: 'cashier_name', title: 'Kasir' },
                { id: 'customer_name', title: 'Pelanggan' },
                { id: 'payment_method', title: 'Metode Bayar' },
                { id: 'total_amount', title: 'Total Pendapatan' },
            ]
        });

        const records = transactions.map(t => ({
            ...t,
            customer_name: t.customer_name || 'Umum',
            created_at: new Date(t.created_at).toLocaleString('id-ID'),
        }));

        await csvWriter.writeRecords(records);

        res.download(filePath, (err) => {
            if (err) console.error("Error sending file:", err);
            fs.unlink(filePath, (unlinkErr) => {
                if (unlinkErr) console.error("Error deleting temp file:", unlinkErr);
            });
        });

    } catch (error) {
        console.error("Error generating sales summary CSV:", error);
        res.status(500).json({ message: "Gagal membuat laporan.", error: error.message });
    }
});

module.exports = router;

===== backend\routes\rewardsRoutes.js =====
// C:\Users\Ibnu\Project\smart-pos\backend\routes\rewardsRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');

const router = express.Router();

// GET /api/rewards - Mendapatkan semua hadiah aktif
router.get('/', protect, async (req, res) => {
    const businessId = req.user.business_id;
    try {
        const [rewards] = await db.query(
            'SELECT * FROM rewards WHERE business_id = ? AND is_active = TRUE ORDER BY points_cost ASC',
            [businessId]
        );
        res.json(rewards);
    } catch (error) {
        res.status(500).json({ message: 'Gagal memuat hadiah.', error: error.message });
    }
});

// POST /api/rewards - Membuat hadiah baru (Admin)
router.post('/', protect, isAdmin, async (req, res) => {
    const { name, description, points_cost, is_active } = req.body;
    const businessId = req.user.business_id;
    try {
        const [result] = await db.query(
            'INSERT INTO rewards (business_id, name, description, points_cost, is_active) VALUES (?, ?, ?, ?, ?)',
            [businessId, name, description, points_cost, is_active]
        );
        await logActivity(businessId, req.user.id, 'CREATE_REWARD', `Membuat hadiah: ${name}`);
        res.status(201).json({ message: 'Hadiah berhasil dibuat.', rewardId: result.insertId });
    } catch (error) {
        res.status(500).json({ message: 'Gagal membuat hadiah.', error: error.message });
    }
});

// PUT /api/rewards/:id - Memperbarui hadiah (Admin)
router.put('/:id', protect, isAdmin, async (req, res) => {
    const { id } = req.params;
    const { name, description, points_cost, is_active } = req.body;
    const businessId = req.user.business_id;
    try {
        const [result] = await db.query(
            'UPDATE rewards SET name = ?, description = ?, points_cost = ?, is_active = ? WHERE id = ? AND business_id = ?',
            [name, description, points_cost, is_active, id, businessId]
        );
        if (result.affectedRows === 0) return res.status(404).json({ message: 'Hadiah tidak ditemukan.' });
        await logActivity(businessId, req.user.id, 'UPDATE_REWARD', `Memperbarui hadiah: ${name}`);
        res.json({ message: 'Hadiah berhasil diperbarui.' });
    } catch (error) {
        res.status(500).json({ message: 'Gagal memperbarui hadiah.', error: error.message });
    }
});

// DELETE /api/rewards/:id - Menghapus hadiah (Admin)
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const { id } = req.params;
    const businessId = req.user.business_id;
    try {
        const [result] = await db.query('DELETE FROM rewards WHERE id = ? AND business_id = ?', [id, businessId]);
        if (result.affectedRows === 0) return res.status(404).json({ message: 'Hadiah tidak ditemukan.' });
        await logActivity(businessId, req.user.id, 'DELETE_REWARD', `Menghapus hadiah ID: ${id}`);
        res.json({ message: 'Hadiah berhasil dihapus.' });
    } catch (error) {
        res.status(500).json({ message: 'Gagal menghapus hadiah.', error: error.message });
    }
});

module.exports = router;

===== backend\routes\roleRoutes.js =====
// C:\Users\Ibnu\Project\smart-pos\backend\routes\roleRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const { body, param, validationResult } = require('express-validator');

const router = express.Router();

const roleValidationRules = [
    body('name').trim().notEmpty().withMessage('Nama peran tidak boleh kosong.'),
    body('description').optional({ checkFalsy: true }).trim(),
    body('permissions').isArray().withMessage('Izin harus berupa array.')
];

const roleIdValidation = [
    param('id').isInt({ min: 1 }).withMessage('ID peran tidak valid.')
];

// FIXED: Simplified query to avoid errors on non-existent columns
router.get('/', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [roles] = await db.query(
            'SELECT id, name, description FROM roles WHERE business_id = ? ORDER BY name ASC',
            [businessId]
        );
        res.json(roles);
    } catch (error) {
        console.error('Error fetching roles:', error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

// Sisa file tidak berubah
router.get('/permissions', protect, isAdmin, async (req, res) => {
    try {
        const [permissions] = await db.query('SELECT id, name, description FROM permissions ORDER BY name ASC');
        res.json(permissions);
    } catch (error) {
        console.error('Error fetching permissions:', error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});
router.get('/:id', protect, isAdmin, roleIdValidation, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });
    try {
        const roleId = req.params.id;
        const businessId = req.user.business_id;
        const [[role]] = await db.query('SELECT id, name, description FROM roles WHERE id = ? AND business_id = ?', [roleId, businessId]);
        if (!role) return res.status(404).json({ message: 'Peran tidak ditemukan.' });
        const [permissions] = await db.query('SELECT permission_id FROM role_permissions WHERE role_id = ?', [roleId]);
        role.permissions = permissions.map(p => p.permission_id);
        res.json(role);
    } catch (error) {
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});
router.post('/', protect, isAdmin, roleValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });
    const { name, description, permissions } = req.body;
    const { business_id: businessId, id: userId } = req.user;
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();
        const [[existingRole]] = await connection.query('SELECT id FROM roles WHERE business_id = ? AND name = ?', [businessId, name]);
        if (existingRole) {
            await connection.rollback();
            return res.status(409).json({ message: 'Nama peran sudah ada.' });
        }
        const [roleResult] = await connection.query('INSERT INTO roles (business_id, name, description) VALUES (?, ?, ?)', [businessId, name, description || null]);
        const roleId = roleResult.insertId;
        if (permissions && permissions.length > 0) {
            const permissionValues = permissions.map(pId => [roleId, pId]);
            await connection.query('INSERT INTO role_permissions (role_id, permission_id) VALUES ?', [permissionValues]);
        }
        await connection.commit();
        await logActivity(businessId, userId, 'CREATE_ROLE', `Membuat peran: ${name} (ID: ${roleId}).`);
        res.status(201).json({ message: 'Peran berhasil dibuat.', roleId });
    } catch (error) {
        await connection.rollback();
        res.status(500).json({ message: 'Server Error', error: error.message });
    } finally {
        if (connection) connection.release();
    }
});
router.put('/:id', protect, isAdmin, roleIdValidation, roleValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });
    const { name, description, permissions } = req.body;
    const roleId = req.params.id;
    const { business_id: businessId, id: userId } = req.user;
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();
        const [[originalRole]] = await connection.query('SELECT name FROM roles WHERE id = ? AND business_id = ?', [roleId, businessId]);
        if (!originalRole) {
            await connection.rollback();
            return res.status(404).json({ message: 'Peran tidak ditemukan.' });
        }
        if (originalRole.name !== name) {
            const [[duplicateNameRole]] = await connection.query('SELECT id FROM roles WHERE business_id = ? AND name = ? AND id != ?', [businessId, name, roleId]);
            if (duplicateNameRole) {
                await connection.rollback();
                return res.status(409).json({ message: 'Nama peran sudah digunakan.' });
            }
        }
        await connection.query('UPDATE roles SET name = ?, description = ? WHERE id = ? AND business_id = ?', [name, description || null, roleId, businessId]);
        await connection.query('DELETE FROM role_permissions WHERE role_id = ?', [roleId]);
        if (permissions && permissions.length > 0) {
            const permissionValues = permissions.map(pId => [roleId, pId]);
            await connection.query('INSERT INTO role_permissions (role_id, permission_id) VALUES ?', [permissionValues]);
        }
        await connection.commit();
        await logActivity(businessId, userId, 'UPDATE_ROLE', `Memperbarui peran: ${name} (ID: ${roleId}).`);
        res.json({ message: 'Peran berhasil diperbarui.' });
    } catch (error) {
        await connection.rollback();
        res.status(500).json({ message: 'Server Error', error: error.message });
    } finally {
        if (connection) connection.release();
    }
});
router.delete('/:id', protect, isAdmin, roleIdValidation, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });
    const roleId = req.params.id;
    const { business_id: businessId, id: userId } = req.user;
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();
        const [[roleName]] = await connection.query('SELECT name FROM roles WHERE id = ? AND business_id = ?', [roleId, businessId]);
        if (!roleName) {
            await connection.rollback();
            return res.status(404).json({ message: 'Peran tidak ditemukan.' });
        }
        const [[userCount]] = await connection.query('SELECT COUNT(*) as count FROM users WHERE role_id = ? AND business_id = ?', [roleId, businessId]);
        if (userCount.count > 0) {
            await connection.rollback();
            return res.status(400).json({ message: `Tidak dapat menghapus peran karena masih digunakan oleh ${userCount.count} pengguna.` });
        }
        await connection.query('DELETE FROM role_permissions WHERE role_id = ?', [roleId]);
        await connection.query('DELETE FROM roles WHERE id = ? AND business_id = ?', [roleId, businessId]);
        await connection.commit();
        await logActivity(businessId, userId, 'DELETE_ROLE', `Menghapus peran: ${roleName.name} (ID: ${roleId}).`);
        res.json({ message: 'Peran berhasil dihapus.' });
    } catch (error) {
        await connection.rollback();
        res.status(500).json({ message: 'Server Error', error: error.message });
    } finally {
        if (connection) connection.release();
    }
});

module.exports = router;

===== backend\routes\settingsRoutes.js =====
// C:\Users\Ibnu\Project\smart-pos\backend\routes\settingsRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware');
const { encrypt } = require('../utils/encryption');
const { logActivity } = require('../utils/logUtils');
const router = express.Router();

// GET /api/settings/business
router.get('/business', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [[settings]] = await db.query(
            'SELECT business_name, address, phone_number, website, logo_url, payment_methods, receipt_logo_url, receipt_footer_text, tax_rate, default_starting_cash FROM businesses WHERE id = ?',
            [businessId]
        );
        if (!settings) {
            return res.status(404).json({ message: 'Pengaturan bisnis tidak ditemukan.' });
        }
        res.json(settings);
    } catch (error) {
        console.error("Error fetching business settings:", error);
        res.status(500).json({ message: "Server Error", error: error.message });
    }
});

// POST /api/settings/business
router.post('/business', protect, isAdmin, async (req, res) => {
    const {
        business_name, address, phone, website, logo_url, payment_methods,
        receipt_logo_url, receipt_footer_text, tax_rate, default_starting_cash
    } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    try {
        const cashValue = parseFloat(default_starting_cash) || 0;
        await db.query(
            `UPDATE businesses SET 
                business_name = ?, address = ?, phone_number = ?, website = ?, 
                logo_url = ?, payment_methods = ?, receipt_logo_url = ?, 
                receipt_footer_text = ?, tax_rate = ?, default_starting_cash = ?, cash_in_drawer = ? 
            WHERE id = ?`,
            [
                business_name || null,
                address || null,
                phone || null,
                website || null,
                logo_url || null,
                JSON.stringify(payment_methods),
                receipt_logo_url || null,
                receipt_footer_text || null,
                parseFloat(tax_rate) || 0,
                cashValue,
                cashValue, // Set cash_in_drawer sama dengan default_starting_cash
                businessId
            ]
        );

        await logActivity(businessId, userId, 'UPDATE_BUSINESS_SETTINGS', 'Setelan bisnis diperbarui.');
        res.status(200).json({ message: 'Setelan bisnis berhasil diperbarui.' });
    } catch (error) {
        console.error("Error saving business settings:", error);
        await logActivity(businessId, userId, 'UPDATE_BUSINESS_SETTINGS_FAILED', `Error: ${error.message}`);
        res.status(500).json({ message: "Server Error", error: error.message });
    }
});

// GET /api/settings/email
router.get('/email', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [[settings]] = await db.query(
            'SELECT sender_email, sender_name FROM email_settings WHERE business_id = ?',
            [businessId]
        );
        res.json({
            sender_email: settings ? settings.sender_email : null,
            sender_name: settings ? settings.sender_name : null
        });
    } catch (error) {
        console.error("Error fetching email settings:", error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

// POST /api/settings/email
router.post('/email', protect, isAdmin, async (req, res) => {
    const { email, appPassword, sender_name } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    try {
        const encryptedPassword = encrypt(appPassword);
        const [[existing]] = await db.query('SELECT id FROM email_settings WHERE business_id = ?', [businessId]);

        if (existing) {
            await db.query(
                'UPDATE email_settings SET sender_email = ?, app_password = ?, sender_name = ? WHERE business_id = ?',
                [email, encryptedPassword, sender_name || null, businessId]
            );
        } else {
            await db.query(
                'INSERT INTO email_settings (business_id, sender_email, app_password, sender_name) VALUES (?, ?, ?, ?)',
                [businessId, email, encryptedPassword, sender_name || null]
            );
        }
        await logActivity(businessId, userId, 'UPDATE_EMAIL_SETTINGS', `Setelan email diperbarui.`);
        res.status(200).json({ message: 'Setelan email berhasil disimpan.' });
    } catch (error) {
        console.error("Error saving email settings:", error);
        await logActivity(businessId, userId, 'SAVE_EMAIL_SETTINGS_FAILED', `Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

// GET /api/settings/revenue-target
router.get('/revenue-target', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [[settings]] = await db.query(
            'SELECT monthly_revenue_target FROM businesses WHERE id = ?',
            [businessId]
        );
        res.json({ monthly_revenue_target: settings?.monthly_revenue_target || 0 });
    } catch (error) {
        console.error("Error fetching revenue target:", error);
        res.status(500).json({ message: "Server Error", error: error.message });
    }
});

// POST /api/settings/revenue-target
router.post('/revenue-target', protect, isAdmin, async (req, res) => {
    const { target } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    try {
        await db.query(
            'UPDATE businesses SET monthly_revenue_target = ? WHERE id = ?',
            [parseFloat(target), businessId]
        );

        await logActivity(businessId, userId, 'UPDATE_REVENUE_TARGET', `Target pendapatan diperbarui ke ${target}.`);
        res.status(200).json({ message: 'Target pendapatan berhasil diperbarui.' });
    } catch (error) {
        console.error("Error saving revenue target:", error);
        await logActivity(businessId, userId, 'UPDATE_REVENUE_TARGET_FAILED', `Error: ${error.message}`);
        res.status(500).json({ message: "Server Error", error: error.message });
    }
});

module.exports = router;

===== backend\routes\shiftRoutes.js =====
// C:\Users\Ibnu\Project\smart-pos\backend\routes\shiftRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const createCsvWriter = require('csv-writer').createObjectCsvWriter;
const path = require('path');
const fs = require('fs');
const router = express.Router();

// Rute untuk memulai shift (Kas Awal Otomatis)
router.post('/start', protect, async (req, res) => {
    const { id: userId, business_id: businessId } = req.user;
    const { starting_cash_override } = req.body || {};
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();
        const [[existingShift]] = await connection.query('SELECT id FROM cashier_shifts WHERE user_id = ? AND status = "open"', [userId]);
        if (existingShift) {
            await connection.rollback();
            return res.status(400).json({ message: 'Anda sudah memiliki shift yang aktif.' });
        }
        let starting_cash;
        if (starting_cash_override !== undefined && starting_cash_override !== null) {
            starting_cash = parseFloat(starting_cash_override);
        } else {
            const [[business]] = await connection.query('SELECT default_starting_cash FROM businesses WHERE id = ?', [businessId]);
            starting_cash = business?.default_starting_cash || 0;
        }
        const [result] = await connection.query(
            'INSERT INTO cashier_shifts (business_id, user_id, start_time, starting_cash, status) VALUES (?, ?, NOW(), ?, "open")',
            [businessId, userId, starting_cash]
        );
        await connection.commit();
        await logActivity(businessId, userId, 'START_SHIFT', `Shift dimulai dengan kas awal Rp ${starting_cash}`);
        res.status(201).json({ message: 'Shift berhasil dimulai!', shiftId: result.insertId });
    } catch (error) {
        await connection.rollback();
        console.error("Error starting shift:", error);
        res.status(500).json({ message: "Gagal memulai shift." });
    } finally {
        connection.release();
    }
});

// Rute untuk menutup shift dengan perbaikan final
router.post('/close/:id', protect, async (req, res) => {
    const { id: shiftId } = req.params;
    const { id: userId, business_id: businessId } = req.user;
    const { physicalEndingCash } = req.body;

    if (physicalEndingCash === undefined || physicalEndingCash === null || isNaN(parseFloat(physicalEndingCash))) {
        return res.status(400).json({ message: 'Jumlah kas akhir fisik harus diisi dan berupa angka.' });
    }
    
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const [[shift]] = await connection.query('SELECT * FROM cashier_shifts WHERE id = ? AND user_id = ? AND status = "open" FOR UPDATE', [shiftId, userId]);
        if (!shift) throw new Error('Shift aktif tidak ditemukan untuk ditutup.');
        
        const salesQuery = `
            SELECT
                COALESCE(SUM(CASE WHEN payment_method = 'Tunai' THEN total_amount ELSE 0 END), 0) as cash_sales,
                COALESCE(SUM(CASE WHEN payment_method = 'Kartu' THEN total_amount ELSE 0 END), 0) as card_sales,
                COALESCE(SUM(CASE WHEN payment_method = 'QRIS' THEN total_amount ELSE 0 END), 0) as qris_sales,
                COALESCE(SUM(CASE WHEN payment_method NOT IN ('Tunai', 'Kartu', 'QRIS') THEN total_amount ELSE 0 END), 0) as other_sales
             FROM orders 
            WHERE user_id = ? AND business_id = ? AND created_at BETWEEN ? AND NOW()
        `;
        const [[salesData]] = await connection.query(salesQuery, [userId, businessId, shift.start_time]);

        // ✅ PERBAIKAN: Mengubah user_id menjadi created_by
        const expenseQuery = `SELECT COALESCE(SUM(amount), 0) as total_expenses FROM expenses WHERE created_by = ? AND created_at BETWEEN ? AND NOW()`;
        const [[expenseData]] = await connection.query(expenseQuery, [userId, shift.start_time]);
        const total_expenses = parseFloat(expenseData.total_expenses);

        const cash_sales = parseFloat(salesData.cash_sales);
        const card_sales = parseFloat(salesData.card_sales);
        const qris_sales = parseFloat(salesData.qris_sales);
        const other_sales = parseFloat(salesData.other_sales);

        const total_sales = cash_sales + card_sales + qris_sales + other_sales;
        
        const expected_cash = (parseFloat(shift.starting_cash) + cash_sales) - total_expenses;
        const finalPhysicalCash = parseFloat(physicalEndingCash);
        const difference = finalPhysicalCash - expected_cash;

        const updateQuery = `
            UPDATE cashier_shifts SET 
            end_time = NOW(), ending_cash = ?, cash_sales = ?, card_sales = ?, 
            qris_sales = ?, other_sales = ?, total_sales = ?, expected_cash = ?, 
            difference = ?, status = "closed" 
            WHERE id = ?
        `;
        await connection.query(updateQuery, [
            finalPhysicalCash,
            cash_sales, card_sales, qris_sales, other_sales,
            total_sales, expected_cash, difference, shiftId
        ]);
        
        await connection.query('UPDATE businesses SET cash_in_drawer = ? WHERE id = ?', [finalPhysicalCash, businessId]);

        await connection.commit();
        await logActivity(businessId, userId, 'CLOSE_SHIFT', `Shift ID ${shiftId} ditutup.`);
        res.json({ message: 'Shift berhasil ditutup.' });

    } catch (error) {
        await connection.rollback();
        console.error("Error closing shift:", error);
        res.status(500).json({ message: error.message || "Gagal menutup shift." });
    } finally {
        connection.release();
    }
});

// GET /api/shifts/current
router.get('/current', protect, async (req, res) => {
    const { id: userId } = req.user;
    try {
        const [[currentShift]] = await db.query('SELECT * FROM cashier_shifts WHERE user_id = ? AND status = "open"', [userId]);
        res.json({ active: !!currentShift, shift: currentShift || null });
    } catch (error) {
        console.error("Error checking current shift:", error);
        res.status(500).json({ message: "Gagal memeriksa shift." });
    }
});

// GET /api/shifts/history
router.get('/history', protect, isAdmin, async (req, res) => {
    const businessId = req.user.business_id;
    try {
        const query = `
            SELECT s.*, u.name as user_name FROM cashier_shifts s
            JOIN users u ON s.user_id = u.id
            WHERE s.business_id = ? AND s.status = 'closed'
            ORDER BY s.end_time DESC
        `;
        const [history] = await db.query(query, [businessId]);
        res.json(history);
    } catch (error) {
        console.error("Error fetching shift history:", error);
        res.status(500).json({ message: "Gagal mengambil riwayat shift." });
    }
});

// DELETE /api/shifts/clear-history
router.delete('/clear-history', protect, isAdmin, async (req, res) => {
    const { business_id: businessId, id: userId } = req.user;
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();
        const [result] = await connection.query('DELETE FROM cashier_shifts WHERE business_id = ? AND status = "closed"', [businessId]);
        await connection.commit();
        await logActivity(businessId, userId, 'CLEAR_SHIFT_HISTORY', `Cleared ${result.affectedRows} closed shifts.`);
        res.status(200).json({ message: 'Semua riwayat shift telah berhasil dihapus.' });
    } catch (error) {
        await connection.rollback();
        console.error("Error clearing shift history:", error);
        await logActivity(businessId, userId, 'CLEAR_SHIFT_HISTORY_FAILED', `Error: ${error.message}`);
        res.status(500).json({ message: 'Gagal menghapus riwayat shift.', error: error.message });
    } finally {
        if (connection) connection.release();
    }
});

// GET /api/shifts/export
router.get('/export', protect, isAdmin, async (req, res) => {
    const businessId = req.user.business_id;
    try {
        const query = `
            SELECT s.*, u.name as user_name FROM cashier_shifts s
            JOIN users u ON s.user_id = u.id
            WHERE s.business_id = ? AND s.status = 'closed'
            ORDER BY s.end_time DESC
        `;
        const [shifts] = await db.query(query, [businessId]);
        if (shifts.length === 0) {
            return res.status(404).json({ message: "Tidak ada riwayat shift untuk diekspor." });
        }
        const exportsDir = path.join(__dirname, '..', 'exports');
        if (!fs.existsSync(exportsDir)) fs.mkdirSync(exportsDir, { recursive: true });
        const filePath = path.join(exportsDir, `shift-history-${Date.now()}.csv`);
        const csvWriter = createCsvWriter({
            path: filePath,
            header: [
                { id: 'id', title: 'SHIFT_ID' },
                { id: 'user_name', title: 'KASIR' },
                { id: 'start_time', title: 'WAKTU_MULAI' },
                { id: 'end_time', title: 'WAKTU_SELESAI' },
                { id: 'starting_cash', title: 'KAS_AWAL' },
                { id: 'ending_cash', title: 'KAS_AKHIR_FISIK' },
                { id: 'expected_cash', title: 'KAS_AKHIR_SISTEM' },
                { id: 'difference', title: 'SELISIH' },
                { id: 'total_sales', title: 'TOTAL_PENJUALAN' },
                { id: 'cash_sales', title: 'PENJUALAN_TUNAI' },
                { id: 'card_sales', title: 'PENJUALAN_KARTU' },
                { id: 'qris_sales', title: 'PENJUALAN_QRIS' },
            ]
        });
        await csvWriter.writeRecords(shifts);
        res.download(filePath, (err) => {
            if (err) console.error("Error sending file:", err);
            fs.unlink(filePath, (unlinkErr) => {
                if (unlinkErr) console.error("Error deleting temp file:", unlinkErr);
            });
        });
    } catch (error) {
        console.error("Error exporting shift history:", error);
        res.status(500).json({ message: "Gagal mengekspor data." });
    }
});

// DELETE /api/shifts/:id (optional, but good practice to allow deleting single shifts if needed)
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const { id } = req.params;
    const { business_id: businessId, id: userId } = req.user;
    try {
        const [result] = await db.query('DELETE FROM cashier_shifts WHERE id = ? AND business_id = ?', [id, businessId]);
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Riwayat shift tidak ditemukan.' });
        }
        await logActivity(businessId, userId, 'DELETE_SHIFT_HISTORY', `Deleted shift ID ${id}.`);
        res.json({ message: 'Riwayat shift berhasil dihapus.' });
    } catch (error) {
        console.error("Error deleting shift history:", error);
        await logActivity(businessId, userId, 'DELETE_SHIFT_HISTORY_FAILED', `Error: ${error.message}`);
        res.status(500).json({ message: 'Gagal menghapus riwayat shift.' });
    }
});

module.exports = router;

===== backend\routes\stockRoutes.js =====
// C:\Users\Ibnu\Project\smart-pos\backend\routes\stockRoutes.js

const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const { body, validationResult } = require('express-validator');

const router = express.Router();

// --- Validation Rules ---

const stockAdjustmentValidationRules = [
    body('productId')
        .notEmpty().withMessage('ID produk tidak boleh kosong.')
        .isInt({ min: 1 }).withMessage('ID produk tidak valid.'),
    body('newStockQuantity')
        .notEmpty().withMessage('Kuantitas stok baru tidak boleh kosong.')
        .isInt({ min: 0 }).withMessage('Kuantitas stok baru harus berupa angka non-negatif.'),
    body('type')
        .trim()
        .notEmpty().withMessage('Tipe penyesuaian tidak boleh kosong.')
        .isIn(['adjustment', 'damage', 'return', 'other']).withMessage('Tipe penyesuaian tidak valid.'),
    body('reason')
        .optional({ checkFalsy: true })
        .trim()
        .isLength({ max: 255 }).withMessage('Alasan penyesuaian maksimal 255 karakter.')
];

// --- Stock Adjustment Endpoint ---

/**
 * @route POST /api/stock/adjust
 * @desc Adjust the stock quantity of a product and log the adjustment.
 * @access Private (Admin only)
 */
router.post('/adjust', protect, isAdmin, stockAdjustmentValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { productId, newStockQuantity, type, reason } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        const [[product]] = await connection.query(
            'SELECT stock, name FROM products WHERE id = ? AND business_id = ? FOR UPDATE',
            [productId, businessId]
        );

        if (!product) {
            await connection.rollback();
            return res.status(404).json({ message: 'Produk tidak ditemukan atau bukan milik bisnis Anda.' });
        }

        const currentStock = product.stock;
        const quantityChange = newStockQuantity - currentStock;

        await connection.query(
            'INSERT INTO stock_adjustments (business_id, product_id, user_id, type, quantity_change, reason) VALUES (?, ?, ?, ?, ?, ?)',
            [businessId, productId, userId, type, quantityChange, reason || null]
        );
        // FIXED: The 'updated_at' column is likely handled by the database automatically.
        // If not, you need to add this column to your 'products' table schema.
        await connection.query(
            'UPDATE products SET stock = ? WHERE id = ?',
            [newStockQuantity, productId]
        );

        await connection.commit();

        await logActivity(
            businessId,
            userId,
            'STOCK_ADJUSTMENT',
            `Stok produk "${product.name}" (ID: ${productId}) diubah dari ${currentStock} menjadi ${newStockQuantity}. Alasan: ${type}.`
        );

        res.status(200).json({ message: 'Stok berhasil disesuaikan.' });

    } catch (error) {
        await connection.rollback();
        console.error("Stock Adjustment Error:", error);
        res.status(500).json({ message: error.message || 'Gagal menyesuaikan stok.' });
    } finally {
        if (connection) connection.release();
    }
});

module.exports = router;

===== backend\routes\supplierRoutes.js =====
const express = require('express');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const router = express.Router();

// GET all suppliers
router.get('/', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [suppliers] = await db.query(
            'SELECT id, name, contact_person, phone, email, address, created_at FROM suppliers WHERE business_id = ? AND is_archived = 0 ORDER BY name ASC',
            [businessId]
        );
        res.json(suppliers);
    } catch (error) {
        console.error('Error fetching suppliers:', error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

// POST a new supplier
router.post('/', protect, isAdmin, async (req, res) => {
    const { name, contact_person, phone, email, address } = req.body;
    const businessId = req.user.business_id;
    const userId = req.user.id;
    try {
        const [result] = await db.query(
            'INSERT INTO suppliers (business_id, name, contact_person, phone, email, address) VALUES (?, ?, ?, ?, ?, ?)',
            [businessId, name, contact_person || null, phone || null, email || null, address || null]
        );
        const supplierId = result.insertId;
        await logActivity(businessId, userId, 'CREATE_SUPPLIER', `Created supplier: ${name} (ID: ${supplierId}).`);
        res.status(201).json({ message: 'Supplier berhasil dibuat.', supplierId: supplierId });
    } catch (error) {
        console.error('Error creating supplier:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// PUT update a supplier
router.put('/:id', protect, isAdmin, async (req, res) => {
    const { name, contact_person, phone, email, address } = req.body;
    const { id } = req.params;
    const businessId = req.user.business_id;
    try {
        const [result] = await db.query(
            'UPDATE suppliers SET name = ?, contact_person = ?, phone = ?, email = ?, address = ? WHERE id = ? AND business_id = ?',
            [name, contact_person || null, phone || null, email || null, address || null, id, businessId]
        );
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Supplier tidak ditemukan.' });
        }
        res.json({ message: 'Supplier berhasil diperbarui.' });
    } catch (error) {
        console.error('Error updating supplier:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// DELETE (soft delete) a supplier
router.delete('/:id', protect, isAdmin, async (req, res) => {
    const { id } = req.params;
    const businessId = req.user.business_id;
    try {
        const [result] = await db.query(
            'UPDATE suppliers SET is_archived = 1 WHERE id = ? AND business_id = ?',
            [id, businessId]
        );
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'Supplier tidak ditemukan.' });
        }
        res.json({ message: 'Supplier berhasil diarsipkan.' });
    } catch (error) {
        console.error('Error archiving supplier:', error);
        res.status(500).json({ message: 'Server Error' });
    }
});

module.exports = router;

===== backend\routes\uploadRoutes.js =====
// C:\Users\Ibnu\Project\smart-pos\backend\routes\uploadRoutes.js
const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { protect } = require('../middleware/authMiddleware');

const uploadDir = path.join(__dirname, '..', 'uploads');

// --- PERBAIKAN DIMULAI ---
// Pastikan direktori uploads ada saat aplikasi dimulai
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
}

// Konfigurasi penyimpanan file
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        // Buat nama file yang unik untuk menghindari konflik
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
    }
});

// Filter untuk hanya menerima file gambar
const fileFilter = (req, file, cb) => {
    if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png' || file.mimetype === 'image/webp' || file.mimetype === 'image/gif') {
        cb(null, true);
    } else {
        cb(new Error('Format file tidak didukung! Hanya JPEG, PNG, WEBP, dan GIF yang diizinkan.'), false);
    }
};

// Konfigurasi Multer dengan validasi
const upload = multer({
    storage: storage,
    limits: {
        fileSize: 1024 * 1024 * 5 // Batas ukuran file 5 MB
    },
    fileFilter: fileFilter
});
// --- PERBAIKAN SELESAI ---


// POST route for image upload
router.post('/image', protect, (req, res) => {
    const uploadSingle = upload.single('image');

    uploadSingle(req, res, function (err) {
        if (err instanceof multer.MulterError) {
            // Error dari Multer (misal: file terlalu besar)
            return res.status(400).json({ message: `Error Multer: ${err.message}` });
        } else if (err) {
            // Error dari fileFilter atau error lainnya
            return res.status(400).json({ message: err.message });
        }

        if (!req.file) {
            return res.status(400).json({ message: 'Tidak ada file yang diunggah.' });
        }

        const imageUrl = `${req.protocol}://${req.get('host')}/uploads/${req.file.filename}`;
        res.status(200).json({ message: 'Gambar berhasil diunggah', url: imageUrl });
    });
});

module.exports = router;

===== backend\routes\userRoutes.js =====
// C:\Users\Ibnu\Project\smart-pos\backend\routes\userRoutes.js

const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const db = require('../config/db');
const { protect, isAdmin } = require('../middleware/authMiddleware');
const { logActivity } = require('../utils/logUtils');
const nodemailer = require('nodemailer');
const { decrypt } = require('../utils/encryption');
const { body, param, validationResult } = require('express-validator');

const router = express.Router();

// --- Validation Rules ---

const registerValidationRules = [
    body('name').trim().notEmpty().withMessage('Nama tidak boleh kosong.'),
    body('email').trim().notEmpty().withMessage('Email tidak boleh kosong.').isEmail().withMessage('Format email tidak valid.'),
    body('password').isLength({ min: 6 }).withMessage('Password minimal 6 karakter.'),
    body('registrationKey').notEmpty().withMessage('Kunci registrasi tidak boleh kosong.')
];

const loginValidationRules = [
    body('email').trim().notEmpty().withMessage('Email tidak boleh kosong.').isEmail().withMessage('Format email tidak valid.'),
    body('password').notEmpty().withMessage('Password tidak boleh kosong.')
];

const createUserValidationRules = [
    body('name').trim().notEmpty().withMessage('Nama tidak boleh kosong.'),
    body('email').trim().notEmpty().withMessage('Email tidak boleh kosong.').isEmail().withMessage('Format email tidak valid.'),
    body('password').isLength({ min: 6 }).withMessage('Password minimal 6 karakter.'),
    body('role_id').isInt({ min: 1 }).withMessage('ID peran tidak valid.')
];

const updateUserValidationRules = [
    body('name').trim().notEmpty().withMessage('Nama tidak boleh kosong.'),
    body('email').trim().notEmpty().withMessage('Email tidak boleh kosong.').isEmail().withMessage('Format email tidak valid.'),
    body('password').optional({ checkFalsy: true }).isLength({ min: 6 }).withMessage('Password minimal 6 karakter jika diisi.'),
    body('role_id').isInt({ min: 1 }).withMessage('ID peran tidak valid.')
];

const userIdValidation = [
    param('id').isInt({ min: 1 }).withMessage('ID pengguna tidak valid.')
];

const forgotPasswordValidationRules = [
    body('email').trim().notEmpty().withMessage('Email tidak boleh kosong.').isEmail().withMessage('Format email tidak valid.')
];
const resetPasswordValidationRules = [
    body('password').isLength({ min: 6 }).withMessage('Password minimal 6 karakter.'),
    body('confirmPassword').custom((value, { req }) => {
        if (value !== req.body.password) {
            throw new Error('Konfirmasi password tidak cocok dengan password.');
        }
        return true;
    })
];

// --- Authentication & User Profile Endpoints ---

router.post('/register', registerValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { name, email, password, registrationKey } = req.body;
    const connection = await db.getConnection();

    try {
        await connection.beginTransaction();

        const [[existingUser]] = await connection.query('SELECT id FROM users WHERE email = ?', [email]);
        if (existingUser) {
            await connection.rollback();
            return res.status(400).json({ message: 'Email sudah terdaftar.' });
        }

        const [[anyAdminBusiness]] = await connection.query('SELECT id FROM businesses WHERE admin_created = 1 LIMIT 1');
        
        let role_id;
        let businessId;

        if (!anyAdminBusiness) {
            if (registrationKey !== process.env.ADMIN_REGISTRATION_KEY) {
                await connection.rollback();
                return res.status(403).json({ message: 'Kode registrasi admin tidak valid.' });
            }

            const [businessResult] = await connection.query('INSERT INTO businesses (business_name, admin_created) VALUES (?, ?)', [`${name}'s Business`, 1]);
            businessId = businessResult.insertId;

            const [adminRoleResult] = await connection.query(`INSERT INTO roles (business_id, name, description) VALUES (?, 'admin', 'Akses penuh ke semua fitur.')`, [businessId]);
            role_id = adminRoleResult.insertId;
            await connection.query(`INSERT INTO roles (business_id, name, description) VALUES (?, 'kasir', 'Akses terbatas untuk operasional kasir.')`, [businessId]);
            await connection.query('INSERT INTO email_settings (business_id) VALUES (?)', [businessId]);
            
            const [allPermissions] = await connection.query('SELECT id FROM permissions');
            if (allPermissions.length > 0) {
                const rolePermissionsData = allPermissions.map(p => [role_id, p.id]);
                await connection.query('INSERT INTO role_permissions (role_id, permission_id) VALUES ?', [rolePermissionsData]);
            }
        } else {
            await connection.rollback();
            return res.status(403).json({ message: 'Registrasi akun admin hanya dapat dilakukan satu kali. Hubungi admin yang sudah ada untuk membuat akun baru.' });
        }

        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        const [userResult] = await connection.query(
            'INSERT INTO users (business_id, name, email, password, role_id) VALUES (?, ?, ?, ?, ?)',
            [businessId, name, email, hashedPassword, role_id]
        );
        const newUserId = userResult.insertId;

        await connection.commit();
        
        const [permissionsResult] = await connection.query(
            `SELECT p.name FROM permissions p
             JOIN role_permissions rp ON p.id = rp.permission_id
             WHERE rp.role_id = ?`,
            [role_id]
        );
        const newAdminPermissions = permissionsResult.map(p => p.name);

        const token = jwt.sign({ id: newUserId, name, email, role: 'admin', business_id: businessId, permissions: newAdminPermissions }, process.env.JWT_SECRET, { expiresIn: '1d' });

        await logActivity(businessId, newUserId, 'USER_REGISTER', `New admin user registered: ${name}.`);
        res.status(201).json({ message: 'Registrasi berhasil!', token });

    } catch (error) {
        await connection.rollback();
        console.error("Register Error:", error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    } finally {
        if (connection) connection.release();
    }
});

router.post('/login', loginValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { email, password } = req.body;
    let businessId = null;

    try {
        const [[user]] = await db.query(
            `SELECT u.*, r.name as role_name
             FROM users u
             LEFT JOIN roles r ON u.role_id = r.id
             WHERE u.email = ?`,
            [email]
        );

        if (!user) {
            return res.status(401).json({ message: 'Email atau password salah.' });
        }

        businessId = user.business_id;

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            await logActivity(businessId, user.id, 'USER_LOGIN_FAILED', `User ${user.name} failed login (wrong password).`);
            return res.status(401).json({ message: 'Email atau password salah.' });
        }

        if (user.is_active === 0) {
            await logActivity(businessId, user.id, 'USER_LOGIN_FAILED', `User ${user.name} failed login (account inactive).`);
            return res.status(403).json({ message: 'Akun Anda tidak aktif. Silakan hubungi admin.' });
        }

        const [permissions] = await db.query(
            `SELECT p.name FROM permissions p
             JOIN role_permissions rp ON p.id = rp.permission_id
             WHERE rp.role_id = ?`,
            [user.role_id]
        );
        const userPermissions = permissions.map(p => p.name);

        const tokenPayload = {
            id: user.id,
            name: user.name,
            email: user.email,
            role: user.role_name,
            business_id: user.business_id,
            permissions: userPermissions
        };
        
        const token = jwt.sign(tokenPayload, process.env.JWT_SECRET, { expiresIn: '1d' });

        await logActivity(businessId, user.id, 'USER_LOGIN', `User ${user.name} logged in.`);
        res.json({ message: 'Login berhasil!', token });

    } catch (error) {
        console.error("Login Error:", error);
        await logActivity(businessId || null, null, 'USER_LOGIN_ERROR', `Login attempt for ${email} failed. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

router.post('/forgot-password', forgotPasswordValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { email } = req.body;
    let businessId = null;

    try {
        const [[user]] = await db.query('SELECT id, name, business_id FROM users WHERE email = ? AND is_active = 1', [email]);

        if (!user) {
            return res.status(200).json({ message: 'Jika email terdaftar, tautan reset password telah dikirim.' });
        }

        businessId = user.business_id;

        const [[emailSettings]] = await db.query('SELECT sender_email, app_password, sender_name FROM email_settings WHERE business_id = ?', [businessId]);

        if (!emailSettings || !emailSettings.sender_email || !emailSettings.app_password) {
            await logActivity(businessId, user.id, 'FORGOT_PASSWORD_FAILED', `Email settings not configured for business ${businessId}.`);
            return res.status(500).json({ message: 'Pengaturan email bisnis belum dikonfigurasi. Hubungi admin.' });
        }

        const resetToken = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '1h' });

        await db.query(
            'INSERT INTO password_resets (user_id, token) VALUES (?, ?) ON DUPLICATE KEY UPDATE token = ?, created_at = CURRENT_TIMESTAMP',
            [user.id, resetToken, resetToken]
        );

        const decryptedAppPassword = decrypt(emailSettings.app_password);

        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: emailSettings.sender_email,
                pass: decryptedAppPassword,
            },
        });

        const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:5173'}/reset-password/${resetToken}`;
        const mailOptions = {
            from: `"${emailSettings.sender_name || 'Smart POS'}" <${emailSettings.sender_email}>`,
            to: user.email,
            subject: 'Reset Password Smart POS Anda',
            html: `<p>Halo ${user.name},</p><p>Klik tautan berikut untuk mereset password Anda:</p><p><a href="${resetUrl}">${resetUrl}</a></p><p>Tautan ini akan kedaluwarsa dalam 1 jam.</p>`,
        };

        await transporter.sendMail(mailOptions);
        await logActivity(businessId, user.id, 'FORGOT_PASSWORD_REQUEST', `Password reset link sent to ${user.email}.`);
        res.status(200).json({ message: 'Jika email terdaftar, tautan reset password telah dikirim.' });

    } catch (error) {
        console.error("Forgot Password Error:", error);
        await logActivity(businessId || null, null, 'FORGOT_PASSWORD_ERROR', `Forgot password attempt for ${email} failed. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

router.post('/reset-password/:token', resetPasswordValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { token } = req.params;
    const { password } = req.body;
    let userId = null;
    let businessId = null;

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        userId = decoded.id;

        const [[resetEntry]] = await db.query('SELECT * FROM password_resets WHERE user_id = ? AND token = ? AND created_at >= DATE_SUB(NOW(), INTERVAL 1 HOUR)', [userId, token]);

        if (!resetEntry) {
            return res.status(400).json({ message: 'Tautan reset password tidak valid atau sudah kedaluwarsa.' });
        }

        const [[user]] = await db.query('SELECT business_id FROM users WHERE id = ? AND is_active = 1', [userId]);
        if (!user) {
            return res.status(404).json({ message: 'Pengguna tidak ditemukan atau tidak aktif.' });
        }
        businessId = user.business_id;

        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        await db.query('UPDATE users SET password = ? WHERE id = ?', [hashedPassword, userId]);
        await db.query('DELETE FROM password_resets WHERE user_id = ?', [userId]);

        await logActivity(businessId, userId, 'PASSWORD_RESET_SUCCESS', `Password for user ID ${userId} reset successfully.`);
        res.status(200).json({ message: 'Password berhasil direset!' });

    } catch (error) {
        if (error.name === 'TokenExpiredError') {
            return res.status(400).json({ message: 'Tautan reset password sudah kedaluwarsa.' });
        }
        if (error.name === 'JsonWebTokenError') {
            return res.status(400).json({ message: 'Tautan reset password tidak valid.' });
        }
        console.error("Reset Password Error:", error);
        await logActivity(businessId || null, userId || null, 'PASSWORD_RESET_FAILED', `Password reset failed. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

router.get('/profile', protect, (req, res) => {
    res.json({ id: req.user.id, name: req.user.name, email: req.user.email, role: req.user.role, business_id: req.user.business_id, permissions: req.user.permissions });
});

// --- Admin-Managed User Endpoints ---

router.get('/', protect, isAdmin, async (req, res) => {
    try {
        const businessId = req.user.business_id;
        const [users] = await db.query(
            `SELECT u.id, u.name, u.email, u.created_at, u.is_active, r.name as role_name, u.role_id
             FROM users u
             LEFT JOIN roles r ON u.role_id = r.id
             WHERE u.business_id = ? AND u.is_active = 1
             ORDER BY u.created_at DESC`,
            [businessId]
        );
        res.json(users);
    } catch (error) {
        console.error('Error fetching users:', error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

router.get('/:id', protect, isAdmin, userIdValidation, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    try {
        const userIdToFetch = req.params.id;
        const businessId = req.user.business_id;

        const [[user]] = await db.query(
            `SELECT u.id, u.name, u.email, u.created_at, u.is_active, r.name as role_name, u.role_id
             FROM users u
             LEFT JOIN roles r ON u.role_id = r.id
             WHERE u.id = ? AND u.business_id = ?`,
            [userIdToFetch, businessId]
        );

        if (!user) {
            return res.status(404).json({ message: 'Pengguna tidak ditemukan atau bukan milik bisnis Anda.' });
        }
        res.json(user);
    } catch (error) {
        console.error('Error fetching single user:', error);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

router.post('/', protect, isAdmin, createUserValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { name, email, password, role_id } = req.body;
    const businessId = req.user.business_id;
    const adminUserId = req.user.id;

    try {
        const [[existingUser]] = await db.query('SELECT id FROM users WHERE email = ? AND business_id = ?', [email, businessId]);
        if (existingUser) {
            return res.status(400).json({ message: 'Email ini sudah digunakan di bisnis Anda.' });
        }

        const [[role]] = await db.query('SELECT id FROM roles WHERE id = ? AND business_id = ?', [role_id, businessId]);
        if (!role) {
            return res.status(400).json({ message: 'ID peran tidak valid atau bukan milik bisnis Anda.' });
        }

        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        const [userResult] = await db.query(
            'INSERT INTO users (business_id, name, email, password, role_id) VALUES (?, ?, ?, ?, ?)',
            [businessId, name, email, hashedPassword, role_id]
        );

        await logActivity(businessId, adminUserId, 'CREATE_USER_BY_ADMIN', `Admin created new user: ${name} (ID: ${userResult.insertId}).`);
        res.status(201).json({ message: 'Pengguna berhasil ditambahkan!', userId: userResult.insertId });
    } catch (error) {
        console.error('Error creating user by admin:', error);
        await logActivity(businessId, adminUserId, 'CREATE_USER_BY_ADMIN_FAILED', `Failed to create user ${name}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

router.put('/:id', protect, isAdmin, userIdValidation, updateUserValidationRules, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const userIdToUpdate = req.params.id;
    const { name, email, password, role_id, is_active } = req.body;
    const businessId = req.user.business_id;
    const adminUserId = req.user.id;

    try {
        const [[targetUser]] = await db.query('SELECT email, role_id FROM users WHERE id = ? AND business_id = ?', [userIdToUpdate, businessId]);
        if (!targetUser) {
            return res.status(404).json({ message: 'Pengguna tidak ditemukan atau Anda tidak punya akses.' });
        }

        if (parseInt(userIdToUpdate) === adminUserId) {
            if (is_active !== undefined && is_active === 0) {
                return res.status(400).json({ message: 'Anda tidak dapat menonaktifkan akun Anda sendiri.' });
            }
            const [[currentAdminRole]] = await db.query('SELECT name FROM roles WHERE id = ?', [targetUser.role_id]);
            if (currentAdminRole && currentAdminRole.name.toLowerCase() === 'admin' && role_id !== targetUser.role_id) {
                const [[adminCount]] = await db.query(`
                    SELECT COUNT(u.id) as count
                    FROM users u
                    JOIN roles r ON u.role_id = r.id
                    WHERE u.business_id = ? AND r.name = 'admin' AND u.is_active = 1
                `, [businessId]);
                if (adminCount.count === 1) {
                    return res.status(400).json({ message: 'Anda tidak dapat mengubah peran Anda sendiri jika Anda adalah satu-satunya admin aktif.' });
                }
            }
        }

        if (email !== targetUser.email) {
            const [[emailExists]] = await db.query('SELECT id FROM users WHERE email = ? AND business_id = ? AND id != ?', [email, businessId, userIdToUpdate]);
            if (emailExists) {
                return res.status(400).json({ message: 'Email ini sudah digunakan oleh pengguna lain di bisnis Anda.' });
            }
        }

        const [[role]] = await db.query('SELECT id FROM roles WHERE id = ? AND business_id = ?', [role_id, businessId]);
        if (!role) {
            return res.status(400).json({ message: 'ID peran baru tidak valid atau bukan milik bisnis Anda.' });
        }

        let hashedPassword = null;
        if (password) {
            const salt = await bcrypt.genSalt(10);
            hashedPassword = await bcrypt.hash(password, salt);
        }

        const updateFields = [];
        const updateValues = [];

        if (name !== undefined) { updateFields.push('name = ?'); updateValues.push(name); }
        if (email !== undefined) { updateFields.push('email = ?'); updateValues.push(email); }
        if (role_id !== undefined) { updateFields.push('role_id = ?'); updateValues.push(role_id); }
        if (is_active !== undefined) { updateFields.push('is_active = ?'); updateValues.push(is_active); }
        if (hashedPassword) { updateFields.push('password = ?'); updateValues.push(hashedPassword); }

        if (updateFields.length === 0) {
             return res.status(200).json({ message: 'Tidak ada perubahan yang dikirim.' });
        }

        updateValues.push(userIdToUpdate, businessId);

        const updateSql = `UPDATE users SET ${updateFields.join(', ')} WHERE id = ? AND business_id = ?`;
        const [result] = await db.query(updateSql, updateValues);

        if (result.affectedRows === 0) {
            await logActivity(businessId, adminUserId, 'UPDATE_USER_FAILED', `Attempted to update user ID ${userIdToUpdate} but no changes made.`);
            return res.status(200).json({ message: 'Pengguna ditemukan tetapi tidak ada perubahan yang dibuat.' });
        }
        await logActivity(businessId, adminUserId, 'UPDATE_USER', `Admin updated user: ${name} (ID: ${userIdToUpdate}).`);
        res.json({ message: 'Pengguna berhasil diperbarui!' });
    } catch (error) {
        console.error('Error updating user:', error);
        await logActivity(businessId, adminUserId, 'UPDATE_USER_ERROR', `Error updating user ID ${userIdToUpdate}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    }
});

router.delete('/:id', protect, isAdmin, userIdValidation, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const userIdToDelete = req.params.id;
    const businessId = req.user.business_id;
    const adminUserId = req.user.id;
    const connection = await db.getConnection();

    try {
        await connection.beginTransaction();

        const [[userToDelete]] = await connection.query(
            `SELECT u.name, u.role_id, r.name as role_name
             FROM users u JOIN roles r ON u.role_id = r.id
             WHERE u.id = ? AND u.business_id = ? AND u.is_active = 1`,
            [userIdToDelete, businessId]
        );

        if (!userToDelete) {
            await connection.rollback();
            return res.status(404).json({ message: 'Pengguna tidak ditemukan atau sudah tidak aktif.' });
        }

        if (parseInt(userIdToDelete) === adminUserId) {
            await connection.rollback();
            return res.status(400).json({ message: 'Anda tidak dapat menghapus akun Anda sendiri.' });
        }

        if (userToDelete.role_name.toLowerCase() === 'admin') {
            const [[adminCount]] = await connection.query(`
                SELECT COUNT(u.id) as count
                FROM users u
                JOIN roles r ON u.role_id = r.id
                WHERE u.business_id = ? AND r.name = 'admin' AND u.is_active = 1
            `, [businessId]);

            if (adminCount.count === 1) {
                await connection.rollback();
                return res.status(400).json({ message: 'Tidak dapat menghapus admin terakhir yang aktif di bisnis ini.' });
            }
        }

        const [result] = await connection.query(
            'UPDATE users SET is_active = 0 WHERE id = ? AND business_id = ?',
            [userIdToDelete, businessId]
        );

        if (result.affectedRows === 0) {
            await connection.rollback();
            throw new Error('Gagal menonaktifkan pengguna, kemungkinan masalah konkurensi.');
        }

        await connection.commit();
        await logActivity(businessId, adminUserId, 'DEACTIVATE_USER', `Admin deactivated user: ${userToDelete.name} (ID: ${userIdToDelete}).`);
        res.json({ message: 'Pengguna berhasil dinonaktifkan.' });

    } catch (error) {
        await connection.rollback();
        console.error('Error deactivating user:', error);
        await logActivity(businessId, adminUserId, 'DEACTIVATE_USER_FAILED', `Failed to deactivate user ID ${userIdToDelete}. Error: ${error.message}`);
        res.status(500).json({ message: 'Server Error', error: error.message });
    } finally {
        if (connection) connection.release();
    }
});

module.exports = router;

===== backend\services\stockService.js =====
// C:\Users\Ibnu\Project\smart-pos\backend\services\stockService.js

/**
 * @description Fungsi ini mengelola pembaruan stok untuk produk jadi dan bahan baku.
 * Ini adalah bagian perbaikan utama yang memastikan konsistensi stok.
 * @param {object} connection - Koneksi database.
 * @param {Array<object>} items - Daftar item dalam pesanan.
 * @param {number} factor - Faktor pengali untuk stok (1 untuk pesanan baru, -1 untuk pembatalan).
 * @param {boolean} validateOnly - Jika true, hanya memeriksa stok tanpa melakukan pembaruan.
 */
async function handleStockUpdate(connection, items, factor = 1, validateOnly = false) {
    for (const item of items) {
        // Mendapatkan product_id dari variant_id
        const [[variant]] = await connection.query('SELECT product_id FROM product_variants WHERE id = ?', [item.variantId || item.variant_id]);
        if (!variant) {
            throw new Error(`Varian produk dengan ID ${item.variantId || item.variant_id} tidak ditemukan.`);
        }
        const productId = variant.product_id;

        // --- PERBAIKAN: Menambahkan 'FOR UPDATE' untuk mengunci baris dan mencegah race condition ---
        // Langkah 1: SELALU periksa dan kurangi/tambah stok produk jadi
        const [[product]] = await connection.query('SELECT name, stock FROM products WHERE id = ? FOR UPDATE', [productId]);
        if (!product) {
            throw new Error(`Produk dengan ID ${productId} tidak ditemukan.`);
        }
        if (factor > 0 && product.stock < item.quantity) {
            throw new Error(`Stok untuk produk "${product.name}" tidak mencukupi.`);
        }
        if (!validateOnly) {
            await connection.execute('UPDATE products SET stock = stock - ? WHERE id = ?', [item.quantity * factor, productId]);
        }

        // Langkah 2: JIKA produk memiliki resep, kurangi/tambah JUGA stok bahan bakunya
        const [recipeItems] = await connection.query('SELECT * FROM recipes WHERE product_id = ?', [productId]);
        if (recipeItems.length > 0) {
            for (const recipeItem of recipeItems) {
                // --- PERBAIKAN: Menambahkan 'FOR UPDATE' untuk mengunci baris bahan baku ---
                const [[material]] = await connection.query('SELECT name, stock_quantity, unit FROM raw_materials WHERE id = ? FOR UPDATE', [recipeItem.raw_material_id]);
                if (!material) {
                    throw new Error(`Bahan baku dengan ID ${recipeItem.raw_material_id} tidak ditemukan.`);
                }
                const requiredQuantity = recipeItem.quantity_used * item.quantity;
                if (factor > 0 && material.stock_quantity < requiredQuantity) {
                    throw new Error(`Stok bahan baku "${material.name}" tidak cukup untuk membuat ${product.name}. Butuh ${requiredQuantity} ${material.unit}, tersedia ${material.stock_quantity} ${material.unit}.`);
                }
                if (!validateOnly) {
                    await connection.execute('UPDATE raw_materials SET stock_quantity = stock_quantity - ? WHERE id = ?', [requiredQuantity * factor, recipeItem.raw_material_id]);
                }
            }
        }
    }
}

module.exports = { handleStockUpdate };

===== backend\utils\dateUtils.js =====
// backend/utils/dateUtils.js
const getValidDateRange = (startDateStr, endDateStr) => {
    let startDate;
    let endDate;

    if (startDateStr) {
        startDate = new Date(startDateStr);
    } else {
        startDate = new Date();
        startDate.setDate(startDate.getDate() - 30);
    }
    startDate.setHours(0, 0, 0, 0);

    if (endDateStr) {
        endDate = new Date(endDateStr);
    } else {
        endDate = new Date();
    }
    endDate.setHours(23, 59, 59, 999);

    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
        throw new Error('Invalid date format');
    }
    
    const formatSqlDateTime = (date) => {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');
        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    };

    return { 
        startDate: formatSqlDateTime(startDate),
        endDate: formatSqlDateTime(endDate)
    };
};

module.exports = { getValidDateRange };

===== backend\utils\emailService.js =====
// backend/utils/emailService.js

const nodemailer = require('nodemailer');
const db = require('../config/db');
const { decrypt } = require('./encryption');

const formatRupiah = (number) => {
    return new Intl.NumberFormat('id-ID', {
        style: 'currency',
        currency: 'IDR',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
    }).format(number);
};

async function sendReceiptEmail(recipientEmail, order, businessInfo) {
    const [[emailSettings]] = await db.query(
        'SELECT sender_email, app_password, sender_name FROM email_settings WHERE business_id = ?',
        [businessInfo.id]
    );

    if (!emailSettings || !emailSettings.sender_email || !emailSettings.app_password) {
        throw new Error('Konfigurasi email pengirim belum lengkap di pengaturan.');
    }

    const decryptedAppPassword = decrypt(emailSettings.app_password);

    let transporter = nodemailer.createTransport({
        host: "smtp.gmail.com",
        port: 465,
        secure: true,
        auth: {
            user: emailSettings.sender_email,
            pass: decryptedAppPassword,
        },
    });

    const orderDate = new Date(order.created_at).toLocaleString('id-ID', {
        year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit'
    });
    const senderDisplayName = emailSettings.sender_name || businessInfo.business_name || "Smart POS";

    let itemsHtml = order.items.map(item => `
        <tr>
            <td style="padding: 8px; border-bottom: 1px solid #ddd; text-align: left;">${item.product_name}${item.variant_name ? ` (${item.variant_name})` : ''}</td>
            <td style="padding: 8px; border-bottom: 1px solid #ddd; text-align: center;">${item.quantity}</td>
            <td style="padding: 8px; border-bottom: 1px solid #ddd; text-align: right;">${formatRupiah(item.price)}</td>
            <td style="padding: 8px; border-bottom: 1px solid #ddd; text-align: right;">${formatRupiah(item.quantity * item.price)}</td>
        </tr>
    `).join('');

    const emailHtml = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; border: 1px solid #eee; padding: 20px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
        ${businessInfo.receipt_logo_url ? `<div style="text-align: center; margin-bottom: 20px;"><img src="${businessInfo.receipt_logo_url}" alt="Business Logo" style="max-width: 150px; height: auto;"></div>` : ''}
        <h2 style="text-align: center; color: #333;">Struk Pembelian ${businessInfo.business_name || ''}</h2>
        <p><strong>Tanggal:</strong> ${orderDate}</p>
        <p><strong>Nomor Pesanan:</strong> #${order.id}</p>
        <p><strong>Kasir:</strong> ${order.cashier_name}</p>
        ${order.customer_name ? `<p><strong>Pelanggan:</strong> ${order.customer_name}</p>` : ''}
        <p><strong>Metode Pembayaran:</strong> ${order.payment_method}</p>

        <h3 style="color: #333; border-bottom: 1px solid #eee; padding-bottom: 10px;">Detail Pesanan:</h3>
        <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
            <thead>
                <tr style="background-color: #f2f2f2;">
                    <th style="padding: 10px; border-bottom: 1px solid #ddd; text-align: left;">Item</th>
                    <th style="padding: 10px; border-bottom: 1px solid #ddd; text-align: center;">Qty</th>
                    <th style="padding: 10px; border-bottom: 1px solid #ddd; text-align: right;">Harga Satuan</th>
                    <th style="padding: 10px; border-bottom: 1px solid #ddd; text-align: right;">Subtotal</th>
                </tr>
            </thead>
            <tbody>${itemsHtml}</tbody>
            <tfoot>
                <tr><td colspan="3" style="padding: 10px; text-align: right;"><strong>Subtotal:</strong></td><td style="padding: 10px; text-align: right; font-weight: bold;">${formatRupiah(order.subtotal_amount)}</td></tr>
                ${order.tax_amount > 0 ? `<tr><td colspan="3" style="padding: 10px; text-align: right;"><strong>Pajak:</strong></td><td style="padding: 10px; text-align: right; font-weight: bold;">${formatRupiah(order.tax_amount)}</td></tr>` : ''}
                <tr><td colspan="3" style="padding: 10px; text-align: right; font-weight: bold; border-top: 1px solid #ddd;">Total Akhir:</td><td style="padding: 10px; text-align: right; font-weight: bold; border-top: 1px solid #ddd;">${formatRupiah(order.total_amount)}</td></tr>
                <tr><td colspan="3" style="padding: 10px; text-align: right; font-weight: bold;">Dibayar:</td><td style="padding: 10px; text-align: right; font-weight: bold;">${formatRupiah(order.amount_paid)}</td></tr>
                ${order.payment_method === 'Tunai' && (order.amount_paid - order.total_amount) > 0 ? `<tr><td colspan="3" style="padding: 10px; text-align: right; font-weight: bold;">Kembalian:</td><td style="padding: 10px; text-align: right; font-weight: bold;">${formatRupiah(order.amount_paid - order.total_amount)}</td></tr>` : ''}
            </tfoot>
        </table>
        <p style="text-align: center; color: #555;">${businessInfo.receipt_footer_text || 'Terima kasih atas pembelian Anda!'}</p>
    </div>
    `;

    await transporter.sendMail({
        from: `"${senderDisplayName}" <${emailSettings.sender_email}>`,
        to: recipientEmail,
        subject: `Struk Pembelian #${order.id}`,
        html: emailHtml,
    });
}

module.exports = { sendReceiptEmail };

===== backend\utils\encryption.js =====
// backend/utils/encryption.js
const crypto = require('crypto');

const ALGORITHM = 'aes-256-gcm';
const IV_LENGTH = 16;
const SALT_LENGTH = 64;
const TAG_LENGTH = 16;
const KEY_LENGTH = 32;

const MASTER_KEY = process.env.ENCRYPTION_KEY;

function encrypt(text) {
    const salt = crypto.randomBytes(SALT_LENGTH);
    const key = crypto.scryptSync(MASTER_KEY, salt, KEY_LENGTH);
    const iv = crypto.randomBytes(IV_LENGTH);
    const cipher = crypto.createCipheriv(ALGORITHM, key, iv);
    const encrypted = Buffer.concat([cipher.update(String(text), 'utf8'), cipher.final()]);
    const tag = cipher.getAuthTag();
    return Buffer.concat([salt, iv, tag, encrypted]).toString('hex');
}

function decrypt(encryptedText) {
    const data = Buffer.from(String(encryptedText), 'hex');
    const salt = data.slice(0, SALT_LENGTH);
    const iv = data.slice(SALT_LENGTH, SALT_LENGTH + IV_LENGTH);
    const tag = data.slice(SALT_LENGTH + IV_LENGTH, SALT_LENGTH + IV_LENGTH + TAG_LENGTH);
    const encrypted = data.slice(SALT_LENGTH + IV_LENGTH + TAG_LENGTH);
    const key = crypto.scryptSync(MASTER_KEY, salt, KEY_LENGTH);
    const decipher = crypto.createDecipheriv(ALGORITHM, key, iv);
    decipher.setAuthTag(tag);
    return decipher.update(encrypted, 'hex', 'utf8') + decipher.final('utf8');
}

module.exports = { encrypt, decrypt };

===== backend\utils\logUtils.js =====
// backend/utils/logUtils.js
const db = require('../config/db');

async function logActivity(businessId, userId, action, details) {
    try {
        const detailString = typeof details === 'object' ? JSON.stringify(details) : String(details);
        const query = 'INSERT INTO activity_logs (business_id, user_id, action, details) VALUES (?, ?, ?, ?)';
        await db.execute(query, [businessId, userId, action, detailString]);
    } catch (error) {
        console.error("Failed to log activity:", error);
    }
}

module.exports = { logActivity };

===== frontend\eslint.config.js =====
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])

===== frontend\package-lock.json =====
{
  "name": "smart-pos",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "smart-pos",
      "version": "1.0.0",
      "dependencies": {
        "axios": "^1.7.7",
        "date-fns": "^4.1.0",
        "dexie": "^4.2.0",
        "dexie-react-hooks": "^4.2.0",
        "framer-motion": "^12.23.12",
        "jwt-decode": "^4.0.0",
        "react": "^18.3.1",
        "react-datepicker": "^8.7.0",
        "react-dom": "^18.3.1",
        "react-icons": "^5.3.0",
        "react-loading-skeleton": "^3.5.0",
        "react-router-dom": "^6.27.0",
        "react-to-print": "^3.1.1",
        "react-toastify": "^11.0.5",
        "recharts": "^2.13.0",
        "styled-components": "^6.1.13"
      },
      "devDependencies": {
        "@vitejs/plugin-react": "^4.3.2",
        "eslint": "^9.12.0",
        "vite": "^5.4.8",
        "vite-plugin-pwa": "^1.0.3"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.4.tgz",
      "integrity": "sha512-YsmSKC29MJwf0gF8Rjjrg5LQCmyh+j/nD8/eP7f+BeoQTKYqs9RoWbjGOdy0+1Ekr68RJZMUOPVQaQisnIo4Rw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.4.tgz",
      "integrity": "sha512-2BCOP7TN8M+gVDj7/ht3hsaO/B/n5oDbiAyyvnRlNOs+u1o+JWNYTQrmpuNp1/Wq2gcFrI01JAW+paEKDMx/CA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.28.3",
        "@babel/helpers": "^7.28.4",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.4",
        "@babel/types": "^7.28.4",
        "@jridgewell/remapping": "^2.3.5",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.3.tgz",
      "integrity": "sha512-3lSpxGgvnmZznmBkCRnVREPUFJv2wrv9iAoFDvADJc0ypmdOxdUtcLeBgBJ6zE0PMeTKnxeQzyk0xTBq4Ep7zw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.3",
        "@babel/types": "^7.28.2",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-annotate-as-pure": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.27.3.tgz",
      "integrity": "sha512-fXSwMQqitTGeHLBC08Eq5yXz2m37E4pJX1qAU1+2cNedz/ifv/bVXft90VeSav5nFO61EcNgwr0aJxbyPaWBPg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-create-class-features-plugin": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.28.3.tgz",
      "integrity": "sha512-V9f6ZFIYSLNEbuGA/92uOvYsGCJNsuA8ESZ4ldc09bWk/j8H8TKiPw8Mk1eG6olpnO0ALHJmYfZvF4MEE4gajg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.3",
        "@babel/helper-member-expression-to-functions": "^7.27.1",
        "@babel/helper-optimise-call-expression": "^7.27.1",
        "@babel/helper-replace-supers": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1",
        "@babel/traverse": "^7.28.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-create-regexp-features-plugin": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.27.1.tgz",
      "integrity": "sha512-uVDC72XVf8UbrH5qQTc18Agb8emwjTiZrQE11Nv3CuBEZmVvTwwE9CBUEvHku06gQCAyYf8Nv6ja1IN+6LMbxQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "regexpu-core": "^6.2.0",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-define-polyfill-provider": {
      "version": "0.6.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.6.5.tgz",
      "integrity": "sha512-uJnGFcPsWQK8fvjgGP5LZUZZsYGIoPeRjSF5PGwrelYgq7Q15/Ft9NGFp1zglwgIv//W0uG4BevRuSJRyylZPg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-plugin-utils": "^7.27.1",
        "debug": "^4.4.1",
        "lodash.debounce": "^4.0.8",
        "resolve": "^1.22.10"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-member-expression-to-functions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.27.1.tgz",
      "integrity": "sha512-E5chM8eWjTp/aNoVpcbfM7mLxu9XGLWYise2eBKGQomAk/Mb4XoxyqXTZbuTohbsl8EKqdlMhnDI2CCLfcs9wA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.28.3.tgz",
      "integrity": "sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-optimise-call-expression": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.27.1.tgz",
      "integrity": "sha512-URMGH08NzYFhubNSGJrpUEphGKQwMQYBySzat5cAByY1/YgIRkULnIy3tAMeszlL/so2HbeilYloUmSpd7GdVw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-remap-async-to-generator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-remap-async-to-generator/-/helper-remap-async-to-generator-7.27.1.tgz",
      "integrity": "sha512-7fiA521aVw8lSPeI4ZOD3vRFkoqkJcS+z4hFo82bFSH/2tNd6eJ5qCVMS5OzDmZh/kaHQeBaeyxK6wljcPtveA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-wrap-function": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-replace-supers": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.27.1.tgz",
      "integrity": "sha512-7EHz6qDZc8RYS5ElPoShMheWvEgERonFCs7IAonWLLUTXW59DP14bCZt89/GKyreYn8g3S83m21FelHKbeDCKA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-member-expression-to-functions": "^7.27.1",
        "@babel/helper-optimise-call-expression": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-skip-transparent-expression-wrappers": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.27.1.tgz",
      "integrity": "sha512-Tub4ZKEXqbPjXgWLl2+3JpQAYBJ8+ikpQ2Ocj/q/r0LwE3UhENh7EUabyHjz2kCEsrRY83ew2DQdHluuiDQFzg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-wrap-function": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-wrap-function/-/helper-wrap-function-7.28.3.tgz",
      "integrity": "sha512-zdf983tNfLZFletc0RRXYrHrucBEg95NIFMkn6K9dbeMYnsgHaSBGcQqdsCSStG2PYwRre0Qc2NNSCXbG+xc6g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.3",
        "@babel/types": "^7.28.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.4.tgz",
      "integrity": "sha512-HFN59MmQXGHVyYadKLVumYsA9dBFun/ldYxipEjzA4196jpLZd8UjEEBLkbEkvfYreDqJhZxYAWFPtrfhNpj4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.4.tgz",
      "integrity": "sha512-yZbBqeM6TkpP9du/I2pUZnJsRMGGvOuIrhjzC1AwHwW+6he4mni6Bp/m8ijn0iOuZuPI2BfkCoSRunpyjnrQKg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.4"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-firefox-class-in-computed-class-key": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-firefox-class-in-computed-class-key/-/plugin-bugfix-firefox-class-in-computed-class-key-7.27.1.tgz",
      "integrity": "sha512-QPG3C9cCVRQLxAVwmefEmwdTanECuUBMQZ/ym5kiw3XKCGA7qkuQLcjWWHcrD/GKbn/WmJwaezfuuAOcyKlRPA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-safari-class-field-initializer-scope": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-safari-class-field-initializer-scope/-/plugin-bugfix-safari-class-field-initializer-scope-7.27.1.tgz",
      "integrity": "sha512-qNeq3bCKnGgLkEXUuFry6dPlGfCdQNZbn7yUAPCInwAJHMU7THJfrBSozkcWq5sNM6RcF3S8XyQL2A52KNR9IA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/-/plugin-bugfix-safari-id-destructuring-collision-in-function-expression-7.27.1.tgz",
      "integrity": "sha512-g4L7OYun04N1WyqMNjldFwlfPCLVkgB54A/YCXICZYBsvJJE3kByKv9c9+R/nAfmIfjl2rKYLNyMHboYbZaWaA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/-/plugin-bugfix-v8-spread-parameters-in-optional-chaining-7.27.1.tgz",
      "integrity": "sha512-oO02gcONcD5O1iTLi/6frMJBIwWEHceWGSGqrpCmEL8nogiS6J9PBlE48CaK20/Jx1LuRml9aDftLgdjXT8+Cw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1",
        "@babel/plugin-transform-optional-chaining": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.13.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly/-/plugin-bugfix-v8-static-class-fields-redefine-readonly-7.28.3.tgz",
      "integrity": "sha512-b6YTX108evsvE4YgWyQ921ZAFFQm3Bn+CA3+ZXlNVnPhx+UfsVURoPjfGAPCjBgrqo30yX/C2nZGX96DxvR9Iw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-proposal-private-property-in-object": {
      "version": "7.21.0-placeholder-for-preset-env.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.0-placeholder-for-preset-env.2.tgz",
      "integrity": "sha512-SOSkfJDddaM7mak6cPEpswyTRnuRltl429hMraQEglW+OkovnCzsiszTmsrlY//qLFjCpQDFRvjdm2wA5pPm9w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-assertions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-assertions/-/plugin-syntax-import-assertions-7.27.1.tgz",
      "integrity": "sha512-UT/Jrhw57xg4ILHLFnzFpPDlMbcdEicaAtjPQpbj9wa8T4r5KVWCimHcL/460g8Ht0DMxDyjsLgiWSkVjnwPFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-attributes": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.27.1.tgz",
      "integrity": "sha512-oFT0FrKHgF53f4vOsZGi2Hh3I35PfSmVs4IBFLFj4dnafP+hIWDLg3VyKmUHfLoLHlyxY4C7DGtmHuJgn+IGww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-unicode-sets-regex": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-unicode-sets-regex/-/plugin-syntax-unicode-sets-regex-7.18.6.tgz",
      "integrity": "sha512-727YkEAPwSIQTv5im8QHz3upqp92JTWhidIC81Tdx4VJYIte/VndKf1qKrfnnhPLiPghStWfvC/iFaMCQu7Nqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-arrow-functions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.27.1.tgz",
      "integrity": "sha512-8Z4TGic6xW70FKThA5HYEKKyBpOOsucTOD1DjU3fZxDg+K3zBJcXMFnt/4yQiZnf5+MiOMSXQ9PaEK/Ilh1DeA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-async-generator-functions": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-generator-functions/-/plugin-transform-async-generator-functions-7.28.0.tgz",
      "integrity": "sha512-BEOdvX4+M765icNPZeidyADIvQ1m1gmunXufXxvRESy/jNNyfovIqUyE7MVgGBjWktCoJlzvFA1To2O4ymIO3Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-remap-async-to-generator": "^7.27.1",
        "@babel/traverse": "^7.28.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-async-to-generator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.27.1.tgz",
      "integrity": "sha512-NREkZsZVJS4xmTr8qzE5y8AfIPqsdQfRuUiLRTEzb7Qii8iFWCyDKaUV2c0rCuh4ljDZ98ALHP/PetiBV2nddA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-remap-async-to-generator": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoped-functions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoped-functions/-/plugin-transform-block-scoped-functions-7.27.1.tgz",
      "integrity": "sha512-cnqkuOtZLapWYZUYM5rVIdv1nXYuFVIltZ6ZJ7nIj585QsjKM5dhL2Fu/lICXZ1OyIAFc7Qy+bvDAtTXqGrlhg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoping": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.28.4.tgz",
      "integrity": "sha512-1yxmvN0MJHOhPVmAsmoW5liWwoILobu/d/ShymZmj867bAdxGbehIrew1DuLpw2Ukv+qDSSPQdYW1dLNE7t11A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-class-properties": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-class-properties/-/plugin-transform-class-properties-7.27.1.tgz",
      "integrity": "sha512-D0VcalChDMtuRvJIu3U/fwWjf8ZMykz5iZsg77Nuj821vCKI3zCyRLwRdWbsuJ/uRwZhZ002QtCqIkwC/ZkvbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-class-static-block": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-class-static-block/-/plugin-transform-class-static-block-7.28.3.tgz",
      "integrity": "sha512-LtPXlBbRoc4Njl/oh1CeD/3jC+atytbnf/UqLoqTDcEYGUPj022+rvfkbDYieUrSj3CaV4yHDByPE+T2HwfsJg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.28.3",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.12.0"
      }
    },
    "node_modules/@babel/plugin-transform-classes": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-classes/-/plugin-transform-classes-7.28.4.tgz",
      "integrity": "sha512-cFOlhIYPBv/iBoc+KS3M6et2XPtbT2HiCRfBXWtfpc9OAyostldxIf9YAYB6ypURBBbx+Qv6nyrLzASfJe+hBA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-globals": "^7.28.0",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-replace-supers": "^7.27.1",
        "@babel/traverse": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-computed-properties": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.27.1.tgz",
      "integrity": "sha512-lj9PGWvMTVksbWiDT2tW68zGS/cyo4AkZ/QTp0sQT0mjPopCmrSkzxeXkznjqBxzDI6TclZhOJbBmbBLjuOZUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/template": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-destructuring": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.28.0.tgz",
      "integrity": "sha512-v1nrSMBiKcodhsyJ4Gf+Z0U/yawmJDBOTpEB3mcQY52r9RIyPneGyAS/yM6seP/8I+mWI3elOMtT5dB8GJVs+A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.28.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-dotall-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-dotall-regex/-/plugin-transform-dotall-regex-7.27.1.tgz",
      "integrity": "sha512-gEbkDVGRvjj7+T1ivxrfgygpT7GUd4vmODtYpbs0gZATdkX8/iSnOtZSxiZnsgm1YjTgjI6VKBGSJJevkrclzw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-duplicate-keys": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.27.1.tgz",
      "integrity": "sha512-MTyJk98sHvSs+cvZ4nOauwTTG1JeonDjSGvGGUNHreGQns+Mpt6WX/dVzWBHgg+dYZhkC4X+zTDfkTU+Vy9y7Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-duplicate-named-capturing-groups-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-duplicate-named-capturing-groups-regex/-/plugin-transform-duplicate-named-capturing-groups-regex-7.27.1.tgz",
      "integrity": "sha512-hkGcueTEzuhB30B3eJCbCYeCaaEQOmQR0AdvzpD4LoN0GXMWzzGSuRrxR2xTnCrvNbVwK9N6/jQ92GSLfiZWoQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-dynamic-import": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-dynamic-import/-/plugin-transform-dynamic-import-7.27.1.tgz",
      "integrity": "sha512-MHzkWQcEmjzzVW9j2q8LGjwGWpG2mjwaaB0BNQwst3FIjqsg8Ct/mIZlvSPJvfi9y2AC8mi/ktxbFVL9pZ1I4A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-explicit-resource-management": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-explicit-resource-management/-/plugin-transform-explicit-resource-management-7.28.0.tgz",
      "integrity": "sha512-K8nhUcn3f6iB+P3gwCv/no7OdzOZQcKchW6N389V6PD8NUWKZHzndOd9sPDVbMoBsbmjMqlB4L9fm+fEFNVlwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/plugin-transform-destructuring": "^7.28.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-exponentiation-operator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-exponentiation-operator/-/plugin-transform-exponentiation-operator-7.27.1.tgz",
      "integrity": "sha512-uspvXnhHvGKf2r4VVtBpeFnuDWsJLQ6MF6lGJLC89jBR1uoVeqM416AZtTuhTezOfgHicpJQmoD5YUakO/YmXQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-export-namespace-from": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-export-namespace-from/-/plugin-transform-export-namespace-from-7.27.1.tgz",
      "integrity": "sha512-tQvHWSZ3/jH2xuq/vZDy0jNn+ZdXJeM8gHvX4lnJmsc3+50yPlWdZXIc5ay+umX+2/tJIqHqiEqcJvxlmIvRvQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-for-of": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.27.1.tgz",
      "integrity": "sha512-BfbWFFEJFQzLCQ5N8VocnCtA8J1CLkNTe2Ms2wocj75dd6VpiqS5Z5quTYcUoo4Yq+DN0rtikODccuv7RU81sw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-function-name": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-function-name/-/plugin-transform-function-name-7.27.1.tgz",
      "integrity": "sha512-1bQeydJF9Nr1eBCMMbC+hdwmRlsv5XYOMu03YSWFwNs0HsAmtSxxF1fyuYPqemVldVyFmlCU7w8UE14LupUSZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-json-strings": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-json-strings/-/plugin-transform-json-strings-7.27.1.tgz",
      "integrity": "sha512-6WVLVJiTjqcQauBhn1LkICsR2H+zm62I3h9faTDKt1qP4jn2o72tSvqMwtGFKGTpojce0gJs+76eZ2uCHRZh0Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-literals/-/plugin-transform-literals-7.27.1.tgz",
      "integrity": "sha512-0HCFSepIpLTkLcsi86GG3mTUzxV5jpmbv97hTETW3yzrAij8aqlD36toB1D0daVFJM8NK6GvKO0gslVQmm+zZA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-logical-assignment-operators": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-logical-assignment-operators/-/plugin-transform-logical-assignment-operators-7.27.1.tgz",
      "integrity": "sha512-SJvDs5dXxiae4FbSL1aBJlG4wvl594N6YEVVn9e3JGulwioy6z3oPjx/sQBO3Y4NwUu5HNix6KJ3wBZoewcdbw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-member-expression-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-member-expression-literals/-/plugin-transform-member-expression-literals-7.27.1.tgz",
      "integrity": "sha512-hqoBX4dcZ1I33jCSWcXrP+1Ku7kdqXf1oeah7ooKOIiAdKQ+uqftgCFNOSzA5AMS2XIHEYeGFg4cKRCdpxzVOQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-amd": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.27.1.tgz",
      "integrity": "sha512-iCsytMg/N9/oFq6n+gFTvUYDZQOMK5kEdeYxmxt91fcJGycfxVP9CnrxoliM0oumFERba2i8ZtwRUCMhvP1LnA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-commonjs": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.27.1.tgz",
      "integrity": "sha512-OJguuwlTYlN0gBZFRPqwOGNWssZjfIUdS7HMYtN8c1KmwpwHFBwTeFZrg9XZa+DFTitWOW5iTAG7tyCUPsCCyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-systemjs": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.27.1.tgz",
      "integrity": "sha512-w5N1XzsRbc0PQStASMksmUeqECuzKuTJer7kFagK8AXgpCMkeDMO5S+aaFb7A51ZYDF7XI34qsTX+fkHiIm5yA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-umd": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.27.1.tgz",
      "integrity": "sha512-iQBE/xC5BV1OxJbp6WG7jq9IWiD+xxlZhLrdwpPkTX3ydmXdvoCpyfJN7acaIBZaOqTfr76pgzqBJflNbeRK+w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-named-capturing-groups-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.27.1.tgz",
      "integrity": "sha512-SstR5JYy8ddZvD6MhV0tM/j16Qds4mIpJTOd1Yu9J9pJjH93bxHECF7pgtc28XvkzTD6Pxcm/0Z73Hvk7kb3Ng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-new-target": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.27.1.tgz",
      "integrity": "sha512-f6PiYeqXQ05lYq3TIfIDu/MtliKUbNwkGApPUvyo6+tc7uaR4cPjPe7DFPr15Uyycg2lZU6btZ575CuQoYh7MQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-nullish-coalescing-operator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-nullish-coalescing-operator/-/plugin-transform-nullish-coalescing-operator-7.27.1.tgz",
      "integrity": "sha512-aGZh6xMo6q9vq1JGcw58lZ1Z0+i0xB2x0XaauNIUXd6O1xXc3RwoWEBlsTQrY4KQ9Jf0s5rgD6SiNkaUdJegTA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-numeric-separator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-numeric-separator/-/plugin-transform-numeric-separator-7.27.1.tgz",
      "integrity": "sha512-fdPKAcujuvEChxDBJ5c+0BTaS6revLV7CJL08e4m3de8qJfNIuCc2nc7XJYOjBoTMJeqSmwXJ0ypE14RCjLwaw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-object-rest-spread": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-rest-spread/-/plugin-transform-object-rest-spread-7.28.4.tgz",
      "integrity": "sha512-373KA2HQzKhQCYiRVIRr+3MjpCObqzDlyrM6u4I201wL8Mp2wHf7uB8GhDwis03k2ti8Zr65Zyyqs1xOxUF/Ew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/plugin-transform-destructuring": "^7.28.0",
        "@babel/plugin-transform-parameters": "^7.27.7",
        "@babel/traverse": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-object-super": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-super/-/plugin-transform-object-super-7.27.1.tgz",
      "integrity": "sha512-SFy8S9plRPbIcxlJ8A6mT/CxFdJx/c04JEctz4jf8YZaVS2px34j7NXRrlGlHkN/M2gnpL37ZpGRGVFLd3l8Ng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-replace-supers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-optional-catch-binding": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-optional-catch-binding/-/plugin-transform-optional-catch-binding-7.27.1.tgz",
      "integrity": "sha512-txEAEKzYrHEX4xSZN4kJ+OfKXFVSWKB2ZxM9dpcE3wT7smwkNmXo5ORRlVzMVdJbD+Q8ILTgSD7959uj+3Dm3Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-optional-chaining": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-optional-chaining/-/plugin-transform-optional-chaining-7.27.1.tgz",
      "integrity": "sha512-BQmKPPIuc8EkZgNKsv0X4bPmOoayeu4F1YCwx2/CfmDSXDbp7GnzlUH+/ul5VGfRg1AoFPsrIThlEBj2xb4CAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-parameters": {
      "version": "7.27.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.27.7.tgz",
      "integrity": "sha512-qBkYTYCb76RRxUM6CcZA5KRu8K4SM8ajzVeUgVdMVO9NN9uI/GaVmBg/WKJJGnNokV9SY8FxNOVWGXzqzUidBg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-private-methods": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-private-methods/-/plugin-transform-private-methods-7.27.1.tgz",
      "integrity": "sha512-10FVt+X55AjRAYI9BrdISN9/AQWHqldOeZDUoLyif1Kn05a56xVBXb8ZouL8pZ9jem8QpXaOt8TS7RHUIS+GPA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-private-property-in-object": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-private-property-in-object/-/plugin-transform-private-property-in-object-7.27.1.tgz",
      "integrity": "sha512-5J+IhqTi1XPa0DXF83jYOaARrX+41gOewWbkPyjMNRDqgOCqdffGh8L3f/Ek5utaEBZExjSAzcyjmV9SSAWObQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-property-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-property-literals/-/plugin-transform-property-literals-7.27.1.tgz",
      "integrity": "sha512-oThy3BCuCha8kDZ8ZkgOg2exvPYUlprMukKQXI1r1pJ47NCvxfkEy8vK+r/hT9nF0Aa4H1WUPZZjHTFtAhGfmQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-regenerator": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.28.4.tgz",
      "integrity": "sha512-+ZEdQlBoRg9m2NnzvEeLgtvBMO4tkFBw5SQIUgLICgTrumLoU7lr+Oghi6km2PFj+dbUt2u1oby2w3BDO9YQnA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-regexp-modifiers": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-regexp-modifiers/-/plugin-transform-regexp-modifiers-7.27.1.tgz",
      "integrity": "sha512-TtEciroaiODtXvLZv4rmfMhkCv8jx3wgKpL68PuiPh2M4fvz5jhsA7697N1gMvkvr/JTF13DrFYyEbY9U7cVPA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-reserved-words": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.27.1.tgz",
      "integrity": "sha512-V2ABPHIJX4kC7HegLkYoDpfg9PVmuWy/i6vUM5eGK22bx4YVFD3M5F0QQnWQoDs6AGsUWTVOopBiMFQgHaSkVw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-shorthand-properties": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-shorthand-properties/-/plugin-transform-shorthand-properties-7.27.1.tgz",
      "integrity": "sha512-N/wH1vcn4oYawbJ13Y/FxcQrWk63jhfNa7jef0ih7PHSIHX2LB7GWE1rkPrOnka9kwMxb6hMl19p7lidA+EHmQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-spread": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-spread/-/plugin-transform-spread-7.27.1.tgz",
      "integrity": "sha512-kpb3HUqaILBJcRFVhFUs6Trdd4mkrzcGXss+6/mxUd273PfbWqSDHRzMT2234gIg2QYfAjvXLSquP1xECSg09Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-sticky-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-sticky-regex/-/plugin-transform-sticky-regex-7.27.1.tgz",
      "integrity": "sha512-lhInBO5bi/Kowe2/aLdBAawijx+q1pQzicSgnkB6dUPc1+RC8QmJHKf2OjvU+NZWitguJHEaEmbV6VWEouT58g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-template-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.27.1.tgz",
      "integrity": "sha512-fBJKiV7F2DxZUkg5EtHKXQdbsbURW3DZKQUWphDum0uRP6eHGGa/He9mc0mypL680pb+e/lDIthRohlv8NCHkg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-typeof-symbol": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.27.1.tgz",
      "integrity": "sha512-RiSILC+nRJM7FY5srIyc4/fGIwUhyDuuBSdWn4y6yT6gm652DpCHZjIipgn6B7MQ1ITOUnAKWixEUjQRIBIcLw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-escapes": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-escapes/-/plugin-transform-unicode-escapes-7.27.1.tgz",
      "integrity": "sha512-Ysg4v6AmF26k9vpfFuTZg8HRfVWzsh1kVfowA23y9j/Gu6dOuahdUVhkLqpObp3JIv27MLSii6noRnuKN8H0Mg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-property-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-property-regex/-/plugin-transform-unicode-property-regex-7.27.1.tgz",
      "integrity": "sha512-uW20S39PnaTImxp39O5qFlHLS9LJEmANjMG7SxIhap8rCHqu0Ik+tLEPX5DKmHn6CsWQ7j3lix2tFOa5YtL12Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-regex/-/plugin-transform-unicode-regex-7.27.1.tgz",
      "integrity": "sha512-xvINq24TRojDuyt6JGtHmkVkrfVV3FPT16uytxImLeBZqW3/H52yN+kM1MGuyPkIQxrzKwPHs5U/MP3qKyzkGw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-sets-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-sets-regex/-/plugin-transform-unicode-sets-regex-7.27.1.tgz",
      "integrity": "sha512-EtkOujbc4cgvb0mlpQefi4NTPBzhSIevblFevACNLUspmrALgmEBdL/XfnyyITfd8fKBZrZys92zOWcik7j9Tw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/preset-env": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/preset-env/-/preset-env-7.28.3.tgz",
      "integrity": "sha512-ROiDcM+GbYVPYBOeCR6uBXKkQpBExLl8k9HO1ygXEyds39j+vCCsjmj7S8GOniZQlEs81QlkdJZe76IpLSiqpg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-validator-option": "^7.27.1",
        "@babel/plugin-bugfix-firefox-class-in-computed-class-key": "^7.27.1",
        "@babel/plugin-bugfix-safari-class-field-initializer-scope": "^7.27.1",
        "@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": "^7.27.1",
        "@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": "^7.27.1",
        "@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly": "^7.28.3",
        "@babel/plugin-proposal-private-property-in-object": "7.21.0-placeholder-for-preset-env.2",
        "@babel/plugin-syntax-import-assertions": "^7.27.1",
        "@babel/plugin-syntax-import-attributes": "^7.27.1",
        "@babel/plugin-syntax-unicode-sets-regex": "^7.18.6",
        "@babel/plugin-transform-arrow-functions": "^7.27.1",
        "@babel/plugin-transform-async-generator-functions": "^7.28.0",
        "@babel/plugin-transform-async-to-generator": "^7.27.1",
        "@babel/plugin-transform-block-scoped-functions": "^7.27.1",
        "@babel/plugin-transform-block-scoping": "^7.28.0",
        "@babel/plugin-transform-class-properties": "^7.27.1",
        "@babel/plugin-transform-class-static-block": "^7.28.3",
        "@babel/plugin-transform-classes": "^7.28.3",
        "@babel/plugin-transform-computed-properties": "^7.27.1",
        "@babel/plugin-transform-destructuring": "^7.28.0",
        "@babel/plugin-transform-dotall-regex": "^7.27.1",
        "@babel/plugin-transform-duplicate-keys": "^7.27.1",
        "@babel/plugin-transform-duplicate-named-capturing-groups-regex": "^7.27.1",
        "@babel/plugin-transform-dynamic-import": "^7.27.1",
        "@babel/plugin-transform-explicit-resource-management": "^7.28.0",
        "@babel/plugin-transform-exponentiation-operator": "^7.27.1",
        "@babel/plugin-transform-export-namespace-from": "^7.27.1",
        "@babel/plugin-transform-for-of": "^7.27.1",
        "@babel/plugin-transform-function-name": "^7.27.1",
        "@babel/plugin-transform-json-strings": "^7.27.1",
        "@babel/plugin-transform-literals": "^7.27.1",
        "@babel/plugin-transform-logical-assignment-operators": "^7.27.1",
        "@babel/plugin-transform-member-expression-literals": "^7.27.1",
        "@babel/plugin-transform-modules-amd": "^7.27.1",
        "@babel/plugin-transform-modules-commonjs": "^7.27.1",
        "@babel/plugin-transform-modules-systemjs": "^7.27.1",
        "@babel/plugin-transform-modules-umd": "^7.27.1",
        "@babel/plugin-transform-named-capturing-groups-regex": "^7.27.1",
        "@babel/plugin-transform-new-target": "^7.27.1",
        "@babel/plugin-transform-nullish-coalescing-operator": "^7.27.1",
        "@babel/plugin-transform-numeric-separator": "^7.27.1",
        "@babel/plugin-transform-object-rest-spread": "^7.28.0",
        "@babel/plugin-transform-object-super": "^7.27.1",
        "@babel/plugin-transform-optional-catch-binding": "^7.27.1",
        "@babel/plugin-transform-optional-chaining": "^7.27.1",
        "@babel/plugin-transform-parameters": "^7.27.7",
        "@babel/plugin-transform-private-methods": "^7.27.1",
        "@babel/plugin-transform-private-property-in-object": "^7.27.1",
        "@babel/plugin-transform-property-literals": "^7.27.1",
        "@babel/plugin-transform-regenerator": "^7.28.3",
        "@babel/plugin-transform-regexp-modifiers": "^7.27.1",
        "@babel/plugin-transform-reserved-words": "^7.27.1",
        "@babel/plugin-transform-shorthand-properties": "^7.27.1",
        "@babel/plugin-transform-spread": "^7.27.1",
        "@babel/plugin-transform-sticky-regex": "^7.27.1",
        "@babel/plugin-transform-template-literals": "^7.27.1",
        "@babel/plugin-transform-typeof-symbol": "^7.27.1",
        "@babel/plugin-transform-unicode-escapes": "^7.27.1",
        "@babel/plugin-transform-unicode-property-regex": "^7.27.1",
        "@babel/plugin-transform-unicode-regex": "^7.27.1",
        "@babel/plugin-transform-unicode-sets-regex": "^7.27.1",
        "@babel/preset-modules": "0.1.6-no-external-plugins",
        "babel-plugin-polyfill-corejs2": "^0.4.14",
        "babel-plugin-polyfill-corejs3": "^0.13.0",
        "babel-plugin-polyfill-regenerator": "^0.6.5",
        "core-js-compat": "^3.43.0",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/preset-modules": {
      "version": "0.1.6-no-external-plugins",
      "resolved": "https://registry.npmjs.org/@babel/preset-modules/-/preset-modules-0.1.6-no-external-plugins.tgz",
      "integrity": "sha512-HrcgcIESLm9aIR842yhJ5RWan/gebQUJ6E/E5+rf0y9o6oj7w0Br+sWuL6kEQ/o/AdfvR1Je9jG18/gnpwjEyA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@babel/types": "^7.4.4",
        "esutils": "^2.0.2"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.28.4.tgz",
      "integrity": "sha512-Q/N6JNWvIvPnLDvjlE1OUBLPQHH6l3CltCEsHIujp45zQUSSh8K+gHnaEX45yAT1nyngnINhvWtzN+Nb9D8RAQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.4.tgz",
      "integrity": "sha512-YEzuboP2qvQavAcjgQNVgsvHIDv6ZpwXvcvjmyySP2DIMuByS/6ioU5G9pYrWHM6T2YDfc7xga9iNzYOs12CFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.4.tgz",
      "integrity": "sha512-bkFqkLhh3pMBUQQkpVgWDWq/lqzc2678eUyDlTBhRqhCHFguYYGM0Efga7tYk4TogG/3x0EEl66/OQ+WGbWB/Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@emotion/is-prop-valid": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.2.tgz",
      "integrity": "sha512-uNsoYd37AFmaCdXlg6EYD1KaPOaRWRByMCYzbKUX4+hhMfrxdVSelShywL4JVaAeM/eHUOSprYBQls+/neX3pw==",
      "license": "MIT",
      "dependencies": {
        "@emotion/memoize": "^0.8.1"
      }
    },
    "node_modules/@emotion/memoize": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.1.tgz",
      "integrity": "sha512-W2P2c/VRW1/1tLox0mVUalvnWXxavmv/Oum2aPsRcoDJuob75FC3Y8FbpfLwUegRcxINtGUMPq0tFCvYNTBXNA==",
      "license": "MIT"
    },
    "node_modules/@emotion/unitless": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.8.1.tgz",
      "integrity": "sha512-KOEGMu6dmJZtpadb476IsZBclKvILjopjUii3V+7MnXIQCYh8W3NgNcgwo21n9LXZX6EDIKvqfjYxXebDwxKmQ==",
      "license": "MIT"
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.8.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.8.0.tgz",
      "integrity": "sha512-MJQFqrZgcW0UNYLGOuQpey/oTN59vyWwplvCGZztn1cKz9agZPPYpJB7h2OMmuu7VLqkvEjN8feFZJmxNF9D+Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.21.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.0.tgz",
      "integrity": "sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.3.1.tgz",
      "integrity": "sha512-xR93k9WhrDYpXHORXpxVL5oHj3Era7wo6k/Wd8/IsQNnZUTzkGS29lyn3nAT05v6ltUuTFVCCYDEGfy2Or/sPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.15.2",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.15.2.tgz",
      "integrity": "sha512-78Md3/Rrxh83gCxoUc0EiciuOHsIITzLy53m3d9UyiW8y9Dj2D29FeETqyKA+BRK76tnTp6RXWb3pCay8Oyomg==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.35.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.35.0.tgz",
      "integrity": "sha512-30iXE9whjlILfWobBkNerJo+TXYsgVM5ERQwMcMKCHckHflCmf7wXDAHlARoWnh0s1U72WqlbeyE7iAcCzuCPw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.3.5.tgz",
      "integrity": "sha512-Z5kJ+wU3oA7MMIqVR9tyZRtjYPr4OC004Q4Rw7pgOKUOKkJfZ3O24nz3WYfGRpMDNmcOi3TwQOmgm7B7Tpii0w==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.15.2",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@floating-ui/core": {
      "version": "1.7.3",
      "resolved": "https://registry.npmjs.org/@floating-ui/core/-/core-1.7.3.tgz",
      "integrity": "sha512-sGnvb5dmrJaKEZ+LDIpguvdX3bDlEllmv4/ClQ9awcmCZrlx5jQyyMWFM5kBI+EyNOCDDiKk8il0zeuX3Zlg/w==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/utils": "^0.2.10"
      }
    },
    "node_modules/@floating-ui/dom": {
      "version": "1.7.4",
      "resolved": "https://registry.npmjs.org/@floating-ui/dom/-/dom-1.7.4.tgz",
      "integrity": "sha512-OOchDgh4F2CchOX94cRVqhvy7b3AFb+/rQXyswmzmGakRfkMgoWVjfnLWkRirfLEfuD4ysVW16eXzwt3jHIzKA==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/core": "^1.7.3",
        "@floating-ui/utils": "^0.2.10"
      }
    },
    "node_modules/@floating-ui/react": {
      "version": "0.27.16",
      "resolved": "https://registry.npmjs.org/@floating-ui/react/-/react-0.27.16.tgz",
      "integrity": "sha512-9O8N4SeG2z++TSM8QA/KTeKFBVCNEz/AGS7gWPJf6KFRzmRWixFRnCnkPHRDwSVZW6QPDO6uT0P2SpWNKCc9/g==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/react-dom": "^2.1.6",
        "@floating-ui/utils": "^0.2.10",
        "tabbable": "^6.0.0"
      },
      "peerDependencies": {
        "react": ">=17.0.0",
        "react-dom": ">=17.0.0"
      }
    },
    "node_modules/@floating-ui/react-dom": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@floating-ui/react-dom/-/react-dom-2.1.6.tgz",
      "integrity": "sha512-4JX6rEatQEvlmgU80wZyq9RT96HZJa88q8hp0pBd+LrczeDI4o6uA2M+uvxngVHo4Ihr8uibXxH6+70zhAFrVw==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/dom": "^1.7.4"
      },
      "peerDependencies": {
        "react": ">=16.8.0",
        "react-dom": ">=16.8.0"
      }
    },
    "node_modules/@floating-ui/utils": {
      "version": "0.2.10",
      "resolved": "https://registry.npmjs.org/@floating-ui/utils/-/utils-0.2.10.tgz",
      "integrity": "sha512-aGTxbpbg8/b5JfU1HXSrbH3wXZuLPJcNEcZQFMxLs3oSzgtVu6nFPkbbGGUvBcUjKV2YyB9Wxxabo+HEH9tcRQ==",
      "license": "MIT"
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.7",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.7.tgz",
      "integrity": "sha512-/zUx+yOsIrG4Y43Eh2peDeKCxlRt/gET6aHfaKpuq267qXdYDFViVHfMaLyygZOnl0kGWxFIgsBy8QFuTLUXEQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.4.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
      "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/remapping": {
      "version": "2.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/remapping/-/remapping-2.3.5.tgz",
      "integrity": "sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/source-map": {
      "version": "0.3.11",
      "resolved": "https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.11.tgz",
      "integrity": "sha512-ZMp1V8ZFcPG5dIWnQLr3NSI1MiCU7UETdS/A0G8V/XWHvJv3ZsFqutJn1Y5RPmAPX6F3BiE397OqveU/9NCuIA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.30",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.30.tgz",
      "integrity": "sha512-GQ7Nw5G2lTu/BtHTKfXhKHok2WGetd4XYcVKGx00SjAk8GMwgJM3zr6zORiPGuOE+/vkc90KtTosSSvaCjKb2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.23.0",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.27",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.27.tgz",
      "integrity": "sha512-+d0F4MKMCbeVUJwG96uQ4SgAznZNSq93I3V+9NHA4OpvqG8mRCpGdKmK8l/dl02h2CCDHwW2FqilnTyDcAnqjA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/plugin-node-resolve": {
      "version": "15.3.1",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.3.1.tgz",
      "integrity": "sha512-tgg6b91pAybXHJQMAAwW9VuWBO6Thi+q7BCNARLwSqlmsHz0XYURtGvh/AuwSADXSI4h/2uHbs7s4FzlZDGSGA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^5.0.1",
        "@types/resolve": "1.20.2",
        "deepmerge": "^4.2.2",
        "is-module": "^1.0.0",
        "resolve": "^1.22.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "rollup": "^2.78.0||^3.0.0||^4.0.0"
      },
      "peerDependenciesMeta": {
        "rollup": {
          "optional": true
        }
      }
    },
    "node_modules/@rollup/plugin-terser": {
      "version": "0.4.4",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-terser/-/plugin-terser-0.4.4.tgz",
      "integrity": "sha512-XHeJC5Bgvs8LfukDwWZp7yeqin6ns8RTl2B9avbejt6tZqsqvVoWI7ZTQrcNsfKEDWBTnTxM8nMDkO2IFFbd0A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "serialize-javascript": "^6.0.1",
        "smob": "^1.0.0",
        "terser": "^5.17.4"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "rollup": "^2.0.0||^3.0.0||^4.0.0"
      },
      "peerDependenciesMeta": {
        "rollup": {
          "optional": true
        }
      }
    },
    "node_modules/@rollup/pluginutils": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-5.3.0.tgz",
      "integrity": "sha512-5EdhGZtnu3V88ces7s53hhfK5KSASnJZv8Lulpc04cWO3REESroJXg73DFsOmgbU2BhwV0E20bu2IDZb3VKW4Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "^1.0.0",
        "estree-walker": "^2.0.2",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "rollup": "^1.20.0||^2.0.0||^3.0.0||^4.0.0"
      },
      "peerDependenciesMeta": {
        "rollup": {
          "optional": true
        }
      }
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.50.0.tgz",
      "integrity": "sha512-lVgpeQyy4fWN5QYebtW4buT/4kn4p4IJ+kDNB4uYNT5b8c8DLJDg6titg20NIg7E8RWwdWZORW6vUFfrLyG3KQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.50.0.tgz",
      "integrity": "sha512-2O73dR4Dc9bp+wSYhviP6sDziurB5/HCym7xILKifWdE9UsOe2FtNcM+I4xZjKrfLJnq5UR8k9riB87gauiQtw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.50.0.tgz",
      "integrity": "sha512-vwSXQN8T4sKf1RHr1F0s98Pf8UPz7pS6P3LG9NSmuw0TVh7EmaE+5Ny7hJOZ0M2yuTctEsHHRTMi2wuHkdS6Hg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.50.0.tgz",
      "integrity": "sha512-cQp/WG8HE7BCGyFVuzUg0FNmupxC+EPZEwWu2FCGGw5WDT1o2/YlENbm5e9SMvfDFR6FRhVCBePLqj0o8MN7Vw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.50.0.tgz",
      "integrity": "sha512-UR1uTJFU/p801DvvBbtDD7z9mQL8J80xB0bR7DqW7UGQHRm/OaKzp4is7sQSdbt2pjjSS72eAtRh43hNduTnnQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.50.0.tgz",
      "integrity": "sha512-G/DKyS6PK0dD0+VEzH/6n/hWDNPDZSMBmqsElWnCRGrYOb2jC0VSupp7UAHHQ4+QILwkxSMaYIbQ72dktp8pKA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.50.0.tgz",
      "integrity": "sha512-u72Mzc6jyJwKjJbZZcIYmd9bumJu7KNmHYdue43vT1rXPm2rITwmPWF0mmPzLm9/vJWxIRbao/jrQmxTO0Sm9w==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.50.0.tgz",
      "integrity": "sha512-S4UefYdV0tnynDJV1mdkNawp0E5Qm2MtSs330IyHgaccOFrwqsvgigUD29uT+B/70PDY1eQ3t40+xf6wIvXJyg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.50.0.tgz",
      "integrity": "sha512-1EhkSvUQXJsIhk4msxP5nNAUWoB4MFDHhtc4gAYvnqoHlaL9V3F37pNHabndawsfy/Tp7BPiy/aSa6XBYbaD1g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.50.0.tgz",
      "integrity": "sha512-EtBDIZuDtVg75xIPIK1l5vCXNNCIRM0OBPUG+tbApDuJAy9mKago6QxX+tfMzbCI6tXEhMuZuN1+CU8iDW+0UQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.50.0.tgz",
      "integrity": "sha512-BGYSwJdMP0hT5CCmljuSNx7+k+0upweM2M4YGfFBjnFSZMHOLYR0gEEj/dxyYJ6Zc6AiSeaBY8dWOa11GF/ppQ==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-ppc64-gnu": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.50.0.tgz",
      "integrity": "sha512-I1gSMzkVe1KzAxKAroCJL30hA4DqSi+wGc5gviD0y3IL/VkvcnAqwBf4RHXHyvH66YVHxpKO8ojrgc4SrWAnLg==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.50.0.tgz",
      "integrity": "sha512-bSbWlY3jZo7molh4tc5dKfeSxkqnf48UsLqYbUhnkdnfgZjgufLS/NTA8PcP/dnvct5CCdNkABJ56CbclMRYCA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.50.0.tgz",
      "integrity": "sha512-LSXSGumSURzEQLT2e4sFqFOv3LWZsEF8FK7AAv9zHZNDdMnUPYH3t8ZlaeYYZyTXnsob3htwTKeWtBIkPV27iQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.50.0.tgz",
      "integrity": "sha512-CxRKyakfDrsLXiCyucVfVWVoaPA4oFSpPpDwlMcDFQvrv3XY6KEzMtMZrA+e/goC8xxp2WSOxHQubP8fPmmjOQ==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.50.0.tgz",
      "integrity": "sha512-8PrJJA7/VU8ToHVEPu14FzuSAqVKyo5gg/J8xUerMbyNkWkO9j2ExBho/68RnJsMGNJq4zH114iAttgm7BZVkA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.50.0.tgz",
      "integrity": "sha512-SkE6YQp+CzpyOrbw7Oc4MgXFvTw2UIBElvAvLCo230pyxOLmYwRPwZ/L5lBe/VW/qT1ZgND9wJfOsdy0XptRvw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-openharmony-arm64": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-openharmony-arm64/-/rollup-openharmony-arm64-4.50.0.tgz",
      "integrity": "sha512-PZkNLPfvXeIOgJWA804zjSFH7fARBBCpCXxgkGDRjjAhRLOR8o0IGS01ykh5GYfod4c2yiiREuDM8iZ+pVsT+Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.50.0.tgz",
      "integrity": "sha512-q7cIIdFvWQoaCbLDUyUc8YfR3Jh2xx3unO8Dn6/TTogKjfwrax9SyfmGGK6cQhKtjePI7jRfd7iRYcxYs93esg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.50.0.tgz",
      "integrity": "sha512-XzNOVg/YnDOmFdDKcxxK410PrcbcqZkBmz+0FicpW5jtjKQxcW1BZJEQOF0NJa6JO7CZhett8GEtRN/wYLYJuw==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.50.0.tgz",
      "integrity": "sha512-xMmiWRR8sp72Zqwjgtf3QbZfF1wdh8X2ABu3EaozvZcyHJeU0r+XAnXdKgs4cCAp6ORoYoCygipYP1mjmbjrsg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@surma/rollup-plugin-off-main-thread": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/@surma/rollup-plugin-off-main-thread/-/rollup-plugin-off-main-thread-2.2.3.tgz",
      "integrity": "sha512-lR8q/9W7hZpMWweNiAKU7NQerBnzQQLvi8qnTDU/fxItPhtZVMbPV3lbCwjhIlNBe9Bbr5V+KHshvWmVSG9cxQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "ejs": "^3.1.6",
        "json5": "^2.2.0",
        "magic-string": "^0.25.0",
        "string.prototype.matchall": "^4.0.6"
      }
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.28.0.tgz",
      "integrity": "sha512-8PvcXf70gTDZBgt9ptxJ8elBeBjcLOAcOtoO/mPJjtji1+CdGbHgm77om1GrsPxsiE+uXIpNSK64UYaIwQXd4Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.2"
      }
    },
    "node_modules/@types/d3-array": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-color": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
      "license": "MIT"
    },
    "node_modules/@types/d3-ease": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
      "license": "MIT"
    },
    "node_modules/@types/d3-interpolate": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-color": "*"
      }
    },
    "node_modules/@types/d3-path": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-scale": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-time": "*"
      }
    },
    "node_modules/@types/d3-shape": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-path": "*"
      }
    },
    "node_modules/@types/d3-time": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
      "license": "MIT"
    },
    "node_modules/@types/d3-timer": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
      "license": "MIT"
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "19.1.12",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.12.tgz",
      "integrity": "sha512-cMoR+FoAf/Jyq6+Df2/Z41jISvGZZ2eTlnsaJRptmZ76Caldwy1odD4xTr/gNV9VLj0AWgg/nmkevIyUfIIq5w==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/resolve": {
      "version": "1.20.2",
      "resolved": "https://registry.npmjs.org/@types/resolve/-/resolve-1.20.2.tgz",
      "integrity": "sha512-60BCwRFOZCQhDncwQdxxeOEEkbc5dIMccYLwbxsS4TUNeVECQ/pBJ0j09mrHOl/JJvpRPGwO9SvE4nR2Nb/a4Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/stylis": {
      "version": "4.2.5",
      "resolved": "https://registry.npmjs.org/@types/stylis/-/stylis-4.2.5.tgz",
      "integrity": "sha512-1Xve+NMN7FWjY14vLoY5tL3BVEQ/n42YLwaqJIPYhotZ9uBHt87VceMwWQpzmdEt2TNXIorIFG+YeCUUW7RInw==",
      "license": "MIT"
    },
    "node_modules/@types/trusted-types": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/@types/trusted-types/-/trusted-types-2.0.7.tgz",
      "integrity": "sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.7.0.tgz",
      "integrity": "sha512-gUu9hwfWvvEDBBmgtAowQCojwZmJ5mcLn3aufeCsitijs3+f2NsrPtlAWIR6OPiqljl96GVCUbLe0HyqIpVaoA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.28.0",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.27",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/async": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/async-function": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/at-least-node": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/at-least-node/-/at-least-node-1.0.0.tgz",
      "integrity": "sha512-+q/t7Ekv1EDY2l6Gda6LLiX14rU9TV20Wa3ofeQmwPFZbOMo9DXrLbOjFaaclkXKWidIaopwAObQDqwWtGUjqg==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/axios": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.11.0.tgz",
      "integrity": "sha512-1Lx3WLFQWm3ooKDYZD1eXmoGO9fxYQjrycfHFC8P0sCfQVXyROp0p9PFWBehewBOdCwHc+f/b8I0fMto5eSfwA==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.4",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs2": {
      "version": "0.4.14",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs2/-/babel-plugin-polyfill-corejs2-0.4.14.tgz",
      "integrity": "sha512-Co2Y9wX854ts6U8gAAPXfn0GmAyctHuK8n0Yhfjd6t30g7yvKjspvvOo9yG+z52PZRgFErt7Ka2pYnXCjLKEpg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.7",
        "@babel/helper-define-polyfill-provider": "^0.6.5",
        "semver": "^6.3.1"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs3": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.13.0.tgz",
      "integrity": "sha512-U+GNwMdSFgzVmfhNm8GJUX88AadB3uo9KpJqS3FaqNIPKgySuvMb+bHPsOmmuWyIcuqZj/pzt1RUIUZns4y2+A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.6.5",
        "core-js-compat": "^3.43.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-regenerator": {
      "version": "0.6.5",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-regenerator/-/babel-plugin-polyfill-regenerator-0.6.5.tgz",
      "integrity": "sha512-ISqQ2frbiNU9vIJkzg7dlPpznPZ4jOiUQ1uSmB0fEHeowtN3COYRsXr/xexn64NpU13P06jc/L5TgiJXOgrbEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.6.5"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.4",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.4.tgz",
      "integrity": "sha512-4jYpcjabC606xJ3kw2QwGEZKX0Aw7sgQdZCvIK9dhVSPh76BKo+C+btT1RRofH7B+8iNpEbgGNVWiLki5q93yg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001737",
        "electron-to-chromium": "^1.5.211",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelize": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/camelize/-/camelize-1.0.1.tgz",
      "integrity": "sha512-dU+Tx2fsypxTgtLoE36npi3UqcjSSMNYfkqgmoEhtZrraP5VWq0K7FkWVTYa8eMPtnU/G2txVsfdCJTn9uzpuQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001741",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001741.tgz",
      "integrity": "sha512-QGUGitqsc8ARjLdgAfxETDhRbJ0REsP6O3I96TAth/mVjh2cYzN2u+3AzPP3aVSm2FehEItaJw1xd+IGBXWeSw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/common-tags": {
      "version": "1.8.2",
      "resolved": "https://registry.npmjs.org/common-tags/-/common-tags-1.8.2.tgz",
      "integrity": "sha512-gk/Z852D2Wtb//0I+kRFNKKE9dIIVirjoqPoA1wJU+XePVXZfGeBpk45+A1rKO4Q43prqWBNY/MiIeRLbPWUaA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/core-js-compat": {
      "version": "3.45.1",
      "resolved": "https://registry.npmjs.org/core-js-compat/-/core-js-compat-3.45.1.tgz",
      "integrity": "sha512-tqTt5T4PzsMIZ430XGviK4vzYSoeNJ6CXODi6c/voxOT6IZqBht5/EKaSNnYiEjjRYxjVz7DQIsOsY0XNi8PIA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.25.3"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/crypto-random-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-2.0.0.tgz",
      "integrity": "sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/css-color-keywords": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/css-color-keywords/-/css-color-keywords-1.0.0.tgz",
      "integrity": "sha512-FyyrDHZKEjXDpNJYvVsV960FiqQyXc/LlYmsxl2BcdMb2WPx0OGRVgTg55rPSyLSNMqP52R9r8geSp7apN3Ofg==",
      "license": "ISC",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/css-to-react-native": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/css-to-react-native/-/css-to-react-native-3.2.0.tgz",
      "integrity": "sha512-e8RKaLXMOFii+02mOlqwjbD00KSEKqblnpO9e++1aXS1fPQOpS1YoqdVHBqPjHNoxeF2mimzVqawm2KCbEdtHQ==",
      "license": "MIT",
      "dependencies": {
        "camelize": "^1.0.0",
        "css-color-keywords": "^1.0.0",
        "postcss-value-parser": "^4.0.2"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/inspect-js"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/date-fns": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
      "integrity": "sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/kossnocorp"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js-light": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/dexie": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/dexie/-/dexie-4.2.0.tgz",
      "integrity": "sha512-OSeyyWOUetDy9oFWeddJgi83OnRA3hSFh3RrbltmPgqHszE9f24eUCVLI4mPg0ifsWk0lQTdnS+jyGNrPMvhDA==",
      "license": "Apache-2.0"
    },
    "node_modules/dexie-react-hooks": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/dexie-react-hooks/-/dexie-react-hooks-4.2.0.tgz",
      "integrity": "sha512-u7KqTX9JpBQK8+tEyA9X0yMGXlSCsbm5AU64N6gjvGk/IutYDpLBInMYEAEC83s3qhIvryFS+W+sqLZUBEvePQ==",
      "license": "Apache-2.0",
      "peerDependencies": {
        "@types/react": ">=16",
        "dexie": ">=4.2.0-alpha.1 <5.0.0",
        "react": ">=16"
      }
    },
    "node_modules/dom-helpers": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.8.7",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ejs": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/ejs/-/ejs-3.1.10.tgz",
      "integrity": "sha512-UeJmFfOrAQS8OJWPZ4qtgHyWExa088/MtK5UEyoJGFH67cDEXkZSviOiKRCZ4Xij0zxI3JECgYs3oKx+AizQBA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "jake": "^10.8.5"
      },
      "bin": {
        "ejs": "bin/cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.214",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.214.tgz",
      "integrity": "sha512-TpvUNdha+X3ybfU78NoQatKvQEm1oq3lf2QbnmCEdw+Bd9RuIAY+hJTvq1avzHM0f7EJfnH3vbCnbzKzisc/9Q==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/es-abstract": {
      "version": "1.24.0",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
      "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.2",
        "arraybuffer.prototype.slice": "^1.0.4",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "data-view-buffer": "^1.0.2",
        "data-view-byte-length": "^1.0.2",
        "data-view-byte-offset": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-set-tostringtag": "^2.1.0",
        "es-to-primitive": "^1.3.0",
        "function.prototype.name": "^1.1.8",
        "get-intrinsic": "^1.3.0",
        "get-proto": "^1.0.1",
        "get-symbol-description": "^1.1.0",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "internal-slot": "^1.1.0",
        "is-array-buffer": "^3.0.5",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.2",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.2.1",
        "is-set": "^2.0.3",
        "is-shared-array-buffer": "^1.0.4",
        "is-string": "^1.1.1",
        "is-typed-array": "^1.1.15",
        "is-weakref": "^1.1.1",
        "math-intrinsics": "^1.1.0",
        "object-inspect": "^1.13.4",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.7",
        "own-keys": "^1.0.1",
        "regexp.prototype.flags": "^1.5.4",
        "safe-array-concat": "^1.1.3",
        "safe-push-apply": "^1.0.0",
        "safe-regex-test": "^1.1.0",
        "set-proto": "^1.0.0",
        "stop-iteration-iterator": "^1.1.0",
        "string.prototype.trim": "^1.2.10",
        "string.prototype.trimend": "^1.0.9",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.3",
        "typed-array-byte-length": "^1.0.3",
        "typed-array-byte-offset": "^1.0.4",
        "typed-array-length": "^1.0.7",
        "unbox-primitive": "^1.1.0",
        "which-typed-array": "^1.1.19"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7",
        "is-date-object": "^1.0.5",
        "is-symbol": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/esbuild": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.21.5",
        "@esbuild/android-arm": "0.21.5",
        "@esbuild/android-arm64": "0.21.5",
        "@esbuild/android-x64": "0.21.5",
        "@esbuild/darwin-arm64": "0.21.5",
        "@esbuild/darwin-x64": "0.21.5",
        "@esbuild/freebsd-arm64": "0.21.5",
        "@esbuild/freebsd-x64": "0.21.5",
        "@esbuild/linux-arm": "0.21.5",
        "@esbuild/linux-arm64": "0.21.5",
        "@esbuild/linux-ia32": "0.21.5",
        "@esbuild/linux-loong64": "0.21.5",
        "@esbuild/linux-mips64el": "0.21.5",
        "@esbuild/linux-ppc64": "0.21.5",
        "@esbuild/linux-riscv64": "0.21.5",
        "@esbuild/linux-s390x": "0.21.5",
        "@esbuild/linux-x64": "0.21.5",
        "@esbuild/netbsd-x64": "0.21.5",
        "@esbuild/openbsd-x64": "0.21.5",
        "@esbuild/sunos-x64": "0.21.5",
        "@esbuild/win32-arm64": "0.21.5",
        "@esbuild/win32-ia32": "0.21.5",
        "@esbuild/win32-x64": "0.21.5"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.35.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.35.0.tgz",
      "integrity": "sha512-QePbBFMJFjgmlE+cXAlbHZbHpdFVS2E/6vzCy7aKlebddvl1vadiC4JFV5u/wqTkNUwEV8WrQi257jf5f06hrg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.8.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.21.0",
        "@eslint/config-helpers": "^0.3.1",
        "@eslint/core": "^0.15.2",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.35.0",
        "@eslint/plugin-kit": "^0.3.5",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.4.0",
        "eslint-visitor-keys": "^4.2.1",
        "espree": "^10.4.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.4.0.tgz",
      "integrity": "sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.4.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.4.0.tgz",
      "integrity": "sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.15.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estree-walker": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz",
      "integrity": "sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-equals": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/fast-equals/-/fast-equals-5.2.2.tgz",
      "integrity": "sha512-V7/RktU11J3I36Nwq2JnZEM7tNm17eBJz+u25qdxBZeCKiX6BkVSZQjwWIr+IobgnZy+ag73tTZgZi7tr0LrBw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.1.0.tgz",
      "integrity": "sha512-iPeeDKJSWf4IEOasVVrknXpaBV0IApz/gp7S2bb7Z4Lljbl2MGJRqInZiUrQwV16cpzw/D3S5j5Julj/gT52AA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fastify"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fastify"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/fdir": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
      "integrity": "sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/filelist": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/filelist/-/filelist-1.0.4.tgz",
      "integrity": "sha512-w1cEuf3S+DrLCQL7ET6kz+gmlJdbq9J7yXCSjK/OZCPA+qEN1WyF4ZAf0YYJa4/shHJra2t/d/r8SV4Ji+x+8Q==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "minimatch": "^5.0.1"
      }
    },
    "node_modules/filelist/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/filelist/node_modules/minimatch": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.11",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.11.tgz",
      "integrity": "sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/framer-motion": {
      "version": "12.23.12",
      "resolved": "https://registry.npmjs.org/framer-motion/-/framer-motion-12.23.12.tgz",
      "integrity": "sha512-6e78rdVtnBvlEVgu6eFEAgG9v3wLnYEboM8I5O5EXvfKC8gxGQB8wXJdhkMy10iVcn05jl6CNw7/HTsTCfwcWg==",
      "license": "MIT",
      "dependencies": {
        "motion-dom": "^12.23.12",
        "motion-utils": "^12.23.6",
        "tslib": "^2.4.0"
      },
      "peerDependencies": {
        "@emotion/is-prop-valid": "*",
        "react": "^18.0.0 || ^19.0.0",
        "react-dom": "^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/is-prop-valid": {
          "optional": true
        },
        "react": {
          "optional": true
        },
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "functions-have-names": "^1.2.3",
        "hasown": "^2.0.2",
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-own-enumerable-property-symbols": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/get-own-enumerable-property-symbols/-/get-own-enumerable-property-symbols-3.0.2.tgz",
      "integrity": "sha512-I0UBV/XOz1XkIJHEUDMZAbzCThU/H8DxmSfmdGcKPnVhu2VfFqr34jr9777IyaTYvxjedWhqVIilEDsCdP5G6g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/idb": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/idb/-/idb-7.1.1.tgz",
      "integrity": "sha512-gchesWBzyvGHRO9W8tzUWFDycow5gwjvFKfyV9FF32Y7F50yZMp7mP+T2mJIWFx49zicqyC4uefHM17o6xKIVQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-async-function": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "async-function": "^1.0.0",
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.0",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-module": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-module/-/is-module-1.0.0.tgz",
      "integrity": "sha512-51ypPSPCoTEIN9dy5Oy+h4pShgJmPCygKfyRCISBI+JoWT/2oJvK8QPxmwv7b/p239jXrm9M1mlQbyKJ5A152g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-obj": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-1.0.1.tgz",
      "integrity": "sha512-l4RyHgRqGN4Y3+9JHVrNqO+tN0rV5My76uW5/nuO4K1b6vw5G8d/cmFjP9tRfEsdhZNt0IFdZuK/c2Vr4Nb+Qg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-regexp": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-regexp/-/is-regexp-1.0.0.tgz",
      "integrity": "sha512-7zjFAPO4/gwyQAAgRRmqeEeyIICSdmCqa3tsVHMdBzaXXRiqopZL4Cyghg/XulGWrtABTpbnYYzzIRffLkP4oA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/jake": {
      "version": "10.9.4",
      "resolved": "https://registry.npmjs.org/jake/-/jake-10.9.4.tgz",
      "integrity": "sha512-wpHYzhxiVQL+IV05BLE2Xn34zW1S223hvjtqk0+gsPrwd/8JNLXJgZZM/iPFsYc1xyphF+6M6EvdE5E9MBGkDA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "async": "^3.2.6",
        "filelist": "^1.0.4",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "jake": "bin/cli.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==",
      "dev": true,
      "license": "(AFL-2.1 OR BSD-3-Clause)"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/jsonpointer": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/jsonpointer/-/jsonpointer-5.0.1.tgz",
      "integrity": "sha512-p/nXbhSEcu3pZRdkW1OfJhpsVtW1gd4Wa1fnQc9YLiTfAjn0312eMKimbdIQzuZl9aa9xUGaRlP9T/CJE/ditQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/jwt-decode": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jwt-decode/-/jwt-decode-4.0.0.tgz",
      "integrity": "sha512-+KJGIyHgkGuIq3IEBNftfhW/LfWhXUIY6OmyVWjliu5KH1y0fw7VQ8YndE2O4qZdMSd9SqbnC8GOcZEy0Om7sA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.debounce": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/lodash.debounce/-/lodash.debounce-4.0.8.tgz",
      "integrity": "sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.sortby": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/lodash.sortby/-/lodash.sortby-4.7.0.tgz",
      "integrity": "sha512-HDWXG8isMntAyRF5vZ7xKuEvOhT4AhlRt/3czTSjvGUxjYCBVRQY48ViDHyfYz9VIoBkW4TMGQNapx+l3RUwdA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/magic-string": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.25.9.tgz",
      "integrity": "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "sourcemap-codec": "^1.4.8"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/motion-dom": {
      "version": "12.23.12",
      "resolved": "https://registry.npmjs.org/motion-dom/-/motion-dom-12.23.12.tgz",
      "integrity": "sha512-RcR4fvMCTESQBD/uKQe49D5RUeDOokkGRmz4ceaJKDBgHYtZtntC/s2vLvY38gqGaytinij/yi3hMcWVcEF5Kw==",
      "license": "MIT",
      "dependencies": {
        "motion-utils": "^12.23.6"
      }
    },
    "node_modules/motion-utils": {
      "version": "12.23.6",
      "resolved": "https://registry.npmjs.org/motion-utils/-/motion-utils-12.23.6.tgz",
      "integrity": "sha512-eAWoPgr4eFEOFfg2WjIsMoqJTW6Z8MTUCgn/GZ3VRpClWBdnbjryiA3ZSNLyxCTmCQx4RmYX6jX1iWHbenUPNQ==",
      "license": "MIT"
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.20",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.20.tgz",
      "integrity": "sha512-7gK6zSXEH6neM212JgfYFXe+GmZQM+fia5SsusuBIUgnPheLFBmIPhtFoAQRj8/7wASYQnbDlHPVwY0BefoFgA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/own-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.6",
        "object-keys": "^1.1.1",
        "safe-push-apply": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/postcss": {
      "version": "8.4.49",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.49.tgz",
      "integrity": "sha512-OCVPnIObs4N29kxTjzLfUryOkvZEq+pf8jTF0lg8E7uETuWHA+v7j3c/xJmiqpX450191LlmZfUKkXxkTry7nA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.7",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "license": "MIT"
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/pretty-bytes": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/pretty-bytes/-/pretty-bytes-6.1.1.tgz",
      "integrity": "sha512-mQUvGU6aUFQ+rNvTIAcZuWGRT9a6f6Yrg9bHs4ImKF+HZCEK+plBvnAZYSIQztknZF2qnzNtr6F8s0+IuptdlQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/prop-types/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/randombytes": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz",
      "integrity": "sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "^5.1.0"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-datepicker": {
      "version": "8.7.0",
      "resolved": "https://registry.npmjs.org/react-datepicker/-/react-datepicker-8.7.0.tgz",
      "integrity": "sha512-r5OJbiLWc3YiVNy69Kau07/aVgVGsFVMA6+nlqCV7vyQ8q0FUOnJ+wAI4CgVxHejG3i5djAEiebrF8/Eip4rIw==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/react": "^0.27.15",
        "clsx": "^2.1.1",
        "date-fns": "^4.1.0"
      },
      "peerDependencies": {
        "react": "^16.9.0 || ^17 || ^18 || ^19 || ^19.0.0-rc",
        "react-dom": "^16.9.0 || ^17 || ^18 || ^19 || ^19.0.0-rc"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-icons": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/react-icons/-/react-icons-5.5.0.tgz",
      "integrity": "sha512-MEFcXdkP3dLo8uumGI5xN3lDFNsRtrjbOEKDLD7yv76v4wpnEq2Lt2qeHaQOr34I/wPN3s3+N08WkQ+CW37Xiw==",
      "license": "MIT",
      "peerDependencies": {
        "react": "*"
      }
    },
    "node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "license": "MIT"
    },
    "node_modules/react-loading-skeleton": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/react-loading-skeleton/-/react-loading-skeleton-3.5.0.tgz",
      "integrity": "sha512-gxxSyLbrEAdXTKgfbpBEFZCO/P153DnqSCQau2+o6lNy1jgMRr2MmRmOzMmyrwSaSYLRB8g7b0waYPmUjz7IhQ==",
      "license": "MIT",
      "peerDependencies": {
        "react": ">=16.8.0"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.1.tgz",
      "integrity": "sha512-X1m21aEmxGXqENEPG3T6u0Th7g0aS4ZmoNynhbs+Cn+q+QGTLt+d5IQ2bHAXKzKcxGJjxACpVbnYQSCRcfxHlQ==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.1.tgz",
      "integrity": "sha512-llKsgOkZdbPU1Eg3zK8lCn+sjD9wMRZZPuzmdWWX5SUs8OFkN5HnFVC0u5KMeMaC9aoancFI/KoLuKPqN+hxHw==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0",
        "react-router": "6.30.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/react-smooth": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/react-smooth/-/react-smooth-4.0.4.tgz",
      "integrity": "sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==",
      "license": "MIT",
      "dependencies": {
        "fast-equals": "^5.0.1",
        "prop-types": "^15.8.1",
        "react-transition-group": "^4.4.5"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/react-to-print": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/react-to-print/-/react-to-print-3.1.1.tgz",
      "integrity": "sha512-N0MUMhpl8nkGri13BjP7zusj3B/j+1eMOTt8N8PYuhBYGzA4PqTXqcihJ9cZw996dvhV6mBdwafIQCg3Ap5bKg==",
      "license": "MIT",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ~19"
      }
    },
    "node_modules/react-toastify": {
      "version": "11.0.5",
      "resolved": "https://registry.npmjs.org/react-toastify/-/react-toastify-11.0.5.tgz",
      "integrity": "sha512-EpqHBGvnSTtHYhCPLxML05NLY2ZX0JURbAdNYa6BUkk+amz4wbKBQvoKQAB0ardvSarUBuY4Q4s1sluAzZwkmA==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.1.1"
      },
      "peerDependencies": {
        "react": "^18 || ^19",
        "react-dom": "^18 || ^19"
      }
    },
    "node_modules/react-transition-group": {
      "version": "4.4.5",
      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/runtime": "^7.5.5",
        "dom-helpers": "^5.0.1",
        "loose-envify": "^1.4.0",
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": ">=16.6.0",
        "react-dom": ">=16.6.0"
      }
    },
    "node_modules/recharts": {
      "version": "2.15.4",
      "resolved": "https://registry.npmjs.org/recharts/-/recharts-2.15.4.tgz",
      "integrity": "sha512-UT/q6fwS3c1dHbXv2uFgYJ9BMFHu3fwnd7AYZaEQhXuYQ4hgsxLvsUXzGdKeZrW5xopzDCvuA2N41WJ88I7zIw==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.0.0",
        "eventemitter3": "^4.0.1",
        "lodash": "^4.17.21",
        "react-is": "^18.3.1",
        "react-smooth": "^4.0.4",
        "recharts-scale": "^0.4.4",
        "tiny-invariant": "^1.3.1",
        "victory-vendor": "^36.6.8"
      },
      "engines": {
        "node": ">=14"
      },
      "peerDependencies": {
        "react": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/recharts-scale": {
      "version": "0.4.5",
      "resolved": "https://registry.npmjs.org/recharts-scale/-/recharts-scale-0.4.5.tgz",
      "integrity": "sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==",
      "license": "MIT",
      "dependencies": {
        "decimal.js-light": "^2.4.1"
      }
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.7",
        "get-proto": "^1.0.1",
        "which-builtin-type": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regenerate": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/regenerate/-/regenerate-1.4.2.tgz",
      "integrity": "sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/regenerate-unicode-properties": {
      "version": "10.2.0",
      "resolved": "https://registry.npmjs.org/regenerate-unicode-properties/-/regenerate-unicode-properties-10.2.0.tgz",
      "integrity": "sha512-DqHn3DwbmmPVzeKj9woBadqmXxLvQoQIwu7nopMc72ztvxVmVk2SBhSnx67zuye5TP+lJsb/TBQsjLKhnDf3MA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "regenerate": "^1.4.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexpu-core": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/regexpu-core/-/regexpu-core-6.2.0.tgz",
      "integrity": "sha512-H66BPQMrv+V16t8xtmq+UC0CBpiTBA60V8ibS1QVReIp8T1z8hwFxqcGzm9K6lgsN7sB5edVH8a+ze6Fqm4weA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "regenerate": "^1.4.2",
        "regenerate-unicode-properties": "^10.2.0",
        "regjsgen": "^0.8.0",
        "regjsparser": "^0.12.0",
        "unicode-match-property-ecmascript": "^2.0.0",
        "unicode-match-property-value-ecmascript": "^2.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/regjsgen": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/regjsgen/-/regjsgen-0.8.0.tgz",
      "integrity": "sha512-RvwtGe3d7LvWiDQXeQw8p5asZUmfU1G/l6WbUXeHta7Y2PEIvBTwH6E2EfmYUK8pxcxEdEmaomqyp0vZZ7C+3Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/regjsparser": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/regjsparser/-/regjsparser-0.12.0.tgz",
      "integrity": "sha512-cnE+y8bz4NhMjISKbgeVJtqNbtf5QpjZP+Bslo+UqkIt9QPnX9q095eiRRASJG1/tz6dlNr6Z5NsBiWYokp6EQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "jsesc": "~3.0.2"
      },
      "bin": {
        "regjsparser": "bin/parser"
      }
    },
    "node_modules/regjsparser/node_modules/jsesc": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.0.2.tgz",
      "integrity": "sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.10",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.16.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/rollup": {
      "version": "4.50.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.50.0.tgz",
      "integrity": "sha512-/Zl4D8zPifNmyGzJS+3kVoyXeDeT/GrsJM94sACNg9RtUE0hrHa1bNPtRSrfHTMH5HjRzce6K7rlTh3Khiw+pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.50.0",
        "@rollup/rollup-android-arm64": "4.50.0",
        "@rollup/rollup-darwin-arm64": "4.50.0",
        "@rollup/rollup-darwin-x64": "4.50.0",
        "@rollup/rollup-freebsd-arm64": "4.50.0",
        "@rollup/rollup-freebsd-x64": "4.50.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.50.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.50.0",
        "@rollup/rollup-linux-arm64-gnu": "4.50.0",
        "@rollup/rollup-linux-arm64-musl": "4.50.0",
        "@rollup/rollup-linux-loongarch64-gnu": "4.50.0",
        "@rollup/rollup-linux-ppc64-gnu": "4.50.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.50.0",
        "@rollup/rollup-linux-riscv64-musl": "4.50.0",
        "@rollup/rollup-linux-s390x-gnu": "4.50.0",
        "@rollup/rollup-linux-x64-gnu": "4.50.0",
        "@rollup/rollup-linux-x64-musl": "4.50.0",
        "@rollup/rollup-openharmony-arm64": "4.50.0",
        "@rollup/rollup-win32-arm64-msvc": "4.50.0",
        "@rollup/rollup-win32-ia32-msvc": "4.50.0",
        "@rollup/rollup-win32-x64-msvc": "4.50.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "has-symbols": "^1.1.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-push-apply": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/serialize-javascript": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-6.0.2.tgz",
      "integrity": "sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "randombytes": "^2.1.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-proto": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/shallowequal": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/shallowequal/-/shallowequal-1.1.0.tgz",
      "integrity": "sha512-y0m1JoUZSlPAjXVtPPW70aZWfIL/dSP7AFkRnniLCrK/8MDKog3TySTBmckD+RObVxH0v4Tox67+F14PdED2oQ==",
      "license": "MIT"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/smob": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/smob/-/smob-1.5.0.tgz",
      "integrity": "sha512-g6T+p7QO8npa+/hNx9ohv1E5pVCmWrVCUzUXJyLdMmftX6ER0oiWY/w9knEonLpnOp6b6FenKnMfR8gqwWdwig==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/source-map": {
      "version": "0.8.0-beta.0",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.8.0-beta.0.tgz",
      "integrity": "sha512-2ymg6oRBpebeZi9UUNsgQ89bhx01TcTkmNTGnNO88imTmbSgy4nfujrgVEFKWpMTEGA11EDkTt7mqObTPdigIA==",
      "deprecated": "The work that was done in this beta branch won't be included in future versions",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "whatwg-url": "^7.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/source-map-support/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/sourcemap-codec": {
      "version": "1.4.8",
      "resolved": "https://registry.npmjs.org/sourcemap-codec/-/sourcemap-codec-1.4.8.tgz",
      "integrity": "sha512-9NykojV5Uih4lgo5So5dtw+f0JgJX30KCNI8gwhz2J9A15wD0Ml6tjHKwf6fTSa6fAdVBdZeNOs9eJ71qCk8vA==",
      "deprecated": "Please use @jridgewell/sourcemap-codec instead",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string.prototype.matchall": {
      "version": "4.0.12",
      "resolved": "https://registry.npmjs.org/string.prototype.matchall/-/string.prototype.matchall-4.0.12.tgz",
      "integrity": "sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "regexp.prototype.flags": "^1.5.3",
        "set-function-name": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-data-property": "^1.1.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-object-atoms": "^1.0.0",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/stringify-object": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/stringify-object/-/stringify-object-3.3.0.tgz",
      "integrity": "sha512-rHqiFh1elqCQ9WPLIC8I0Q/g/wj5J1eMkyoiD6eoQApWHP0FtlK7rqnhmabL5VUY9JQCcqwwvlOaSuutekgyrw==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "get-own-enumerable-property-symbols": "^3.0.0",
        "is-obj": "^1.0.1",
        "is-regexp": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-comments/-/strip-comments-2.0.1.tgz",
      "integrity": "sha512-ZprKx+bBLXv067WTCALv8SSz5l2+XhpYCsVtSqlMnkAXMWDq+/ekVbl1ghqP9rUHTzv6sm/DwCOiYutU/yp1fw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/styled-components": {
      "version": "6.1.19",
      "resolved": "https://registry.npmjs.org/styled-components/-/styled-components-6.1.19.tgz",
      "integrity": "sha512-1v/e3Dl1BknC37cXMhwGomhO8AkYmN41CqyX9xhUDxry1ns3BFQy2lLDRQXJRdVVWB9OHemv/53xaStimvWyuA==",
      "license": "MIT",
      "dependencies": {
        "@emotion/is-prop-valid": "1.2.2",
        "@emotion/unitless": "0.8.1",
        "@types/stylis": "4.2.5",
        "css-to-react-native": "3.2.0",
        "csstype": "3.1.3",
        "postcss": "8.4.49",
        "shallowequal": "1.1.0",
        "stylis": "4.3.2",
        "tslib": "2.6.2"
      },
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/styled-components"
      },
      "peerDependencies": {
        "react": ">= 16.8.0",
        "react-dom": ">= 16.8.0"
      }
    },
    "node_modules/stylis": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.3.2.tgz",
      "integrity": "sha512-bhtUjWd/z6ltJiQwg0dUfxEJ+W+jdqQd8TbWLWyeIJHlnsqmGLRFFd8e5mA0AZi/zx90smXRlN66YMTcaSFifg==",
      "license": "MIT"
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tabbable": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/tabbable/-/tabbable-6.2.0.tgz",
      "integrity": "sha512-Cat63mxsVJlzYvN51JmVXIgNoUokrIaT2zLclCXjRd8boZ0004U4KCs/sToJ75C6sdlByWxpYnb5Boif1VSFew==",
      "license": "MIT"
    },
    "node_modules/temp-dir": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-2.0.0.tgz",
      "integrity": "sha512-aoBAniQmmwtcKp/7BzsH8Cxzv8OL736p7v1ihGb5e9DJ9kTwGWHrQrVB5+lfVDzfGrdRzXch+ig7LHaY1JTOrg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tempy": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tempy/-/tempy-0.6.0.tgz",
      "integrity": "sha512-G13vtMYPT/J8A4X2SjdtBTphZlrp1gKv6hZiOjw14RCWg6GbHuQBGtjlx75xLbYV/wEc0D7G5K4rxKP/cXk8Bw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-stream": "^2.0.0",
        "temp-dir": "^2.0.0",
        "type-fest": "^0.16.0",
        "unique-string": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/terser": {
      "version": "5.44.0",
      "resolved": "https://registry.npmjs.org/terser/-/terser-5.44.0.tgz",
      "integrity": "sha512-nIVck8DK+GM/0Frwd+nIhZ84pR/BX7rmXMfYwyg+Sri5oGVE99/E3KvXqpC2xHFxyqXyGHTKBSioxxplrO4I4w==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "@jridgewell/source-map": "^0.3.3",
        "acorn": "^8.15.0",
        "commander": "^2.20.0",
        "source-map-support": "~0.5.20"
      },
      "bin": {
        "terser": "bin/terser"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
      "license": "MIT"
    },
    "node_modules/tinyglobby": {
      "version": "0.2.14",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.14.tgz",
      "integrity": "sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/tr46": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-1.0.1.tgz",
      "integrity": "sha512-dTpowEjclQ7Kgx5SdBkqRzVhERQXov8/l9Ft9dVM9fmg0W0KQSVaXX9T4i6twCPNtYiZM53lpSSUAwJbFPOHxA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/tslib": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
      "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==",
      "license": "0BSD"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-fest": {
      "version": "0.16.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.16.0.tgz",
      "integrity": "sha512-eaBzG6MxNzEn9kiwvtre90cXaNLkmadMWa1zQMs3XORCXNbsH/OewwbxC5ia9dCxIxnTAsSxXJaa/p5y8DlvJg==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.15",
        "reflect.getprototypeof": "^1.0.9"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0",
        "reflect.getprototypeof": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/unbox-primitive": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.1.0",
        "which-boxed-primitive": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/unicode-canonical-property-names-ecmascript": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/unicode-canonical-property-names-ecmascript/-/unicode-canonical-property-names-ecmascript-2.0.1.tgz",
      "integrity": "sha512-dA8WbNeb2a6oQzAQ55YlT5vQAWGV9WXOsi3SskE3bcCdM0P4SDd+24zS/OCacdRq5BkdsRj9q3Pg6YyQoxIGqg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-ecmascript": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unicode-match-property-ecmascript/-/unicode-match-property-ecmascript-2.0.0.tgz",
      "integrity": "sha512-5kaZCrbp5mmbz5ulBkDkbY0SsPOjKqVS35VpL9ulMPfSl0J0Xsm+9Evphv9CoIZFwre7aJoa94AY6seMKGVN5Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "unicode-canonical-property-names-ecmascript": "^2.0.0",
        "unicode-property-aliases-ecmascript": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-value-ecmascript": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/unicode-match-property-value-ecmascript/-/unicode-match-property-value-ecmascript-2.2.0.tgz",
      "integrity": "sha512-4IehN3V/+kkr5YeSSDDQG8QLqO26XpL2XP3GQtqwlT/QYSECAwFztxVHjlbh0+gjJ3XmNLS0zDsbgs9jWKExLg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-property-aliases-ecmascript": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/unicode-property-aliases-ecmascript/-/unicode-property-aliases-ecmascript-2.1.0.tgz",
      "integrity": "sha512-6t3foTQI9qne+OZoVQB/8x8rk2k1eVy1gRXhV3oFQ5T6R1dqQ1xtin3XqSlx3+ATBkliTaR/hHyJBm+LVPNM8w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unique-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-2.0.0.tgz",
      "integrity": "sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "crypto-random-string": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/upath": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/upath/-/upath-1.2.0.tgz",
      "integrity": "sha512-aZwGpamFO61g3OlfT7OQCHqhGnW43ieH9WZeP7QxN/G/jS4jfqUkZxoryvJgVPEcrl5NL/ggHsSmLMHuH64Lhg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4",
        "yarn": "*"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/victory-vendor": {
      "version": "36.9.2",
      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-36.9.2.tgz",
      "integrity": "sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==",
      "license": "MIT AND ISC",
      "dependencies": {
        "@types/d3-array": "^3.0.3",
        "@types/d3-ease": "^3.0.0",
        "@types/d3-interpolate": "^3.0.1",
        "@types/d3-scale": "^4.0.2",
        "@types/d3-shape": "^3.1.0",
        "@types/d3-time": "^3.0.0",
        "@types/d3-timer": "^3.0.0",
        "d3-array": "^3.1.6",
        "d3-ease": "^3.0.1",
        "d3-interpolate": "^3.0.1",
        "d3-scale": "^4.0.2",
        "d3-shape": "^3.1.0",
        "d3-time": "^3.0.0",
        "d3-timer": "^3.0.1"
      }
    },
    "node_modules/vite": {
      "version": "5.4.19",
      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.19.tgz",
      "integrity": "sha512-qO3aKv3HoQC8QKiNSTuUM1l9o/XX3+c+VTgLHbJWHZGeTPVAg2XwazI9UWzoxjIJCGCV2zU60uqMzjeLZuULqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.21.3",
        "postcss": "^8.4.43",
        "rollup": "^4.20.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || >=20.0.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/vite-plugin-pwa": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/vite-plugin-pwa/-/vite-plugin-pwa-1.0.3.tgz",
      "integrity": "sha512-/OpqIpUldALGxcsEnv/ekQiQ5xHkQ53wcoN5ewX4jiIDNGs3W+eNcI1WYZeyOLmzoEjg09D7aX0O89YGjen1aw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.3.6",
        "pretty-bytes": "^6.1.1",
        "tinyglobby": "^0.2.10",
        "workbox-build": "^7.3.0",
        "workbox-window": "^7.3.0"
      },
      "engines": {
        "node": ">=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/antfu"
      },
      "peerDependencies": {
        "@vite-pwa/assets-generator": "^1.0.0",
        "vite": "^3.1.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0",
        "workbox-build": "^7.3.0",
        "workbox-window": "^7.3.0"
      },
      "peerDependenciesMeta": {
        "@vite-pwa/assets-generator": {
          "optional": true
        }
      }
    },
    "node_modules/webidl-conversions": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-4.0.2.tgz",
      "integrity": "sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==",
      "dev": true,
      "license": "BSD-2-Clause"
    },
    "node_modules/whatwg-url": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-7.1.0.tgz",
      "integrity": "sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "lodash.sortby": "^4.7.0",
        "tr46": "^1.0.1",
        "webidl-conversions": "^4.0.2"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.1.0",
        "is-finalizationregistry": "^1.1.0",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.2.1",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.1.0",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/workbox-background-sync": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-background-sync/-/workbox-background-sync-7.3.0.tgz",
      "integrity": "sha512-PCSk3eK7Mxeuyatb22pcSx9dlgWNv3+M8PqPaYDokks8Y5/FX4soaOqj3yhAZr5k6Q5JWTOMYgaJBpbw11G9Eg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "idb": "^7.0.1",
        "workbox-core": "7.3.0"
      }
    },
    "node_modules/workbox-broadcast-update": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-broadcast-update/-/workbox-broadcast-update-7.3.0.tgz",
      "integrity": "sha512-T9/F5VEdJVhwmrIAE+E/kq5at2OY6+OXXgOWQevnubal6sO92Gjo24v6dCVwQiclAF5NS3hlmsifRrpQzZCdUA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "workbox-core": "7.3.0"
      }
    },
    "node_modules/workbox-build": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-build/-/workbox-build-7.3.0.tgz",
      "integrity": "sha512-JGL6vZTPlxnlqZRhR/K/msqg3wKP+m0wfEUVosK7gsYzSgeIxvZLi1ViJJzVL7CEeI8r7rGFV973RiEqkP3lWQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@apideck/better-ajv-errors": "^0.3.1",
        "@babel/core": "^7.24.4",
        "@babel/preset-env": "^7.11.0",
        "@babel/runtime": "^7.11.2",
        "@rollup/plugin-babel": "^5.2.0",
        "@rollup/plugin-node-resolve": "^15.2.3",
        "@rollup/plugin-replace": "^2.4.1",
        "@rollup/plugin-terser": "^0.4.3",
        "@surma/rollup-plugin-off-main-thread": "^2.2.3",
        "ajv": "^8.6.0",
        "common-tags": "^1.8.0",
        "fast-json-stable-stringify": "^2.1.0",
        "fs-extra": "^9.0.1",
        "glob": "^7.1.6",
        "lodash": "^4.17.20",
        "pretty-bytes": "^5.3.0",
        "rollup": "^2.43.1",
        "source-map": "^0.8.0-beta.0",
        "stringify-object": "^3.3.0",
        "strip-comments": "^2.0.1",
        "tempy": "^0.6.0",
        "upath": "^1.2.0",
        "workbox-background-sync": "7.3.0",
        "workbox-broadcast-update": "7.3.0",
        "workbox-cacheable-response": "7.3.0",
        "workbox-core": "7.3.0",
        "workbox-expiration": "7.3.0",
        "workbox-google-analytics": "7.3.0",
        "workbox-navigation-preload": "7.3.0",
        "workbox-precaching": "7.3.0",
        "workbox-range-requests": "7.3.0",
        "workbox-recipes": "7.3.0",
        "workbox-routing": "7.3.0",
        "workbox-strategies": "7.3.0",
        "workbox-streams": "7.3.0",
        "workbox-sw": "7.3.0",
        "workbox-window": "7.3.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/workbox-build/node_modules/@apideck/better-ajv-errors": {
      "version": "0.3.6",
      "resolved": "https://registry.npmjs.org/@apideck/better-ajv-errors/-/better-ajv-errors-0.3.6.tgz",
      "integrity": "sha512-P+ZygBLZtkp0qqOAJJVX4oX/sFo5JR3eBWwwuqHHhK0GIgQOKWrAfiAaWX0aArHkRWHMuggFEgAZNxVPwPZYaA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-schema": "^0.4.0",
        "jsonpointer": "^5.0.0",
        "leven": "^3.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "ajv": ">=8"
      }
    },
    "node_modules/workbox-build/node_modules/@rollup/plugin-babel": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-5.3.1.tgz",
      "integrity": "sha512-WFfdLWU/xVWKeRQnKmIAQULUI7Il0gZnBIH/ZFO069wYIfPu+8zrfp/KMW0atmELoRDq8FbiP3VCss9MhCut7Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.10.4",
        "@rollup/pluginutils": "^3.1.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0",
        "@types/babel__core": "^7.1.9",
        "rollup": "^1.20.0||^2.0.0"
      },
      "peerDependenciesMeta": {
        "@types/babel__core": {
          "optional": true
        }
      }
    },
    "node_modules/workbox-build/node_modules/@rollup/plugin-replace": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-replace/-/plugin-replace-2.4.2.tgz",
      "integrity": "sha512-IGcu+cydlUMZ5En85jxHH4qj2hta/11BHq95iHEyb2sbgiN0eCdzvUcHw5gt9pBL5lTi4JDYJ1acCoMGpTvEZg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^3.1.0",
        "magic-string": "^0.25.7"
      },
      "peerDependencies": {
        "rollup": "^1.20.0 || ^2.0.0"
      }
    },
    "node_modules/workbox-build/node_modules/@rollup/pluginutils": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-3.1.0.tgz",
      "integrity": "sha512-GksZ6pr6TpIjHm8h9lSQ8pi8BE9VeubNT0OMJ3B5uZJ8pz73NPiqOtCog/x2/QzM1ENChPKxMDhiQuRHsqc+lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "0.0.39",
        "estree-walker": "^1.0.1",
        "picomatch": "^2.2.2"
      },
      "engines": {
        "node": ">= 8.0.0"
      },
      "peerDependencies": {
        "rollup": "^1.20.0||^2.0.0"
      }
    },
    "node_modules/workbox-build/node_modules/@types/estree": {
      "version": "0.0.39",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-0.0.39.tgz",
      "integrity": "sha512-EYNwp3bU+98cpU4lAWYYL7Zz+2gryWH1qbdDTidVd6hkiR6weksdbMadyXKXNPEkQFhXM+hVO9ZygomHXp+AIw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/workbox-build/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/workbox-build/node_modules/estree-walker": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-1.0.1.tgz",
      "integrity": "sha512-1fMXF3YP4pZZVozF8j/ZLfvnR8NSIljt56UhbZ5PeeDmmGHpgpdwQt7ITlGvYaQukCvuBRMLEiKiYC+oeIg4cg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/workbox-build/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/workbox-build/node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/workbox-build/node_modules/pretty-bytes": {
      "version": "5.6.0",
      "resolved": "https://registry.npmjs.org/pretty-bytes/-/pretty-bytes-5.6.0.tgz",
      "integrity": "sha512-FFw039TmrBqFK8ma/7OL3sDz/VytdtJr044/QUJtH0wK9lb9jLq9tJyIxUwtQJHwar2BqtiA4iCWSwo9JLkzFg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/workbox-build/node_modules/rollup": {
      "version": "2.79.2",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-2.79.2.tgz",
      "integrity": "sha512-fS6iqSPZDs3dr/y7Od6y5nha8dW1YnbgtsyotCVvoFGKbERG++CVRFv1meyGDE1SNItQA8BrnCw7ScdAhRJ3XQ==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/workbox-cacheable-response": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-cacheable-response/-/workbox-cacheable-response-7.3.0.tgz",
      "integrity": "sha512-eAFERIg6J2LuyELhLlmeRcJFa5e16Mj8kL2yCDbhWE+HUun9skRQrGIFVUagqWj4DMaaPSMWfAolM7XZZxNmxA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "workbox-core": "7.3.0"
      }
    },
    "node_modules/workbox-core": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-core/-/workbox-core-7.3.0.tgz",
      "integrity": "sha512-Z+mYrErfh4t3zi7NVTvOuACB0A/jA3bgxUN3PwtAVHvfEsZxV9Iju580VEETug3zYJRc0Dmii/aixI/Uxj8fmw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/workbox-expiration": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-expiration/-/workbox-expiration-7.3.0.tgz",
      "integrity": "sha512-lpnSSLp2BM+K6bgFCWc5bS1LR5pAwDWbcKt1iL87/eTSJRdLdAwGQznZE+1czLgn/X05YChsrEegTNxjM067vQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "idb": "^7.0.1",
        "workbox-core": "7.3.0"
      }
    },
    "node_modules/workbox-google-analytics": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-google-analytics/-/workbox-google-analytics-7.3.0.tgz",
      "integrity": "sha512-ii/tSfFdhjLHZ2BrYgFNTrb/yk04pw2hasgbM70jpZfLk0vdJAXgaiMAWsoE+wfJDNWoZmBYY0hMVI0v5wWDbg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "workbox-background-sync": "7.3.0",
        "workbox-core": "7.3.0",
        "workbox-routing": "7.3.0",
        "workbox-strategies": "7.3.0"
      }
    },
    "node_modules/workbox-navigation-preload": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-navigation-preload/-/workbox-navigation-preload-7.3.0.tgz",
      "integrity": "sha512-fTJzogmFaTv4bShZ6aA7Bfj4Cewaq5rp30qcxl2iYM45YD79rKIhvzNHiFj1P+u5ZZldroqhASXwwoyusnr2cg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "workbox-core": "7.3.0"
      }
    },
    "node_modules/workbox-precaching": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-precaching/-/workbox-precaching-7.3.0.tgz",
      "integrity": "sha512-ckp/3t0msgXclVAYaNndAGeAoWQUv7Rwc4fdhWL69CCAb2UHo3Cef0KIUctqfQj1p8h6aGyz3w8Cy3Ihq9OmIw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "workbox-core": "7.3.0",
        "workbox-routing": "7.3.0",
        "workbox-strategies": "7.3.0"
      }
    },
    "node_modules/workbox-range-requests": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-range-requests/-/workbox-range-requests-7.3.0.tgz",
      "integrity": "sha512-EyFmM1KpDzzAouNF3+EWa15yDEenwxoeXu9bgxOEYnFfCxns7eAxA9WSSaVd8kujFFt3eIbShNqa4hLQNFvmVQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "workbox-core": "7.3.0"
      }
    },
    "node_modules/workbox-recipes": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-recipes/-/workbox-recipes-7.3.0.tgz",
      "integrity": "sha512-BJro/MpuW35I/zjZQBcoxsctgeB+kyb2JAP5EB3EYzePg8wDGoQuUdyYQS+CheTb+GhqJeWmVs3QxLI8EBP1sg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "workbox-cacheable-response": "7.3.0",
        "workbox-core": "7.3.0",
        "workbox-expiration": "7.3.0",
        "workbox-precaching": "7.3.0",
        "workbox-routing": "7.3.0",
        "workbox-strategies": "7.3.0"
      }
    },
    "node_modules/workbox-routing": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-routing/-/workbox-routing-7.3.0.tgz",
      "integrity": "sha512-ZUlysUVn5ZUzMOmQN3bqu+gK98vNfgX/gSTZ127izJg/pMMy4LryAthnYtjuqcjkN4HEAx1mdgxNiKJMZQM76A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "workbox-core": "7.3.0"
      }
    },
    "node_modules/workbox-strategies": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-strategies/-/workbox-strategies-7.3.0.tgz",
      "integrity": "sha512-tmZydug+qzDFATwX7QiEL5Hdf7FrkhjaF9db1CbB39sDmEZJg3l9ayDvPxy8Y18C3Y66Nrr9kkN1f/RlkDgllg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "workbox-core": "7.3.0"
      }
    },
    "node_modules/workbox-streams": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-streams/-/workbox-streams-7.3.0.tgz",
      "integrity": "sha512-SZnXucyg8x2Y61VGtDjKPO5EgPUG5NDn/v86WYHX+9ZqvAsGOytP0Jxp1bl663YUuMoXSAtsGLL+byHzEuMRpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "workbox-core": "7.3.0",
        "workbox-routing": "7.3.0"
      }
    },
    "node_modules/workbox-sw": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-sw/-/workbox-sw-7.3.0.tgz",
      "integrity": "sha512-aCUyoAZU9IZtH05mn0ACUpyHzPs0lMeJimAYkQkBsOWiqaJLgusfDCR+yllkPkFRxWpZKF8vSvgHYeG7LwhlmA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/workbox-window": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/workbox-window/-/workbox-window-7.3.0.tgz",
      "integrity": "sha512-qW8PDy16OV1UBaUNGlTVcepzrlzyzNW/ZJvFQQs2j2TzGsg6IKjcpZC1RSquqQnTOafl5pCj5bGfAHlCjOOjdA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/trusted-types": "^2.0.2",
        "workbox-core": "7.3.0"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}


===== frontend\package.json =====
{
  "name": "smart-pos",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "format": "prettier --write ."
  },
  "dependencies": {
    "axios": "^1.7.7",
    "date-fns": "^4.1.0",
    "dexie": "^4.2.0",
    "dexie-react-hooks": "^4.2.0",
    "framer-motion": "^12.23.12",
    "jwt-decode": "^4.0.0",
    "react": "^18.3.1",
    "react-datepicker": "^8.7.0",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "react-loading-skeleton": "^3.5.0",
    "react-router-dom": "^6.27.0",
    "react-to-print": "^3.1.1",
    "react-toastify": "^11.0.5",
    "recharts": "^2.13.0",
    "styled-components": "^6.1.13"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.3.2",
    "eslint": "^9.12.0",
    "vite": "^5.4.8",
    "vite-plugin-pwa": "^1.0.3"
  }
}


===== frontend\vite.config.js =====
// frontend/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { VitePWA } from 'vite-plugin-pwa';
import path from 'path';

export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      registerType: 'autoUpdate',
      includeAssets: ['favicon.ico', 'apple-touch-icon.png', 'masked-icon.svg'],
      manifest: {
        name: 'Smart POS',
        short_name: 'SmartPOS',
        description: 'Aplikasi Point of Sale Modern',
        theme_color: '#ffffff',
        icons: [
          { src: 'pwa-192x192.png', sizes: '192x192', type: 'image/png' },
          { src: 'pwa-512x512.png', sizes: '512x512', type: 'image/png' }
        ]
      }
    })
  ],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  server: {
    port: 5173,
    hmr: {
      overlay: true
    }
  }
});

===== frontend\src\App.jsx =====
// frontend/src/App.jsx

import React, { useContext, useEffect, useState } from 'react';
import { BrowserRouter, Routes, Route, Navigate, useLocation, useNavigate } from 'react-router-dom';
import { createGlobalStyle } from 'styled-components';
import { SkeletonTheme } from 'react-loading-skeleton';
import 'react-toastify/dist/ReactToastify.css';
import { ToastContainer } from 'react-toastify';
import 'react-loading-skeleton/dist/skeleton.css';
import styled from 'styled-components';

// Context
import { ThemeProvider, ThemeContext } from './context/ThemeContext';
import { BusinessProvider } from './context/BusinessContext';
import { ShiftProvider } from './context/ShiftContext';

// Pages
import LoginPage from './pages/LoginPage';
import PosPage from './pages/PosPage';
import DashboardPage from './pages/Dashboard/DashboardPage';
import ProductsPage from './pages/ProductsPage';
import HistoryPage from './pages/HistoryPage';
import UsersPage from './pages/UsersPage';
import RegisterPage from './pages/RegisterPage';
import SettingsPage from './pages/SettingsPage';
import CategoryPage from './pages/CategoryPage';
import AppPasswordTutorialPage from './pages/AppPasswordTutorialPage';
import SupplierPage from './pages/SupplierPage';
import CustomerPage from './pages/CustomerPage';
import ProductFormPage from './pages/ProductFormPage';
import ExpensesPage from './pages/ExpensesPage';
import ReceiveStockPage from './pages/ReceiveStockPage';
import QuickActionsPage from './pages/QuickActionsPage';
import TargetPage from './pages/TargetPage';
import PromotionsPage from './pages/PromotionsPage';
import PromotionFormPage from './pages/PromotionFormPage';
import StockAdjustmentPage from './pages/StockAdjustmentPage';
import ReportsPage from './pages/ReportsPage';
import CustomerDetailPage from './pages/CustomerDetailPage';
import ShiftHistoryPage from './pages/ShiftHistoryPage';
import ForgotPasswordPage from './pages/ForgotPasswordPage';
import ResetPasswordPage from './pages/ResetPasswordPage';
import ProductProfitabilityReport from './pages/ProductProfitabilityReport';
import PurchaseOrdersPage from './pages/PurchaseOrdersPage';
import PurchaseOrderForm from './pages/PurchaseOrderForm';
import PurchaseOrderDetailPage from './pages/PurchaseOrderDetailPage';
import RawMaterialsPage from './pages/RawMaterialsPage';
import RolesPage from './pages/RolesPage';
import AdminRewardsPage from './pages/AdminRewardsPage';

// Components
import ProtectedRoute from './components/ProtectedRoute';
import AdminRoute from './components/AdminRoute';
import Layout from './components/Layout';
import SyncManager from './components/SyncManager';

const GlobalStyle = createGlobalStyle`
    :root {
        --font-sans: 'Poppins', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        --primary-color: #8E44AD;
        --primary-hover: #9B59B6;
        --primary-dark: #7D3C98;
        --red-color: #E74C3C;
        --green-color: #2ECC71;
        --orange-color: #F39C12;
        --blue-color: #3498DB;
        --orange-text: #D35400; --orange-bg: #FDEBD0;
        --green-text: #21618C; --green-bg: #D4E6F1;
        --red-text: #922B21; --red-bg: #FDEDEC;
        --grey-text: #566573; --grey-bg: #EAEDED;
    }
    body {
        --bg-main: #F4F7FC;
        --bg-surface: #FFFFFF;
        --border-color: #EAECEF;
        --text-primary: #2C3E50;
        --text-secondary: #808B96;
        --text-placeholder: #ABB2B9;
    }
    body[data-theme='dark'] {
        --bg-main: #171A21;
        --bg-surface: #232834;
        --border-color: #3A4151;
        --text-primary: #FDFEFE;
        --text-secondary: #A6ACAF;
        --text-placeholder: #797D7F;
    }
    * { box-sizing: border-box; margin: 0; padding: 0; }
    html, body, #root { height: 100%; }
    body {
        font-family: var(--font-sans);
        background-color: var(--bg-main);
        color: var(--text-primary);
        transition: background-color 0.3s ease, color 0.3s ease;
    }
    button, a, input, select, textarea {
        transition: all 0.2s ease-in-out;
    }
`;

const MobileRedirectContainer = styled.div`
    display: flex; flex-direction: column; justify-content: center; align-items: center;
    text-align: center; height: 100vh; width: 100vw; background-color: var(--bg-main);
    color: var(--text-primary); padding: 20px; box-sizing: border-box;
`;
const RedirectTitle = styled.h1` font-size: 1.8rem; font-weight: 700; margin-bottom: 12px; `;
const RedirectMessage = styled.p` font-size: 1rem; color: var(--text-secondary); max-width: 400px; line-height: 1.6; margin-bottom: 30px; `;
const DownloadButton = styled.a`
    display: inline-block; background-color: var(--primary-color); color: white;
    padding: 15px 30px; border-radius: 12px; text-decoration: none;
    font-weight: 600; font-size: 1.1rem; margin: 10px; transition: background-color 0.2s ease;
    &:hover { background-color: var(--primary-hover); }
`;
const ContinueLink = styled.button`
    margin-top: 20px; background: none; border: none; color: var(--primary-color);
    text-decoration: underline; font-size: 0.9rem; cursor: pointer;
`;

function MobileRedirectPage() {
    const navigate = useNavigate();
    return (
        <MobileRedirectContainer>
            <RedirectTitle>Gunakan Aplikasi Smart POS</RedirectTitle>
            <RedirectMessage>
                Mohon maaf, untuk sementara aplikasi POS ini tidak tersedia di perangkat seluler.
                Silakan gunakan peramban web di desktop atau laptop Anda untuk pengalaman terbaik.
            </RedirectMessage>
            <div>
                <DownloadButton href="#">Unduh di App Store</DownloadButton>
                <DownloadButton href="#">Dapatkan di Google Play</DownloadButton>
            </div>
            <ContinueLink onClick={() => navigate(-1)}>Lanjutkan di Web Browser</ContinueLink>
        </MobileRedirectContainer>
    );
}

function MobileRedirectHandler() {
    const navigate = useNavigate();
    const location = useLocation();
    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);

    useEffect(() => {
        const handleResize = () => setIsMobile(window.innerWidth <= 768);
        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);

    useEffect(() => {
        if (isMobile && location.pathname !== '/mobile-redirect') {
            navigate('/mobile-redirect');
        }
    }, [isMobile, location.pathname, navigate]);

    return null;
}

function AppContent() {
    const { theme } = useContext(ThemeContext);
    
    return (
        <SkeletonTheme baseColor={theme === 'dark' ? '#232834' : '#EAECEF'} highlightColor={theme === 'dark' ? '#3A4151' : '#ffffff'}>
            <GlobalStyle />
            <ToastContainer position="top-right" autoClose={3000} theme={theme} />
            <BrowserRouter>
                <MobileRedirectHandler />
                <SyncManager />

                <Routes>
                    <Route path="/login" element={<LoginPage />} />
                    <Route path="/register" element={<RegisterPage />} />
                    <Route path="/forgot-password" element={<ForgotPasswordPage />} />
                    <Route path="/reset-password/:token" element={<ResetPasswordPage />} />
                    <Route path="/tutorial/app-password" element={<AppPasswordTutorialPage />} />
                    <Route path="/mobile-redirect" element={<MobileRedirectPage />} />
    
                    <Route path="/" element={localStorage.getItem('token') ? <Navigate to="/pos" /> : <Navigate to="/login" />} />
                    
                    <Route element={<ProtectedRoute />}>
                        <Route element={<Layout />}>
                            <Route path="/pos" element={<PosPage />} />
                            
                            <Route element={<AdminRoute />}>
                                <Route path="/dashboard" element={<DashboardPage />} />
                                <Route path="/products" element={<ProductsPage />} />
                                <Route path="/products/new" element={<ProductFormPage />} />
                                <Route path="/products/edit/:id" element={<ProductFormPage />} />
                                <Route path="/history" element={<HistoryPage />} />
                                <Route path="/reports" element={<ReportsPage />} />
                                <Route path="/reports/product-profitability" element={<ProductProfitabilityReport />} />
                                <Route path="/shift-history" element={<ShiftHistoryPage />} />
                                <Route path="/users" element={<UsersPage />} />
                                <Route path="/customers" element={<CustomerPage />} />
                                <Route path="/customers/:id" element={<CustomerDetailPage />} />
                                <Route path="/suppliers" element={<SupplierPage />} />
                                <Route path="/settings" element={<SettingsPage />} />
                                <Route path="/categories" element={<CategoryPage />} />
                                <Route path="/expenses" element={<ExpensesPage />} />
                                <Route path="/receive-stock" element={<ReceiveStockPage />} />
                                <Route path="/quick-actions" element={<QuickActionsPage />} />
                                <Route path="/targets" element={<TargetPage />} />
                                <Route path="/promotions" element={<PromotionsPage />} />
                                <Route path="/promotions/new" element={<PromotionFormPage />} />
                                <Route path="/promotions/edit/:id" element={<PromotionFormPage />} />
                                <Route path="/stock-adjustment" element={<StockAdjustmentPage />} />
                                <Route path="/purchase-orders" element={<PurchaseOrdersPage />} />
                                <Route path="/purchase-orders/new" element={<PurchaseOrderForm />} />
                                <Route path="/purchase-orders/:id" element={<PurchaseOrderDetailPage />} />
                                <Route path="/raw-materials" element={<RawMaterialsPage />} />
                                <Route path="/roles" element={<RolesPage />} />
                                <Route path="/rewards" element={<AdminRewardsPage />} />
                            </Route>
                        </Route>
                    </Route>
                    
                    <Route path="*" element={<Navigate to="/login" />} />
                </Routes>
            </BrowserRouter>
        </SkeletonTheme>
    );
}

function App() {
    return (
        <ThemeProvider>
            <BusinessProvider>
                <ShiftProvider>
                    <AppContent />
                </ShiftProvider>
            </BusinessProvider>
        </ThemeProvider>
    );
}

export default App;

===== frontend\src\main.jsx =====
// frontend\src\main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  // <React.StrictMode>
    <App />
  // </React.StrictMode>,
)

===== frontend\src\setupTests.js =====
// frontend/src/setupTests.js
import '@testing-library/jest-dom/vitest';

===== frontend\src\components\AdminRoute.jsx =====
import React, { useEffect } from 'react';
import { useNavigate, useLocation, Outlet } from 'react-router-dom';
import { jwtDecode } from 'jwt-decode';
import { toast } from 'react-toastify';

const AdminRoute = () => {
    const navigate = useNavigate();
    const location = useLocation();
    const token = localStorage.getItem('token');
    
    let isAdmin = false;

    if (token) {
        try {
            const decoded = jwtDecode(token);
            // Menggunakan optional chaining (?.) untuk mencegah error jika decoded.role tidak ada
            if (decoded?.role?.toLowerCase() === 'admin') {
                isAdmin = true;
            }
        } catch (error) {
            console.error("Invalid token on AdminRoute:", error);
            isAdmin = false;
        }
    }

    useEffect(() => {
        if (!isAdmin) {
            toast.error("Akses ditolak. Hanya untuk admin.");
            navigate('/pos', { state: { from: location }, replace: true });
        }
    }, [isAdmin, navigate, location]);

    return isAdmin ? <Outlet /> : null;
};

export default AdminRoute;

===== frontend\src\components\CheckoutModal.jsx =====
// frontend/src/components/CheckoutModal.jsx

import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiDollarSign, FiCreditCard, FiSmartphone, FiBox } from 'react-icons/fi';
import { formatRupiah, parseRupiah } from '../utils/formatters';

const ModalBackdrop = styled(motion.div)`
  position: fixed;
  top: 0; left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const ModalContainer = styled(motion.div)`
  background: var(--bg-surface);
  border-radius: 12px;
  width: 100%;
  max-width: 400px;
  overflow: hidden;
  box-shadow: 0 4px 24px rgba(0, 0, 0, 0.2);
`;

const ModalHeader = styled.div`
  padding: 20px;
  border-bottom: 1px solid var(--border-color);
`;

const ModalTitle = styled.h2`
  margin: 0;
  font-size: 1.5rem;
  font-weight: 600;
  color: var(--text-primary);
`;

const ModalBody = styled.div`
  padding: 20px;
  display: flex;
  flex-direction: column;
  gap: 20px;
`;

const InfoRow = styled.div`
  display: flex;
  justify-content: space-between;
  font-weight: 500;
  color: var(--text-secondary);
`;

const PaymentMethodContainer = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
`;

const PaymentButton = styled.button`
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 10px 15px;
  border: 1px solid ${(props) => (props.$active ? 'var(--primary-color)' : 'var(--border-color)')};
  background: ${(props) => (props.$active ? 'var(--primary-color)' : 'var(--bg-main)')};
  color: ${(props) => (props.$active ? 'white' : 'var(--text-primary)')};
  border-radius: 8px;
  cursor: pointer;
  font-weight: 500;
  &:hover {
    background: ${(props) => (props.$active ? 'var(--primary-color)' : 'var(--bg-surface)')};
  }
`;

const Input = styled.input`
  width: 100%;
  padding: 12px;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  font-size: 1rem;
  background: var(--bg-main);
  color: var(--text-primary);
  &:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2);
  }
`;

const ModalFooter = styled.div`
  padding: 20px;
  border-top: 1px solid var(--border-color);
  display: flex;
  gap: 10px;
  justify-content: flex-end;
`;

const Button = styled.button`
  padding: 10px 20px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 500;
  background: ${(props) => (props.$primary ? 'var(--primary-color)' : 'var(--bg-main)')};
  color: ${(props) => (props.$primary ? 'white' : 'var(--text-primary)')};
  &:hover {
    background: ${(props) => (props.$primary ? 'var(--primary-hover)' : 'var(--bg-surface)')};
  }
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

const paymentIconMap = {
  tunai: <FiDollarSign size={20} />,
  kartu: <FiCreditCard size={20} />,
  qris: <FiSmartphone size={20} />,
};

const getPaymentIcon = (methodName) => {
  const key = methodName.toLowerCase();
  return paymentIconMap[key] || <FiBox size={20} />;
};

function CheckoutModal({ isOpen, onClose, cartTotal, onConfirmCheckout, paymentMethods = [], taxRate = 0 }) {
  const [amountPaid, setAmountPaid] = useState('');
  const [change, setChange] = useState(0);
  const [paymentMethod, setPaymentMethod] = useState('');

  const taxAmount = cartTotal * taxRate;
  const finalTotal = cartTotal + taxAmount;

  useEffect(() => {
    if (isOpen) {
      setAmountPaid('');
      setChange(0);
      setPaymentMethod(paymentMethods[0] || 'Tunai');
    }
  }, [isOpen, paymentMethods]);

  useEffect(() => {
    const paid = parseFloat(amountPaid) || 0;
    if (paymentMethod === 'Tunai') {
      setChange(paid >= finalTotal ? paid - finalTotal : 0);
    } else {
      setChange(0);
      setAmountPaid(finalTotal); // Otomatis isi jika bukan tunai
    }
  }, [amountPaid, finalTotal, paymentMethod]);

  if (!isOpen) return null;

  const handleConfirm = () => {
    onConfirmCheckout({
      paymentMethod,
      amountPaid: parseFloat(amountPaid) || finalTotal,
      subtotal: cartTotal,
      taxAmount,
      finalTotal,
    });
    onClose();
  };

  const isConfirmDisabled = cartTotal <= 0 || (paymentMethod === 'Tunai' && (parseFloat(amountPaid) || 0) < finalTotal);

  return (
    <AnimatePresence>
      {isOpen && (
        <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
          <ModalContainer initial={{ y: 50 }} animate={{ y: 0 }} exit={{ y: 50 }}>
            <ModalHeader>
              <ModalTitle>Pembayaran</ModalTitle>
            </ModalHeader>
            <ModalBody>
              <InfoRow>
                <span>Subtotal:</span>
                <span>Rp {formatRupiah(cartTotal)}</span>
              </InfoRow>
              {taxRate > 0 && (
                <InfoRow>
                    <span>Pajak ({(taxRate * 100).toFixed(1)}%):</span>
                    <span>Rp {formatRupiah(taxAmount)}</span>
                </InfoRow>
              )}
              <InfoRow style={{fontSize: '1.2rem', color: 'var(--text-primary)', borderTop: '1px solid var(--border-color)', paddingTop: '15px'}}>
                <strong>Total Akhir:</strong>
                <strong>Rp {formatRupiah(finalTotal)}</strong>
               </InfoRow>
              <div>
                <label style={{ display: 'block', marginBottom: '8px', fontWeight: 500, color: 'var(--text-secondary)' }}>
                  Metode Pembayaran
                </label>
                <PaymentMethodContainer>
                  {paymentMethods.length === 0 ? (
                    <PaymentButton $active={paymentMethod === 'Tunai'} onClick={() => setPaymentMethod('Tunai')}>
                      {getPaymentIcon('Tunai')} Tunai
                    </PaymentButton>
                  ) : (
                     paymentMethods.map((method) => (
                      <PaymentButton
                        key={method}
                        $active={paymentMethod === method}
                        onClick={() => setPaymentMethod(method)}
                         aria-label={`Pilih metode pembayaran ${method}`}
                      >
                        {getPaymentIcon(method)} {method}
                      </PaymentButton>
                    ))
                   )}
                </PaymentMethodContainer>
              </div>
              {paymentMethod === 'Tunai' && (
                <>
                  <div>
                     <label style={{ display: 'block', marginBottom: '8px', fontWeight: 500, color: 'var(--text-secondary)' }}>
                      Uang Dibayar (Rp)
                    </label>
                    <Input
                      type="text"
                      value={formatRupiah(amountPaid)}
                      onChange={(e) => setAmountPaid(parseRupiah(e.target.value))}
                      placeholder="0"
                      autoFocus
                    />
                   </div>
                  <InfoRow>
                    <span>Kembalian:</span>
                    <span>Rp {formatRupiah(change)}</span>
                  </InfoRow>
                </>
               )}
            </ModalBody>
            <ModalFooter>
              <Button onClick={onClose}>Batal</Button>
              <Button $primary onClick={handleConfirm} disabled={isConfirmDisabled}>
                Konfirmasi & Proses
              </Button>
            </ModalFooter>
          </ModalContainer>
        </ModalBackdrop>
      )}
    </AnimatePresence>
  );
}

export default CheckoutModal;

CheckoutModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  cartTotal: PropTypes.number.isRequired,
  onConfirmCheckout: PropTypes.func.isRequired,
  paymentMethods: PropTypes.arrayOf(PropTypes.string).isRequired,
  taxRate: PropTypes.number,
};

===== frontend\src\components\CloseShiftModal.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\components\CloseShiftModal.jsx

import React, { useState } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { FiLogOut } from 'react-icons/fi';
import { closeShift } from '../services/api';
import { toast } from 'react-toastify';
import { formatRupiah, parseRupiah } from '../utils/formatters';

const ModalBackdrop = styled(motion.div)` position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); display: flex; justify-content: center; align-items: center; z-index: 1001; backdrop-filter: blur(5px); `;
const ModalContainer = styled(motion.div)` background-color: var(--bg-surface); border-radius: 16px; width: 100%; max-width: 400px; padding: 30px; text-align: center; `;
const ModalTitle = styled.h2` font-size: 1.5rem; margin-bottom: 20px; color: var(--text-primary); `;
const Button = styled.button` padding: 12px 20px; border-radius: 8px; border: none; background-color: var(--red-color); color: white; font-weight: 600; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 8px; width: 100%; transition: background-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease; &:hover:not(:disabled) { background-color: #CC2222; transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.2); } &:disabled { opacity: 0.5; cursor: not-allowed; transform: none; box-shadow: none; } `;

const Input = styled.input`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    font-size: 1.2rem;
    text-align: center;
    margin-bottom: 20px;
    background-color: var(--bg-main);
    color: var(--text-primary);
`;

function CloseShiftModal({ shiftId, onShiftClosed, onClose }) {
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [physicalEndingCash, setPhysicalEndingCash] = useState('');

    const handleSubmit = async (e) => {
        e.preventDefault();
        // FIXED: Added validation for the input
        const cashAmount = parseFloat(parseRupiah(physicalEndingCash));
        if (isNaN(cashAmount) || cashAmount < 0) {
            return toast.error("Masukkan jumlah kas yang valid (angka positif).");
        }
        setIsSubmitting(true);
        try {
            await closeShift(shiftId, { physicalEndingCash: cashAmount });
            onShiftClosed();
        } catch (error) {
            console.error(error);
            toast.error(error.response?.data?.message || 'Gagal menutup shift.');
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }} onClick={onClose}>
            <ModalContainer initial={{ y: -50 }} animate={{ y: 0 }} onClick={e => e.stopPropagation()}>
                <ModalTitle>Konfirmasi Tutup Shift</ModalTitle>
                <p style={{color: 'var(--text-secondary)', marginBottom: '30px', textAlign: 'left', lineHeight: '1.6'}}>
                    Anda akan otomatis keluar. Hitung uang tunai fisik di laci dan masukkan jumlahnya di bawah ini.
                </p>
                <form onSubmit={handleSubmit}>
                    <label htmlFor="physicalEndingCash" style={{fontWeight: 500, marginBottom: '8px', display: 'block'}}>Kas Akhir Fisik (Rp)</label>
                    <Input
                        id="physicalEndingCash"
                        type="text"
                        value={formatRupiah(physicalEndingCash)}
                        onChange={(e) => setPhysicalEndingCash(e.target.value)}
                        placeholder="Contoh: 550.000"
                        required
                        autoFocus
                    />
                    <Button type="submit" disabled={isSubmitting || !physicalEndingCash}>
                        <FiLogOut /> {isSubmitting ? 'Memproses...' : 'Konfirmasi & Tutup Shift'}
                    </Button>
                </form>
            </ModalContainer>
        </ModalBackdrop>
    );
}

CloseShiftModal.propTypes = {
  shiftId: PropTypes.number.isRequired,
  onShiftClosed: PropTypes.func.isRequired,
  onClose: PropTypes.func.isRequired,
};

export default CloseShiftModal;

===== frontend\src\components\ConfirmationModal.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\components\ConfirmationModal.jsx
import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiAlertTriangle } from 'react-icons/fi';

// =================================================================
// STYLED COMPONENTS
// =================================================================

const ModalBackdrop = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1001;
`;

const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface);
  border-radius: 16px;
  width: 100%;
  max-width: 400px;
  padding: 30px;
  text-align: center;
`;

const IconWrapper = styled.div`
  color: var(--red-color);
  margin-bottom: 20px;
`;

const ModalTitle = styled.h2`
  font-size: 1.5rem;
  margin-bottom: 15px;
  color: var(--text-primary);
`;

const ModalMessage = styled.p`
  color: var(--text-secondary);
  margin-bottom: 30px;
  line-height: 1.6;
`;

const ButtonGroup = styled.div`
  display: flex;
  gap: 15px;
  justify-content: center;
`;

const Button = styled.button`
  padding: 10px 25px;
  border-radius: 8px;
  border: 1px solid var(--border-color);
  font-weight: 600;
  cursor: pointer;
  background-color: ${props => props.$danger ? 'var(--red-color)' : 'transparent'};
  color: ${props => props.$danger ? 'white' : 'var(--text-primary)'};
  transition: all 0.2s ease-in-out;
  &:hover {
    opacity: 0.9;
    transform: translateY(-1px);
  }
`;

// =================================================================
// KOMPONEN UTAMA
// =================================================================

/**
 * @description Komponen modal konfirmasi yang dapat dianimasikan menggunakan Framer Motion.
 * Ini adalah perbaikan utama yang memastikan animasi keluar berjalan dengan benar.
 * @param {boolean} isOpen - Mengontrol apakah modal terbuka atau tertutup.
 * @param {function} onClose - Fungsi yang dipanggil saat modal ditutup.
 * @param {function} onConfirm - Fungsi yang dipanggil saat tombol konfirmasi diklik.
 * @param {string} title - Judul modal.
 * @param {string} message - Pesan yang ditampilkan di dalam modal.
 */
function ConfirmationModal({ isOpen, onClose, onConfirm, title, message }) {
  // PERBAIKAN: Logika AnimatePresence diperbaiki
  return (
    <AnimatePresence>
      {isOpen && (
        <ModalBackdrop
          key="confirmation-modal-backdrop" // PERBAIKAN: Menambahkan key unik
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
        >
          <ModalContainer
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            transition={{ type: 'spring', stiffness: 300, damping: 25 }}
            onClick={e => e.stopPropagation()}
          >
            <IconWrapper>
              <FiAlertTriangle size={48} />
            </IconWrapper>
            <ModalTitle>{title}</ModalTitle>
            <ModalMessage>{message}</ModalMessage>
            <ButtonGroup>
              <Button onClick={onClose}>Batal</Button>
              <Button $danger onClick={onConfirm}>Konfirmasi</Button>
            </ButtonGroup>
          </ModalContainer>
        </ModalBackdrop>
      )}
    </AnimatePresence>
  );
}

// =================================================================
// PROP TYPES
// =================================================================

ConfirmationModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onConfirm: PropTypes.func.isRequired,
  title: PropTypes.string.isRequired,
  message: PropTypes.string.isRequired,
};

export default ConfirmationModal;

===== frontend\src\components\CustomerFormModal.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\components\CustomerFormModal.jsx

import React, { useState } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { FiX, FiSave } from 'react-icons/fi';
import { createCustomer } from '../services/api';
import { toast } from 'react-toastify';

const ModalBackdrop = styled(motion.div)`
    position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background-color: rgba(0, 0, 0, 0.7); display: flex;
    justify-content: center; align-items: center; z-index: 1002;
`;
const ModalContainer = styled(motion.div)`
    background-color: var(--bg-surface); border-radius: 16px;
    width: 100%; max-width: 450px; padding: 30px;
`;
const ModalHeader = styled.div` display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px; `;
const ModalTitle = styled.h2` font-size: 1.5rem; margin: 0; color: var(--text-primary);`;
const CloseButton = styled.button` background: none; border: none; cursor: pointer; color: var(--text-secondary); `;
const Form = styled.form` display: flex; flex-direction: column; gap: 20px; `;
const InputGroup = styled.div` display: flex; flex-direction: column; gap: 8px; `;
const Label = styled.label` font-weight: 500; color: var(--text-secondary); `;
const Input = styled.input`
    width: 100%; padding: 12px; border: 1px solid var(--border-color);
    border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary);
`;
const SaveButton = styled.button`
    padding: 12px 20px; border-radius: 8px; border: none;
    background-color: var(--primary-color); color: white; font-weight: 600;
    cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 8px;
    margin-top: 10px;
    &:disabled { opacity: 0.5; }
`;

function CustomerFormModal({ isOpen, onClose, onCustomerCreated }) {
    const [formData, setFormData] = useState({ name: '', phone: '', email: '' });
    const [isSubmitting, setIsSubmitting] = useState(false);

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!formData.name.trim()) {
            return toast.warn("Nama pelanggan tidak boleh kosong.");
        }
        setIsSubmitting(true);
        try {
            const res = await toast.promise(
                createCustomer({
                    name: formData.name,
                    phone: formData.phone,
                    email: formData.email
                }),
                {
                    pending: 'Menyimpan pelanggan...',
                    success: 'Pelanggan baru berhasil dibuat!',
                    error: (err) => err.response?.data?.message || "Gagal menyimpan pelanggan."
                }
            );
            onCustomerCreated({ id: res.data.customerId, ...formData });
        } catch (error) {
            console.error(error);
        } finally {
            setIsSubmitting(false);
        }
    };

    if (!isOpen) return null;

    return (
        <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
            <ModalContainer initial={{ y: -50 }} animate={{ y: 0 }}>
                <ModalHeader>
                    <ModalTitle>Tambah Pelanggan Baru</ModalTitle>
                    <CloseButton onClick={onClose}><FiX size={24} /></CloseButton>
                </ModalHeader>
                <Form onSubmit={handleSubmit}>
                    <InputGroup>
                        <Label htmlFor="name">Nama Pelanggan*</Label>
                        <Input id="name" name="name" value={formData.name} onChange={handleChange} required autoFocus />
                    </InputGroup>
                    <InputGroup>
                        <Label htmlFor="phone">Nomor Telepon</Label>
                        <Input id="phone" name="phone" value={formData.phone} onChange={handleChange} />
                    </InputGroup>
                    <InputGroup>
                        <Label htmlFor="email">Email</Label>
                        <Input id="email" name="email" type="email" value={formData.email} onChange={handleChange} />
                    </InputGroup>
                    <SaveButton type="submit" disabled={isSubmitting}>
                        <FiSave/> {isSubmitting ? 'Menyimpan...' : 'Simpan Pelanggan'}
                    </SaveButton>
                </Form>
            </ModalContainer>
        </ModalBackdrop>
    );
}

CustomerFormModal.propTypes = {
    isOpen: PropTypes.bool.isRequired,
    onClose: PropTypes.func.isRequired,
    onCustomerCreated: PropTypes.func.isRequired,
};

export default CustomerFormModal;

===== frontend\src\components\CustomerSelectModal.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\components\CustomerSelectModal.jsx

import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { getCustomers } from '../services/api';
import { toast } from 'react-toastify';
import { FiSearch, FiX, FiUserPlus } from 'react-icons/fi';
import CustomerFormModal from './CustomerFormModal';
import { useDebounce } from '../hooks/useDebounce';

const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7); display: flex;
  justify-content: center; align-items: center; z-index: 1001;
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface);
  border-radius: 16px;
  width: 100%; max-width: 500px; padding: 30px;
  display: flex; flex-direction: column; height: 70vh;
`;
const ModalHeader = styled.div` display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; `;
const ModalTitle = styled.h2` font-size: 1.5rem; margin: 0; color: var(--text-primary);`;
const CloseButton = styled.button` background: none; border: none; cursor: pointer; color: var(--text-secondary); `;
const SearchInput = styled.input`
    width: 100%; padding: 12px; border: 1px solid var(--border-color);
    border-radius: 8px; margin-bottom: 20px; background-color: var(--bg-main);
    color: var(--text-primary); font-size: 1rem;
    &:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2);
    }
`;
const CustomerList = styled.ul` list-style: none; padding: 0; margin: 0; overflow-y: auto; flex-grow: 1; `;
const CustomerItem = styled.li`
  padding: 15px; border-bottom: 1px solid var(--border-color); cursor: pointer;
  &:hover { background-color: var(--bg-main); }
  &:last-child { border-bottom: none; }
`;
const AddCustomerButton = styled.button`
  width: 100%; padding: 12px; margin-top: 15px; border: 1px dashed var(--border-color);
  border-radius: 8px; background-color: transparent; color: var(--primary-color);
  font-weight: 600; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 8px;
  &:hover { background-color: var(--bg-main); }
`;


function CustomerSelectModal({ isOpen, onClose, onSelectCustomer }) {
    const [searchTerm, setSearchTerm] = useState('');
    const debouncedSearchTerm = useDebounce(searchTerm, 300);
    const [customers, setCustomers] = useState([]);
    const [loading, setLoading] = useState(false);
    const [isFormOpen, setIsFormOpen] = useState(false);

    useEffect(() => {
        if (!isOpen || isFormOpen) return;

        const fetchCustomers = async () => {
            setLoading(true);
            try {
                const res = await getCustomers(debouncedSearchTerm);
                setCustomers(res.data);
            } catch (error) {
                toast.error("Gagal memuat daftar pelanggan.");
            } finally {
                setLoading(false);
            }
        };

        fetchCustomers();
    }, [debouncedSearchTerm, isOpen, isFormOpen]);
    
    const handleCustomerCreated = (newCustomer) => {
        setIsFormOpen(false);
        // Manually add the new customer to the list for an instant UI update
        setCustomers(prevCustomers => [newCustomer, ...prevCustomers]);
        // Then select the customer, which will close this modal
        onSelectCustomer(newCustomer);
    };

    if (!isOpen) return null;

    return (
        <>
            <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
                <ModalContainer initial={{ y: -50 }} animate={{ y: 0 }}>
                    <ModalHeader>
                        <ModalTitle>Pilih Pelanggan</ModalTitle>
                        <CloseButton onClick={onClose}><FiX size={24} /></CloseButton>
                    </ModalHeader>
                    <SearchInput 
                        type="text"
                        placeholder="Ketik nama atau nomor telepon..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        autoFocus
                    />
                    <CustomerList>
                        {loading ? <p>Mencari...</p> : customers.map(customer => (
                            <CustomerItem key={customer.id} onClick={() => onSelectCustomer(customer)}>
                                <p style={{margin: 0, fontWeight: '600'}}>{customer.name}</p>
                                <p style={{margin: '4px 0 0', color: 'var(--text-secondary)', fontSize: '0.9rem'}}>
                                    {customer.phone}
                                </p>
                            </CustomerItem>
                        ))}
                    </CustomerList>
                    <AddCustomerButton onClick={() => setIsFormOpen(true)}>
                        <FiUserPlus/> Tambah Pelanggan Baru
                    </AddCustomerButton>
                </ModalContainer>
            </ModalBackdrop>

            <CustomerFormModal
                isOpen={isFormOpen}
                onClose={() => setIsFormOpen(false)}
                onCustomerCreated={handleCustomerCreated}
            />
        </>
    );
}

CustomerSelectModal.propTypes = {
    isOpen: PropTypes.bool.isRequired,
    onClose: PropTypes.func.isRequired,
    onSelectCustomer: PropTypes.func.isRequired,
};

export default CustomerSelectModal;

===== frontend\src\components\DailyReport.jsx =====
// frontend/src/components/DailyReport.jsx
import React from 'react';
import PropTypes from 'prop-types';

const DailyReport = React.forwardRef(({ data }, ref) => {
    if (!data) {
        return <div ref={ref} style={{ display: 'none' }}></div>;
    }

    const formatDate = (dateString) => new Date(dateString).toLocaleDateString('id-ID', {
        day: '2-digit', month: 'long', year: 'numeric',
    });

    const formatCurrency = (value) => `Rp ${new Intl.NumberFormat('id-ID').format(value || 0)}`;

    return (
        <div ref={ref} className="printable-content">
            <style>
                {`
                    @media print {
                        @page {
                            size: A4;
                            margin: 20mm;
                        }
                        body * {
                            visibility: hidden;
                        }
                        .printable-content, .printable-content * {
                            visibility: visible;
                        }
                        .printable-content {
                            position: absolute;
                            left: 0;
                            top: 0;
                            width: 100%;
                            font-family: 'Poppins', sans-serif;
                            color: #000;
                        }
                        h1, h2, h3 {
                            margin: 0;
                            padding: 0;
                        }
                        table {
                            width: 100%;
                            border-collapse: collapse;
                            margin-top: 15px;
                        }
                        th, td {
                            border: 1px solid #ddd;
                            padding: 8px;
                            text-align: left;
                        }
                        th {
                            background-color: #f2f2f2;
                        }
                        .report-header {
                            text-align: center;
                            margin-bottom: 30px;
                        }
                        .summary-section {
                            margin-top: 20px;
                            padding: 15px;
                            border: 1px solid #ddd;
                            border-radius: 8px;
                        }
                        .summary-item {
                            display: flex;
                            justify-content: space-between;
                            padding: 5px 0;
                        }
                    }
                `}
            </style>
            
            <div className="report-header">
                <h1>Laporan Kinerja Harian</h1>
                <p>Periode: {formatDate(data.startDate)} - {formatDate(data.endDate)}</p>
            </div>

            <div className="summary-section">
                <h3>Ringkasan Umum</h3>
                <div className="summary-item">
                    <span>Total Pendapatan:</span>
                    <strong>{formatCurrency(data.totalRevenue)}</strong>
                </div>
                <div className="summary-item">
                    <span>Total Perkiraan Laba:</span>
                    <strong>{formatCurrency(data.totalProfit)}</strong>
                </div>
                <div className="summary-item">
                    <span>Jumlah Transaksi:</span>
                    <strong>{data.totalTransactions}</strong>
                </div>
                <div className="summary-item">
                    <span>Total Produk Terjual:</span>
                    <strong>{data.totalSoldUnits} unit</strong>
                </div>
                <div className="summary-item">
                    <span>Pelanggan Baru:</span>
                    <strong>{data.newCustomers} orang</strong>
                </div>
            </div>

            <h3>Produk Terlaris (Berdasarkan Kuantitas)</h3>
            <table>
                <thead>
                    <tr>
                        <th>No.</th>
                        <th>Nama Produk</th>
                        <th>Total Terjual</th>
                    </tr>
                </thead>
                <tbody>
                    {data.topProducts && data.topProducts.length > 0 ? (
                        data.topProducts.map((product, index) => (
                            <tr key={index}>
                                <td>{index + 1}</td>
                                <td>{product.name}</td>
                                <td>{product.totalSold} unit</td>
                            </tr>
                        ))
                    ) : (
                        <tr>
                            <td colSpan="3" style={{ textAlign: 'center' }}>Tidak ada data produk terlaris pada periode ini.</td>
                        </tr>
                    )}
                </tbody>
            </table>
        </div>
    );
});

DailyReport.displayName = 'DailyReport'; // Add display name for forwardRef components

export default DailyReport;

DailyReport.propTypes = {
  data: PropTypes.object,
};

===== frontend\src\components\EditExpenseModal.jsx =====
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { FiSave, FiX } from 'react-icons/fi';
import { formatRupiah, parseRupiah } from '../utils/formatters';

// Styled Components
const ModalOverlay = styled.div`
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
`;

const ModalContent = styled.div`
    background: var(--bg-surface);
    border-radius: 16px;
    padding: 20px;
    width: 100%;
    max-width: 500px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
`;

const ModalHeader = styled.div`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
`;

const ModalTitle = styled.h2`
    font-size: 1.5rem;
    color: var(--text-primary);
`;

const CloseButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    &:hover {
        color: var(--primary-color);
    }
`;

const Form = styled.form`
    display: grid;
    gap: 15px;
`;

const InputGroup = styled.div`
    display: flex;
    flex-direction: column;
`;

const Label = styled.label`
    margin-bottom: 8px;
    font-weight: 500;
    font-size: 0.9rem;
    color: var(--text-secondary);
`;

const Input = styled.input`
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background: var(--bg-main);
    color: var(--text-primary);
    font-size: 1rem;
`;

const Button = styled.button`
    padding: 12px 20px;
    border-radius: 8px;
    border: none;
    background-color: var(--primary-color);
    color: white;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    justify-content: center;
    &:hover {
        opacity: 0.9;
    }
    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
`;

function EditExpenseModal({ isOpen, onClose, expense, onSave, isSubmitting }) {
    const [formData, setFormData] = useState({ description: '', amount: '' });

    useEffect(() => {
        if (expense) {
            setFormData({
                description: expense.description || '',
                amount: String(expense.amount) || ''
            });
        } else {
            setFormData({ description: '', amount: '' });
        }
    }, [expense]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        if (name === 'amount') {
            setFormData(prev => ({
                ...prev,
                [name]: parseRupiah(value)
            }));
        } else {
            setFormData(prev => ({ ...prev, [name]: value }));
        }
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        const amountToSave = parseFloat(formData.amount);
        if (isNaN(amountToSave) || amountToSave <= 0) {
            alert("Please enter a valid positive amount.");
            return;
        }
        onSave({ ...formData, amount: amountToSave });
    };

    if (!isOpen) return null;

    return (
       <ModalOverlay onClick={onClose}>
            <ModalContent onClick={e => e.stopPropagation()}>
                <ModalHeader>
                    <ModalTitle>Edit Expense</ModalTitle>
                    <CloseButton onClick={onClose}><FiX /></CloseButton>
                </ModalHeader>
                <Form onSubmit={handleSubmit}>
                    <InputGroup>
                        <Label>Expense Description</Label>
                        <Input
                            name="description"
                            value={formData.description}
                            onChange={handleChange}
                            required
                        />
                    </InputGroup>
                    <InputGroup>
                        <Label>Amount (Rp)</Label>
                        <Input
                            name="amount"
                            type="text"
                            value={formatRupiah(formData.amount)}
                            onChange={handleChange}
                            required
                        />
                    </InputGroup>
                    <Button type="submit" disabled={isSubmitting}>
                        <FiSave /> {isSubmitting ? 'Saving...' : 'Save Changes'}
                    </Button>
                </Form>
            </ModalContent>
        </ModalOverlay>
    );
}

export default EditExpenseModal;

EditExpenseModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  expense: PropTypes.object,
  onSave: PropTypes.func.isRequired,
  isSubmitting: PropTypes.bool.isRequired,
};

===== frontend\src\components\HeldCartsModal.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\components\HeldCartsModal.jsx

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { FiX, FiTrash2, FiShoppingCart, FiUser } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7); display: flex;
  justify-content: center; align-items: center; z-index: 1001;
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface); border-radius: 16px;
  width: 100%; max-width: 500px; padding: 30px;
  display: flex; flex-direction: column; height: 70vh;
`;
const ModalHeader = styled.div` display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; `;
const ModalTitle = styled.h2` font-size: 1.5rem; margin: 0; color: var(--text-primary);`;
const CloseButton = styled.button` background: none; border: none; cursor: pointer; color: var(--text-secondary); `;
const CartList = styled.ul` list-style: none; padding: 0; margin: 0; overflow-y: auto; flex-grow: 1; `;
const CartItem = styled.li`
  padding: 15px; border-bottom: 1px solid var(--border-color);
  display: flex; justify-content: space-between; align-items: center;
  cursor: pointer; transition: background-color 0.2s ease-in-out;
  &:hover { background-color: var(--bg-main); }
  &:last-child { border-bottom: none; }
`;
const CartInfo = styled.div`
  display: flex;
  flex-direction: column;
  gap: 5px;
`;
const CustomerName = styled.p`
  margin: 0; font-weight: 600; color: var(--text-primary);
  display: flex; align-items: center; gap: 8px;
`;
const CartDetails = styled.small`
  color: var(--text-secondary);
`;
const ActionGroup = styled.div` display: flex; align-items: center; `;
const DeleteButton = styled.button` 
  background: none; border: none; color: var(--text-secondary); cursor: pointer; 
  margin-left: 15px; padding: 5px; border-radius: 50%;
  &:hover { color: var(--red-color); background-color: var(--red-color-transparent); }
`;
const EmptyState = styled.div`
  display: flex; flex-direction: column; align-items: center; justify-content: center;
  height: 100%; color: var(--text-secondary); text-align: center;
`;

function HeldCartsModal({ isOpen, onClose, heldCarts, onResume, onDelete }) {
    if (!isOpen) return null;

    return (
        <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
            <ModalContainer initial={{ y: -50 }} animate={{ y: 0 }}>
                <ModalHeader>
                    <ModalTitle>Keranjang Ditahan</ModalTitle>
                    <CloseButton onClick={onClose}><FiX size={24} /></CloseButton>
                </ModalHeader>
                <CartList>
                    {heldCarts.length === 0 ? (
                        <EmptyState>
                            <FiShoppingCart size={48} style={{marginBottom: '20px'}} />
                            <p>Tidak ada keranjang yang ditahan.</p>
                        </EmptyState>
                    ) : (
                        heldCarts.map(cart => (
                            <CartItem key={cart.id}>
                                <div onClick={() => onResume(cart.id)} style={{flexGrow: 1}}>
                                    <CartInfo>
                                        <CustomerName>
                                            <FiUser size={14} />
                                            {cart.customer ? cart.customer.name : 'Pelanggan Umum'}
                                        </CustomerName>
                                        <CartDetails>
                                            {cart.items.length} item - Ditahan pukul {new Date(cart.id).toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })}
                                        </CartDetails>
                                    </CartInfo>
                                </div>
                                <ActionGroup>
                                    <DeleteButton onClick={(e) => { e.stopPropagation(); onDelete(cart.id); }}><FiTrash2/></DeleteButton>
                                </ActionGroup>
                            </CartItem>
                        ))
                    )}
                </CartList>
            </ModalContainer>
        </ModalBackdrop>
    );
}

HeldCartsModal.propTypes = {
    isOpen: PropTypes.bool.isRequired,
    onClose: PropTypes.func.isRequired,
    heldCarts: PropTypes.array.isRequired,
    onResume: PropTypes.func.isRequired,
    onDelete: PropTypes.func.isRequired,
};

export default HeldCartsModal;

===== frontend\src\components\Layout.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\components\Layout.jsx

import React from 'react';
import styled from 'styled-components';
import { Outlet } from 'react-router-dom';
import Sidebar from './Sidebar';

const AppContainer = styled.div`
  display: flex;
  height: 100vh;
  width: 100vw;
  background-color: var(--bg-main);

  @media (max-width: 1024px) {
    flex-direction: column-reverse; /* Pindahkan Sidebar ke bawah */
  }
`;

const ContentWrapper = styled.main`
  flex: 1;
  overflow-y: auto;
`;

function Layout() {
  return (
    <AppContainer>
      <Sidebar />
      <ContentWrapper>
        <Outlet />
      </ContentWrapper>
    </AppContainer>
  );
}

export default Layout;

===== frontend\src\components\OrderDetailModal.jsx =====
import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX, FiPrinter } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
    position: fixed; top: 0; left: 0; width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6); display: flex;
    justify-content: center; align-items: center; z-index: 1000;
`;

const ModalContainer = styled(motion.div)`
    background-color: var(--bg-surface); border-radius: 16px;
    width: 100%; max-width: 600px; overflow: hidden;
    border: 1px solid var(--border-color);
`;

const ModalHeader = styled.div`
    padding: 20px 25px; border-bottom: 1px solid var(--border-color);
    display: flex; justify-content: space-between; align-items: center;
`;

const ModalTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0;
`;

const CloseButton = styled.button`
    background: none; border: none; color: var(--text-secondary);
    cursor: pointer; &:hover { color: var(--text-primary); }
`;

const ModalBody = styled.div`
    padding: 25px;
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-height: 70vh;
    overflow-y: auto;
`;

const InfoRow = styled.div`
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 1rem;
    span:first-child {
        color: var(--text-secondary);
        font-weight: 500;
    }
    span:last-child {
        font-weight: 600;
        color: var(--text-primary);
    }
`;

const ItemsTable = styled.table`
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
    th, td {
        text-align: left;
        padding: 10px 0; border-bottom: 1px dashed var(--border-color);
        color: var(--text-primary);
    }
    th {
        font-size: 0.9rem;
        color: var(--text-secondary);
        font-weight: 600;
        text-transform: uppercase;
        padding-bottom: 15px;
    }
    td:last-child {
        text-align: right;
        font-weight: 500;
    }
`;

const Total = styled.div`
    font-size: 1.3rem;
    font-weight: 700;
    text-align: right;
    margin-top: 20px;
    color: var(--primary-color);
`;

const Button = styled.button`
    padding: 12px 25px;
    border-radius: 8px;
    border: 1px solid ${props => props.$primary ? 'var(--primary-color)' : 'var(--border-color)'};
    font-weight: 600;
    cursor: pointer;
    background-color: ${props => props.$primary ? 'var(--primary-color)' : 'transparent'};
    color: ${props => props.$primary ? 'white' : 'var(--text-primary)'};
    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
`;

const ModalFooter = styled.div`
    padding: 20px 25px;
    border-top: 1px solid var(--border-color);
    display: flex;
    justify-content: flex-end;
    gap: 15px;
`;

function OrderDetailModal({ isOpen, onClose, order, onPrint }) { 
    if (!isOpen || !order) return null;

    return (
        <AnimatePresence>
            {isOpen && (
                <ModalBackdrop
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    onClick={onClose}
                >
                    <ModalContainer
                        initial={{ y: "-50px", opacity: 0 }}
                        animate={{ y: "0", opacity: 1 }}
                        exit={{ y: "50px", opacity: 0 }}
                        transition={{ type: "spring", stiffness: 200, damping: 20 }}
                        onClick={(e) => e.stopPropagation()}
                    >
                        <ModalHeader>
                            <ModalTitle>Detail Pesanan #{order.id}</ModalTitle>
                            <CloseButton onClick={onClose}><FiX size={24} /></CloseButton>
                        </ModalHeader>
                        <ModalBody>
                            <InfoRow>
                                <span>Tanggal:</span>
                                <span>{new Date(order.created_at).toLocaleString('id-ID', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' })}</span>
                            </InfoRow>
                            <InfoRow>
                                <span>Kasir:</span>
                                <span>{order.cashier_name}</span>
                            </InfoRow>
                            {order.customer_name && (
                                <InfoRow>
                                    <span>Pelanggan:</span>
                                    <span>{order.customer_name}</span>
                                </InfoRow>
                             )}
                            <InfoRow>
                                <span>Metode Pembayaran:</span>
                                <span>{order.payment_method}</span>
                            </InfoRow>
                            <InfoRow>
                                <span>Uang Dibayar:</span>
                                <span>Rp {new Intl.NumberFormat('id-ID').format(order.amount_paid)}</span>
                            </InfoRow>
                            {order.payment_method === 'Tunai' && (order.amount_paid - order.total_amount) > 0 && (
                                <InfoRow>
                                    <span>Kembalian:</span>
                                    <span>Rp {new Intl.NumberFormat('id-ID').format(order.amount_paid - order.total_amount)}</span>
                                </InfoRow>
                            )}

                            <ItemsTable>
                                <thead>
                                    <tr>
                                        <th>Item</th>
                                        <th style={{ textAlign: 'center' }}>Qty</th>
                                        <th style={{ textAlign: 'right' }}>Harga Satuan</th>
                                        <th style={{ textAlign: 'right' }}>Subtotal</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {order.items.map((item, index) => (
                                        <tr key={index}>
                                            <td>{item.product_name}{item.variant_name ? ` (${item.variant_name})` : ''}</td>
                                            <td style={{ textAlign: 'center' }}>{item.quantity}</td>
                                            <td style={{ textAlign: 'right' }}>Rp {new Intl.NumberFormat('id-ID').format(item.price)}</td>
                                            <td style={{ textAlign: 'right' }}>Rp {new Intl.NumberFormat('id-ID').format(item.quantity * item.price)}</td>
                                        </tr>
                                    ))}
                                </tbody>
                            </ItemsTable>
                            
                            <Total>Total: Rp {new Intl.NumberFormat('id-ID').format(order.total_amount)}</Total>
                        </ModalBody>
                        <ModalFooter>
                            <Button onClick={onClose}>Tutup</Button>
                            <Button $primary onClick={() => onPrint(order.id)}>
                                <FiPrinter style={{ marginRight: '8px' }} />
                                Cetak Struk
                            </Button>
                        </ModalFooter>
                    </ModalContainer>
                </ModalBackdrop>
            )}
        </AnimatePresence>
    );
}

export default OrderDetailModal;

OrderDetailModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  order: PropTypes.object,
  onPrint: PropTypes.func.isRequired,
};

===== frontend\src\components\PageWrapper.jsx =====
// frontend/src/components/PageWrapper.jsx

import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import styled from 'styled-components';
import PropTypes from 'prop-types';

const PageContainer = styled.div`
  padding: 30px;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
`;

const pageVariants = {
  initial: { opacity: 0 },
  animate: { opacity: 1 },
  exit: { opacity: 0 },
};

const pageTransition = {
  duration: 0.2,
  ease: "easeInOut",
};

/**
 * PageWrapper now focuses solely on providing consistent page transition animations.
 * The loading state is handled by parent components.
 */
const PageWrapper = ({ children }) => {
  return (
    <AnimatePresence mode="wait">
      <motion.div
        key="page-content-wrapper" // A consistent key can be used here
        initial="initial"
        animate="animate"
        exit="exit"
        variants={pageVariants}
        transition={pageTransition}
        style={{ display: 'flex', flexDirection: 'column', flexGrow: 1, height: '100%' }}
      >
        <PageContainer>{children}</PageContainer>
      </motion.div>
    </AnimatePresence>
  );
};

PageWrapper.propTypes = {
  children: PropTypes.node.isRequired,
};

export default PageWrapper;

===== frontend\src\components\PostCheckoutModal.jsx =====
// frontend/src/components/PostCheckoutModal.jsx

import React, { useState } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiSend, FiCheckCircle, FiPrinter } from 'react-icons/fi';
import { toast } from 'react-toastify';
import { sendReceipt } from '../services/api';

const ModalBackdrop = styled(motion.div)` position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.6); display: flex; justify-content: center; align-items: center; z-index: 1000; backdrop-filter: blur(4px); `;
const ModalContainer = styled(motion.div)` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); width: 100%; max-width: 450px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); text-align: center; padding: 30px; display: flex; flex-direction: column; align-items: center; `;
const SuccessIcon = styled.div` width: 70px; height: 70px; border-radius: 50%; background-color: rgba(32, 201, 151, 0.1); color: #20C997; display: flex; align-items: center; justify-content: center; margin: 0 auto 20px auto; `;
const ModalTitle = styled.h3` font-size: 1.5rem; font-weight: 600; margin-bottom: 10px; color: var(--text-primary); `;
const ModalSubtitle = styled.p` color: var(--text-secondary); margin-bottom: 25px; font-size: 0.95rem; `;
const Form = styled.form` display: flex; flex-direction: column; gap: 15px; width: 100%; `;
const Input = styled.input` width: 100%; padding: 12px 18px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1rem; background-color: var(--bg-main); color: var(--text-primary); text-align: center; &::placeholder { color: var(--text-placeholder); } &:focus { outline: none; border-color: var(--primary-color); } `;
const Button = styled.button` padding: 12px 25px; border-radius: 8px; border: none; font-weight: 600; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 8px; transition: all 0.2s ease-in-out; background-color: ${props => props.$primary ? 'var(--primary-color)' : 'var(--bg-surface)'}; color: ${props => props.$primary ? 'white' : 'var(--text-primary)'}; border: 1px solid ${props => props.$primary ? 'var(--primary-color)' : 'var(--border-color)'}; &:hover { ${props => props.$primary ? `background-color: var(--primary-hover);` : `background-color: var(--bg-main); border-color: var(--primary-color);`} } &:disabled { opacity: 0.5; cursor: not-allowed; } `;
const ButtonGroup = styled.div` display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 10px; width: 100%; `;
const FullWidthButton = styled(Button)` grid-column: 1 / -1; `;

function PostCheckoutModal({ isOpen, onClose, orderId, onPrint }) {
  const [email, setEmail] = useState('');
  const [isSending, setIsSending] = useState(false);

  const handleSendReceipt = async (e) => {
    e.preventDefault();
    if (!email) {
      toast.warn("Silakan masukkan alamat email.");
      return;
    }
    setIsSending(true);
    try {
      await sendReceipt(orderId, email);
      toast.success('Struk berhasil dikirim!');
      setEmail('');
    } catch (error) {
      toast.error(`Gagal mengirim struk: ${error.response?.data?.message || 'Server error'}`);
    } finally {
      setIsSending(false);
    }
  };

  const backdropVariants = { hidden: { opacity: 0 }, visible: { opacity: 1 }, exit: { opacity: 0 }};
  const modalVariants = { hidden: { y: "-50px", opacity: 0 }, visible: { y: "0", opacity: 1 }, exit: { y: "50px", opacity: 0 }};

  return (
    <AnimatePresence>
      {isOpen && (
        <ModalBackdrop initial="hidden" animate="visible" exit="exit" onClick={onClose}>
          <ModalContainer variants={modalVariants} onClick={(e) => e.stopPropagation()}>
            <SuccessIcon><FiCheckCircle size={32} /></SuccessIcon>
            <ModalTitle>Transaksi Berhasil!</ModalTitle>
            <ModalSubtitle>Pesanan #{orderId} telah berhasil diproses.</ModalSubtitle>
            
            <Form onSubmit={handleSendReceipt}>
              <Input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Kirim struk ke email (opsional)"
              />
              <ButtonGroup>
                <Button type="button" onClick={() => onPrint(orderId)}>
                  <FiPrinter /> Cetak
                </Button>
                <Button type="submit" $primary disabled={!email || isSending}>
                  <FiSend /> {isSending ? 'Mengirim...' : 'Kirim'}
                </Button>
                <FullWidthButton type="button" onClick={onClose}>
                  Selesai (Transaksi Baru)
                </FullWidthButton>
              </ButtonGroup>
            </Form>
          </ModalContainer>
        </ModalBackdrop>
      )}
    </AnimatePresence>
  );
}

export default PostCheckoutModal;

PostCheckoutModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  orderId: PropTypes.number,
  onPrint: PropTypes.func.isRequired,
};

===== frontend\src\components\ProductFormModal.jsx =====
// frontend/src/pages/ProductFormPage.jsx

import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { getCategories, getSubCategories, getSuppliers, getProductById, createProduct, updateProduct, uploadImage } from '../services/api';
import { toast } from 'react-toastify';
import { FiSave, FiPlus, FiTrash2, FiArrowLeft, FiUpload } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css'; // Don't forget to import the CSS for Skeleton
import { formatRupiah, parseRupiah } from '../utils/formatters';
import { motion } from 'framer-motion'; // <-- Import framer-motion
import PageWrapper from '../components/PageWrapper'; // <-- Import PageWrapper

// --- Styled Components ---
const PageContainer = styled(motion.div)` 
    padding: 30px; 
    max-width: 900px; 
    margin: 0 auto; 
    display: flex;
    flex-direction: column;
`;
const PageHeader = styled.header` display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; `;
const Title = styled.h1` font-size: 1.8rem; `;
const BackLink = styled(Link)` display: inline-flex; align-items: center; gap: 8px; color: var(--text-secondary); text-decoration: none; margin-bottom: 20px; font-weight: 500; &:hover { color: var(--text-primary); } `;
const Form = styled.form` 
    background-color: var(--bg-surface); 
    border-radius: 16px; 
    border: 1px solid var(--border-color); 
    padding: 25px; 
    flex-grow: 1;
    display: flex;
    flex-direction: column;
`;
const FormGrid = styled.div` display: grid; grid-template-columns: repeat(3, 1fr); gap: 18px 20px; `;
const InputGroup = styled.div` grid-column: ${props => props.$fullWidth ? '1 / -1' : 'span 1'}; `;
const Label = styled.label` display: block; margin-bottom: 8px; font-weight: 500; font-size: 0.9rem; color: var(--text-secondary); `;
const Input = styled.input` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; &[type="number"] { -moz-appearance: textfield; } &::-webkit-outer-spin-button, &::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; } `;
const FileInputContainer = styled.div` display: flex; gap: 10px; align-items: center; width: 100%; `;
const UploadButton = styled.button` background-color: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 12px 15px; font-weight: 600; display: flex; align-items: center; gap: 5px; cursor: pointer; flex-shrink: 0; &:hover { background-color: var(--primary-hover); } &:disabled { opacity: 0.5; cursor: not-allowed; } `;
const FileInput = styled.input` display: none; `;
const Select = styled.select` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; appearance: none; background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E"); background-repeat: no-repeat; background-position: right 12px center; background-size: 20px; &:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2); } `;
const VariantSection = styled.div` grid-column: 1 / -1; border-top: 1px solid var(--border-color); margin-top: 10px; padding-top: 20px; `;
const VariantRow = styled.div` display: grid; grid-template-columns: 2fr 1fr 1fr 1.5fr 50px; gap: 15px; align-items: center; margin-bottom: 10px; `;
const AddVariantButton = styled.button` display: flex; align-items: center; gap: 5px; background-color: var(--primary-color); color: white; padding: 8px 15px; border-radius: 8px; border: none; cursor: pointer; font-weight: 500; margin-top: 10px; &:hover { opacity: 0.9; } `;
const ActionButton = styled.button` background: none; border: none; cursor: pointer; color: var(--red-color); `;
const FormFooter = styled.div` padding-top: 25px; margin-top: auto; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; `;
const SaveButton = styled.button` background-color: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 12px 25px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; &:hover { background-color: var(--primary-hover); } &:disabled { opacity: 0.5; cursor: not-allowed; } `;

function ProductFormPage() {
    const { id } = useParams();
    const navigate = useNavigate();
    const isEditing = Boolean(id);
    const fileInputRef = useRef(null);

    const [formData, setFormData] = useState({
        name: '',
        description: '',
        category_id: '',
        sub_category_id: '',
        supplier_id: '',
        stock: 0,
        low_stock_threshold: 5,
        image_url: '',
        expiration_date: '',
        variants: [{ name: 'Reguler', price: '', cost_price: '', barcode: '' }]
    });

    const [categories, setCategories] = useState([]);
    const [subCategories, setSubCategories] = useState([]);
    const [suppliers, setSuppliers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [selectedFile, setSelectedFile] = useState(null);

    const fetchProductData = useCallback(async () => {
        if (isEditing) {
            try {
                const res = await getProductById(id);
                const product = res.data;
                if (product.category_id) {
                    const subCatRes = await getSubCategories(product.category_id);
                    setSubCategories(subCatRes.data);
                }
                setFormData({
                    name: product.name || '',
                    description: product.description || '',
                    category_id: product.category_id || '',
                    sub_category_id: product.sub_category_id || '',
                    supplier_id: product.supplier_id || '',
                    stock: product.stock || 0,
                    low_stock_threshold: product.low_stock_threshold || 5,
                    image_url: product.image_url || '',
                    expiration_date: product.expiration_date ? new Date(product.expiration_date).toISOString().split('T')[0] : '',
                    variants: product.variants && product.variants.length > 0
                        ? product.variants.map(v => ({
                              id: v.id,
                              name: v.name || '',
                              price: v.price !== undefined ? v.price : '',
                              cost_price: v.cost_price !== undefined ? v.cost_price : '',
                              barcode: v.barcode || '',
                          }))
                        : [{ name: 'Reguler', price: '', cost_price: '', barcode: '' }]
                });
            } catch (error) {
                console.error("Error fetching product data:", error);
                toast.error("Gagal memuat data produk. Mungkin produk tidak ditemukan.");
                navigate('/products');
            } finally {
                setLoading(false);
            }
        } else {
            setLoading(false);
        }
    }, [id, isEditing, navigate]);

    useEffect(() => {
        const fetchDropdownData = async () => {
            try {
                const [catRes, supRes] = await Promise.all([getCategories(), getSuppliers()]);
                setCategories(catRes.data);
                setSuppliers(supRes.data);
            } catch (error) {
                toast.error("Gagal memuat data kategori atau pemasok.");
            }
        };
        fetchDropdownData();
        fetchProductData();
    }, [fetchProductData]);

    useEffect(() => {
        if (formData.category_id) {
            getSubCategories(formData.category_id)
                .then(res => setSubCategories(res.data))
                .catch(err => toast.error("Gagal memuat sub-kategori."));
        } else {
            setSubCategories([]);
        }
    }, [formData.category_id]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        if (name === "category_id") {
            setFormData({ ...formData, category_id: value, sub_category_id: '' });
        } else {
            setFormData({ ...formData, [name]: value });
        }
    };

    const handleVariantChange = (index, field, value) => {
        const newVariants = [...formData.variants];
        if (field === 'price' || field === 'cost_price') {
            newVariants[index][field] = value === '' ? '' : parseRupiah(value);
        } else {
            newVariants[index][field] = value;
        }
        setFormData({ ...formData, variants: newVariants });
    };

    const addVariant = () => {
        setFormData({
            ...formData,
            variants: [...formData.variants, { name: '', price: '', cost_price: '', barcode: '' }]
        });
    };

    const removeVariant = (index) => {
        if (formData.variants.length <= 1) {
            toast.warn("Produk harus memiliki setidaknya satu varian.");
            return;
        }
        const newVariants = formData.variants.filter((_, i) => i !== index);
        setFormData({ ...formData, variants: newVariants });
    };

    const handleFileChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setSelectedFile(file);
            setFormData(prev => ({ ...prev, image_url: '' }));
            toast.info(`File dipilih: ${file.name}`);
        } else {
            setSelectedFile(null);
        }
    };

    const triggerFileInput = () => {
        fileInputRef.current.click();
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        const validVariants = formData.variants.filter(v =>
            v.name &&
            v.price !== '' &&
            !isNaN(parseFloat(v.price)) &&
            v.cost_price !== '' &&
            !isNaN(parseFloat(v.cost_price))
        ).map(v => ({
            ...v,
            price: parseFloat(v.price),
            cost_price: parseFloat(v.cost_price),
        }));
        if (validVariants.length === 0) {
            toast.error('Setidaknya satu varian produk harus diisi lengkap (nama, harga beli, dan harga jual).');
            setIsSubmitting(false);
            return;
        }
        let imageUrlToSend = formData.image_url;
        if (selectedFile) {
            const formDataForUpload = new FormData();
            formDataForUpload.append('image', selectedFile);
            try {
                const uploadRes = await uploadImage(formDataForUpload);
                imageUrlToSend = uploadRes.data.url;
                toast.success("Gambar berhasil diunggah!");
            } catch (error) {
                console.error("Error uploading image:", error);
                toast.error("Gagal mengunggah gambar.");
                setIsSubmitting(false);
                return;
            }
        }
        const productData = {
            ...formData,
            image_url: imageUrlToSend,
            variants: validVariants,
            expiration_date: formData.expiration_date || null
        };
        const promise = isEditing
            ? updateProduct(id, productData)
            : createProduct(productData);
        try {
            await toast.promise(promise, {
                pending: 'Menyimpan produk...',
                success: 'Produk berhasil disimpan!',
                error: 'Gagal menyimpan produk.'
            });
            navigate('/products');
        } catch (err) {
            console.error(err);
        } finally {
            setIsSubmitting(false);
        }
    };

    const formContent = (
        <Form onSubmit={handleSubmit}>
            <FormGrid>
                <InputGroup $fullWidth>
                    <Label>Nama Produk</Label>
                    <Input name="name" value={formData.name} onChange={handleChange} required autoFocus />
                </InputGroup>
                <InputGroup>
                    <Label>Kategori</Label>
                    <Select name="category_id" value={formData.category_id} onChange={handleChange}>
                        <option value="">-- Pilih Kategori --</option>
                        {categories.map(cat => <option key={cat.id} value={cat.id}>{cat.name}</option>)}
                    </Select>
                </InputGroup>
                <InputGroup>
                    <Label>Sub-Kategori</Label>
                    <Select name="sub_category_id" value={formData.sub_category_id} onChange={handleChange} disabled={subCategories.length === 0}>
                        <option value="">-- Pilih Sub-Kategori --</option>
                        {subCategories.map(sub => <option key={sub.id} value={sub.id}>{sub.name}</option>)}
                    </Select>
                </InputGroup>
                <InputGroup>
                    <Label>Pemasok</Label>
                    <Select name="supplier_id" value={formData.supplier_id} onChange={handleChange}>
                        <option value="">-- Pilih Pemasok --</option>
                        {suppliers.map(sup => <option key={sup.id} value={sup.id}>{sup.name}</option>)}
                    </Select>
                </InputGroup>
                <InputGroup>
                    <Label>Tanggal Kadaluarsa (Opsional)</Label>
                    <Input type="date" name="expiration_date" value={formData.expiration_date} onChange={handleChange} />
                </InputGroup>
                <InputGroup>
                    <Label>Total Stok</Label>
                    <Input name="stock" type="number" value={formData.stock} onChange={handleChange} required />
                </InputGroup>
                
                <InputGroup>
                    <Label>Ambang Batas Stok Rendah</Label>
                    <Input name="low_stock_threshold" type="number" value={formData.low_stock_threshold} onChange={handleChange} required />
                </InputGroup>

                <VariantSection>
                    <Label style={{ fontWeight: 600, marginBottom: '15px' }}>Varian Produk</Label>
                    {formData.variants.map((variant, index) => (
                        <VariantRow key={index}>
                            <Input placeholder="Nama Varian (cth: Panas)" value={variant.name} onChange={e => handleVariantChange(index, 'name', e.target.value)} required />
                            <Input
                                type="text" placeholder="Harga Beli (Modal)" value={formatRupiah(variant.cost_price)}
                                onChange={e => handleVariantChange(index, 'cost_price', e.target.value)}
                                onFocus={e => { const rawValue = parseRupiah(e.target.value); e.target.value = isNaN(rawValue) ? '' : rawValue; }}
                                onBlur={e => { const rawValue = parseRupiah(e.target.value); e.target.value = formatRupiah(rawValue); }}
                                required
                            />
                            <Input
                                type="text" placeholder="Harga Jual" value={formatRupiah(variant.price)}
                                onChange={e => handleVariantChange(index, 'price', e.target.value)}
                                onFocus={e => { const rawValue = parseRupiah(e.target.value); e.target.value = isNaN(rawValue) ? '' : rawValue; }}
                                onBlur={e => { const rawValue = parseRupiah(e.target.value); e.target.value = formatRupiah(rawValue); }}
                                required
                            />
                            <Input placeholder="Barcode/SKU" value={variant.barcode || ''} onChange={e => handleVariantChange(index, 'barcode', e.target.value)} />
                            <ActionButton type="button" onClick={() => removeVariant(index)}><FiTrash2 size={18} /></ActionButton>
                        </VariantRow>
                    ))}
                    <AddVariantButton type="button" onClick={addVariant}><FiPlus /> Tambah Varian</AddVariantButton>
                </VariantSection>
                <InputGroup $fullWidth>
                    <Label>URL Gambar (atau Unggah)</Label>
                    <FileInputContainer>
                        <Input name="image_url" value={selectedFile ? selectedFile.name : formData.image_url} onChange={handleChange} placeholder="URL Gambar atau pilih file" disabled={!!selectedFile} />
                        <UploadButton type="button" onClick={triggerFileInput}> <FiUpload /> Unggah </UploadButton>
                        <FileInput type="file" accept="image/*" onChange={handleFileChange} ref={fileInputRef} />
                    </FileInputContainer>
                    {selectedFile && <small style={{ color: 'var(--text-secondary)', marginTop: '5px' }}>File dipilih: {selectedFile.name}</small>}
                    {formData.image_url && !selectedFile && <small style={{ color: 'var(--text-secondary)', marginTop: '5px' }}>URL Gambar: {formData.image_url}</small>}
                </InputGroup>
                <InputGroup $fullWidth>
                    <Label>Deskripsi</Label>
                    <Input as="textarea" rows="3" name="description" value={formData.description} onChange={handleChange} />
                </InputGroup>
            </FormGrid>
            <FormFooter>
                <SaveButton type="submit" disabled={isSubmitting}>
                    <FiSave /> {isSubmitting ? 'Menyimpan...' : 'Simpan Produk'}
                </SaveButton>
            </FormFooter>
        </Form>
    );

    return (
        <PageContainer
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
        >
            <BackLink to="/products"><FiArrowLeft /> Kembali ke Daftar Produk</BackLink>
            <PageHeader>
                <Title>{isEditing ? 'Edit Produk' : 'Tambah Produk Baru'}</Title>
            </PageHeader>
            <PageWrapper loading={loading}>
                {formContent}
            </PageWrapper>
        </PageContainer>
    );
}

export default ProductFormPage;

===== frontend\src\components\ProtectedRoute.jsx =====
import React from 'react';
import { Navigate, Outlet, useLocation } from 'react-router-dom';
import { jwtDecode } from 'jwt-decode';

const ProtectedRoute = () => {
    const location = useLocation();
    const token = localStorage.getItem('token');

    if (!token) {
        return <Navigate to="/login" state={{ from: location }} replace />;
    }

    try {
        const decoded = jwtDecode(token);
        const isExpired = decoded.exp * 1000 < Date.now();
        if (isExpired) {
            localStorage.removeItem('token');
            return <Navigate to="/login" state={{ from: location }} replace />;
        }
    } catch (error) {
        localStorage.removeItem('token');
        return <Navigate to="/login" state={{ from: location }} replace />;
    }

    return <Outlet />;
};

export default ProtectedRoute;

===== frontend\src\components\RawMaterialFormModal.jsx =====
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7); display: flex;
  justify-content: center; align-items: center; z-index: 1000;
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface); border-radius: 16px;
  border: 1px solid var(--border-color); width: 100%;
  max-width: 500px; box-shadow: 0 10px 30px rgba(0,0,0,0.3);
`;
const ModalHeader = styled.div`
  padding: 20px 25px; border-bottom: 1px solid var(--border-color);
  display: flex; justify-content: space-between; align-items: center;
`;
const ModalTitle = styled.h3` font-size: 1.2rem; font-weight: 600; `;
const CloseButton = styled.button` background: none; border: none; color: var(--text-secondary); cursor: pointer; &:hover { color: var(--text-primary); } `;
const ModalBody = styled.div` padding: 25px; display: grid; grid-template-columns: 1fr 1fr; gap: 20px; `;
const InputGroup = styled.div` grid-column: ${props => props.$fullWidth ? '1 / -1' : 'auto'}; `;
const Label = styled.label` display: block; margin-bottom: 8px; font-weight: 500; font-size: 0.9rem; color: var(--text-secondary); `;
const Input = styled.input` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; `;
const ModalFooter = styled.div` padding: 20px 25px; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; gap: 15px; `;
const Button = styled.button`
  padding: 10px 25px; border-radius: 8px; border: 1px solid var(--border-color);
  font-weight: 600; cursor: pointer;
  background-color: ${props => props.$primary ? 'var(--primary-color)' : 'transparent'};
  color: ${props => props.$primary ? 'white' : 'var(--text-primary)'};
  &:hover { opacity: 0.9; }
  &:disabled { opacity: 0.5; cursor: not-allowed; }
`;

function RawMaterialFormModal({ isOpen, onClose, onSave, material, isSubmitting }) {
    const [formData, setFormData] = useState({});
    const isEditing = Boolean(material);

    useEffect(() => {
        setFormData(material || { name: '', stock_quantity: '', unit: '', cost_per_unit: '' });
    }, [material, isOpen]);

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave(formData);
    };

    return (
        <AnimatePresence>
            {isOpen && (
                <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
                    <ModalContainer initial={{ y: -50 }} animate={{ y: 0 }} exit={{ y: 50 }}>
                        <form onSubmit={handleSubmit}>
                            <ModalHeader>
                                <ModalTitle>{isEditing ? 'Edit Bahan Baku' : 'Tambah Bahan Baku'}</ModalTitle>
                                <CloseButton type="button" onClick={onClose}><FiX size={24} /></CloseButton>
                            </ModalHeader>
                            <ModalBody>
                                <InputGroup $fullWidth>
                                    <Label>Nama Bahan Baku</Label>
                                    <Input name="name" value={formData.name || ''} onChange={handleChange} required autoFocus />
                                </InputGroup>
                                <InputGroup>
                                    <Label>Stok Awal</Label>
                                    <Input type="number" step="0.01" name="stock_quantity" value={formData.stock_quantity || ''} onChange={handleChange} required />
                                </InputGroup>
                                <InputGroup>
                                    <Label>Satuan</Label>
                                    <Input name="unit" value={formData.unit || ''} onChange={handleChange} required placeholder="cth: gram, ml, pcs" />
                                </InputGroup>
                                <InputGroup $fullWidth>
                                    <Label>Harga Beli per Satuan (Modal)</Label>
                                    <Input type="number" step="0.01" name="cost_per_unit" value={formData.cost_per_unit || ''} onChange={handleChange} required />
                                </InputGroup>
                            </ModalBody>
                            <ModalFooter>
                                <Button type="button" onClick={onClose}>Batal</Button>
                                <Button type="submit" $primary disabled={isSubmitting}>
                                    {isSubmitting ? 'Menyimpan...' : 'Simpan'}
                                </Button>
                            </ModalFooter>
                        </form>
                    </ModalContainer>
                </ModalBackdrop>
            )}
        </AnimatePresence>
    );
}

RawMaterialFormModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onSave: PropTypes.func.isRequired,
  material: PropTypes.object,
  isSubmitting: PropTypes.bool.isRequired,
};

export default RawMaterialFormModal;

===== frontend\src\components\Receipt.jsx =====
import React, { useContext } from 'react';
import PropTypes from 'prop-types';
import { BusinessContext } from '../context/BusinessContext';

const Receipt = React.forwardRef(({ order }, ref) => {
    // Gunakan BusinessContext untuk mendapatkan data pengaturan
    const { settings } = useContext(BusinessContext);

    if (!order) {
        return <div ref={ref} style={{ display: 'none' }}></div>;
    }

    const formatCurrency = (num) => new Intl.NumberFormat('id-ID').format(num || 0);

    return (
        <div ref={ref} style={{ fontFamily: "'Courier New', Courier, monospace", fontSize: '12px', color: '#000', width: '300px', padding: '20px' }}>
            <div style={{ textAlign: 'center', marginBottom: '20px' }}>
                {/* Tampilkan logo jika URL-nya ada di pengaturan */}
                {settings.receipt_logo_url && (
                    <img 
                        src={settings.receipt_logo_url} 
                        alt="Logo Toko" 
                        style={{ maxWidth: '100px', maxHeight: '50px', marginBottom: '10px' }} 
                    />
                )}
                {/* Gunakan data dinamis dari 'settings' */}
                <h2 style={{ margin: 0, fontSize: '16px' }}>{settings.business_name || 'Toko Anda'}</h2>
                <p style={{ margin: '2px 0' }}>{settings.address || 'Alamat Toko Anda'}</p>
                <p style={{ margin: '2px 0' }}>Telp: {settings.phone_number || 'Nomor Telepon Anda'}</p>
            </div>
            
            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '5px' }}>
                <span>No: #{order.id}</span>
                <span>{new Date(order.created_at).toLocaleString('id-ID', {day: '2-digit', month: '2-digit', year: '2-digit', hour: '2-digit', minute: '2-digit'})}</span>
            </div>
            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '5px' }}>
                <span>Kasir: {order.cashier_name}</span>
                <span>Pelanggan: {order.customer_name || '-'}</span>
            </div>
            
            <hr style={{ border: 0, borderTop: '1px dashed #ccc', margin: '10px 0' }} />
            
            <table style={{ width: '100%', borderCollapse: 'collapse', marginBottom: '10px' }}>
                <thead>
                    <tr>
                        <th style={{ textAlign: 'left', padding: '5px 0', borderBottom: '1px dashed #ccc' }}>Item</th>
                        <th style={{ textAlign: 'center', padding: '5px 0', borderBottom: '1px dashed #ccc' }}>Qty</th>
                        <th style={{ textAlign: 'right', padding: '5px 0', borderBottom: '1px dashed #ccc' }}>Harga</th>
                    </tr>
                </thead>
                <tbody>
                    {order.items.map((item, index) => (
                        <tr key={index}>
                            <td style={{ padding: '5px 0' }}>{item.product_name}{item.variant_name ? ` (${item.variant_name})` : ''}</td>
                            <td style={{ textAlign: 'center', padding: '5px 0' }}>{item.quantity}</td>
                            <td style={{ textAlign: 'right', padding: '5px 0' }}>{formatCurrency(item.price * item.quantity)}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
            
            <hr style={{ border: 0, borderTop: '1px dashed #ccc', margin: '10px 0' }} />
            
            <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                <tbody>
                    <tr>
                        <td>Subtotal</td>
                        <td style={{ textAlign: 'right' }} colSpan="2">Rp {formatCurrency(order.subtotal_amount)}</td>
                    </tr>
                    {order.tax_amount > 0 && (
                         <tr>
                            <td>Pajak</td>
                            <td style={{ textAlign: 'right' }} colSpan="2">Rp {formatCurrency(order.tax_amount)}</td>
                        </tr>
                    )}
                    <tr>
                        <td><strong>Total</strong></td>
                        <td style={{ textAlign: 'right' }} colSpan="2"><strong>Rp {formatCurrency(order.total_amount)}</strong></td>
                    </tr>
                    <tr>
                        <td>Dibayar</td>
                        <td style={{ textAlign: 'right' }} colSpan="2">Rp {formatCurrency(order.amount_paid)}</td>
                    </tr>
                    {order.payment_method === 'Tunai' && (order.amount_paid - order.total_amount) >= 0 && (
                        <tr>
                            <td>Kembalian</td>
                            <td style={{ textAlign: 'right' }} colSpan="2">Rp {formatCurrency(order.amount_paid - order.total_amount)}</td>
                        </tr>
                    )}
                </tbody>
            </table>
            
            <div style={{ textAlign: 'center', marginTop: '20px' }}>
                {/* Gunakan teks footer dinamis dari 'settings' */}
                <p>{settings.receipt_footer_text || 'Terima Kasih!'}</p>
            </div>
        </div>
    );
});

Receipt.displayName = 'Receipt';

Receipt.propTypes = {
  order: PropTypes.object,
};

export default Receipt;

===== frontend\src\components\RedeemRewardModal.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\components\RedeemRewardModal.jsx

import React, { useState, useEffect, useCallback } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX, FiGift, FiLoader } from 'react-icons/fi';
import { getRewards, redeemRewardForCustomer } from '../services/api';
import { toast } from 'react-toastify';
import Skeleton from 'react-loading-skeleton';
import ConfirmationModal from './ConfirmationModal'; // Impor modal konfirmasi

// --- Styled Components ---
const ModalBackdrop = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1001;
  backdrop-filter: blur(5px);
`;

const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);
  width: 100%;
  max-width: 500px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  display: flex;
  flex-direction: column;
  max-height: 80vh;
`;

const ModalHeader = styled.div`
  padding: 20px 25px;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-shrink: 0;
`;

const ModalTitle = styled.h3`
  font-size: 1.2rem;
  font-weight: 600;
`;

const CloseButton = styled.button`
  background: none;
  border: none;
  color: var(--text-secondary);
  cursor: pointer;
  &:hover {
    color: var(--text-primary);
  }
`;

const ModalBody = styled.div`
  padding: 25px;
  overflow-y: auto;
  flex-grow: 1;
`;

const RewardList = styled(motion.ul)`
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 12px;
`;

const RewardItemContainer = styled(motion.li)`
  padding: 15px 20px;
  border: 1px solid var(--border-color);
  border-radius: 12px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  cursor: ${(props) => (props.$disabled ? 'not-allowed' : 'pointer')};
  opacity: ${(props) => (props.$disabled ? 0.6 : 1)};
  transition: all 0.2s ease;
  position: relative;
  overflow: hidden;

  &:hover {
    border-color: ${(props) => (props.$disabled ? 'var(--border-color)' : 'var(--primary-color)')};
    transform: ${(props) => (props.$disabled ? 'none' : 'translateY(-2px)')};
    box-shadow: ${(props) => (props.$disabled ? 'none' : '0 4px 12px rgba(0,0,0,0.08)')};
  }
`;

const RewardInfo = styled.div`
  font-weight: 600;
  color: var(--text-primary);
  z-index: 2;
`;

const PointsCost = styled.div`
  font-weight: 700;
  color: var(--primary-color);
  background-color: var(--bg-main);
  padding: 4px 10px;
  border-radius: 20px;
  font-size: 0.9rem;
  z-index: 2;
`;

const EmptyStateContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  color: var(--text-secondary);
  padding: 40px 20px;
  min-height: 200px;
`;

// Komponen untuk item hadiah
const RewardItem = ({ reward, customerPoints, onRedeem }) => {
  const isDisabled = customerPoints < reward.points_cost;
  return (
    <RewardItemContainer
      $disabled={isDisabled}
      onClick={() => !isDisabled && onRedeem(reward)}
      whileTap={{ scale: isDisabled ? 1 : 0.98 }}
    >
      <RewardInfo>{reward.name}</RewardInfo>
      <PointsCost>{reward.points_cost.toLocaleString('id-ID')} Poin</PointsCost>
    </RewardItemContainer>
  );
};

RewardItem.propTypes = {
  reward: PropTypes.object.isRequired,
  customerPoints: PropTypes.number.isRequired,
  onRedeem: PropTypes.func.isRequired,
};


function RedeemRewardModal({ isOpen, onClose, customer, onRedemptionSuccess }) {
  const [rewards, setRewards] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isConfirmOpen, setIsConfirmOpen] = useState(false);
  const [selectedReward, setSelectedReward] = useState(null);

  const fetchRewards = useCallback(async () => {
    if (!isOpen) return;
    setLoading(true);
    try {
      const res = await getRewards();
      setRewards(res.data);
    } catch (error) {
      toast.error("Gagal memuat daftar hadiah.");
    } finally {
      setLoading(false);
    }
  }, [isOpen]);

  useEffect(() => {
    fetchRewards();
  }, [fetchRewards]);

  const handleSelectReward = (reward) => {
    setSelectedReward(reward);
    setIsConfirmOpen(true);
  };

  const confirmRedemption = async () => {
    if (!selectedReward) return;

    try {
      await toast.promise(
        redeemRewardForCustomer(customer.id, selectedReward.id),
        {
          pending: 'Memproses penukaran...',
          success: 'Hadiah berhasil ditukarkan!',
          error: (err) => err.response?.data?.message || 'Gagal menukarkan hadiah.'
        }
      );
      onRedemptionSuccess(); // Refresh data di halaman detail
    } catch (error) {
      console.error(error);
    } finally {
      setIsConfirmOpen(false);
      setSelectedReward(null);
    }
  };

  return (
    <>
      <AnimatePresence>
        {isOpen && (
          <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
            <ModalContainer initial={{ y: -50, opacity: 0 }} animate={{ y: 0, opacity: 1 }} exit={{ y: 50, opacity: 0 }}>
              <ModalHeader>
                <ModalTitle>Tukarkan Poin - {customer.name}</ModalTitle>
                <CloseButton onClick={onClose}><FiX size={24} /></CloseButton>
              </ModalHeader>
              <ModalBody>
                {loading ? (
                  <RewardList>
                    {[...Array(3)].map((_, i) => <Skeleton key={i} height={60} borderRadius={12} />)}
                  </RewardList>
                ) : rewards.length > 0 ? (
                  <RewardList>
                    {rewards.map(reward => (
                      <RewardItem
                        key={reward.id}
                        reward={reward}
                        customerPoints={customer.points}
                        onRedeem={handleSelectReward}
                      />
                    ))}
                  </RewardList>
                ) : (
                  <EmptyStateContainer>
                      <FiGift size={48} style={{ marginBottom: '20px' }} />
                      <h3>Belum Ada Hadiah</h3>
                      <p>Saat ini belum ada katalog hadiah yang tersedia.</p>
                  </EmptyStateContainer>
                )}
              </ModalBody>
            </ModalContainer>
          </ModalBackdrop>
        )}
      </AnimatePresence>
      
      <ConfirmationModal
        isOpen={isConfirmOpen}
        onClose={() => setIsConfirmOpen(false)}
        onConfirm={confirmRedemption}
        title="Konfirmasi Penukaran"
        message={`Yakin ingin menukarkan ${selectedReward?.points_cost.toLocaleString('id-ID')} poin untuk "${selectedReward?.name}"?`}
      />
    </>
  );
}

RedeemRewardModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  customer: PropTypes.object.isRequired,
  onRedemptionSuccess: PropTypes.func.isRequired,
};

export default RedeemRewardModal;

===== frontend\src\components\RewardFormModal.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\components\RewardFormModal.jsx

import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);
  width: 100%;
  max-width: 500px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.3);
`;

const ModalHeader = styled.div`
  padding: 20px 25px;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const ModalTitle = styled.h3`
  font-size: 1.2rem;
  font-weight: 600;
`;

const CloseButton = styled.button`
  background: none;
  border: none;
  color: var(--text-secondary);
  cursor: pointer;
  &:hover { color: var(--text-primary); }
`;

const ModalBody = styled.div`
  padding: 25px;
  display: flex;
  flex-direction: column;
  gap: 20px;
`;

const InputGroup = styled.div``;

const Label = styled.label`
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  font-size: 0.9rem;
  color: var(--text-secondary);
`;

const Input = styled.input`
  width: 100%;
  padding: 12px;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  background-color: var(--bg-main);
  color: var(--text-primary);
  font-size: 1rem;
`;

const CheckboxContainer = styled.div`
  display: flex;
  align-items: center;
  gap: 10px;
  
  label {
    margin-bottom: 0;
    cursor: pointer;
  }
`;

const ModalFooter = styled.div`
  padding: 20px 25px;
  border-top: 1px solid var(--border-color);
  display: flex;
  justify-content: flex-end;
  gap: 15px;
`;

const Button = styled.button`
  padding: 10px 25px;
  border-radius: 8px;
  border: 1px solid var(--border-color);
  font-weight: 600;
  cursor: pointer;
  background-color: ${props => props.$primary ? 'var(--primary-color)' : 'transparent'};
  color: ${props => props.$primary ? 'white' : 'var(--text-primary)'};
  
  &:hover {
    opacity: 0.9;
  }
  
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

function RewardFormModal({ isOpen, onClose, onSave, reward, isSubmitting }) {
    const [formData, setFormData] = useState({ name: '', description: '', points_cost: '', is_active: true });
    const isEditing = Boolean(reward);

    useEffect(() => {
        if (isOpen) {
            // Jika sedang mengedit, isi form dengan data hadiah. Jika tidak, reset form.
            setFormData(reward || { name: '', description: '', points_cost: '', is_active: true });
        }
    }, [reward, isOpen]);

    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value }));
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        // Pastikan biaya poin dikirim sebagai angka
        onSave({ ...formData, points_cost: parseInt(formData.points_cost, 10) });
    };

    return (
        <AnimatePresence>
            {isOpen && (
                <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
                    <ModalContainer initial={{ y: -50 }} animate={{ y: 0 }} exit={{ y: 50 }}>
                        <form onSubmit={handleSubmit}>
                            <ModalHeader>
                                <ModalTitle>{isEditing ? 'Edit Hadiah' : 'Tambah Hadiah Baru'}</ModalTitle>
                                <CloseButton type="button" onClick={onClose}><FiX size={24} /></CloseButton>
                            </ModalHeader>
                            <ModalBody>
                                <InputGroup>
                                    <Label htmlFor="name">Nama Hadiah</Label>
                                    <Input id="name" name="name" value={formData.name} onChange={handleChange} required autoFocus />
                                </InputGroup>
                                <InputGroup>
                                    <Label htmlFor="description">Deskripsi (Opsional)</Label>
                                    <Input as="textarea" rows="3" id="description" name="description" value={formData.description} onChange={handleChange} />
                                </InputGroup>
                                <InputGroup>
                                    <Label htmlFor="points_cost">Biaya Poin</Label>
                                    <Input id="points_cost" type="number" name="points_cost" value={formData.points_cost} onChange={handleChange} required min="1" />
                                </InputGroup>
                                <CheckboxContainer>
                                    <input type="checkbox" id="is_active" name="is_active" checked={formData.is_active} onChange={handleChange} />
                                    <Label htmlFor="is_active">Aktifkan Hadiah</Label>
                                </CheckboxContainer>
                            </ModalBody>
                            <ModalFooter>
                                <Button type="button" onClick={onClose}>Batal</Button>
                                <Button type="submit" $primary disabled={isSubmitting}>{isSubmitting ? 'Menyimpan...' : 'Simpan'}</Button>
                            </ModalFooter>
                        </form>
                    </ModalContainer>
                </ModalBackdrop>
            )}
        </AnimatePresence>
    );
}

RewardFormModal.propTypes = {
    isOpen: PropTypes.bool.isRequired,
    onClose: PropTypes.func.isRequired,
    onSave: PropTypes.func.isRequired,
    reward: PropTypes.object,
    isSubmitting: PropTypes.bool.isRequired,
};

export default RewardFormModal;

===== frontend\src\components\RoleFormModal.jsx =====
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);
  width: 100%;
  max-width: 800px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  display: flex;
  flex-direction: column;
  max-height: 90vh;
`;

const ModalHeader = styled.div`
  padding: 20px 25px;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const ModalTitle = styled.h3`
  font-size: 1.2rem;
  font-weight: 600;
`;

const CloseButton = styled.button`
  background: none;
  border: none;
  color: var(--text-secondary);
  cursor: pointer;
  &:hover {
    color: var(--text-primary);
  }
`;

const ModalBody = styled.div`
  padding: 25px;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  gap: 20px;
`;

const FormRow = styled.div`
  display: flex;
  gap: 20px;
  @media (max-width: 768px) {
    flex-direction: column;
  }
`;

const InputGroup = styled.div`
  flex: 1;
`;

const Label = styled.label`
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  font-size: 0.9rem;
  color: var(--text-secondary);
`;

const Input = styled.input`
  width: 100%;
  padding: 12px;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  background-color: var(--bg-main);
  color: var(--text-primary);
  font-size: 1rem;
`;

const PermissionGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 15px;
  margin-top: 10px;
`;

const PermissionCheckbox = styled.div`
  display: flex;
  align-items: center;
  gap: 10px;
  label {
    cursor: pointer;
  }
`;

const ModalFooter = styled.div`
  padding: 20px 25px;
  border-top: 1px solid var(--border-color);
  display: flex;
  justify-content: flex-end;
  gap: 15px;
`;

const Button = styled.button`
  padding: 10px 25px;
  border-radius: 8px;
  border: 1px solid var(--border-color);
  font-weight: 600;
  cursor: pointer;
  background-color: ${props => props.$primary ? 'var(--primary-color)' : 'transparent'};
  color: ${props => props.$primary ? 'white' : 'var(--text-primary)'};
  &:hover {
    opacity: 0.9;
  }
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

function RoleFormModal({ isOpen, onClose, onSave, role, permissionsList, isSubmitting }) {
    const [formData, setFormData] = useState({ name: '', description: '', permissions: [] });
    const isEditing = Boolean(role);

    useEffect(() => {
        if (isOpen) {
            setFormData(role ? { ...role, permissions: role.permissions || [] } : { name: '', description: '', permissions: [] });
        }
    }, [role, isOpen]);

    const handleChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });

    const handlePermissionChange = (permissionId) => {
        const currentPermissions = formData.permissions;
        const newPermissions = currentPermissions.includes(permissionId)
            ? currentPermissions.filter(id => id !== permissionId)
            : [...currentPermissions, permissionId];
        setFormData({ ...formData, permissions: newPermissions });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        onSave(formData);
    };

    return (
        <AnimatePresence>
            {isOpen && (
                <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
                    <ModalContainer initial={{ y: -50 }} animate={{ y: 0 }} exit={{ y: 50 }}>
                        <form onSubmit={handleSubmit}>
                            <ModalHeader>
                                <ModalTitle>{isEditing ? 'Edit Peran' : 'Tambah Peran Baru'}</ModalTitle>
                                <CloseButton type="button" onClick={onClose}><FiX size={24} /></CloseButton>
                            </ModalHeader>
                            <ModalBody>
                                <FormRow>
                                    <InputGroup>
                                        <Label>Nama Peran</Label>
                                        <Input name="name" value={formData.name || ''} onChange={handleChange} required autoFocus />
                                    </InputGroup>
                                    <InputGroup>
                                        <Label>Deskripsi</Label>
                                        <Input name="description" value={formData.description || ''} onChange={handleChange} />
                                    </InputGroup>
                                </FormRow>
                                <div>
                                    <Label style={{ marginBottom: '15px' }}>Izin (Permissions)</Label>
                                    <PermissionGrid>
                                        {permissionsList.map(p => (
                                            <PermissionCheckbox key={p.id}>
                                                <input
                                                    type="checkbox"
                                                    id={`perm-${p.id}`}
                                                    checked={formData.permissions.includes(p.id)}
                                                    onChange={() => handlePermissionChange(p.id)}
                                                />
                                                <label htmlFor={`perm-${p.id}`}>{p.description}</label>
                                            </PermissionCheckbox>
                                        ))}
                                    </PermissionGrid>
                                </div>
                            </ModalBody>
                            <ModalFooter>
                                <Button type="button" onClick={onClose}>Batal</Button>
                                <Button type="submit" $primary disabled={isSubmitting}>{isSubmitting ? 'Menyimpan...' : 'Simpan'}</Button>
                            </ModalFooter>
                        </form>
                    </ModalContainer>
                </ModalBackdrop>
            )}
        </AnimatePresence>
    );
}

RoleFormModal.propTypes = {
    isOpen: PropTypes.bool.isRequired,
    onClose: PropTypes.func.isRequired,
    onSave: PropTypes.func.isRequired,
    role: PropTypes.object,
    permissionsList: PropTypes.array.isRequired,
    isSubmitting: PropTypes.bool.isRequired,
};

export default RoleFormModal;

===== frontend\src\components\Sidebar.jsx =====
import React, { useState, useEffect, useContext } from 'react';
import styled from 'styled-components';
import { NavLink, useNavigate } from 'react-router-dom';
import {
    FiGrid, FiShoppingCart, FiPackage, FiLogOut, FiList,
    FiSettings, FiZap, FiPower, FiClock, FiFileText
} from 'react-icons/fi';
import { jwtDecode } from 'jwt-decode';
import { useShift } from '../context/ShiftContext';
import { BusinessContext } from '../context/BusinessContext';
import CloseShiftModal from './CloseShiftModal';
import { toast } from 'react-toastify';

const SidebarContainer = styled.div`
    width: 250px;
    background-color: var(--bg-surface);
    border-right: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    padding: 25px 15px;
    height: 100vh;
    box-sizing: border-box;

    @media (max-width: 1024px) {
        width: 100%;
        height: auto;
        padding: 8px;
        flex-direction: row;
        justify-content: space-around;
        align-items: center;
        border-right: none;
        border-top: 1px solid var(--border-color);
        position: fixed;
        bottom: 0;
        left: 0;
        z-index: 100;
    }
`;

const Logo = styled.h1`
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--primary-color);
    text-align: center;
    margin-bottom: 30px;

    @media (max-width: 1024px) {
        display: none;
    }
`;

const NavList = styled.ul`
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 8px;
    flex-grow: 1;
    overflow-y: auto;

    @media (max-width: 1024px) {
        flex-direction: row;
        flex-grow: 1;
        overflow-y: visible;
        gap: 0;
        justify-content: space-evenly;
    }
`;

const NavItem = styled(NavLink)`
    display: flex;
    align-items: center;
    gap: 15px;
    color: var(--text-secondary);
    text-decoration: none;
    padding: 12px 20px;
    border-radius: 10px;
    font-weight: 500;
    position: relative;
    overflow: hidden;
    transition: all 0.2s ease-in-out;

    &::before {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        height: 0;
        width: 4px;
        background-color: var(--primary-color);
        transition: height 0.2s ease-in-out;
    }

    &:hover {
        background-color: var(--bg-main);
        color: var(--text-primary);
    }

    &.active {
        background-color: var(--bg-main);
        color: var(--text-primary);
        font-weight: 600;

        &::before {
            height: 60%;
        }
    }

    @media (max-width: 1024px) {
        flex-direction: column;
        padding: 8px;
        font-size: 0.7rem;
        gap: 4px;

        &::before {
            top: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 3px;
            transition: width 0.2s ease-in-out;
        }

        &.active::before {
            width: 50%;
            height: 3px;
        }
    }
`;

const ActionButtonsContainer = styled.div`
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-top: auto;

    @media (max-width: 1024px) {
        flex-direction: row;
        margin-top: 0;
        flex-grow: 0;
        gap: 8px;
    }
`;

const CloseShiftButton = styled.button`
    display: flex;
    align-items: center;
    gap: 15px;
    width: 100%;
    background-color: var(--red-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 15px;
    font-weight: 600;
    font-size: 1rem;
    font-family: 'Poppins', sans-serif;
    cursor: pointer;
    box-shadow: 0 4px 10px rgba(229, 62, 62, 0.3);
    transition: background-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;

    &:hover {
        background-color: #CC2222;
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(229, 62, 62, 0.4);
    }

    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        box-shadow: none;
        transform: none;
    }

    @media (max-width: 1024px) {
        flex-direction: column;
        padding: 8px;
        font-size: 0.7rem;
        gap: 4px;
        width: auto;
    }
`;

const LogoutButton = styled.button`
    display: flex;
    align-items: center;
    gap: 15px;
    width: 100%;
    background: none;
    border: none;
    color: var(--text-secondary);
    padding: 12px 15px;
    border-radius: 8px;
    font-weight: 500;
    font-size: 1rem;
    font-family: 'Poppins', sans-serif;
    cursor: pointer;
    transition: all 0.2s ease-in-out;

    &:hover {
        background-color: var(--bg-main);
        color: var(--red-color);
    }

    @media (max-width: 1024px) {
        flex-direction: column;
        padding: 8px;
        font-size: 0.7rem;
        gap: 4px;
        width: auto;
    }
`;

function Sidebar() {
    const { activeShift, refreshShiftStatus } = useShift();
    const { settings } = useContext(BusinessContext);
    const [isCloseShiftModalOpen, setCloseShiftModalOpen] = useState(false);
    const navigate = useNavigate();
    const [localUserRole, setLocalUserRole] = useState(null);

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            try {
                const decoded = jwtDecode(token);
                setLocalUserRole(decoded.role?.toLowerCase());
            } catch (error) {
                console.error('Invalid token:', error);
            }
        }
    }, []);

    const handleLogout = () => {
        if (localUserRole === 'kasir' && activeShift) {
            toast.warn('Anda harus menutup shift terlebih dahulu sebelum logout.');
            return;
        }
        localStorage.removeItem('token');
        refreshShiftStatus();
        navigate('/login');
    };

    const handleShiftClosed = () => {
        setCloseShiftModalOpen(false);
        toast.success('Shift berhasil ditutup. Anda akan segera logout.');
        localStorage.removeItem('token');
        refreshShiftStatus();
        navigate('/login', { replace: true });
    };

    const businessName = settings?.business_name || 'Smart POS';

    return (
        <>
            <SidebarContainer>
                <Logo>{businessName}</Logo>
                <NavList>
                    <li>
                        <NavItem to="/pos">
                            <FiShoppingCart size={20} /> Kasir
                        </NavItem>
                    </li>
                    {localUserRole && localUserRole.toLowerCase() === 'admin' && (
                        <>
                            <li>
                                <NavItem to="/dashboard">
                                    <FiGrid size={20} /> Dashboard
                                </NavItem>
                            </li>
                            <li>
                                <NavItem to="/products">
                                    <FiPackage size={20} /> Produk
                                </NavItem>
                            </li>
                            <li>
                                <NavItem to="/history">
                                    <FiList size={20} /> Riwayat
                                </NavItem>
                            </li>
                            <li>
                                <NavItem to="/reports">
                                    <FiFileText size={20} /> Laporan
                                </NavItem>
                            </li>
                            <li>
                                <NavItem to="/shift-history">
                                    <FiClock size={20} /> Riwayat Shift
                                </NavItem>
                            </li>
                            <li>
                                <NavItem to="/quick-actions">
                                    <FiZap size={20} /> Aksi Cepat
                                </NavItem>
                            </li>
                            <li>
                                <NavItem to="/settings">
                                    <FiSettings size={20} /> Setelan
                                </NavItem>
                            </li>
                        </>
                    )}
                </NavList>

                <ActionButtonsContainer>
                    {localUserRole === 'kasir' && activeShift && (
                        <CloseShiftButton onClick={() => setCloseShiftModalOpen(true)}>
                            <FiPower size={20} /> Tutup Shift
                        </CloseShiftButton>
                    )}
                    <LogoutButton onClick={handleLogout}>
                        <FiLogOut size={20} /> Logout
                    </LogoutButton>
                </ActionButtonsContainer>
            </SidebarContainer>

            {isCloseShiftModalOpen && activeShift && (
                <CloseShiftModal
                    shiftId={activeShift.id}
                    onClose={() => setCloseShiftModalOpen(false)}
                    onShiftClosed={handleShiftClosed}
                />
            )}
        </>
    );
}

export default Sidebar;

===== frontend\src\components\StartShiftModal.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\components\StartShiftModal.jsx

import React, { useState } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { FiLogIn } from 'react-icons/fi';
import { startShift } from '../services/api';
import { toast } from 'react-toastify';

const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7); display: flex;
  justify-content: center; align-items: center; z-index: 1001; backdrop-filter: blur(5px);
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface); border-radius: 16px;
  width: 100%; max-width: 400px; padding: 30px; text-align: center;
`;
const ModalTitle = styled.h2` font-size: 1.5rem; margin-bottom: 20px; color: var(--text-primary); `;
const Button = styled.button` padding: 12px 20px; border-radius: 8px; border: none; background-color: var(--primary-color); color: white; font-weight: 600; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 8px; width: 100%; &:disabled { opacity: 0.5; } `;

function StartShiftModal({ onShiftStarted }) {
    const [isSubmitting, setIsSubmitting] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        try {
            // Tidak perlu mengirim data apa pun, backend akan otomatis menggunakan nilai default
            await toast.promise(startShift(), {
                pending: 'Memulai shift...',
                success: 'Shift berhasil dimulai!',
                error: (err) => err.response?.data?.message || 'Gagal memulai shift.'
            });
            onShiftStarted();
        } catch (error) {
            console.error(error);
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
            <ModalContainer initial={{ y: -50 }} animate={{ y: 0 }}>
                <ModalTitle>Mulai Shift Baru?</ModalTitle>
                <p style={{color: 'var(--text-secondary)', marginBottom: '30px'}}>Kas awal akan diisi secara otomatis sesuai pengaturan admin.</p>
                <form onSubmit={handleSubmit}>
                    <Button type="submit" disabled={isSubmitting}>
                        <FiLogIn /> {isSubmitting ? 'Memproses...' : 'Konfirmasi & Mulai Shift'}
                    </Button>
                </form>
            </ModalContainer>
        </ModalBackdrop>
    );
}

StartShiftModal.propTypes = {
  onShiftStarted: PropTypes.func.isRequired,
};

export default StartShiftModal;

===== frontend\src\components\SupplierFormModal.jsx =====
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7); display: flex;
  justify-content: center; align-items: center; z-index: 1000;
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface); border-radius: 16px;
  border: 1px solid var(--border-color); width: 100%;
  max-width: 500px; box-shadow: 0 10px 30px rgba(0,0,0,0.3);
`;

const ModalHeader = styled.div`
  padding: 20px 25px; border-bottom: 1px solid var(--border-color);
  display: flex; justify-content: space-between; align-items: center;
`;

const ModalTitle = styled.h3`
  font-size: 1.2rem; font-weight: 600;
`;

const CloseButton = styled.button`
  background: none; border: none; color: var(--text-secondary);
  cursor: pointer; &:hover { color: var(--text-primary); }
`;

const ModalBody = styled.div`
  padding: 25px; display: grid;
  grid-template-columns: 1fr 1fr; gap: 20px;
`;

const InputGroup = styled.div`
  grid-column: ${props => props.$fullWidth ? '1 / -1' : 'auto'};
`;

const Label = styled.label`
  display: block; margin-bottom: 8px;
  font-weight: 500; font-size: 0.9rem;
  color: var(--text-secondary);
`;

const Input = styled.input`
  width: 100%; padding: 12px; border: 1px solid var(--border-color);
  border-radius: 8px; background-color: var(--bg-main);
  color: var(--text-primary); font-size: 1rem;
`;

const ModalFooter = styled.div`
  padding: 20px 25px; border-top: 1px solid var(--border-color);
  display: flex; justify-content: flex-end; gap: 15px;
`;

const Button = styled.button`
  padding: 10px 25px; border-radius: 8px;
  border: 1px solid var(--border-color);
  font-weight: 600; cursor: pointer;
  background-color: ${props => props.$primary ? 'var(--primary-color)' : 'transparent'};
  color: ${props => props.$primary ? 'white' : 'var(--text-primary)'};
  &:hover { opacity: 0.9; }
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

function SupplierFormModal({ isOpen, onClose, onSave, supplier, isSubmitting }) {
  const [formData, setFormData] = useState({});
  const isEditing = Boolean(supplier);

  useEffect(() => {
    setFormData(supplier || {
      name: '', contact_person: '', phone: '', email: '', address: ''
    });
  }, [supplier, isOpen]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };

  const backdropVariants = { hidden: { opacity: 0 }, visible: { opacity: 1 } };
  const modalVariants = { hidden: { y: "-50px", opacity: 0 }, visible: { y: "0", opacity: 1 } };

  return (
    <AnimatePresence>
      {isOpen && (
        <ModalBackdrop initial="hidden" animate="visible" exit="hidden" variants={backdropVariants}>
          <ModalContainer variants={modalVariants} onClick={(e) => e.stopPropagation()}>
            <form onSubmit={handleSubmit}>
              <ModalHeader>
                <ModalTitle>{isEditing ? 'Edit Pemasok' : 'Tambah Pemasok Baru'}</ModalTitle>
                <CloseButton type="button" onClick={onClose}><FiX size={24} /></CloseButton>
              </ModalHeader>
              <ModalBody>
                <InputGroup $fullWidth>
                  <Label>Nama Pemasok</Label>
                  <Input name="name" value={formData.name || ''} onChange={handleChange} required autoFocus />
                </InputGroup>
                <InputGroup>
                  <Label>Narahubung</Label>
                  <Input name="contact_person" value={formData.contact_person || ''} onChange={handleChange} />
                </InputGroup>
                <InputGroup>
                  <Label>Telepon</Label>
                  <Input name="phone" value={formData.phone || ''} onChange={handleChange} />
                </InputGroup>
                <InputGroup $fullWidth>
                  <Label>Email</Label>
                  <Input type="email" name="email" value={formData.email || ''} onChange={handleChange} />
                </InputGroup>
                <InputGroup $fullWidth>
                  <Label>Alamat</Label>
                  <Input as="textarea" rows="3" name="address" value={formData.address || ''} onChange={handleChange} />
                </InputGroup>
              </ModalBody>
              <ModalFooter>
                <Button type="button" onClick={onClose}>Batal</Button>
                <Button type="submit" $primary disabled={isSubmitting}>
                    {isSubmitting ? 'Menyimpan...' : 'Simpan'}
                </Button>
              </ModalFooter>
            </form>
          </ModalContainer>
        </ModalBackdrop>
      )}
    </AnimatePresence>
  );
}

export default SupplierFormModal;

SupplierFormModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onSave: PropTypes.func.isRequired,
  supplier: PropTypes.object,
  isSubmitting: PropTypes.bool.isRequired,
};

===== frontend\src\components\SyncManager.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\components\SyncManager.jsx

import { useEffect, useState } from 'react';
import { useOnlineStatus } from '../hooks/useOnlineStatus';
import { getAllOfflineOrders, deleteOfflineOrder } from '../utils/offlineDb';
import { createOrder } from '../services/api';
import { toast } from 'react-toastify';
import { useLiveQuery } from 'dexie-react-hooks';
import { db as offlineDB } from '../utils/offlineDb';

function SyncManager() {
  const isOnline = useOnlineStatus();
  const [isSyncing, setIsSyncing] = useState(false);
  
  // Hook ini akan memantau jumlah order di Dexie secara real-time
  const offlineOrderCount = useLiveQuery(() => offlineDB.offlineOrders.count(), []);

  useEffect(() => {
    const syncOfflineOrders = async () => {
      if (isOnline && !isSyncing && offlineOrderCount > 0) {
        setIsSyncing(true);
        const toastId = toast.info(`Sinkronisasi dimulai: ${offlineOrderCount} transaksi tertunda...`, { autoClose: false });

        const ordersToSync = await getAllOfflineOrders();
        let successCount = 0;

        for (const order of ordersToSync.data) {
          try {
            await createOrder(order.orderData);
            await deleteOfflineOrder(order.id);
            successCount++;
          } catch (error) {
            console.error(`Gagal sinkronisasi order ID lokal ${order.id}:`, error);
            // Hentikan jika ada error, coba lagi nanti
            toast.update(toastId, { render: `Sinkronisasi gagal pada satu transaksi. Mencoba lagi nanti.`, type: 'error', autoClose: 5000 });
            setIsSyncing(false);
            return;
          }
        }
        
        toast.update(toastId, { render: `${successCount} transaksi berhasil disinkronkan!`, type: 'success', autoClose: 5000 });
        setIsSyncing(false);
      }
    };

    syncOfflineOrders();
  }, [isOnline, isSyncing, offlineOrderCount]);

  // Komponen ini tidak me-render apapun ke UI
  return null;
}

export default SyncManager;

===== frontend\src\components\TargetChart.jsx =====
// frontend/src/pages/Dashboard/components/TargetChart.jsx

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Skeleton from 'react-loading-skeleton';
import { FiTarget } from 'react-icons/fi';

const ChartContainer = styled.div`
    background-color: var(--bg-surface);
    padding: 30px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    grid-column: 1 / -1;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
`;

const ChartTitle = styled.h3`
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 25px;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 10px;
    justify-content: center;
    text-align: center;
`;

const ProgressBarContainer = styled.div`
    width: 100%;
    height: 20px;
    background-color: var(--bg-main);
    border-radius: 10px;
    overflow: hidden;
    margin: 10px 0;
`;
const ProgressBarFill = styled.div`
    height: 100%;
    width: ${props => props.$percentage}%;
    background: linear-gradient(90deg, var(--primary-color) 0%, #B583E6 100%);
    border-radius: 10px;
    transition: width 0.5s ease-in-out;
    text-align: right;
    color: white;
    font-size: 12px;
    line-height: 20px;
    padding-right: 8px;
`;

const StatsText = styled.div`
    display: flex;
    justify-content: space-between;
    font-size: 0.95rem;
    margin-top: 10px;
    color: var(--text-secondary);

    strong {
        color: var(--text-primary);
        font-weight: 600;
    }
`;


function TargetChart({ loading, stats }) {
    if (loading) {
        return (
            <ChartContainer>
                <ChartTitle><FiTarget size={22} /> Target Pendapatan Bulanan</ChartTitle>
                <Skeleton height={60} />
            </ChartContainer>
        );
    }

    const target = stats?.monthly_revenue_target || 0;
    const currentRevenue = stats?.totalRevenue || 0;
    const percentage = target > 0 ? (currentRevenue / target) * 100 : 0;
    const cappedPercentage = Math.min(percentage, 100);
    const formatCurrency = (value) => `Rp ${new Intl.NumberFormat('id-ID').format(value || 0)}`;

    return (
        <ChartContainer>
           <ChartTitle><FiTarget size={22} /> Target Pendapatan Bulanan</ChartTitle>
            {target > 0 ? (
                <div>
                    <ProgressBarContainer>
                        <ProgressBarFill $percentage={cappedPercentage}>
                            {percentage.toFixed(0)}%
                        </ProgressBarFill>
                    </ProgressBarContainer>
                    <StatsText>
                        <span>Tercapai: <strong>{formatCurrency(currentRevenue)}</strong></span>
                        <span>Target: <strong>{formatCurrency(target)}</strong></span>
                    </StatsText>
                </div>
            ) : (
                <p style={{ textAlign: 'center', color: 'var(--text-secondary)' }}>
                    Target pendapatan bulanan belum diatur.
                </p>
            )}
        </ChartContainer>
    );
}

export default TargetChart;

TargetChart.propTypes = {
  loading: PropTypes.bool.isRequired,
  stats: PropTypes.object,
};

===== frontend\src\components\UserFormModal.jsx =====
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7); display: flex;
  justify-content: center; align-items: center; z-index: 1000;
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface); border-radius: 16px;
  border: 1px solid var(--border-color); width: 100%;
  max-width: 500px; box-shadow: 0 10px 30px rgba(0,0,0,0.3);
`;
const ModalHeader = styled.div`
  padding: 20px 25px; border-bottom: 1px solid var(--border-color);
  display: flex; justify-content: space-between; align-items: center;
`;
const ModalTitle = styled.h3` font-size: 1.2rem; font-weight: 600; `;
const CloseButton = styled.button` background: none; border: none; color: var(--text-secondary); cursor: pointer; &:hover { color: var(--text-primary); } `;
const ModalBody = styled.div` padding: 25px; display: grid; grid-template-columns: 1fr; gap: 20px; `;
const InputGroup = styled.div` grid-column: ${props => props.$fullWidth ? '1 / -1' : 'auto'}; `;
const Label = styled.label` display: block; margin-bottom: 8px; font-weight: 500; font-size: 0.9rem; color: var(--text-secondary); `;
const Input = styled.input` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; `;
const Select = styled.select` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; `;
const ModalFooter = styled.div` padding: 20px 25px; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; gap: 15px; `;
const Button = styled.button`
  padding: 10px 25px; border-radius: 8px; border: 1px solid var(--border-color);
  font-weight: 600; cursor: pointer;
  background-color: ${props => props.$primary ? 'var(--primary-color)' : 'transparent'};
  color: ${props => props.$primary ? 'white' : 'var(--text-primary)'};
  &:hover { opacity: 0.9; }
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

function UserFormModal({ isOpen, onClose, onSave, user, roles, isSubmitting }) {
  const [formData, setFormData] = useState({});
  const isEditing = Boolean(user);

  useEffect(() => {
    const defaultRoleId = roles.length > 0 ? roles[0].id : '';
    setFormData(user || { name: '', email: '', password: '', role_id: defaultRoleId });
  }, [user, isOpen, roles]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
          <ModalContainer initial={{ y: -50 }} animate={{ y: 0 }} exit={{ y: 50 }}>
            <form onSubmit={handleSubmit}>
              <ModalHeader>
                <ModalTitle>{isEditing ? 'Edit Pengguna' : 'Tambah Pengguna Baru'}</ModalTitle>
                <CloseButton type="button" onClick={onClose}><FiX size={24} /></CloseButton>
              </ModalHeader>
              <ModalBody>
                <InputGroup><Label>Nama</Label><Input name="name" value={formData.name || ''} onChange={handleChange} required autoFocus /></InputGroup>
                <InputGroup><Label>Email</Label><Input type="email" name="email" value={formData.email || ''} onChange={handleChange} required /></InputGroup>
                {!isEditing && (
                  <InputGroup><Label>Password</Label><Input type="password" name="password" value={formData.password || ''} onChange={handleChange} required /></InputGroup>
                )}
                <InputGroup>
                  <Label>Peran (Role)</Label>
                  <Select name="role_id" value={formData.role_id || ''} onChange={handleChange}>
                    <option value="" disabled>-- Pilih Peran --</option>
                    {roles.map(role => (
                        <option key={role.id} value={role.id}>{role.name}</option>
                    ))}
                  </Select>
                </InputGroup>
              </ModalBody>
              <ModalFooter>
                <Button type="button" onClick={onClose}>Batal</Button>
                <Button type="submit" $primary disabled={isSubmitting}>{isSubmitting ? 'Menyimpan...' : 'Simpan'}</Button>
              </ModalFooter>
            </form>
          </ModalContainer>
        </ModalBackdrop>
      )}
    </AnimatePresence>
  );
}

UserFormModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onSave: PropTypes.func.isRequired,
  user: PropTypes.object,
  roles: PropTypes.array.isRequired,
  isSubmitting: PropTypes.bool.isRequired,
};

export default UserFormModal;


===== frontend\src\components\VariantSelectModal.jsx =====
import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { FiX } from 'react-icons/fi';

const ModalBackdrop = styled(motion.div)`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7); display: flex;
  justify-content: center; align-items: center; z-index: 1001;
`;
const ModalContainer = styled(motion.div)`
  background-color: var(--bg-surface); border-radius: 16px;
  width: 100%; max-width: 400px; padding: 30px;
`;
const ModalHeader = styled.div` display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; `;
const ModalTitle = styled.h2` font-size: 1.5rem; margin: 0; color: var(--text-primary);`;
const CloseButton = styled.button` background: none; border: none; cursor: pointer; color: var(--text-secondary); `;
const VariantList = styled.div` display: flex; flex-direction: column; gap: 10px; `;
const VariantButton = styled.button`
  width: 100%; text-align: left; padding: 15px; border-radius: 8px;
  border: 1px solid var(--border-color); background: transparent; cursor: pointer;
  display: flex; justify-content: space-between; align-items: center;
  color: var(--text-primary);
  &:hover { background-color: var(--bg-main); }
`;
const VariantPrice = styled.span`
  font-weight: 600;
  color: var(--primary-color);
`;

function VariantSelectModal({ isOpen, onClose, product, onSelectVariant }) {
    if (!isOpen || !product) return null;

    return (
        <ModalBackdrop initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
            <ModalContainer initial={{ y: -50 }} animate={{ y: 0 }}>
                <ModalHeader>
                    <ModalTitle>Pilih Varian: {product.name}</ModalTitle>
                    <CloseButton onClick={onClose}><FiX size={24} /></CloseButton>
                </ModalHeader>
                <VariantList>
                    {product.variants.map(variant => (
                        <VariantButton key={variant.id} onClick={() => onSelectVariant(product, variant)}>
                            <span>{variant.name}</span>
                            <VariantPrice>Rp {new Intl.NumberFormat('id-ID').format(variant.price)}</VariantPrice>
                        </VariantButton>
                    ))}
                </VariantList>
            </ModalContainer>
        </ModalBackdrop>
    );
}

VariantSelectModal.propTypes = {
    isOpen: PropTypes.bool.isRequired,
    onClose: PropTypes.func.isRequired,
    product: PropTypes.object,
    onSelectVariant: PropTypes.func.isRequired,
};

export default VariantSelectModal;

===== frontend\src\context\BusinessContext.jsx =====
import React, { useState, useEffect, createContext, useCallback } from 'react';
import { getBusinessSettings } from '../services/api';
import { toast } from 'react-toastify';
import { jwtDecode } from 'jwt-decode';

export const BusinessContext = createContext();

export const BusinessProvider = ({ children }) => {
    const [settings, setSettings] = useState({
        payment_methods: ['Tunai', 'Kartu', 'QRIS'],
        tax_rate: 0,
        receipt_logo_url: '',
        receipt_footer_text: 'Terima Kasih!',
    });
    const [loading, setLoading] = useState(true);

    const fetchBusinessSettings = useCallback(async () => {
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                setLoading(false);
                return;
            }
            
            const decoded = jwtDecode(token);
            const userRole = decoded.role;

            if (userRole?.toLowerCase() === 'admin') {
                setLoading(true);
                const res = await getBusinessSettings();
                
                if (res.data) {
                    // Cek apakah payment_methods adalah string sebelum parsing
                    let paymentMethods = res.data.payment_methods;
                    if (typeof paymentMethods === 'string') {
                        try {
                            paymentMethods = JSON.parse(paymentMethods);
                        } catch (e) {
                            console.error("Failed to parse payment_methods:", e);
                            paymentMethods = ['Tunai', 'Kartu', 'QRIS']; // Fallback default
                        }
                    }
                    
                    const parsedSettings = {
                        ...res.data,
                        // Pastikan hasilnya selalu array yang valid
                        payment_methods: Array.isArray(paymentMethods) ? paymentMethods : ['Tunai', 'Kartu', 'QRIS'],
                        tax_rate: parseFloat(res.data.tax_rate) || 0,
                        receipt_footer_text: res.data.receipt_footer_text || 'Terima Kasih!',
                    };
                    setSettings(parsedSettings);
                }
            }
        } catch (error) {
            console.error("[DEBUG] Error details:", {
                message: error.message,
                status: error.status,
                response: error.response?.data,
                stack: error.stack
            });
            toast.error("Gagal memuat setelan bisnis.");
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchBusinessSettings();
    }, [fetchBusinessSettings]);

    const value = { settings, loading, fetchBusinessSettings };

    return (
        <BusinessContext.Provider value={value}>
            {children}
        </BusinessContext.Provider>
    );
};

===== frontend\src\context\ShiftContext.jsx =====
// frontend/src/context/ShiftContext.jsx

import React, { createContext, useState, useCallback, useEffect, useContext } from 'react';
import { getCurrentShift } from '../services/api';

export const ShiftContext = createContext();

export const useShift = () => useContext(ShiftContext);

export const ShiftProvider = ({ children }) => {
    const [activeShift, setActiveShift] = useState(null);
    const [isLoading, setIsLoading] = useState(true);

    const checkActiveShift = useCallback(async () => {
        const token = localStorage.getItem('token');
        if (!token) {
            setIsLoading(false);
            setActiveShift(null);
            return;
        }

        try {
            setIsLoading(true);
            const res = await getCurrentShift();
            if (res.data.active) {
                setActiveShift(res.data.shift);
            } else {
                setActiveShift(null);
            }
        } catch (error) {
            console.error("Failed to check active shift:", error);
            setActiveShift(null);
        } finally {
            setIsLoading(false);
        }
    }, []);

    useEffect(() => {
        checkActiveShift();
    }, [checkActiveShift]);

    const value = {
        activeShift,
        setActiveShift,
        isLoadingShift: isLoading,
        refreshShiftStatus: checkActiveShift
    };

    return (
        <ShiftContext.Provider value={value}>
            {children}
        </ShiftContext.Provider>
    );
};

===== frontend\src\context\ThemeContext.jsx =====
import React, { useState, useEffect, createContext } from 'react';

export const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
    const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'light');

    useEffect(() => {
        localStorage.setItem('theme', theme);
        document.body.setAttribute('data-theme', theme);
    }, [theme]);

    const toggleTheme = () => {
        setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));
    };
    return (
        <ThemeContext.Provider value={{ theme, toggleTheme }}>
            {children}
        </ThemeContext.Provider>
    );
};

===== frontend\src\hooks\useDataFetching.js =====
// frontend/src/hooks/useDataFetching.js
import { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';

export function useDataFetching(apiFunction, errorMessage) {
    const [data, setData] = useState([]);
    const [loading, setLoading] = useState(true);

    const fetchData = useCallback(async () => {
        setLoading(true);
        try {
            const res = await apiFunction();
            setData(res.data);
        } catch (error) {
            toast.error(errorMessage);
        } finally {
            setLoading(false);
        }
    }, [apiFunction, errorMessage]);

    useEffect(() => {
        fetchData();
    }, [fetchData]);

    return { data, loading, refetch: fetchData };
}

===== frontend\src\hooks\useDebounce.js =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\hooks\useDebounce.js

import { useState, useEffect } from 'react';

// Custom hook untuk debouncing
export function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    // Set timeout untuk update nilai setelah delay
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    // Bersihkan timeout jika value berubah (misal: user lanjut mengetik)
    // Ini akan mencegah nilai di-update sebelum waktunya
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]); // Hanya re-run jika value atau delay berubah

  return debouncedValue;
}

===== frontend\src\hooks\useOnlineStatus.js =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\hooks\useOnlineStatus.js

import { useState, useEffect } from 'react';

export function useOnlineStatus() {
  const [isOnline, setIsOnline] = useState(navigator.onLine);

  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  return isOnline;
}

===== frontend\src\pages\AdminRewardsPage.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\AdminRewardsPage.jsx

import React, { useState, useEffect, useCallback } from 'react';
import styled from 'styled-components';
import { getRewards, createReward, updateReward, deleteReward } from '../services/api';
import { toast } from 'react-toastify';
import { FiPlus, FiEdit, FiTrash2, FiGift, FiAward } from 'react-icons/fi';
import { motion, AnimatePresence } from 'framer-motion';
import PageWrapper from '../components/PageWrapper';
import ConfirmationModal from '../components/ConfirmationModal';
import RewardFormModal from '../components/RewardFormModal';

// --- Styled Components ---
const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
`;

const Title = styled.h1`
    font-size: 1.8rem;
    display: flex;
    align-items: center;
    gap: 12px;
`;

const AddButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    &:hover { 
        background-color: var(--primary-hover);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
`;

const RewardGrid = styled(motion.div)`
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 25px;
    flex-grow: 1;
    overflow-y: auto;
    padding: 5px;
`;

const RewardCard = styled(motion.div)`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    transition: all 0.2s ease-in-out;
    &:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border-color: var(--primary-color);
    }
`;

const CardHeader = styled.div`
    padding: 20px;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
`;

const CardTitle = styled.h3`
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 10px;
`;

const ActionButtons = styled.div`
    display: flex;
    gap: 10px;
`;

const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    padding: 5px;
    border-radius: 50%;
    display: flex;
    &:hover { 
        color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'};
        background-color: var(--bg-main);
    }
`;

const CardBody = styled.div`
    padding: 20px;
    flex-grow: 1;
`;

const CardDescription = styled.p`
    color: var(--text-secondary);
    font-size: 0.9rem;
    line-height: 1.5;
    margin: 0 0 20px 0;
`;

const PointsCost = styled.div`
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary-color);
    display: flex;
    align-items: center;
    gap: 8px;
`;

const CardFooter = styled.div`
    padding: 15px 20px;
    border-top: 1px solid var(--border-color);
    background-color: var(--bg-main);
    border-radius: 0 0 16px 16px;
`;

const StatusBadge = styled.span`
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
    color: ${props => props.$active ? 'var(--green-text)' : 'var(--grey-text)'};
    background-color: ${props => props.$active ? 'var(--green-bg)' : 'var(--grey-bg)'};
`;

const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    border: 2px dashed var(--border-color);
    border-radius: 16px;
    padding: 40px;
`;

const gridVariants = {
    hidden: { opacity: 0 },
    visible: {
        opacity: 1,
        transition: { staggerChildren: 0.07 }
    }
};

const cardVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: { y: 0, opacity: 1 }
};

function AdminRewardsPage() {
    const [rewards, setRewards] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingReward, setEditingReward] = useState(null);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [isConfirmOpen, setIsConfirmOpen] = useState(false);
    const [rewardToDelete, setRewardToDelete] = useState(null);

    const fetchRewards = useCallback(async () => {
        try {
            const res = await getRewards();
            setRewards(res.data);
        } catch (error) {
            toast.error("Gagal memuat data hadiah.");
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => { fetchRewards(); }, [fetchRewards]);

    const handleOpenModal = (reward = null) => {
        setEditingReward(reward);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setEditingReward(null);
    };

    const handleSaveReward = async (rewardData) => {
        setIsSubmitting(true);
        const promise = editingReward
            ? updateReward(editingReward.id, rewardData)
            : createReward(rewardData);
        try {
            await toast.promise(promise, {
                pending: 'Menyimpan hadiah...',
                success: 'Hadiah berhasil disimpan!',
                error: 'Gagal menyimpan hadiah.'
            });
            fetchRewards();
            handleCloseModal();
        } catch (error) {
            console.error(error);
        } finally {
            setIsSubmitting(false);
        }
    };

    const openDeleteConfirmation = (reward) => {
        setRewardToDelete(reward);
        setIsConfirmOpen(true);
    };

    const confirmDelete = async () => {
        if (!rewardToDelete) return;
        try {
            await toast.promise(deleteReward(rewardToDelete.id), {
                pending: 'Menghapus hadiah...',
                success: 'Hadiah berhasil dihapus!',
                error: 'Gagal menghapus hadiah.'
            });
            fetchRewards();
        } catch (error) {
            console.error(error);
        } finally {
            setIsConfirmOpen(false);
            setRewardToDelete(null);
        }
    };

    const renderContent = () => {
        if (loading) {
            return <p>Memuat...</p>;
        }
        if (rewards.length === 0) {
            return (
                <EmptyStateContainer>
                    <FiGift size={48} />
                    <h3 style={{ marginTop: '20px' }}>Belum Ada Hadiah</h3>
                    <p>Klik tombol di atas untuk membuat hadiah pertama yang bisa ditukarkan pelanggan.</p>
                </EmptyStateContainer>
            );
        }
        return (
            <RewardGrid variants={gridVariants} initial="hidden" animate="visible">
                {rewards.map(reward => (
                    <RewardCard key={reward.id} variants={cardVariants}>
                        <CardHeader>
                            <CardTitle><FiGift /> {reward.name}</CardTitle>
                            <ActionButtons>
                                <ActionButton onClick={() => handleOpenModal(reward)}><FiEdit size={18} /></ActionButton>
                                <ActionButton $danger onClick={() => openDeleteConfirmation(reward)}><FiTrash2 size={18} /></ActionButton>
                            </ActionButtons>
                        </CardHeader>
                        <CardBody>
                            <CardDescription>{reward.description || 'Tidak ada deskripsi.'}</CardDescription>
                            <PointsCost><FiAward /> {reward.points_cost.toLocaleString('id-ID')} Poin</PointsCost>
                        </CardBody>
                        <CardFooter>
                            <StatusBadge $active={reward.is_active}>{reward.is_active ? 'Aktif' : 'Tidak Aktif'}</StatusBadge>
                        </CardFooter>
                    </RewardCard>
                ))}
            </RewardGrid>
        );
    };

    return (
        <>
            <PageWrapper loading={loading}>
                <PageContainer>
                    <PageHeader>
                        <Title><FiGift /> Manajemen Hadiah</Title>
                        <AddButton onClick={() => handleOpenModal()}><FiPlus /> Tambah Hadiah</AddButton>
                    </PageHeader>
                    {renderContent()}
                </PageContainer>
            </PageWrapper>

            <RewardFormModal
                isOpen={isModalOpen}
                onClose={handleCloseModal}
                onSave={handleSaveReward}
                reward={editingReward}
                isSubmitting={isSubmitting}
            />
            <ConfirmationModal
                isOpen={isConfirmOpen}
                onClose={() => setIsConfirmOpen(false)}
                onConfirm={confirmDelete}
                title="Konfirmasi Hapus Hadiah"
                message={`Yakin ingin menghapus hadiah "${rewardToDelete?.name}"?`}
            />
        </>
    );
}

export default AdminRewardsPage;

===== frontend\src\pages\AppPasswordTutorialPage.jsx =====
import React from 'react';
import styled from 'styled-components';
import { Link } from 'react-router-dom';
import { FiArrowLeft } from 'react-icons/fi';

const PageContainer = styled.div`
  padding: 30px;
  max-width: 800px;
  margin: 0 auto;
`;

const Title = styled.h1`
  font-size: 1.8rem;
  margin-bottom: 30px;
`;

const TutorialCard = styled.div`
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);
  padding: 30px;
`;

const Step = styled.div`
  margin-bottom: 25px;
  padding-bottom: 25px;
  border-bottom: 1px solid var(--border-color);

  &:last-child {
    border-bottom: none;
    margin-bottom: 0;
  }
`;

const StepTitle = styled.h3`
  font-size: 1.2rem;
  font-weight: 600;
  margin-bottom: 10px;
`;

const StepText = styled.p`
  color: var(--text-secondary);
  line-height: 1.6;
`;

const StyledLink = styled.a`
  color: var(--primary-color);
  font-weight: 500;
  text-decoration: none;
  &:hover { text-decoration: underline; }
`;

const BackLink = styled(Link)`
  display: inline-flex;
  align-items: center;
  gap: 8px;
  color: var(--text-secondary);
  text-decoration: none;
  margin-bottom: 20px;
  font-weight: 500;
  &:hover { color: var(--text-primary); }
`;

function AppPasswordTutorialPage() {
  return (
    <PageContainer>
        <BackLink to="/settings"><FiArrowLeft /> Kembali ke Setelan</BackLink>
        <Title>Cara Mendapatkan Sandi Aplikasi Google</Title>
        <TutorialCard>
            <Step>
                <StepTitle>1. Aktifkan Verifikasi 2 Langkah</StepTitle>
                <StepText>
                    Sandi Aplikasi hanya tersedia untuk akun yang sudah mengaktifkan Verifikasi 2 Langkah. Jika belum, aktifkan terlebih dahulu di halaman keamanan akun Google Anda.
                </StepText>
            </Step>
            <Step>
                <StepTitle>2. Buka Halaman Sandi Aplikasi</StepTitle>
                <StepText>
                    Login ke Akun Google Anda, lalu kunjungi langsung halaman Sandi Aplikasi melalui link ini: <StyledLink href="https://myaccount.google.com/apppasswords" target="_blank" rel="noopener noreferrer">myaccount.google.com/apppasswords</StyledLink>
                </StepText>
            </Step>
            <Step>
                <StepTitle>3. Buat Sandi Aplikasi Baru</StepTitle>
                <StepText>
                    Di halaman tersebut, klik pada kolom "Pilih aplikasi" dan pilih "Lainnya (Nama kustom...)". Beri nama, misalnya "SmartPOS App", lalu klik "BUAT".
                </StepText>
            </Step>
            <Step>
                <StepTitle>4. Salin dan Gunakan Sandi</StepTitle>
                <StepText>
                    Google akan menampilkan sebuah kotak kuning berisi **16 karakter sandi**. Salin 16 karakter ini (tanpa spasi) dan tempelkan ke kolom "Sandi Aplikasi" di halaman Setelan SmartPOS Anda.
                </StepText>
            </Step>
        </TutorialCard>
    </PageContainer>
  );
}

export default AppPasswordTutorialPage;

===== frontend\src\pages\CategoryPage.jsx =====
import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { getCategories, createCategory, deleteCategory, getSubCategories, createSubCategory, deleteSubCategory } from '../services/api';
import { toast } from 'react-toastify';
import { FiPlus, FiTrash2, FiChevronRight, FiArrowLeft } from 'react-icons/fi';
import ConfirmationModal from '../components/ConfirmationModal';
import { useDataFetching } from '../hooks/useDataFetching';

// --- Styled Components ---
const PageContainer = styled.div`
  padding: 30px;
  height: 100%;
  overflow-y: auto;
`;
const Panel = styled.div`
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);
  padding: 25px;
  max-width: 800px;
  margin: 0 auto;
`;
const PanelHeader = styled.div`
  margin: 0 0 20px 0;
  padding-bottom: 20px;
  border-bottom: 1px solid var(--border-color);
`;
const PanelTitle = styled.h2`
  font-size: 1.5rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 15px;
`;
const BackButton = styled.button`
  background: none;
  border: none;
  cursor: pointer;
  color: var(--text-secondary);
  &:hover { color: var(--primary-color); }
`;
const Form = styled.form`
  display: flex;
  gap: 15px;
  margin-bottom: 25px;
`;
const Input = styled.input`
  flex-grow: 1;
  padding: 12px;
  border-radius: 8px;
  border: 1px solid var(--border-color);
  background-color: var(--bg-main);
  color: var(--text-primary);
  font-size: 1rem;
  &::placeholder {
    color: var(--text-secondary);
    opacity: 0.8;
  }
  &:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2);
  }
`;
const Button = styled.button`
  padding: 0 20px;
  border-radius: 8px;
  border: none;
  background-color: var(--primary-color);
  color: white;
  font-weight: 600;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  &:hover {
    background-color: var(--primary-hover);
  }
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
`;
const List = styled.ul`
  list-style: none;
  padding: 0;
  margin: 0;
`;
const ListItem = styled.li`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px;
  border-radius: 8px;
  cursor: ${props => props.$clickable ? 'pointer' : 'default'};
  transition: background-color 0.2s ease;
  
  &:hover {
    background-color: var(--bg-main);
  }

  &:not(:last-child) {
    border-bottom: 1px solid var(--border-color);
  }
`;
const ListItemActions = styled.div`
  display: flex;
  align-items: center;
  gap: 10px;
`;
const DeleteButton = styled.button`
  background: none;
  border: none;
  color: var(--text-secondary);
  cursor: pointer;
  font-size: 1.1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 5px;
  &:hover { color: var(--red-color); }
`;
const ListItemText = styled.span`
  flex-grow: 1;
`;

function CategoryPage() {
    const { data: categories, refetch: fetchCategories } = useDataFetching(getCategories, "Gagal memuat kategori.");
    const [view, setView] = useState('categories');
    const [subCategories, setSubCategories] = useState([]);
    const [selectedCategory, setSelectedCategory] = useState(null);
    const [newCategoryName, setNewCategoryName] = useState('');
    const [newSubCategoryName, setNewSubCategoryName] = useState('');
    const [modalState, setModalState] = useState({ isOpen: false, type: null, data: null });

    const handleSelectCategory = async (category) => {
        setSelectedCategory(category);
        try {
            const res = await getSubCategories(category.id);
            setSubCategories(res.data);
            setView('subcategories');
        } catch (error) { toast.error("Gagal memuat sub-kategori."); }
    };

    const handleBackToCategories = () => {
        setSelectedCategory(null);
        setSubCategories([]);
        setNewSubCategoryName('');
        setView('categories');
    };

    const handleCreateCategory = async (e) => {
        e.preventDefault();
        if (!newCategoryName.trim()) {
            toast.warn("Nama kategori tidak boleh kosong.");
            return;
        }
        await toast.promise(createCategory({ name: newCategoryName }), {
            pending: 'Menyimpan...', success: 'Kategori dibuat!', error: 'Gagal membuat kategori.'
        });
        setNewCategoryName('');
        fetchCategories();
    };
    
    const handleCreateSubCategory = async (e) => {
        e.preventDefault();
        if (!newSubCategoryName.trim()) {
            toast.warn("Nama sub-kategori tidak boleh kosong.");
            return;
        }
        const subCategoryData = { name: newSubCategoryName };
        await toast.promise(createSubCategory(selectedCategory.id, subCategoryData), {
            pending: 'Menyimpan...', success: 'Sub-kategori dibuat!', error: 'Gagal membuat sub-kategori.'
        });
        setNewSubCategoryName('');
        handleSelectCategory(selectedCategory);
    };
    
    const openConfirmation = (type, data) => {
        setModalState({ isOpen: true, type, data });
    };

    const handleConfirmDelete = async () => {
        const { type, data } = modalState;
        if (!data) return;

        const promise = type === 'category' ? deleteCategory(data.id) : deleteSubCategory(data.id);
        const entityName = type === 'category' ? 'Kategori' : 'Sub-kategori';
        
        try {
            await toast.promise(promise, {
                pending: `Menghapus ${entityName}...`,
                success: `${entityName} berhasil dihapus!`,
                error: (err) => err.response?.data?.message || `Gagal menghapus ${entityName}.`
            });
            if (type === 'category') {
                fetchCategories();
            } else {
                handleSelectCategory(selectedCategory);
            }
        } catch (error) {
            console.error(error);
        } finally {
            setModalState({ isOpen: false, type: null, data: null });
        }
    };

    return (
        <>
            <PageContainer>
                <Panel>
                    {view === 'categories' && (
                        <>
                            <PanelHeader><PanelTitle>Manajemen Kategori</PanelTitle></PanelHeader>
                            <Form onSubmit={handleCreateCategory}>
                                <Input
                                    value={newCategoryName}
                                    onChange={(e) => setNewCategoryName(e.target.value)}
                                    placeholder="Nama kategori baru..."
                                />
                                <Button type="submit"><FiPlus /></Button>
                            </Form>
                            <List>
                                {categories.map(cat => (
                                    <ListItem key={cat.id} $clickable onClick={() => handleSelectCategory(cat)}>
                                        <ListItemText>{cat.name}</ListItemText>
                                        <ListItemActions>
                                            <DeleteButton onClick={(e) => { e.stopPropagation(); openConfirmation('category', cat); }}><FiTrash2 /></DeleteButton>
                                            <FiChevronRight />
                                        </ListItemActions>
                                    </ListItem>
                                ))}
                            </List>
                        </>
                    )}

                    {view === 'subcategories' && selectedCategory && (
                        <>
                            <PanelHeader>
                                <PanelTitle>
                                    <BackButton onClick={handleBackToCategories}><FiArrowLeft size={24} /></BackButton>
                                    Sub-Kategori: {selectedCategory.name}
                                </PanelTitle>
                            </PanelHeader>
                            <Form onSubmit={handleCreateSubCategory}>
                                <Input
                                    value={newSubCategoryName}
                                    onChange={(e) => setNewSubCategoryName(e.target.value)}
                                    placeholder="Nama sub-kategori..."
                                />
                                <Button type="submit"><FiPlus /></Button>
                            </Form>
                            <List>
                                {subCategories.map(sub => (
                                    <ListItem key={sub.id}>
                                        <ListItemText>{sub.name}</ListItemText>
                                        <DeleteButton onClick={() => openConfirmation('subcategory', sub)}><FiTrash2 /></DeleteButton>
                                    </ListItem>
                                ))}
                            </List>
                        </>
                    )}
                </Panel>
            </PageContainer>
            <ConfirmationModal
                isOpen={modalState.isOpen}
                onClose={() => setModalState({ isOpen: false, type: null, data: null })}
                onConfirm={handleConfirmDelete}
                title={`Konfirmasi Hapus ${modalState.type === 'category' ? 'Kategori' : 'Sub-Kategori'}`}
                message={`Yakin ingin menghapus "${modalState.data?.name}"? ${modalState.type === 'category' ? 'Semua sub-kategori di dalamnya juga akan terhapus.' : ''}`}
            />
        </>
    );
}

export default CategoryPage;

===== frontend\src\pages\CustomerDetailPage.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\CustomerDetailPage.jsx

import React, { useState, useEffect, useCallback } from 'react';
import styled, { keyframes } from 'styled-components';
import { useParams, Link } from 'react-router-dom';
import { getCustomerById, getCustomerHistory, getCustomerStats, getRewards } from '../services/api';
import { toast } from 'react-toastify';
import Skeleton from 'react-loading-skeleton';
import { FiArrowLeft, FiUser, FiAward, FiShoppingBag, FiGift, FiCalendar, FiTrendingUp, FiStar, FiRefreshCw } from 'react-icons/fi';
import RedeemRewardModal from '../components/RedeemRewardModal';

// --- Animations ---
const fadeIn = keyframes` from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); }`;
const pulse = keyframes` 0% { transform: scale(1); } 50% { transform: scale(1.05); } 100% { transform: scale(1); }`;

// --- Styled Components ---
const PageContainer = styled.div` padding: 20px; max-width: 1200px; margin: 0 auto; animation: ${fadeIn} 0.6s ease-out; `;
const BackLink = styled(Link)` display: inline-flex; align-items: center; gap: 8px; color: var(--text-secondary); text-decoration: none; margin-bottom: 15px; font-weight: 500; padding: 8px 16px; border-radius: 8px; transition: all 0.2s ease; &:hover { color: var(--primary-color); background-color: var(--bg-surface); transform: translateX(-2px); }`;
const Header = styled.div` display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; flex-wrap: wrap; gap: 15px; `;
const CustomerName = styled.h1` font-size: 2rem; color: var(--text-primary); margin: 0; display: flex; align-items: center; gap: 12px; `;
const StatusBadge = styled.span` padding: 6px 12px; border-radius: 20px; font-size: 0.8rem; font-weight: 600; background: linear-gradient(135deg, var(--primary-color), #4f46e5); color: white; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); `;
const RefreshButton = styled.button` display: flex; align-items: center; gap: 8px; padding: 10px 16px; border: 1px solid var(--border-color); border-radius: 8px; background: var(--bg-surface); color: var(--text-secondary); cursor: pointer; transition: all 0.2s ease; &:hover { background: var(--primary-color); color: white; border-color: var(--primary-color); } &:disabled { opacity: 0.5; cursor: not-allowed; } svg { transition: transform 0.2s ease; } &:hover svg { transform: rotate(90deg); }`;

// --- PERBAIKAN DI SINI ---
// Mengubah `align-items: flex-start` menjadi `align-items: stretch`
const TopCardsGrid = styled.div` 
    display: grid; 
    grid-template-columns: 350px 1fr; 
    gap: 20px; 
    align-items: stretch; // Ini akan membuat kedua kartu memiliki tinggi yang sama
    margin-bottom: 20px; 
    
    @media (max-width: 1024px) { 
        grid-template-columns: 320px 1fr; 
        gap: 15px; 
    } 
    @media (max-width: 768px) { 
        grid-template-columns: 1fr; 
    }
`;
// --- AKHIR PERBAIKAN ---

const InfoCard = styled.div` 
    background: var(--bg-surface); 
    border-radius: 16px; 
    border: 1px solid var(--border-color); 
    padding: 20px; 
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05); 
    transition: all 0.3s ease;
    height: 100%;
    display: flex;
    flex-direction: column;

    &:hover { 
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1); 
        transform: translateY(-2px); 
    }
`;
const CardTitle = styled.h3` font-size: 1.1rem; font-weight: 600; padding-bottom: 10px; margin: 0 0 15px 0; border-bottom: 1px solid var(--border-color); display: flex; align-items: center; gap: 8px; color: var(--text-primary); flex-shrink: 0; svg { color: var(--primary-color); }`;
const InfoGrid = styled.div` display: grid; gap: 10px; `;
const InfoItem = styled.div` display: flex; justify-content: space-between; align-items: center; padding: 10px; background: var(--bg-main); border-radius: 8px; border: 1px solid var(--border-color); transition: all 0.2s ease; &:hover { background: var(--bg-surface); border-color: var(--primary-color); }`;
const InfoLabel = styled.span` color: var(--text-secondary); font-weight: 500; font-size: 0.85rem; `;
const InfoValue = styled.span` color: var(--text-primary); font-weight: 600; font-size: 0.95rem; `;
const PointsCard = styled(InfoCard)` text-align: center; `;
const PointsDisplay = styled.div` 
    position: relative; 
    z-index: 1;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    
    p { margin: 0 0 8px 0; opacity: 0.9; font-size: 0.95rem; color: var(--text-secondary); } 
    h2 { font-size: 2.5rem; margin: 0; animation: ${pulse} 2s infinite; color: var(--primary-color); text-shadow: none; }
`;
const RedeemRewardButton = styled.button` 
    width: 100%;
    padding: 12px 18px; 
    border-radius: 8px; 
    border: 1px solid var(--primary-color); 
    background: var(--primary-color); 
    color: white; 
    font-weight: 600; 
    font-size: 0.95rem; 
    cursor: pointer; 
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    flex-shrink: 0;
    margin-top: 15px;
    &:hover:not(:disabled) { background: #4f46e5; border-color: #4f46e5; transform: translateY(-1px); } 
    &:disabled { opacity: 0.5; cursor: not-allowed; }
`;
const StatsGrid = styled.div` display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 15px; margin-bottom: 20px; `;
const StatCard = styled.div` background: var(--bg-surface); border-radius: 12px; border: 1px solid var(--border-color); padding: 15px; text-align: center; transition: all 0.3s ease; &:hover { transform: translateY(-4px); box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1); }`;
const StatIcon = styled.div` width: 40px; height: 40px; border-radius: 10px; background: linear-gradient(135deg, var(--primary-color), #4f46e5); display: flex; align-items: center; justify-content: center; margin: 0 auto 10px; color: white; font-size: 1rem; `;
const StatLabel = styled.p` color: var(--text-secondary); margin: 0 0 6px 0; font-size: 0.8rem; `;
const StatValue = styled.h3` color: var(--text-primary); margin: 0; font-size: 1.3rem; `;
const HistoryTableContainer = styled(InfoCard)` padding: 0; overflow: hidden; margin-top: 20px; `;
const TableControls = styled.div` display: flex; justify-content: space-between; align-items: center; padding: 15px 20px; border-bottom: 1px solid var(--border-color); background: var(--bg-main); `;
const SearchInput = styled.input` padding: 6px 10px; border: 1px solid var(--border-color); border-radius: 6px; background: var(--bg-surface); color: var(--text-primary); width: 180px; &::placeholder { color: var(--text-secondary); }`;
const Table = styled.table` width: 100%; border-collapse: collapse; `;
const Th = styled.th` text-align: left; padding: 12px 15px; background: var(--bg-main); border-bottom: 1px solid var(--border-color); font-weight: 600; color: var(--text-secondary); font-size: 0.8rem; text-transform: uppercase; position: sticky; top: 0; z-index: 10; `;
const Td = styled.td` padding: 12px 15px; border-bottom: 1px solid var(--border-color); color: var(--text-primary); vertical-align: middle; font-size: 0.9rem; `;
const Tr = styled.tr` transition: background-color 0.2s ease; &:hover { background: var(--bg-main); } &:last-child > td { border-bottom: none; }`;
const PointsBadge = styled.span` padding: 3px 8px; border-radius: 20px; font-size: 0.75rem; font-weight: 600; color: white; background: ${props => props.$positive ? 'linear-gradient(135deg, #10b981, #059669)' : 'var(--red-bg)'}; color: ${props => props.$positive ? 'white' : 'var(--red-text)'};`;
const EmptyState = styled.div` text-align: center; padding: 40px 20px; color: var(--text-secondary); svg { font-size: 2.5rem; margin-bottom: 12px; opacity: 0.5; } h3 { margin: 0 0 6px 0; color: var(--text-primary); font-size: 1.1rem; } p { margin: 0; font-size: 0.85rem; }`;

function CustomerDetailPage() {
    const { id } = useParams();
    const [customer, setCustomer] = useState(null);
    const [history, setHistory] = useState([]);
    const [stats, setStats] = useState(null);
    const [rewards, setRewards] = useState([]);
    const [loading, setLoading] = useState(true);
    const [refreshing, setRefreshing] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');
    const [isRedeemModalOpen, setIsRedeemModalOpen] = useState(false);

    const fetchData = useCallback(async (isRefresh = false) => {
        if (isRefresh) setRefreshing(true); else setLoading(true);
        try {
            const [customerRes, historyRes, statsRes, rewardsRes] = await Promise.all([ getCustomerById(id), getCustomerHistory(id), getCustomerStats(id), getRewards() ]);
            setCustomer(customerRes.data);
            setHistory(historyRes.data);
            setStats(statsRes.data);
            setRewards(rewardsRes.data);
        } catch (error) { toast.error("Gagal memuat data pelanggan."); } finally { setLoading(false); setRefreshing(false); }
    }, [id]);

    useEffect(() => { fetchData(false); }, [fetchData]);

    const handleRefresh = () => fetchData(true);

    const filteredHistory = history.filter(item => new Date(item.created_at).toLocaleString('id-ID').toLowerCase().includes(searchTerm.toLowerCase()) || (item.description && item.description.toLowerCase().includes(searchTerm.toLowerCase())));
    
    if (loading) { return ( <PageContainer> <Skeleton count={5} height={40} style={{ marginBottom: '20px' }} /> <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '20px' }}> <Skeleton height={120} /> <Skeleton height={120} /> <Skeleton height={120} /> </div> </PageContainer> ); }
    if (!customer) { return ( <PageContainer> <EmptyState> <FiUser /> <h3>Pelanggan Tidak Ditemukan</h3> <p>Pelanggan dengan ID tersebut tidak ditemukan dalam sistem.</p> </EmptyState> </PageContainer> ); }

    return (
        <>
            <PageContainer>
                <BackLink to="/customers"><FiArrowLeft /> Kembali ke Daftar Pelanggan</BackLink>
                <Header>
                    <div>
                        <CustomerName>
                            <FiUser /> {customer.name} <StatusBadge>Pelanggan Aktif</StatusBadge>
                        </CustomerName>
                    </div>
                    <RefreshButton onClick={handleRefresh} disabled={refreshing}>
                        <FiRefreshCw /> {refreshing ? 'Memuat...' : 'Refresh'}
                    </RefreshButton>
                </Header>
                <StatsGrid>
                    <StatCard> <StatIcon><FiShoppingBag /></StatIcon> <StatLabel>Total Pesanan</StatLabel> <StatValue>{stats?.totalOrders || 0}</StatValue> </StatCard>
                    <StatCard> <StatIcon><FiTrendingUp /></StatIcon> <StatLabel>Total Belanja</StatLabel> <StatValue>Rp {new Intl.NumberFormat('id-ID').format(stats?.totalSpent || 0)}</StatValue> </StatCard>
                    <StatCard> <StatIcon><FiStar /></StatIcon> <StatLabel>Total Poin Diperoleh</StatLabel> <StatValue>{stats?.totalPointsEarned || 0}</StatValue> </StatCard>
                    <StatCard> <StatIcon><FiGift /></StatIcon> <StatLabel>Rata-rata Belanja</StatLabel> <StatValue>Rp {new Intl.NumberFormat('id-ID').format(Math.round(stats?.avgOrderValue || 0))}</StatValue> </StatCard>
                </StatsGrid>
                <TopCardsGrid>
                    <div>
                        <InfoCard>
                            <CardTitle><FiUser /> Detail Pelanggan</CardTitle>
                            <InfoGrid>
                                <InfoItem> <InfoLabel>Nama</InfoLabel> <InfoValue>{customer.name}</InfoValue> </InfoItem>
                                <InfoItem> <InfoLabel>Telepon</InfoLabel> <InfoValue>{customer.phone || '-'}</InfoValue> </InfoItem>
                                <InfoItem> <InfoLabel>Email</InfoLabel> <InfoValue>{customer.email || '-'}</InfoValue> </InfoItem>
                                <InfoItem> <InfoLabel>Alamat</InfoLabel> <InfoValue>{customer.address || '-'}</InfoValue> </InfoItem>
                                <InfoItem> <InfoLabel>Bergabung</InfoLabel> <InfoValue>{customer.created_at ? new Date(customer.created_at).toLocaleDateString('id-ID') : '-'}</InfoValue> </InfoItem>
                            </InfoGrid>
                        </InfoCard>
                    </div>
                    <div>
                        <PointsCard>
                            <CardTitle><FiAward /> Poin Loyalitas</CardTitle>
                            <PointsDisplay>
                                <p>Total Poin Saat Ini</p>
                                <h2>{customer.points.toLocaleString('id-ID')}</h2>
                            </PointsDisplay>
                            <RedeemRewardButton onClick={() => setIsRedeemModalOpen(true)} disabled={rewards.length === 0}>
                                <FiGift /> Tukarkan Hadiah
                            </RedeemRewardButton>
                        </PointsCard>
                    </div>
                </TopCardsGrid>
                <HistoryTableContainer>
                    <TableControls>
                        <CardTitle style={{ margin: 0, padding: 0 }}><FiShoppingBag /> Riwayat Aktivitas ({filteredHistory.length})</CardTitle>
                        <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>
                            <SearchInput type="text" placeholder="Cari..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
                        </div>
                    </TableControls>
                    <div style={{ maxHeight: '250px', overflowY: 'auto' }}>
                        <Table>
                            <thead>
                                <tr>
                                    <Th><FiCalendar style={{ marginRight: '8px' }} />Tanggal</Th>
                                    <Th>Deskripsi</Th>
                                    <Th>Total Belanja</Th>
                                    <Th>Perubahan Poin</Th>
                                </tr>
                            </thead>
                            <tbody>
                                {filteredHistory.length > 0 ? filteredHistory.map(item => (
                                    <Tr key={`${item.type}-${item.id}`}>
                                        <Td>{new Date(item.created_at).toLocaleString('id-ID')}</Td>
                                        <Td>{item.description}</Td>
                                        <Td style={{ fontWeight: '600' }}>
                                            {item.total_amount ? new Intl.NumberFormat('id-ID').format(item.total_amount) : '-'}
                                        </Td>
                                        <Td>
                                            <PointsBadge $positive={item.points_change > 0}>
                                                {item.points_change > 0 ? `+${item.points_change}` : item.points_change}
                                            </PointsBadge>
                                        </Td>
                                    </Tr>
                                )) : (
                                    <Tr>
                                        <Td colSpan="4">
                                            <EmptyState>
                                                <FiShoppingBag />
                                                <h3>Belum Ada Aktivitas</h3>
                                                <p>Pelanggan ini belum melakukan transaksi atau aktivitas poin.</p>
                                            </EmptyState>
                                        </Td>
                                    </Tr>
                                )}
                            </tbody>
                        </Table>
                    </div>
                </HistoryTableContainer>
            </PageContainer>
            
            <RedeemRewardModal
                isOpen={isRedeemModalOpen}
                onClose={() => setIsRedeemModalOpen(false)}
                customer={customer}
                onRedemptionSuccess={() => {
                    setIsRedeemModalOpen(false);
                    fetchData(true);
                }}
            />
        </>
    );
}

export default CustomerDetailPage;

===== frontend\src\pages\CustomerPage.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\CustomerPage.jsx

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { getCustomers, createCustomer, updateCustomer, deleteCustomer } from '../services/api';
import CustomerFormModal from '../components/CustomerFormModal';
import { toast } from 'react-toastify';
import { FiEdit, FiTrash2, FiPlus, FiAward, FiPhone, FiMail, FiUsers } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';
import PageWrapper from '../components/PageWrapper'; 

// --- Styled Components (dengan perbaikan pada PageHeader) ---
const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;

// --- PERBAIKAN FINAL DI SINI ---
const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-shrink: 0;
    
    position: relative; 
    z-index: 2; 
    background-color: var(--bg-main); 
    padding-bottom: 30px;
    margin-bottom: 0;
`;
// --- AKHIR PERBAIKAN ---

const Title = styled.h1`
    font-size: 1.8rem;
`;

const AddButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover { background-color: var(--primary-hover); }
`;
const GridWrapper = styled.div`
    position: relative;
    z-index: 1; 
    flex-grow: 1;
    overflow-y: auto;
    padding-top: 30px;
`;

const CustomerGrid = styled.div`
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    padding-right: 10px;
`;

const CustomerCard = styled.div`
    background-color: var(--bg-surface);
    border-radius: 12px;
    border: 1px solid var(--border-color);
    padding: 20px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    transition: all 0.2s ease-in-out;
    cursor: pointer;
    &:hover {
        border-color: var(--primary-color);
        transform: translateY(-5px);
        box-shadow: 0 6px 16px rgba(0,0,0,0.1);
    }
`;

const CardHeader = styled.div`
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 15px;
`;

const CustomerName = styled.h3`
    font-size: 1.1rem;
    font-weight: 600;
`;

const ActionButtons = styled.div`
    display: flex;
    gap: 10px;
`;

const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    &:hover { color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'}; }
`;

const CardBody = styled.div`
    display: flex;
    flex-direction: column;
    gap: 8px;
    margin-bottom: 15px;
`;

const InfoRow = styled.div`
    display: flex;
    align-items: center;
    gap: 8px;
    color: var(--text-secondary);
    font-size: 0.9rem;
`;

const CardFooter = styled.div`
    border-top: 1px solid var(--border-color);
    padding-top: 15px;
    margin-top: auto;
    display: flex;
    align-items: center;
    gap: 8px;
    color: var(--primary-color);
    font-weight: 600;
`;

const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px dashed var(--border-color);
`;

const EmptyStateTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-top: 20px;
    margin-bottom: 10px;
`;


function CustomerPage() {
    const [customers, setCustomers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingCustomer, setEditingCustomer] = useState(null);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const navigate = useNavigate();

    const fetchCustomers = async () => {
        setLoading(true);
        try {
            const res = await getCustomers();
            setCustomers(res.data);
        } catch (error) {
            toast.error("Gagal memuat data pelanggan.");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchCustomers();
    }, []);

    const handleOpenModal = (customer = null) => {
        setEditingCustomer(customer);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setEditingCustomer(null);
    };

    const handleSaveCustomer = async (customerData) => {
        setIsSubmitting(true);
        const promise = editingCustomer
            ? updateCustomer(editingCustomer.id, customerData)
            : createCustomer(customerData);
        try {
            await toast.promise(promise, {
                pending: 'Menyimpan data...',
                success: 'Data pelanggan berhasil disimpan!',
                error: 'Gagal menyimpan data.'
            });
            fetchCustomers();
        } catch (error) {
            console.error("Save customer failed:", error);
        } finally {
            setIsSubmitting(false);
            handleCloseModal();
        }
    };

    const handleDeleteCustomer = async (id) => {
        if (window.confirm('Yakin ingin menghapus pelanggan ini?')) {
            const promise = deleteCustomer(id);
            toast.promise(promise, {
                pending: 'Menghapus data...',
                success: 'Pelanggan berhasil dihapus!',
                error: 'Gagal menghapus data.'
            });
            try {
                await promise;
                fetchCustomers();
            } catch (error) {
                console.error("Delete customer failed:", error);
            }
        }
    };

    return (
        <PageContainer>
            <PageHeader>
                <Title>Manajemen Pelanggan</Title>
                <AddButton onClick={() => handleOpenModal()}>
                    <FiPlus /> Tambah Pelanggan
                </AddButton>
            </PageHeader>
            
            {loading ? (
                <GridWrapper>
                    <CustomerGrid>
                        {Array.from({ length: 6 }).map((_, index) => (
                            <Skeleton key={index} height={180} borderRadius={12} />
                        ))}
                    </CustomerGrid>
                </GridWrapper>
            ) : customers.length > 0 ? (
                <GridWrapper>
                    <CustomerGrid>
                        {customers.map(customer => (
                            <CustomerCard key={customer.id} onClick={() => navigate(`/customers/${customer.id}`)}>
                                <div>
                                    <CardHeader>
                                        <CustomerName>{customer.name}</CustomerName>
                                        <ActionButtons>
                                            <ActionButton onClick={(e) => { e.stopPropagation(); handleOpenModal(customer); }}><FiEdit size={16} /></ActionButton>
                                            <ActionButton $danger onClick={(e) => { e.stopPropagation(); handleDeleteCustomer(customer.id); }}><FiTrash2 size={16} /></ActionButton>
                                        </ActionButtons>
                                    </CardHeader>
                                    <CardBody>
                                        {customer.phone && <InfoRow><FiPhone size={14}/> {customer.phone}</InfoRow>}
                                        {customer.email && <InfoRow><FiMail size={14}/> {customer.email}</InfoRow>}
                                    </CardBody>
                                </div>
                                <CardFooter>
                                    <FiAward size={16}/> {customer.points || 0} Poin
                                </CardFooter>
                            </CustomerCard>
                        ))}
                    </CustomerGrid>
                </GridWrapper>
            ) : (
                <EmptyStateContainer>
                    <FiUsers size={48} />
                    <EmptyStateTitle>Belum Ada Pelanggan</EmptyStateTitle>
                    <p>Klik tombol di pojok kanan atas untuk menambahkan pelanggan pertama Anda.</p>
                </EmptyStateContainer>
            )}

            <CustomerFormModal 
                isOpen={isModalOpen}
                onClose={handleCloseModal}
                onSave={handleSaveCustomer}
                customer={editingCustomer}
                isSubmitting={isSubmitting}
            />
        </PageContainer>
    );
}

export default CustomerPage;

===== frontend\src\pages\DashboardPage.jsx =====


===== frontend\src\pages\expensespage.jsx =====
import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { getExpenses, createExpense, updateExpense, deleteExpense } from '../services/api'; // Assuming this connects to your database
import { toast } from 'react-toastify';
import { FiPlus, FiEdit, FiTrash2, FiDollarSign } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';
import EditExpenseModal from '../components/EditExpenseModal';

// Styled Components
const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
`;

const Title = styled.h1`
    font-size: 1.8rem;
`;

const AddButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover { background-color: var(--primary-hover); }
`;

const TableContainer = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
`;

const TableWrapper = styled.div`
    overflow-x: auto;
    flex-grow: 1;
`;

const Table = styled.table`
    width: 100%;
    border-collapse: collapse;
`;

const Th = styled.th`
    text-align: left;
    padding: 15px 20px;
    background-color: var(--bg-main);
    border-bottom: 1px solid var(--border-color);
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.9rem;
    text-transform: uppercase;
`;

const Td = styled.td`
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    vertical-align: middle;
`;

const Tr = styled.tr`
    &:last-child > td {
        border-bottom: none;
    }
`;

const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    margin-right: 15px;
    &:hover { color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'}; }
`;

const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
`;

const EmptyStateTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-top: 20px;
    margin-bottom: 10px;
`;

function ExpensesPage() {
    const [expenses, setExpenses] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingExpense, setEditingExpense] = useState(null);
    const [isSubmitting, setIsSubmitting] = useState(false);

    const fetchExpenses = async () => {
        setLoading(true);
        try {
            const res = await getExpenses();
            setExpenses(res.data);
        } catch (error) {
            toast.error("Gagal memuat data pengeluaran.");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchExpenses();
    }, []);
    const handleOpenModal = (expense = null) => {
        setEditingExpense(expense);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setEditingExpense(null);
    };

    const handleSaveExpense = async (expenseData) => {
        setIsSubmitting(true);
        const promise = editingExpense
            ? updateExpense(editingExpense.id, expenseData)
            : createExpense(expenseData);

        try {
            await toast.promise(promise, {
                pending: 'Menyimpan data...',
                success: 'Data pengeluaran berhasil disimpan!',
                error: 'Gagal menyimpan data.'
            });
            fetchExpenses();
        } catch (err) {
            console.error(err);
        } finally {
            setIsSubmitting(false);
            handleCloseModal();
        }
    };

    const handleDeleteExpense = async (id) => {
        if (window.confirm('Yakin ingin menghapus pengeluaran ini?')) {
            await toast.promise(deleteExpense(id), {
                pending: 'Menghapus data...',
                success: 'Pengeluaran berhasil dihapus!',
                error: 'Gagal menghapus data.'
            });
            fetchExpenses();
        }
    };

    return (
        <PageContainer>
            <PageHeader>
                <Title>Manajemen Pengeluaran</Title>
                <AddButton onClick={() => handleOpenModal()}>
                    <FiPlus /> Catat Pengeluaran
                </AddButton>
            </PageHeader>
            
            <TableContainer>
                {loading ? (
                    <div style={{ padding: '20px' }}>
                        <Skeleton count={8} height={50} />
                    </div>
                ) : expenses.length > 0 ? (
                    <TableWrapper>
                        <Table>
                            <thead>
                                <tr>
                                    <Th>Tanggal</Th>
                                    <Th>Deskripsi</Th>
                                    <Th>Jumlah</Th>
                                    <Th>Dicatat Oleh</Th>
                                    <Th>Aksi</Th>
                                </tr>
                            </thead>
                            <tbody>
                                {expenses.map(expense => (
                                    <Tr key={expense.id}>
                                        <Td>{new Date(expense.created_at).toLocaleString('id-ID')}</Td>
                                        <Td>{expense.description}</Td>
                                        <Td>Rp {new Intl.NumberFormat('id-ID').format(expense.amount)}</Td>
                                        <Td>{expense.user_name}</Td>
                                        <Td>
                                            <ActionButton onClick={() => handleOpenModal(expense)}><FiEdit size={18} /></ActionButton>
                                            <ActionButton $danger onClick={() => handleDeleteExpense(expense.id)}><FiTrash2 size={18} /></ActionButton>
                                        </Td>
                                    </Tr>
                                ))}
                            </tbody>
                        </Table>
                    </TableWrapper>
                ) : (
                    <EmptyStateContainer>
                        <FiDollarSign size={48} />
                        <EmptyStateTitle>Belum Ada Pengeluaran</EmptyStateTitle>
                        <p>Klik tombol di pojok kanan atas untuk mencatat pengeluaran pertama Anda.</p>
                    </EmptyStateContainer>
                )}
            </TableContainer>

            <EditExpenseModal 
                isOpen={isModalOpen}
                onClose={handleCloseModal}
                onSave={handleSaveExpense}
                expense={editingExpense}
                isSubmitting={isSubmitting}
            />
        </PageContainer>
    );
}

export default ExpensesPage;

===== frontend\src\pages\ForgotPasswordPage.jsx =====
// frontend/src/pages/ForgotPasswordPage.jsx

import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { forgotPassword } from '../services/api';
import { toast } from 'react-toastify';
import { FiMail } from 'react-icons/fi';

// --- Styled Components (Sama seperti LoginPage) ---
const PageContainer = styled.div`
  display: flex;
  height: 100vh;
  width: 100vw;
  background-color: var(--bg-main);
  @media (max-width: 768px) {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
`;

const BrandingPanel = styled.div`
  flex: 1.2;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  padding: 60px;
  @media (max-width: 768px) {
    padding: 30px;
    align-items: center;
    text-align: center;
  }
`;

const BrandingContent = styled.div`
  max-width: 450px;
`;

const BrandingTitle = styled.h1`
  font-size: 3.5rem;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 15px;
  color: var(--primary-color);
  @media (max-width: 768px) {
    font-size: 2.5rem;
  }
`;

const BrandingSubtitle = styled.p`
  font-size: 1.2rem;
  font-weight: 300;
  color: var(--text-secondary);
  @media (max-width: 768px) {
    font-size: 1rem;
  }
`;

const FormPanel = styled.div`
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow-y: auto;
  padding: 20px 0;
  @media (max-width: 768px) {
    padding: 20px;
  }
`;

const FormBox = styled.div`
  width: 100%;
  max-width: 400px;
  padding: 40px;
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);
  @media (max-width: 768px) {
    padding: 30px;
  }
`;

const Title = styled.h2`
  font-size: 2.2rem;
  font-weight: 600;
  margin-bottom: 10px;
  color: var(--text-primary);
`;

const Subtitle = styled.p`
  color: var(--text-secondary);
  margin-bottom: 50px;
  font-size: 1rem;
`;

const Form = styled.form``;
const InputGroup = styled.div` margin-bottom: 25px; `;
const Label = styled.label` display: block; margin-bottom: 8px; font-weight: 500; color: var(--text-secondary); `;
const Input = styled.input` width: 100%; padding: 14px 18px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1rem; background-color: var(--bg-main); color: var(--text-primary); `;
const Button = styled.button` width: 100%; padding: 15px; background-color: var(--primary-color); color: white; border: none; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; &:hover { background-color: var(--primary-hover); } `;
const BackLink = styled(Link)` display: block; text-align: center; margin-top: 25px; color: var(--text-secondary); font-size: 0.9rem; text-decoration: none; &:hover { text-decoration: underline; } `;


function ForgotPasswordPage() {
  const [email, setEmail] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    try {
      const response = await forgotPassword({ email });
      toast.success(response.data.message);
    } catch (err) {
      toast.error(err.response?.data?.message || 'Terjadi kesalahan.');
    } finally {
        setIsSubmitting(false);
    }
  };

  return (
    <PageContainer>
        <BrandingPanel>
            <BrandingContent>
                <BrandingTitle>Lupa Password?</BrandingTitle>
                <BrandingSubtitle>Jangan khawatir, kami akan membantu Anda mendapatkan kembali akses ke akun Anda.</BrandingSubtitle>
            </BrandingContent>
        </BrandingPanel>
        <FormPanel>
            <FormBox>
                <Title>Atur Ulang Password</Title>
                <Subtitle>Masukkan email Anda untuk menerima link pemulihan.</Subtitle>
                <Form onSubmit={handleSubmit}>
                    <InputGroup>
                        <Label htmlFor="email">Alamat Email</Label>
                        <Input 
                        id="email" 
                        type="email" 
                        value={email} 
                        onChange={(e) => setEmail(e.target.value)} 
                        required 
                        autoFocus 
                        />
                    </InputGroup>
                    <Button type="submit" disabled={isSubmitting}>
                        <FiMail style={{ marginRight: '8px' }}/> 
                        {isSubmitting ? 'Mengirim...' : 'Kirim Link Reset'}
                    </Button>
                    <BackLink to="/login">Kembali ke Halaman Login</BackLink>
                </Form>
            </FormBox>
        </FormPanel>
    </PageContainer>
  );
}

export default ForgotPasswordPage;

===== frontend\src\pages\HistoryPage.jsx =====
import React, { useState, useEffect, useCallback, useRef } from 'react';
import styled from 'styled-components';
import { getOrders, getOrderById, deleteOrder, exportOrders, clearOrderHistory } from '../services/api';
import { toast } from 'react-toastify';
import { useReactToPrint } from 'react-to-print';
import { FiEye, FiTrash2, FiDownload, FiAlertTriangle } from 'react-icons/fi';
import OrderDetailModal from '../components/OrderDetailModal';
import Receipt from '../components/Receipt';
import ConfirmationModal from '../components/ConfirmationModal';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";
import { motion, AnimatePresence } from 'framer-motion';
import PageWrapper from '../components/PageWrapper';
// --- PENAMBAHAN: Import fungsi dari date-fns ---
import { startOfDay, endOfDay, subDays, startOfMonth, endOfMonth } from 'date-fns';

// --- Styled Components (tambahkan ini) ---
const QuickFilterButtons = styled.div`
    display: flex;
    gap: 10px;
    margin-left: 20px;
    
    @media (max-width: 768px) {
        margin-left: 0;
        margin-top: 15px;
        width: 100%;
        justify-content: space-between;
    }
`;

const FilterButton = styled.button`
    padding: 10px 15px;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    background-color: ${props => props.$active ? 'var(--primary-color)' : 'var(--bg-main)'};
    color: ${props => props.$active ? 'white' : 'var(--text-primary)'};
    border: 1px solid ${props => props.$active ? 'var(--primary-color)' : 'var(--border-color)'};
    transition: all 0.2s ease;

    &:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
    }
`;
// --- (Styled-components lainnya tidak berubah) ---

const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;
const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
`;
const Title = styled.h1`
    font-size: 1.8rem;
`;
const FilterContainer = styled.div`
    display: flex;
    gap: 15px;
    align-items: center;
    margin-bottom: 25px;
    flex-wrap: wrap;
`;
const ExportButton = styled.button`
    background-color: var(--green-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 10px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    margin-left: auto;
    &:hover { opacity: 0.9; }
    &:disabled { opacity: 0.5; cursor: not-allowed; }
`;
const TableContainer = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
`;
const TableWrapper = styled.div`
    overflow-x: auto;
    flex-grow: 1;

    &::-webkit-scrollbar {
        display: none;
    }
    scrollbar-width: none;
    -ms-overflow-style: none;
`;
const Table = styled.table`
    width: 100%;
    min-width: 800px;
    border-collapse: collapse;
    white-space: nowrap;
`;
const Th = styled.th`
    text-align: left;
    padding: 15px 20px;
    background-color: var(--bg-main);
    border-bottom: 1px solid var(--border-color);
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.9rem;
    text-transform: uppercase;
`;
const Td = styled.td`
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    vertical-align: middle;
`;
const Tr = styled(motion.tr)`
    &:last-child {
        ${Td} { border-bottom: none; }
    }
`;
const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    margin: 0 5px;
    &:hover {
        color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'};
    }
`;
const ClearHistoryButton = styled.button`
    background-color: var(--red-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 10px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    margin-left: 15px;
    &:hover { opacity: 0.9; }
    &:disabled { opacity: 0.5; cursor: not-allowed; }
`;
const DatePickerWrapper = styled.div`
    .react-datepicker-wrapper input {
        padding: 10px 15px; border-radius: 8px; border: 1px solid var(--border-color);
        background-color: var(--bg-main); color: var(--text-primary);
        font-weight: 500; width: 130px; cursor: pointer; text-align: center;
    }
`;

const tableRowVariants = {
    hidden: { opacity: 0, y: -10 },
    visible: (i) => ({
        opacity: 1,
        y: 0,
        transition: {
            delay: i * 0.05,
        },
    }),
};

function HistoryPage() {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [orderToPrint, setOrderToPrint] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [startDate, setStartDate] = useState(new Date(new Date().setDate(new Date().getDate() - 30)));
    const [endDate, setEndDate] = useState(new Date());
    
    const [isConfirmOpen, setIsConfirmOpen] = useState(false);
    const [confirmAction, setConfirmAction] = useState({ action: null, id: null });
    const [modalContent, setModalContent] = useState({ title: '', message: '' });
    const [activeFilter, setActiveFilter] = useState('');

    const receiptRef = useRef();
    const handlePrint = useReactToPrint({
        content: () => receiptRef.current,
        documentTitle: `Struk-Pesanan-${orderToPrint?.id || ''}`,
        onAfterPrint: () => setOrderToPrint(null),
    });

    const handlePrintFromModal = async (orderId) => {
        try {
            const res = await getOrderById(orderId);
            setOrderToPrint(res.data);
        } catch (error) {
            toast.error("Gagal menyiapkan data untuk dicetak.");
        }
    };
    
    useEffect(() => {
        if (orderToPrint) {
            const timer = setTimeout(() => {
                if (receiptRef.current) { handlePrint(); } 
                else { toast.error("Gagal mencetak: Komponen struk tidak siap."); }
            }, 500);
            return () => clearTimeout(timer);
        }
    }, [orderToPrint, handlePrint]);
    
    const handleQuickFilterChange = (filter) => {
        const now = new Date();
        setActiveFilter(filter);
        switch (filter) {
            case 'today':
                setStartDate(startOfDay(now));
                setEndDate(endOfDay(now));
                break;
            case 'last7':
                setStartDate(startOfDay(subDays(now, 6)));
                setEndDate(endOfDay(now));
                break;
            case 'thisMonth':
                setStartDate(startOfMonth(now));
                setEndDate(endOfMonth(now));
                break;
            default:
                setStartDate(new Date(new Date().setDate(new Date().getDate() - 30)));
                setEndDate(new Date());
        }
    };

    const fetchOrders = useCallback(async () => {
        setLoading(true);
        // Setiap kali fetch, reset activeFilter jika tanggal diubah manual
        if (activeFilter === '' || activeFilter === null) {
            // Jika filter diubah manual, jangan aktifkan tombol mana pun
            setActiveFilter('');
        }
        
        try {
            const res = await getOrders(startDate, endDate);
            setOrders(res.data);
        } catch (error) {
            toast.error(error.response?.data?.message || "Gagal memuat riwayat transaksi.");
            setOrders([]);
        } finally {
            setLoading(false);
        }
    }, [startDate, endDate, activeFilter]);

    useEffect(() => {
        fetchOrders();
    }, [fetchOrders]);
    
    const handleViewDetail = async (orderId) => {
        try {
            const res = await getOrderById(orderId);
            setSelectedOrder(res.data);
            setIsModalOpen(true);
        } catch (error) {
            toast.error("Gagal memuat detail pesanan.");
        }
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setSelectedOrder(null);
    };

    const openConfirmation = (action, id = null) => {
        setConfirmAction({ action, id });
        if (action === 'delete') {
            setModalContent({ title: 'Hapus Pesanan', message: `Yakin ingin menghapus pesanan #${id}? Stok akan dikembalikan.` });
        } else if (action === 'clearAll') {
            setModalContent({ title: 'Hapus Semua Riwayat', message: 'Yakin ingin menghapus SELURUH riwayat transaksi? Aksi ini tidak dapat dibatalkan.' });
        }
        setIsConfirmOpen(true);
    };

    const handleConfirm = async () => {
        const { action, id } = confirmAction;
        setIsConfirmOpen(false);
        let promise;

        if (action === 'delete') {
            promise = deleteOrder(id);
        } else if (action === 'clearAll') {
            promise = clearOrderHistory();
        }

        if (promise) {
            await toast.promise(promise, {
                pending: 'Memproses...',
                success: 'Aksi berhasil dijalankan!',
                error: (err) => err.response?.data?.message || 'Gagal menjalankan aksi.'
            });
            fetchOrders();
        }
    };

    const handleExport = async () => {
        toast.info("Mempersiapkan data untuk diunduh...");
        try {
            const response = await exportOrders(startDate, endDate);
            const url = window.URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', `laporan-transaksi-${new Date().toISOString().slice(0, 10)}.csv`);
            document.body.appendChild(link);
            link.click();
            link.parentNode.removeChild(link);
            window.URL.revokeObjectURL(url);
            toast.success("Ekspor berhasil!");
        } catch (error) {
            toast.error(error.response?.data?.message || "Gagal mengekspor data.");
        }
    };

    return (
        <>
            <PageWrapper loading={loading}>
                <PageContainer>
                    <PageHeader>
                        <Title>Riwayat Transaksi</Title>
                    </PageHeader>
                    
                    <FilterContainer>
                        <span style={{fontWeight: 500}}>Filter Tanggal:</span>
                        <DatePickerWrapper>
                            <DatePicker selected={startDate} onChange={(date) => { setStartDate(date); setActiveFilter(''); }} dateFormat="dd/MM/yyyy" maxDate={endDate} />
                        </DatePickerWrapper>
                        <span>sampai</span>
                        <DatePickerWrapper>
                            <DatePicker selected={endDate} onChange={(date) => { setEndDate(date); setActiveFilter(''); }} dateFormat="dd/MM/yyyy" minDate={startDate} />
                        </DatePickerWrapper>
                        <QuickFilterButtons>
                            <FilterButton onClick={() => handleQuickFilterChange('today')} $active={activeFilter === 'today'}>Hari Ini</FilterButton>
                            <FilterButton onClick={() => handleQuickFilterChange('last7')} $active={activeFilter === 'last7'}>7 Hari</FilterButton>
                            <FilterButton onClick={() => handleQuickFilterChange('thisMonth')} $active={activeFilter === 'thisMonth'}>Bulan Ini</FilterButton>
                        </QuickFilterButtons>
                        <ExportButton onClick={handleExport}><FiDownload size={16}/> Ekspor CSV</ExportButton>
                        <ClearHistoryButton onClick={() => openConfirmation('clearAll')}><FiAlertTriangle size={16}/> Hapus Riwayat</ClearHistoryButton>
                    </FilterContainer>

                    <TableContainer>
                        <TableWrapper>
                            <Table>
                                <thead>
                                    <tr>
                                        <Th style={{width: '10%'}}>ID Pesanan</Th>
                                        <Th style={{width: '25%'}}>Tanggal</Th>
                                        <Th style={{width: '15%'}}>Kasir</Th>
                                        <Th style={{width: '15%'}}>Pelanggan</Th>
                                        <Th style={{width: '10%', textAlign: 'center'}}>Metode</Th>
                                        <Th style={{width: '15%', textAlign: 'right'}}>Total</Th>
                                        <Th style={{width: '10%', textAlign: 'center'}}>Aksi</Th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <AnimatePresence>
                                        {orders.length > 0 ? (
                                            orders.map((order, i) => (
                                                <Tr key={order.id} custom={i} initial="hidden" animate="visible" variants={tableRowVariants}>
                                                    <Td>#{order.id}</Td>
                                                    <Td>{new Date(order.created_at).toLocaleString('id-ID')}</Td>
                                                    <Td>{order.cashier_name}</Td>
                                                    <Td>{order.customer_name || '-'}</Td>
                                                    <Td style={{textAlign: 'center'}}>{order.payment_method}</Td>
                                                    <Td style={{textAlign: 'right', fontWeight: 600}}>Rp {new Intl.NumberFormat('id-ID').format(order.total_amount)}</Td>
                                                    <Td style={{textAlign: 'center'}}>
                                                        <ActionButton onClick={() => handleViewDetail(order.id)}>
                                                            <FiEye size={18} />
                                                        </ActionButton>
                                                        <ActionButton $danger onClick={() => openConfirmation('delete', order.id)}>
                                                            <FiTrash2 size={18} />
                                                        </ActionButton>
                                                    </Td>
                                                </Tr>
                                            ))
                                        ) : (
                                            <Tr>
                                                <Td colSpan="7" style={{textAlign: 'center', padding: '50px 0'}}>
                                                    Tidak ada riwayat transaksi pada rentang tanggal ini.
                                                </Td>
                                            </Tr>
                                        )}
                                    </AnimatePresence>
                                </tbody>
                            </Table>
                        </TableWrapper>
                    </TableContainer>
                </PageContainer>
            </PageWrapper>
            
            {isModalOpen && selectedOrder && (
                <OrderDetailModal 
                    isOpen={isModalOpen}
                    onClose={handleCloseModal}
                    order={selectedOrder}
                    onPrint={handlePrintFromModal}
                />
            )}

            <ConfirmationModal
                isOpen={isConfirmOpen}
                onClose={() => setIsConfirmOpen(false)}
                onConfirm={handleConfirm}
                title={modalContent.title}
                message={modalContent.message}
            />

            <div style={{ display: 'none' }}>
                <Receipt ref={receiptRef} order={orderToPrint} />
            </div>
        </>
    );
}

export default HistoryPage;

===== frontend\src\pages\LoginPage.jsx =====
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { login } from '../services/api';
import { toast } from 'react-toastify';
import { FiLogIn } from 'react-icons/fi';

const PageContainer = styled.div`
    display: flex;
    height: 100vh;
    width: 100vw;
    background-color: var(--bg-main);
    @media (max-width: 768px) {
        flex-direction: column;
        height: auto;
        min-height: 100vh;
    }
`;

const BrandingPanel = styled.div`
    flex: 1.2;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    padding: 60px;

    @media (max-width: 768px) {
        padding: 30px;
        align-items: center;
        text-align: center;
    }
`;

const BrandingContent = styled.div`
    max-width: 450px;
`;

const BrandingTitle = styled.h1`
    font-size: 3.5rem;
    font-weight: 700;
    line-height: 1.2;
    margin-bottom: 15px;
    color: var(--primary-color);

    @media (max-width: 768px) {
        font-size: 2.5rem;
    }
`;

const BrandingSubtitle = styled.p`
    font-size: 1.2rem;
    font-weight: 300;
    color: var(--text-secondary);

    @media (max-width: 768px) {
        font-size: 1rem;
    }
`;

const FormPanel = styled.div`
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow-y: auto;
    padding: 20px 0;

    @media (max-width: 768px) {
        padding: 20px;
    }
`;

const FormBox = styled.div`
    width: 100%;
    max-width: 400px;
    padding: 40px;
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);

    @media (max-width: 768px) {
        padding: 30px;
    }
`;

const Title = styled.h2`
    font-size: 2.2rem;
    font-weight: 600;
    margin-bottom: 10px;
    color: var(--text-primary);

    @media (max-width: 768px) {
        font-size: 1.8rem;
    }
`;

const Subtitle = styled.p`
    color: var(--text-secondary);
    margin-bottom: 50px;
    font-size: 1rem;

    @media (max-width: 768px) {
        margin-bottom: 30px;
    }
`;

const Form = styled.form``;

const InputGroup = styled.div`
    margin-bottom: 25px;
`;

const Label = styled.label`
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--text-secondary);
`;

const Input = styled.input`
    width: 100%;
    padding: 14px 18px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    font-size: 1rem;
    background-color: var(--bg-main);
    color: var(--text-primary);
`;

const Button = styled.button`
    width: 100%;
    padding: 15px;
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    &:hover {
        background-color: var(--primary-hover);
    }
`;

const LinksContainer = styled.div`
    text-align: center;
    margin-top: 25px;
    font-size: 0.9rem;
    color: var(--text-secondary);

    a {
        color: var(--primary-color);
        font-weight: 600;
        text-decoration: none;
        &:hover { text-decoration: underline; }
    }
`;

function LoginPage() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const navigate = useNavigate();

    const handleLogin = async (event) => {
        event.preventDefault();
        try {
            const userData = { email, password };
            const response = await login(userData); // GANTI: loginUser -> login
            localStorage.setItem('token', response.data.token);
            navigate('/pos', { replace: true });
        } catch (err) {
            console.error("Login Error:", err.response || err);
            toast.error(err.response?.data?.message || 'Terjadi kesalahan jaringan atau server tidak merespons.');
        }
    };

    return (
        <PageContainer>
            <BrandingPanel>
                <BrandingContent>
                    <BrandingTitle>SmartPOS</BrandingTitle>
                    <BrandingSubtitle>Solusi kasir modern untuk mengembangkan bisnis Anda.</BrandingSubtitle>
                </BrandingContent>
            </BrandingPanel>
            <FormPanel>
                <FormBox>
                    <Title>Selamat Datang</Title>
                    <Subtitle>Silakan login untuk melanjutkan.</Subtitle>
                    <Form onSubmit={handleLogin}>
                        <InputGroup>
                            <Label htmlFor="email">Alamat Email</Label>
                            <Input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} required autoFocus />
                        </InputGroup>
                        <InputGroup>
                            <Label htmlFor="password">Password</Label>
                            <Input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required />
                        </InputGroup>
                        <Button type="submit"><FiLogIn style={{ marginRight: '8px' }}/> Login</Button>
                        
                        <LinksContainer>
                            <Link to="/forgot-password">Lupa Password?</Link>
                            <span style={{ margin: '0 10px' }}>|</span>
                            <span>Belum punya akun? <Link to="/register">Daftar di sini</Link></span>
                        </LinksContainer>
                    </Form>
                </FormBox>
            </FormPanel>
        </PageContainer>
    );
}

export default LoginPage;

===== frontend\src\pages\LoginPage.test.jsx =====
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';
import LoginPage from './LoginPage';

describe('LoginPage', () => {
    it('should render the login form correctly', () => {
        // 1. Render komponen di dalam MemoryRouter karena ada <Link>
        render(
            <MemoryRouter>
                <LoginPage />
            </MemoryRouter>
        );

        // 2. Cari elemen-elemen penting di layar
        const title = screen.getByRole('heading', { name: /selamat datang/i });
        const emailInput = screen.getByLabelText(/alamat email/i);
        const passwordInput = screen.getByLabelText(/password/i);
        const loginButton = screen.getByRole('button', { name: /login/i });
        const registerLink = screen.getByText(/daftar di sini/i);

        // 3. Pastikan semua elemen tersebut ada di dalam dokumen
        expect(title).toBeInTheDocument();
        expect(emailInput).toBeInTheDocument();
        expect(passwordInput).toBeInTheDocument();
        expect(loginButton).toBeInTheDocument();
        expect(registerLink).toBeInTheDocument();
    });
});

===== frontend\src\pages\PosPage.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\PosPage.jsx
import React, { useState, useEffect, useContext, useRef, useCallback, useReducer } from 'react';
import styled from 'styled-components';
import { getProducts, createOrder, getOrderById, validateCoupon } from '../services/api';
import { FiPlus, FiMinus, FiSearch, FiTrash2, FiUser, FiPause, FiGrid, FiTag, FiShoppingCart } from 'react-icons/fi';
import { motion, AnimatePresence } from 'framer-motion';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';
import { toast } from 'react-toastify';
import { useReactToPrint } from 'react-to-print';
import PostCheckoutModal from '../components/PostCheckoutModal';
import CheckoutModal from '../components/CheckoutModal';
import CustomerSelectModal from '../components/CustomerSelectModal';
import VariantSelectModal from '../components/VariantSelectModal';
import HeldCartsModal from '../components/HeldCartsModal';
import Receipt from '../components/Receipt';
import StartShiftModal from '../components/StartShiftModal';
import { BusinessContext } from '../context/BusinessContext';
import { ShiftContext } from '../context/ShiftContext';
import PageWrapper from '../components/PageWrapper';
import { jwtDecode } from 'jwt-decode';
import { useOnlineStatus } from '../hooks/useOnlineStatus';
import { addOfflineOrder } from '../utils/offlineDb';

// --- Styled Components ---
const PageGrid = styled.div`
    display: grid;
    grid-template-columns: 1fr 420px;
    gap: 30px;
    width: 100%;
    height: 100%;
    padding: 30px;
    overflow: hidden;
    @media (max-width: 1024px) {
        grid-template-columns: 1fr;
        height: auto;
        padding: 0;
        padding-bottom: 100px;
        gap: 0;
        overflow-y: auto;
    }
`;
const ProductsPanel = styled(motion.div)`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    @media (max-width: 1024px) {
        background-color: transparent;
        border: none;
        border-radius: 0;
        padding: 0 15px;
        overflow: visible;
        box-shadow: none;
    }
`;
const PanelHeader = styled.header`
    padding: 20px 25px;
    border-bottom: 1px solid var(--border-color);
    flex-shrink: 0;
    @media (max-width: 1024px) {
        padding: 15px 0;
        border-bottom: none;
    }
`;
const SearchContainer = styled.div`
    position: relative;
    width: 100%;
    max-width: 450px;
`;
const SearchIcon = styled(FiSearch)`
    position: absolute;
    top: 50%;
    left: 15px;
    transform: translateY(-50%);
    color: var(--text-placeholder);
`;
const SearchInput = styled.input`
    width: 100%;
    padding: 12px 20px 12px 45px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    font-size: 1rem;
    background-color: var(--bg-main);
    color: var(--text-primary);
    &:focus {
        outline: none;
        border-color: var(--primary-color);
    }
`;
const ProductGrid = styled(motion.div)`
    flex-grow: 1;
    padding: 25px;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: 25px;
    overflow-y: auto;
    @media (max-width: 1024px) {
        padding: 0;
        grid-template-columns: 1fr;
        gap: 12px;
    }
`;
const ProductCard = styled(motion.div)`
    border-radius: 12px;
    border: 1px solid var(--border-color);
    overflow: hidden;
    position: relative;
    cursor: ${(props) => (props.$disabled ? 'not-allowed' : 'pointer')};
    opacity: ${(props) => (props.$disabled ? 0.9 : 1)};
    transition: all 0.2s ease-in-out;
    aspect-ratio: 1 / 1;
    background-image: url(${(props) => props.src});
    background-size: cover;
    background-position: center;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    &:hover:not([disabled]) {
        transform: translateY(-5px) scale(1.03);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
`;
const ProductInfo = styled.div`
    padding: 20px 15px 15px 15px;
    text-align: left;
    width: 100%;
    color: #FFFFFF;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.85), transparent);
`;
const ProductName = styled.h4`
    margin: 0;
    font-size: 0.9rem;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
`;
const ProductPrice = styled.p`
    margin: 4px 0 0 0;
    font-weight: 500;
    font-size: 0.85rem;
`;
const CartPanel = styled(motion.aside)`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    padding: 0;
    overflow: hidden;
    @media (max-width: 1024px) {
        display: none;
    }
`;
const MobileCartButton = styled(motion.div)`
    display: none;
    @media (max-width: 1024px) {
        display: flex;
        position: fixed;
        bottom: 80px;
        left: 50%;
        transform: translateX(-50%);
        width: 90%;
        max-width: 500px;
        background-color: var(--primary-color);
        color: white;
        padding: 15px 20px;
        border-radius: 16px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        justify-content: space-between;
        align-items: center;
        z-index: 99;
        cursor: pointer;
    }
`;
const MobileCartInfo = styled.div`
    display: flex;
    align-items: center;
    gap: 12px;
`;
const MobileCartText = styled.div`
    font-weight: 600;
`;
const MobileCartTotal = styled.div`
    font-size: 1.2rem;
    font-weight: 700;
`;
const CartHeader = styled.div`
    padding: 20px 25px;
    flex-shrink: 0;
    border-bottom: 1px solid var(--border-color);
`;
const PanelTitle = styled.h1`
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-primary);
`;
const CartItemsList = styled.ul`
    list-style: none;
    padding: 0 25px;
    margin: 0;
    flex-grow: 1;
    overflow-y: auto;
`;
const CartItem = styled(motion.li)`
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 15px 0;
    border-bottom: 1px solid var(--border-color);
`;
const CartItemDetails = styled.div`
    flex-grow: 1;
`;
const CartItemName = styled.span`
    display: block;
    font-weight: 500;
    font-size: 0.9rem;
`;
const CartItemPrice = styled.small`
    color: var(--text-secondary);
`;
const CartItemControls = styled.div`
    display: flex;
    align-items: center;
    background-color: var(--bg-main);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 4px;
`;
const ControlButton = styled.button`
    width: 24px;
    height: 24px;
    border: none;
    background: none;
    color: var(--text-primary);
    cursor: pointer;
`;
const QuantityDisplay = styled.span`
    padding: 0 8px;
    font-weight: 500;
    font-size: 0.9rem;
`;
const RemoveItemButton = styled.button`
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    &:hover {
        color: var(--red-color);
    }
`;
const CheckoutSection = styled.div`
    padding: 20px 25px;
    border-top: 1px solid var(--border-color);
    background-color: var(--bg-surface);
    margin-top: auto;
    flex-shrink: 0;
`;
const TotalRow = styled.div`
    display: flex;
    justify-content: space-between;
    font-weight: 500;
    margin-bottom: 10px;
    & span:last-child {
        font-weight: 600;
        font-size: 1.1rem;
    }
`;
const CheckoutButton = styled(motion.button)`
    width: 100%;
    padding: 15px;
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
`;
const CustomerInfo = styled.div`
    padding: 20px 25px;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: var(--text-secondary);
    flex-shrink: 0;
`;
const CustomerButton = styled.button`
    display: flex;
    align-items: center;
    gap: 8px;
    background: none;
    border: 1px solid var(--border-color);
    padding: 8px 15px;
    border-radius: 8px;
    cursor: pointer;
    color: var(--text-primary);
    &:hover {
        background-color: var(--bg-main);
    }
`;
const RemoveCustomerLink = styled.button`
    margin-left: 10px;
    background: none;
    border: none;
    color: var(--red-color);
    cursor: pointer;
    text-decoration: underline;
`;
const CartActions = styled.div`
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    margin-bottom: 20px;
`;
const ActionButton = styled.button`
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    padding: 10px;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    border: 1px solid var(--border-color);
    background-color: var(--bg-surface);
    color: var(--text-primary);
    position: relative;
    &:hover {
        background-color: var(--bg-main);
    }
`;
const Badge = styled.span`
    position: absolute;
    top: -5px;
    right: -5px;
    background-color: var(--red-color);
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 0.7rem;
    display: flex;
    align-items: center;
    justify-content: center;
`;
const SkeletonCard = () => (
    <div style={{ border: '1px solid var(--border-color)', borderRadius: '16px', overflow: 'hidden', aspectRatio: '1 / 1' }}>
        <Skeleton height="100%" />
    </div>
);
const PromoInput = styled.input`
    flex-grow: 1;
    padding: 10px 15px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background-color: var(--bg-main);
    color: var(--text-primary);
`;
const PromoSection = styled.div`
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
`;
const formatCurrency = (val) => `Rp ${new Intl.NumberFormat('id-ID').format(val || 0)}`;
const getPriceDisplay = (variants) => {
    if (!variants || variants.length === 0) return 'N/A';
    const prices = variants.map(v => parseFloat(v.price));
    const minPrice = Math.min(...prices);
    const maxPrice = Math.max(...prices);
    if (minPrice === maxPrice) {
        return formatCurrency(minPrice);
    }
    return `${formatCurrency(minPrice)} - ${formatCurrency(maxPrice)}`;
};

// --- useReducer setup ---
const cartInitialState = {
    items: [],
    selectedCustomer: null,
    appliedDiscount: null,
};

function cartReducer(state, action) {
    switch (action.type) {
        case 'ADD_ITEM': {
            const { product, variant } = action.payload;
            const cartItemId = `${product.id}-${variant.id}`;
            const existingItemIndex = state.items.findIndex(item => item.cartItemId === cartItemId);

            if (existingItemIndex > -1) {
                const newItems = [...state.items];
                newItems[existingItemIndex].quantity += 1;
                return { ...state, items: newItems };
            } else {
                const newItem = {
                    cartItemId,
                    productId: product.id,
                    variantId: variant.id,
                    name: `${product.name} (${variant.name})`,
                    price: variant.price,
                    image_url: product.image_url,
                    quantity: 1,
                };
                return { ...state, items: [...state.items, newItem] };
            }
        }
        case 'UPDATE_QUANTITY': {
            const { cartItemId, change } = action.payload;
            const itemIndex = state.items.findIndex(item => item.cartItemId === cartItemId);
            if (itemIndex < 0) return state;
            const newItems = [...state.items];
            newItems[itemIndex].quantity += change;
            if (newItems[itemIndex].quantity <= 0) {
                return { ...state, items: newItems.filter(item => item.cartItemId !== cartItemId) };
            }
            return { ...state, items: newItems };
        }
        case 'REMOVE_ITEM': {
            const { cartItemId } = action.payload;
            return { ...state, items: state.items.filter(item => item.cartItemId !== cartItemId) };
        }
        case 'SET_CUSTOMER':
            return { ...state, selectedCustomer: action.payload };
        case 'SET_DISCOUNT':
            return { ...state, appliedDiscount: action.payload };
        case 'RESTORE_ITEMS':
            return { ...state, items: action.payload };
        case 'CLEAR_CART':
            return cartInitialState;
        default:
            return state;
    }
}

function PosPage() {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [lastOrderId, setLastOrderId] = useState(null);
    const [isPostCheckoutOpen, setIsPostCheckoutOpen] = useState(false);
    const [isCheckoutModalOpen, setIsCheckoutModalOpen] = useState(false);
    const [isCustomerModalOpen, setIsCustomerModalOpen] = useState(false);
    const [isVariantModalOpen, setIsVariantModalOpen] = useState(false);
    const [selectedProductForVariant, setSelectedProductForVariant] = useState(null);
    const [isHeldCartsModalOpen, setIsHeldCartsModalOpen] = useState(false);
    const { settings } = useContext(BusinessContext);
    const { activeShift, isLoadingShift, refreshShiftStatus } = useContext(ShiftContext);
    const [heldCarts, setHeldCarts] = useState(() => {
        const saved = localStorage.getItem('heldCarts');
        return saved ? JSON.parse(saved) : [];
    });
    const [couponCode, setCouponCode] = useState('');
    const [userRole, setUserRole] = useState(null);
    const [cartState, dispatch] = useReducer(cartReducer, cartInitialState);
    const { items: cart, selectedCustomer, appliedDiscount } = cartState;
    const isOnline = useOnlineStatus();

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            try {
                const decoded = jwtDecode(token);
                setUserRole(decoded.role?.toLowerCase());
            } catch (e) {
                console.error("Token tidak valid");
                setUserRole('');
            }
        } else {
            setUserRole('');
        }
    }, []);

    const [orderToPrint, setOrderToPrint] = useState(null);
    const receiptRef = useRef();
    const handlePrint = useReactToPrint({
        content: () => receiptRef.current,
        documentTitle: `Struk-Pesanan-${orderToPrint?.id || ''}`,
        onAfterPrint: () => setOrderToPrint(null),
    });

    const handlePrintReceipt = useCallback(async (orderId) => {
        try {
            const res = await getOrderById(orderId);
            setOrderToPrint(res.data);
        } catch (error) {
            toast.error("Gagal memuat data struk untuk dicetak.");
        }
    }, []);

    useEffect(() => {
        if (orderToPrint) {
            const timer = setTimeout(() => {
                if (receiptRef.current) {
                    handlePrint();
                } else {
                    toast.error("Gagal mencetak: Komponen struk tidak siap.");
                }
            }, 500);
            return () => clearTimeout(timer);
        }
    }, [orderToPrint, handlePrint]);

    useEffect(() => {
        localStorage.setItem('heldCarts', JSON.stringify(heldCarts));
    }, [heldCarts]);

    useEffect(() => {
        const fetchProductData = async () => {
            setLoading(true);
            try {
                const productsRes = await getProducts();
                setProducts(productsRes.data);
            } catch (error) {
                toast.error("Gagal memuat data produk.");
            } finally {
                setLoading(false);
            }
        };
        fetchProductData();
    }, []);

    const addToCart = useCallback((product, variant) => {
        dispatch({ type: 'ADD_ITEM', payload: { product, variant } });
    }, []);

    const handleProductClick = useCallback((product) => {
        if (!product.variants || product.variants.length === 0) {
            toast.warn('Produk ini tidak memiliki varian yang tersedia.');
            return;
        }
        if (product.variants.length === 1) {
            addToCart(product, product.variants[0]);
        } else {
            setSelectedProductForVariant(product);
            setIsVariantModalOpen(true);
        }
    }, [addToCart]);

    const handleSelectVariant = (product, variant) => {
        if (!product || !variant) {
            toast.error('Gagal memilih varian.');
            return;
        }
        addToCart(product, variant);
        setIsVariantModalOpen(false);
    };

    const handleApplyCoupon = async () => {
        if (!couponCode.trim()) return toast.warn("Masukkan kode promo.");
        try {
            const res = await validateCoupon(couponCode);
            dispatch({ type: 'SET_DISCOUNT', payload: res.data });
            toast.success(`Promo "${res.data.name}" berhasil diterapkan!`);
        } catch (error) {
            dispatch({ type: 'SET_DISCOUNT', payload: null });
            toast.error(error.response?.data?.message || "Gagal menerapkan promo.");
        }
    };

    const removeDiscount = () => {
        dispatch({ type: 'SET_DISCOUNT', payload: null });
        setCouponCode('');
        toast.info("Promo dibatalkan.");
    };

    const cartTotal = cart.reduce((total, item) => {
        const itemTotal = (parseFloat(item.price) * 100 * item.quantity) / 100;
        return total + itemTotal;
    }, 0);

    let discountAmount = 0;
    if (appliedDiscount) {
        if (appliedDiscount.type === 'percentage') {
            discountAmount = cartTotal * (parseFloat(appliedDiscount.value) / 100);
        } else {
            discountAmount = parseFloat(appliedDiscount.value);
        }
    }

    const finalTotal = cartTotal - discountAmount;

    const handleCheckout = async (checkoutData) => {
        if (cart.length === 0) return;
        const originalSubtotal = cart.reduce((total, item) => {
            const itemTotal = (parseFloat(item.price) * 100 * item.quantity) / 100;
            return total + itemTotal;
        }, 0);
        const orderData = {
            items: cart.map((item) => ({ variantId: item.variantId, quantity: item.quantity })),
            customer_id: selectedCustomer ? selectedCustomer.id : null,
            payment_method: checkoutData.paymentMethod,
            amount_paid: checkoutData.amountPaid,
            subtotal_amount: originalSubtotal,
            tax_amount: checkoutData.taxAmount,
            total_amount: checkoutData.finalTotal,
            promotion_id: appliedDiscount ? appliedDiscount.id : null,
            discount_amount: discountAmount,
            shift_id: activeShift?.id || null,
        };
        if (isOnline) {
            try {
                const res = await toast.promise(createOrder(orderData), {
                    pending: 'Memproses transaksi...',
                    success: 'Transaksi berhasil!',
                    error: (err) => `Gagal checkout: ${err.response?.data?.message || 'Server error'}`,
                });
                setLastOrderId(res.data.orderId);
                setIsPostCheckoutOpen(true);
                setIsCheckoutModalOpen(false);
                dispatch({ type: 'CLEAR_CART' });
                setCouponCode('');
            } catch (err) {
                console.error('Checkout error:', err);
                toast.error(err.response?.data?.message || 'Gagal checkout: Server error');
            }
        } else {
            try {
                const offlineOrderData = {
                    ...orderData,
                    createdAt: new Date().toISOString(),
                    syncStatus: 'pending'
                };
                await addOfflineOrder(offlineOrderData);
                toast.warn('Koneksi terputus. Transaksi disimpan lokal dan akan disinkronkan nanti.', { autoClose: 5000 });
                dispatch({ type: 'CLEAR_CART' });
                setIsCheckoutModalOpen(false);
            } catch (error) {
                console.error('Offline checkout error:', error);
                toast.error('Gagal menyimpan transaksi offline.');
            }
        }
    };

    const handleClosePostCheckoutModal = () => {
        setIsPostCheckoutOpen(false);
        dispatch({ type: 'CLEAR_CART' });
    };

    const handleSelectCustomer = (customer) => {
        dispatch({ type: 'SET_CUSTOMER', payload: customer });
        setIsCustomerModalOpen(false);
    };

    const handleHoldCart = () => {
        if (cart.length === 0) return;
        const newHeldCart = { id: new Date().toISOString(), items: cart, customer: selectedCustomer, discount: appliedDiscount };
        setHeldCarts((prev) => [...prev, newHeldCart]);
        dispatch({ type: 'CLEAR_CART' });
        setCouponCode('');
        toast.info('Keranjang berhasil ditahan.');
    };

    const handleResumeCart = (cartId) => {
        const cartToResume = heldCarts.find((c) => c.id === cartId);
        if (cartToResume) {
            dispatch({ type: 'SET_CUSTOMER', payload: cartToResume.customer });
            dispatch({ type: 'SET_DISCOUNT', payload: cartToResume.discount });
            dispatch({ type: 'RESTORE_ITEMS', payload: cartToResume.items });
            setHeldCarts(heldCarts.filter((c) => c.id !== cartId));
            setIsHeldCartsModalOpen(false);
            toast.success('Keranjang berhasil dilanjutkan.');
        }
    };

    const handleDeleteHeldCart = (cartId) => {
        setHeldCarts(heldCarts.filter((c) => c.id !== cartId));
        toast.warn('Keranjang yang ditahan telah dihapus.');
    };

    const filteredProducts = products.filter((p) => {
        const term = searchTerm.toLowerCase();
        if (!term) return true;
        const nameMatch = p.name.toLowerCase().includes(term);
        const barcodeMatch = p.variants.some(v => v.barcode && v.barcode.toLowerCase().includes(term));
        return nameMatch || barcodeMatch;
    });

    const productsContent = (
        <ProductsPanel>
            <PanelHeader>
                <SearchContainer>
                    <SearchIcon size={18} />
                    <SearchInput placeholder="Cari nama atau barcode..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
                </SearchContainer>
            </PanelHeader>
            <ProductGrid>
                {loading ? (
                    Array.from({ length: 12 }).map((_, index) => (
                        <SkeletonCard key={index} />
                    ))
                ) : (
                    filteredProducts.map((product) => (
                        <ProductCard
                            key={product.id}
                            $disabled={product.stock <= 0}
                            onClick={() => product.stock > 0 && handleProductClick(product)}
                            whileHover={product.stock > 0 ? { scale: 1.03 } : {}}
                            src={product.image_url || `https://placehold.co/200`}
                        >
                            <ProductInfo>
                                <ProductName>{product.name}</ProductName>
                                <ProductPrice>{getPriceDisplay(product.variants)}</ProductPrice>
                            </ProductInfo>
                        </ProductCard>
                    ))
                )}
            </ProductGrid>
        </ProductsPanel>
    );

    const cartContent = (
        <CartPanel>
            <CartHeader>
                <PanelTitle>Pesanan</PanelTitle>
            </CartHeader>
            <CustomerInfo>
                {selectedCustomer ? (
                    <div>
                        <span style={{ fontWeight: 500, color: 'var(--text-primary)' }}>{selectedCustomer.name}</span>
                        <RemoveCustomerLink onClick={() => dispatch({ type: 'SET_CUSTOMER', payload: null })}>Hapus</RemoveCustomerLink>
                    </div>
                ) : (
                    <span>Pelanggan Umum</span>
                )}
                <CustomerButton onClick={() => setIsCustomerModalOpen(true)}>
                    <FiUser size={16} />
                    {selectedCustomer ? 'Ganti' : 'Pilih'}
                </CustomerButton>
            </CustomerInfo>
            <CartItemsList>
                <AnimatePresence>
                    {cart.length === 0 && (
                        <p style={{ textAlign: 'center', color: 'var(--text-secondary)', padding: '20px' }}>Keranjang Anda kosong.</p>
                    )}
                    {cart.map((item) => (
                        <CartItem key={item.cartItemId} layout initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
                            <CartItemDetails>
                                <CartItemName>{item.name}</CartItemName>
                                <CartItemPrice>Rp {new Intl.NumberFormat('id-ID').format(item.price)}</CartItemPrice>
                            </CartItemDetails>
                            <CartItemControls>
                                <ControlButton onClick={() => dispatch({ type: 'UPDATE_QUANTITY', payload: { cartItemId: item.cartItemId, change: -1 } })}>
                                    <FiMinus size={16} />
                                </ControlButton>
                                <QuantityDisplay>{item.quantity}</QuantityDisplay>
                                <ControlButton onClick={() => dispatch({ type: 'UPDATE_QUANTITY', payload: { cartItemId: item.cartItemId, change: 1 } })}>
                                    <FiPlus size={16} />
                                </ControlButton>
                            </CartItemControls>
                            <RemoveItemButton onClick={() => dispatch({ type: 'REMOVE_ITEM', payload: { cartItemId: item.cartItemId } })}>
                                <FiTrash2 size={18} />
                            </RemoveItemButton>
                        </CartItem>
                    ))}
                </AnimatePresence>
            </CartItemsList>
            <CheckoutSection>
                <CartActions>
                    <ActionButton onClick={handleHoldCart}><FiPause /> Tahan</ActionButton>
                    <ActionButton onClick={() => setIsHeldCartsModalOpen(true)}>
                        <FiGrid /> Lihat Keranjang
                        {heldCarts.length > 0 && <Badge>{heldCarts.length}</Badge>}
                    </ActionButton>
                </CartActions>
                <PromoSection>
                    <PromoInput
                        placeholder="Kode Promo"
                        value={couponCode}
                        onChange={(e) => setCouponCode(e.target.value)}
                        disabled={!!appliedDiscount}
                    />
                    {appliedDiscount ? (
                        <ActionButton onClick={removeDiscount}><FiTrash2/> Batal</ActionButton>
                    ) : (
                        <ActionButton onClick={handleApplyCoupon}><FiTag/> Terapkan</ActionButton>
                    )}
                </PromoSection>
                {cart.length > 0 && (
                    <>
                        <TotalRow>
                            <span>Subtotal</span>
                            <span>Rp {new Intl.NumberFormat('id-ID').format(cartTotal)}</span>
                        </TotalRow>
                        {appliedDiscount && (
                            <TotalRow style={{color: 'var(--green-color)'}}>
                                <span>Diskon ({appliedDiscount.name})</span>
                                <span>- Rp {new Intl.NumberFormat('id-ID').format(discountAmount)}</span>
                            </TotalRow>
                        )}
                        <TotalRow>
                            <span>Total Akhir</span>
                            <span>Rp {new Intl.NumberFormat('id-ID').format(finalTotal)}</span>
                        </TotalRow>
                        <CheckoutButton onClick={() => setIsCheckoutModalOpen(true)}>Bayar Sekarang</CheckoutButton>
                    </>
                )}
            </CheckoutSection>
        </CartPanel>
    );

    if (isLoadingShift || userRole === null) {
        return (
            <PageWrapper loading={true}>
                <PageGrid>
                    <ProductsPanel>
                        <PanelHeader>
                            <SearchContainer>
                                <SearchIcon size={18} />
                                <SearchInput placeholder="Cari nama produk atau barcode..." />
                            </SearchContainer>
                        </PanelHeader>
                        <ProductGrid>
                            {Array.from({ length: 12 }).map((_, index) => (
                                <SkeletonCard key={index} />
                            ))}
                        </ProductGrid>
                    </ProductsPanel>
                    <CartPanel>
                        <Skeleton height="100%" />
                    </CartPanel>
                </PageGrid>
            </PageWrapper>
        );
    }

    if (userRole === 'kasir' && !activeShift) {
        return <StartShiftModal onShiftStarted={refreshShiftStatus} />;
    }

    return (
        <>
            <PageWrapper loading={loading}>
                <PageGrid>
                    {productsContent}
                    {cartContent}
                </PageGrid>
            </PageWrapper>
            <AnimatePresence>
                {cart.length > 0 && (
                    <MobileCartButton
                        onClick={() => setIsCheckoutModalOpen(true)}
                        initial={{ y: 150 }}
                        animate={{ y: 0 }}
                        exit={{ y: 150 }}
                        transition={{ type: 'spring', stiffness: 400, damping: 40 }}
                    >
                        <MobileCartInfo>
                            <FiShoppingCart size={24} />
                            <MobileCartText>{cart.reduce((acc, item) => acc + item.quantity, 0)} Item</MobileCartText>
                        </MobileCartInfo>
                        <MobileCartTotal>Rp {new Intl.NumberFormat('id-ID').format(finalTotal)}</MobileCartTotal>
                    </MobileCartButton>
                )}
            </AnimatePresence>
            <CheckoutModal
                isOpen={isCheckoutModalOpen}
                onClose={() => setIsCheckoutModalOpen(false)}
                cartTotal={finalTotal}
                onConfirmCheckout={handleCheckout}
                paymentMethods={settings.payment_methods}
                taxRate={settings.tax_rate}
            />
            <PostCheckoutModal
                isOpen={isPostCheckoutOpen}
                onClose={handleClosePostCheckoutModal}
                orderId={lastOrderId}
                onPrint={handlePrintReceipt}
            />
            <CustomerSelectModal
                isOpen={isCustomerModalOpen}
                onClose={() => setIsCustomerModalOpen(false)}
                onSelectCustomer={handleSelectCustomer}
            />
            <VariantSelectModal
                isOpen={isVariantModalOpen}
                onClose={() => setIsVariantModalOpen(false)}
                product={selectedProductForVariant}
                onSelectVariant={handleSelectVariant}
            />
            <HeldCartsModal
                isOpen={isHeldCartsModalOpen}
                onClose={() => setIsHeldCartsModalOpen(false)}
                heldCarts={heldCarts}
                onResume={handleResumeCart}
                onDelete={handleDeleteHeldCart}
            />
            <div style={{ display: 'none' }}><Receipt ref={receiptRef} order={orderToPrint} /></div>
        </>
    );
}

export default PosPage;

===== frontend\src\pages\ProductFormPage.jsx =====
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { getCategories, getSubCategories, getSuppliers, getProductById, createProduct, updateProduct, uploadImage, getRawMaterials } from '../services/api';
import { toast } from 'react-toastify';
import { FiSave, FiPlus, FiTrash2, FiArrowLeft, FiUpload } from 'react-icons/fi';
import { formatRupiah as formatCurrency, parseRupiah as parseCurrency } from '../utils/formatters';
import PageWrapper from '../components/PageWrapper';

// --- Styled Components ---
const PageContainer = styled.div`
    padding: 30px;
    max-width: 900px;
    margin: 0 auto;
    
    @media (max-width: 768px) {
        padding: 15px;
    }
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
`;

const Title = styled.h1`
    font-size: 1.8rem;
    color: var(--text-primary);
`;

const BackLink = styled(Link)`
    display: inline-flex;
    align-items: center;
    gap: 8px;
    color: var(--text-secondary);
    text-decoration: none;
    margin-bottom: 20px;
    font-weight: 500;

    &:hover {
        color: var(--text-primary);
    }
`;

const Form = styled.form`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    padding: 25px;
`;

const FormGrid = styled.div`
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 18px 20px;
    
    @media (max-width: 768px) {
        grid-template-columns: 1fr;
    }
`;

const InputGroup = styled.div`
    grid-column: ${props => props.$fullWidth ? '1 / -1' : 'span 1'};
`;

const Label = styled.label`
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    font-size: 0.9rem;
    color: var(--text-secondary);
`;

const Input = styled.input`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background-color: var(--bg-main);
    color: var(--text-primary);
    font-size: 1rem;
    
    &[type="number"] {
        -moz-appearance: textfield;
    }
    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
`;

const FileInputContainer = styled.div`
    display: flex;
    gap: 10px;
    align-items: center;
    width: 100%;
`;

const UploadButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 15px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 5px;
    cursor: pointer;
    flex-shrink: 0;

    &:hover {
        background-color: var(--primary-hover);
    }
    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
`;

const FileInput = styled.input`
    display: none;
`;

const Select = styled.select`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background-color: var(--bg-main);
    color: var(--text-primary);
    font-size: 1rem;
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 12px center;
    background-size: 20px;

    &:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2);
    }
`;

const VariantSection = styled.div`
    grid-column: 1 / -1;
    border-top: 1px solid var(--border-color);
    margin-top: 10px;
    padding-top: 20px;
`;

const VariantRow = styled.div`
    display: grid;
    grid-template-columns: 2fr 1fr 1fr 1.5fr 50px;
    gap: 15px;
    align-items: center;
    margin-bottom: 10px;
    
    @media (max-width: 768px) {
        grid-template-columns: 1fr;
        & input {
            width: 100%;
        }
        & button {
            width: 100%;
            margin-top: 10px;
        }
    }
`;

const AddVariantButton = styled.button`
    display: flex;
    align-items: center;
    gap: 5px;
    background-color: var(--primary-color);
    color: white;
    padding: 8px 15px;
    border-radius: 8px;
    border: none;
    cursor: pointer;
    font-weight: 500;
    margin-top: 10px;
    
    &:hover {
        opacity: 0.9;
    }
`;

const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--red-color);
    
    @media (max-width: 768px) {
        border: 1px solid var(--border-color);
        padding: 10px;
        border-radius: 8px;
        color: var(--red-color);
    }
`;

const FormFooter = styled.div`
    padding-top: 25px;
    margin-top: 25px;
    border-top: 1px solid var(--border-color);
    display: flex;
    justify-content: flex-end;
`;

const SaveButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 25px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;

    &:hover {
        background-color: var(--primary-hover);
    }
    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
`;

const RecipeSection = styled(VariantSection)``;

const RecipeRow = styled.div`
    display: grid;
    grid-template-columns: 3fr 1fr 1fr 50px;
    gap: 15px;
    align-items: center;
    margin-bottom: 10px;
    
    @media (max-width: 768px) {
        grid-template-columns: 1fr;
        & select, & input {
            width: 100%;
        }
        & span {
            width: 100%;
            text-align: left;
        }
        & button {
            width: 100%;
            margin-top: 10px;
        }
    }
`;

const AddRecipeItemButton = styled(AddVariantButton)``;
// --- End of Styled Components ---

function ProductFormPage() {
    const { id } = useParams();
    const navigate = useNavigate();
    const isEditing = Boolean(id);
    const fileInputRef = useRef(null);

    const [formData, setFormData] = useState({
        name: '',
        description: '',
        category_id: '',
        sub_category_id: '',
        supplier_id: '',
        stock: 0,
        low_stock_threshold: 5,
        image_url: '',
        expiration_date: '',
        variants: [{ name: 'Reguler', price: '', cost_price: '', barcode: '' }],
        recipeItems: [],
    });

    const [categories, setCategories] = useState([]);
    const [subCategories, setSubCategories] = useState([]);
    const [suppliers, setSuppliers] = useState([]);
    const [rawMaterials, setRawMaterials] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [selectedFile, setSelectedFile] = useState(null);

    const fetchProductData = useCallback(async () => {
        if (isEditing) {
            try {
                const res = await getProductById(id);
                const product = res.data;
                if (product.category_id) {
                    const subCatRes = await getSubCategories(product.category_id);
                    setSubCategories(subCatRes.data);
                }
                setFormData({
                    name: product.name || '',
                    description: product.description || '',
                    category_id: product.category_id || '',
                    sub_category_id: product.sub_category_id || '',
                    supplier_id: product.supplier_id || '',
                    stock: product.stock || 0,
                    low_stock_threshold: product.low_stock_threshold || 5,
                    image_url: product.image_url || '',
                    expiration_date: product.expiration_date ? new Date(product.expiration_date).toISOString().split('T')[0] : '',
                    variants: product.variants && product.variants.length > 0 ? product.variants : [{ name: 'Reguler', price: '', cost_price: '', barcode: '' }],
                    recipeItems: product.recipeItems || [],
                });
            } catch (error) {
                toast.error("Gagal memuat data produk. Mungkin produk tidak ditemukan.");
                navigate('/products');
            }
        }
    }, [id, isEditing, navigate]);

    useEffect(() => {
        const fetchInitialData = async () => {
            setLoading(true);
            try {
                const [catRes, supRes, matRes] = await Promise.all([getCategories(), getSuppliers(), getRawMaterials()]);
                setCategories(catRes.data);
                setSuppliers(supRes.data);
                setRawMaterials(matRes.data);
                await fetchProductData();
            } catch (error) {
                toast.error("Gagal memuat data awal untuk form.");
            } finally {
                setLoading(false);
            }
        };
        fetchInitialData();
    }, [fetchProductData]);
    
    useEffect(() => {
        if (formData.category_id) {
            getSubCategories(formData.category_id)
                .then(res => setSubCategories(res.data))
                .catch(err => console.error("Gagal memuat sub-kategori:", err));
        } else {
            setSubCategories([]);
        }
    }, [formData.category_id]);
    
    const handleChange = (e) => {
        const { name, value } = e.target;
        if (name === "category_id") {
            setFormData({ ...formData, category_id: value, sub_category_id: '' });
        } else {
            setFormData({ ...formData, [name]: value });
        }
    };

    const handleVariantChange = (index, field, value) => {
        const newVariants = [...formData.variants];
        if (field === 'price' || field === 'cost_price') {
            newVariants[index][field] = parseCurrency(value);
        } else {
            newVariants[index][field] = value;
        }
        setFormData({ ...formData, variants: newVariants });
    };

    const addVariant = () => setFormData({ ...formData, variants: [...formData.variants, { name: '', price: '', cost_price: '', barcode: '' }] });

    const removeVariant = (index) => {
        if (formData.variants.length <= 1) return toast.warn("Produk harus memiliki setidaknya satu varian.");
        setFormData({ ...formData, variants: formData.variants.filter((_, i) => i !== index) });
    };
    
    const handleRecipeItemChange = (index, field, value) => {
        const newItems = [...formData.recipeItems];
        newItems[index][field] = value;
        if (field === 'raw_material_id') {
            const selectedMaterial = rawMaterials.find(m => m.id === parseInt(value));
            if (selectedMaterial) {
                newItems[index].raw_material_name = selectedMaterial.name;
                newItems[index].raw_material_unit = selectedMaterial.unit;
            } else {
                newItems[index].raw_material_name = '';
                newItems[index].raw_material_unit = '';
            }
        }
        setFormData({ ...formData, recipeItems: newItems });
    };

    const addRecipeItem = () => setFormData({ ...formData, recipeItems: [...formData.recipeItems, { raw_material_id: '', quantity_used: '' }] });
    const removeRecipeItem = (index) => setFormData({ ...formData, recipeItems: formData.recipeItems.filter((_, i) => i !== index) });

    const handleFileChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setSelectedFile(file);
            setFormData(prev => ({ ...prev, image_url: '' }));
            toast.info(`File dipilih: ${file.name}`);
        }
    };

    const triggerFileInput = () => fileInputRef.current.click();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        
        let imageUrlToSend = formData.image_url;
        if (selectedFile) {
            const formDataForUpload = new FormData();
            formDataForUpload.append('image', selectedFile);
            try {
                const uploadRes = await uploadImage(formDataForUpload);
                imageUrlToSend = uploadRes.data.url;
            } catch (error) {
                toast.error("Gagal mengunggah gambar.");
                setIsSubmitting(false);
                return;
            }
        }

        const productData = {
            ...formData,
            image_url: imageUrlToSend,
            expiration_date: formData.expiration_date || null
        };
        
        const promise = isEditing ? updateProduct(id, productData) : createProduct(productData);
        try {
            await toast.promise(promise, {
                pending: 'Menyimpan produk...',
                success: 'Produk berhasil disimpan!',
                error: (err) => err.response?.data?.message || 'Gagal menyimpan produk.'
            });
            navigate('/products');
        } catch (err) {
            console.error(err);
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <PageWrapper loading={loading}>
            <PageContainer>
                <BackLink to="/products"><FiArrowLeft /> Kembali ke Daftar Produk</BackLink>
                <PageHeader>
                    <Title>{isEditing ? 'Edit Produk' : 'Tambah Produk Baru'}</Title>
                </PageHeader>
                <Form onSubmit={handleSubmit}>
                    <FormGrid>
                        <InputGroup $fullWidth><Label>Nama Produk</Label><Input name="name" value={formData.name} onChange={handleChange} required autoFocus /></InputGroup>
                        <InputGroup><Label>Kategori</Label><Select name="category_id" value={formData.category_id} onChange={handleChange}><option value="">-- Pilih Kategori --</option>{categories.map(cat => <option key={cat.id} value={cat.id}>{cat.name}</option>)}</Select></InputGroup>
                        <InputGroup><Label>Sub-Kategori</Label><Select name="sub_category_id" value={formData.sub_category_id} onChange={handleChange} disabled={subCategories.length === 0}><option value="">-- Pilih Sub-Kategori --</option>{subCategories.map(sub => <option key={sub.id} value={sub.id}>{sub.name}</option>)}</Select></InputGroup>
                        <InputGroup><Label>Pemasok</Label><Select name="supplier_id" value={formData.supplier_id} onChange={handleChange}><option value="">-- Pilih Pemasok --</option>{suppliers.map(sup => <option key={sup.id} value={sup.id}>{sup.name}</option>)}</Select></InputGroup>
                        <InputGroup><Label>Tanggal Kadaluarsa (Opsional)</Label><Input type="date" name="expiration_date" value={formData.expiration_date} onChange={handleChange} /></InputGroup>
                        <InputGroup><Label>Total Stok</Label><Input name="stock" type="number" value={formData.stock} onChange={handleChange} required /></InputGroup>
                        <InputGroup><Label>Ambang Batas Stok Rendah</Label><Input name="low_stock_threshold" type="number" value={formData.low_stock_threshold} onChange={handleChange} required /></InputGroup>
                    </FormGrid>

                    <VariantSection>
                        <Label style={{ fontWeight: 600, fontSize: '1.1rem', marginBottom: '15px' }}>Varian Produk</Label>
                        {formData.variants.map((variant, index) => (
                            <VariantRow key={index}>
                                <Input placeholder="Nama Varian (cth: Panas)" value={variant.name} onChange={e => handleVariantChange(index, 'name', e.target.value)} required />
                                <Input type="text" placeholder="Harga Beli (Modal)" value={formatCurrency(variant.cost_price)} onChange={e => handleVariantChange(index, 'cost_price', e.target.value)} required />
                                <Input type="text" placeholder="Harga Jual" value={formatCurrency(variant.price)} onChange={e => handleVariantChange(index, 'price', e.target.value)} required />
                                <Input placeholder="Barcode/SKU" value={variant.barcode || ''} onChange={e => handleVariantChange(index, 'barcode', e.target.value)} />
                                <ActionButton type="button" onClick={() => removeVariant(index)}><FiTrash2 size={18} /></ActionButton>
                            </VariantRow>
                        ))}
                        <AddVariantButton type="button" onClick={addVariant}><FiPlus /> Tambah Varian</AddVariantButton>
                    </VariantSection>

                    <RecipeSection>
                        <Label style={{ fontWeight: 600, fontSize: '1.1rem', marginBottom: '15px' }}>Resep (jika ada)</Label>
                        {formData.recipeItems.map((item, index) => (
                            <RecipeRow key={index}>
                                <Select name="raw_material_id" value={item.raw_material_id} onChange={e => handleRecipeItemChange(index, 'raw_material_id', e.target.value)} required>
                                    <option value="">-- Pilih Bahan Baku --</option>
                                    {rawMaterials.map(mat => <option key={mat.id} value={mat.id}>{mat.name}</option>)}
                                </Select>
                                <Input type="number" step="0.01" placeholder="Jumlah" value={item.quantity_used} onChange={e => handleRecipeItemChange(index, 'quantity_used', e.target.value)} required />
                                <span>{item.raw_material_unit || 'Satuan'}</span>
                                <ActionButton type="button" onClick={() => removeRecipeItem(index)}><FiTrash2 size={18} /></ActionButton>
                            </RecipeRow>
                        ))}
                        <AddRecipeItemButton type="button" onClick={addRecipeItem}>
                            <FiPlus /> Tambah Bahan Resep
                        </AddRecipeItemButton>
                    </RecipeSection>

                    <InputGroup $fullWidth>
                        <Label>URL Gambar (atau Unggah)</Label>
                        <FileInputContainer>
                            <Input name="image_url" value={selectedFile ? selectedFile.name : formData.image_url} onChange={handleChange} placeholder="URL Gambar atau pilih file" disabled={!!selectedFile} />
                            <UploadButton type="button" onClick={triggerFileInput}> <FiUpload /> Unggah </UploadButton>
                            <FileInput type="file" accept="image/*" onChange={handleFileChange} ref={fileInputRef} />
                        </FileInputContainer>
                        {selectedFile && <small style={{ color: 'var(--text-secondary)', marginTop: '5px' }}>File dipilih: {selectedFile.name}</small>}
                        {formData.image_url && !selectedFile && <small style={{ color: 'var(--text-secondary)', marginTop: '5px' }}>URL Gambar: {formData.image_url}</small>}
                    </InputGroup>
                    <InputGroup $fullWidth>
                        <Label>Deskripsi</Label>
                        <Input as="textarea" rows="3" name="description" value={formData.description} onChange={handleChange} />
                    </InputGroup>

                    <FormFooter>
                        <SaveButton type="submit" disabled={isSubmitting}>
                            <FiSave /> {isSubmitting ? 'Menyimpan...' : 'Simpan Produk'}
                        </SaveButton>
                    </FormFooter>
                </Form>
            </PageContainer>
        </PageWrapper>
    );
}

export default ProductFormPage;

===== frontend\src\pages\ProductProfitabilityReport.jsx =====
import React, { useState, useEffect, useCallback } from 'react';
import styled from 'styled-components';
import { Link } from 'react-router-dom';
import { getProductProfitabilityReport } from '../services/api';
import { toast } from 'react-toastify';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";
import { FiArrowLeft, FiTrendingUp, FiCalendar } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';

// --- Styled Components ---
const PageContainer = styled.div` padding: 30px; height: 100%; display: flex; flex-direction: column; `;
const PageHeader = styled.header` margin-bottom: 20px; `;
const Title = styled.h1` font-size: 1.8rem; display: flex; align-items: center; gap: 12px; `;
const BackLink = styled(Link)` display: inline-flex; align-items: center; gap: 8px; color: var(--text-secondary); text-decoration: none; margin-bottom: 20px; font-weight: 500; &:hover { color: var(--text-primary); } `;
const FilterContainer = styled.div` display: flex; gap: 15px; align-items: center; margin-bottom: 25px; flex-wrap: wrap; background-color: var(--bg-surface); padding: 20px; border-radius: 12px; border: 1px solid var(--border-color);`;
const TableContainer = styled.div` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); overflow: hidden; flex-grow: 1; display: flex; flex-direction: column; `;
const TableWrapper = styled.div` overflow-x: auto; flex-grow: 1; `;
const Table = styled.table` width: 100%; border-collapse: collapse; `;
const Th = styled.th` text-align: left; padding: 15px 20px; background-color: var(--bg-main); border-bottom: 1px solid var(--border-color); font-weight: 600; color: var(--text-secondary); font-size: 0.9rem; text-transform: uppercase; white-space: nowrap; `;
const Td = styled.td` padding: 15px 20px; border-bottom: 1px solid var(--border-color); color: var(--text-primary); vertical-align: middle; `;
const Tr = styled.tr` &:last-child > td { border-bottom: none; } `;
const DatePickerWrapper = styled.div` .react-datepicker-wrapper input { padding: 10px 15px; border-radius: 8px; border: 1px solid var(--border-color); background-color: var(--bg-main); color: var(--text-primary); font-weight: 500; width: 130px; cursor: pointer; text-align: center; }`;
const ProfitText = styled.span` font-weight: 700; color: ${props => props.isNegative ? 'var(--red-color)' : 'var(--green-color)'}; `;

const formatCurrency = (value) => new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR', minimumFractionDigits: 0 }).format(value || 0);

function ProductProfitabilityReport() {
    const [reportData, setReportData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [filters, setFilters] = useState({
        startDate: new Date(new Date().setDate(new Date().getDate() - 30)),
        endDate: new Date(),
    });

    const fetchReportData = useCallback(async () => {
        setLoading(true);
        try {
            const res = await getProductProfitabilityReport(filters);
            setReportData(res.data);
        } catch (error) {
            toast.error("Gagal memuat laporan profitabilitas produk.");
        } finally {
            setLoading(false);
        }
    }, [filters]);

    useEffect(() => {
        fetchReportData();
    }, [fetchReportData]);

    const handleDateChange = (name, date) => {
        setFilters(prev => ({ ...prev, [name]: date }));
    };

    return (
        <PageContainer>
            <PageHeader>
                <BackLink to="/reports"><FiArrowLeft /> Kembali ke Pusat Laporan</BackLink>
                <Title><FiTrendingUp /> Laporan Profitabilitas Produk</Title>
            </PageHeader>
            <FilterContainer>
                <FiCalendar size={20} style={{color: 'var(--text-secondary)'}}/>
                <span>Filter Tanggal:</span>
                <DatePickerWrapper>
                    <DatePicker selected={filters.startDate} onChange={(date) => handleDateChange('startDate', date)} dateFormat="dd/MM/yyyy" maxDate={filters.endDate} />
                </DatePickerWrapper>
                <span>sampai</span>
                <DatePickerWrapper>
                    <DatePicker selected={filters.endDate} onChange={(date) => handleDateChange('endDate', date)} dateFormat="dd/MM/yyyy" minDate={filters.startDate} />
                </DatePickerWrapper>
            </FilterContainer>

            <TableContainer>
                <TableWrapper>
                    <Table>
                        <thead>
                            <Tr>
                                <Th>Produk</Th>
                                <Th style={{textAlign: 'center'}}>Terjual</Th>
                                <Th style={{textAlign: 'right'}}>Pendapatan</Th>
                                <Th style={{textAlign: 'right'}}>Modal</Th>
                                <Th style={{textAlign: 'right'}}>Laba Kotor</Th>
                                <Th style={{textAlign: 'center'}}>Marjin (%)</Th>
                            </Tr>
                        </thead>
                        <tbody>
                            {loading ? (
                                Array.from({ length: 5 }).map((_, index) => (
                                    <Tr key={index}>
                                        {[...Array(6)].map((_, i) => <Td key={i}><Skeleton /></Td>)}
                                    </Tr>
                                ))
                            ) : reportData.length > 0 ? (
                                reportData.map(item => (
                                    <Tr key={item.id}>
                                        <Td>{item.name}</Td>
                                        <Td style={{textAlign: 'center'}}>{item.total_quantity_sold} unit</Td>
                                        <Td style={{textAlign: 'right'}}>{formatCurrency(item.total_revenue)}</Td>
                                        <Td style={{textAlign: 'right'}}>{formatCurrency(item.total_cost)}</Td>
                                        <Td style={{textAlign: 'right'}}>
                                            <ProfitText isNegative={item.total_profit < 0}>{formatCurrency(item.total_profit)}</ProfitText>
                                        </Td>
                                        <Td style={{textAlign: 'center'}}>{item.profit_margin_percentage}%</Td>
                                    </Tr>
                                ))
                            ) : (
                                <Tr>
                                    <Td colSpan="6" style={{textAlign: 'center', padding: '50px 0'}}>
                                        Tidak ada data penjualan pada rentang tanggal ini.
                                    </Td>
                                </Tr>
                            )}
                        </tbody>
                    </Table>
                </TableWrapper>
            </TableContainer>
        </PageContainer>
    );
}

export default ProductProfitabilityReport;

===== frontend\src\pages\ProductsPage.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\ProductsPage.jsx

import React, { useState } from 'react';
import styled from 'styled-components';
import { getProducts, deleteProduct } from '../services/api';
import { toast } from 'react-toastify';
import { Link } from 'react-router-dom';
import { FiPackage, FiPlus, FiEdit, FiTrash2 } from 'react-icons/fi';
import ConfirmationModal from '../components/ConfirmationModal';
import { motion, AnimatePresence } from 'framer-motion';
import PageWrapper from '../components/PageWrapper';
import { useDataFetching } from '../hooks/useDataFetching';

// --- Styled Components ---
const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
    @media (max-width: 768px) {
        padding: 15px;
    }
`;
const PageHeader = styled.header` display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; flex-shrink: 0; flex-wrap: wrap; gap: 15px; `;
const Title = styled.h1` font-size: 1.8rem; display: flex; align-items: center; gap: 12px; `;
const AddButton = styled(Link)` background-color: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 10px 20px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; text-decoration: none; transition: background-color 0.2s ease; &:hover { background-color: var(--primary-hover); } `;
const ContentContainer = styled.div` flex-grow: 1; display: flex; flex-direction: column; background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); overflow: hidden; `;
const TableWrapper = styled.div` display: none; @media (min-width: 769px) { display: block; overflow-x: auto; flex-grow: 1; &::-webkit-scrollbar { display: none; } scrollbar-width: none; -ms-overflow-style: none; } `;
const Table = styled.table` width: 100%; border-collapse: collapse; min-width: 900px; `;
const Th = styled.th` text-align: left; padding: 15px 20px; background-color: var(--bg-main); border-bottom: 1px solid var(--border-color); font-weight: 600; color: var(--text-secondary); font-size: 0.9rem; white-space: nowrap; text-transform: uppercase; `;
const Td = styled.td` text-align: left; padding: 15px 20px; border-bottom: 1px solid var(--border-color); color: var(--text-primary); vertical-align: middle; `;
const Tr = styled(motion.tr)` &:last-child > td { border-bottom: none; } `;
const ProductImage = styled.img` width: 50px; height: 50px; border-radius: 8px; object-fit: cover; border: 1px solid var(--border-color); `;
const StockStatus = styled.span` font-weight: 600; color: ${props => props.$lowStock ? 'var(--red-color)' : 'inherit'}; `;
const ActionButtons = styled.div` display: flex; gap: 5px; align-items: center; `;
const ActionButton = styled(Link)` background: none; border: none; cursor: pointer; color: var(--text-secondary); padding: 5px; display: flex; align-items: center; transition: color 0.2s ease; &:hover { color: var(--primary-color); } `;
const DeleteButton = styled.button` background: none; border: none; cursor: pointer; color: var(--text-secondary); padding: 5px; display: flex; align-items: center; transition: color 0.2s ease; &:hover { color: var(--red-color); } `;
const CardList = styled(motion.div)` display: none; @media (max-width: 768px) { display: flex; flex-direction: column; gap: 15px; padding: 15px; } `;
const ProductCard = styled(motion.div)` background-color: var(--bg-main); border-radius: 12px; border: 1px solid var(--border-color); padding: 15px; display: flex; gap: 15px; align-items: center; `;
const CardImage = styled.img` width: 60px; height: 60px; border-radius: 8px; object-fit: cover; flex-shrink: 0; `;
const CardContent = styled.div` flex-grow: 1; display: flex; flex-direction: column; justify-content: center; `;
const CardTitle = styled.h3` font-size: 1rem; font-weight: 600; margin: 0 0 5px 0; color: var(--text-primary); `;
const CardDetail = styled.div` display: flex; justify-content: space-between; align-items: center; font-size: 0.85rem; color: var(--text-secondary); `;
const CardStock = styled.span` font-weight: 500; color: ${props => props.$lowStock ? 'var(--red-color)' : 'var(--green-color)'}; `;
const EmptyStateContainer = styled.div` flex-grow: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; color: var(--text-secondary); background-color: var(--bg-surface); border-radius: 16px; border: 1px dashed var(--border-color); `;
const EmptyStateTitle = styled.h3` font-size: 1.2rem; font-weight: 600; color: var(--text-primary); margin-top: 20px; margin-bottom: 10px; `;

const tableRowVariants = {
    hidden: { opacity: 0, y: -10 },
    visible: (i) => ({
        opacity: 1,
        y: 0,
        transition: { delay: i * 0.05 },
    }),
};

const formatCurrency = (value) => `Rp ${new Intl.NumberFormat('id-ID').format(value || 0)}`;

function ProductsPage() {
    const { data: products, loading, refetch: fetchProducts } = useDataFetching(getProducts, "Gagal memuat data produk.");
    const [isConfirmOpen, setIsConfirmOpen] = useState(false);
    const [productToDelete, setProductToDelete] = useState(null);

    const openDeleteConfirmation = (product) => {
        setProductToDelete(product);
        setIsConfirmOpen(true);
    };

    const confirmDelete = async () => {
        if (!productToDelete) return;
        try {
            await toast.promise(
                deleteProduct(productToDelete.id),
                {
                    pending: 'Mengarsipkan produk...',
                    success: 'Produk berhasil diarsipkan!',
                    error: (err) => err.response?.data?.message || 'Gagal mengarsipkan produk.'
                }
            );
            fetchProducts();
        } catch (error) {
            console.error("Delete product error:", error);
        } finally {
            setIsConfirmOpen(false);
            setProductToDelete(null);
        }
    };

    const getPriceRange = (variants) => {
        if (!variants || variants.length === 0) return 'Tidak tersedia';
        const prices = variants.map(v => parseFloat(v.price));
        const minPrice = Math.min(...prices);
        const maxPrice = Math.max(...prices);
        if (minPrice === maxPrice) return formatCurrency(minPrice);
        return `${formatCurrency(minPrice)} - ${formatCurrency(maxPrice)}`;
    };

    const renderContent = () => {
        if (!loading && products.length === 0) {
            return (
                <EmptyStateContainer>
                    <FiPackage size={48} />
                    <EmptyStateTitle>Belum Ada Produk</EmptyStateTitle>
                    <p>Klik tombol di pojok kanan atas untuk menambahkan produk pertama Anda.</p>
                </EmptyStateContainer>
            );
        }
        return (
            <ContentContainer>
                <TableWrapper>
                    <Table>
                        <thead>
                            <tr>
                                <Th>Gambar</Th>
                                <Th>Nama Produk</Th>
                                <Th>Kategori</Th>
                                <Th>Pemasok</Th>
                                <Th>Stok</Th>
                                <Th>Harga</Th>
                                <Th>Aksi</Th>
                            </tr>
                        </thead>
                        <tbody>
                            <AnimatePresence>
                                {products.map((product, i) => (
                                    <Tr key={product.id} custom={i} initial="hidden" animate="visible" variants={tableRowVariants}>
                                        <Td><ProductImage src={product.image_url || `https://placehold.co/100`} alt={product.name} /></Td>
                                        <Td>{product.name}</Td>
                                        <Td>{product.category_name || '-'}</Td>
                                        <Td>{product.supplier_name || '-'}</Td>
                                        <Td><StockStatus $lowStock={product.stock <= (product.low_stock_threshold || 0)}>{product.stock}</StockStatus></Td>
                                        <Td>{getPriceRange(product.variants)}</Td>
                                        <Td>
                                            <ActionButtons>
                                                <ActionButton to={`/products/edit/${product.id}`}><FiEdit size={18} /></ActionButton>
                                                <DeleteButton onClick={() => openDeleteConfirmation(product)}><FiTrash2 size={18} /></DeleteButton>
                                            </ActionButtons>
                                        </Td>
                                    </Tr>
                                ))}
                            </AnimatePresence>
                        </tbody>
                    </Table>
                </TableWrapper>
                <CardList>
                    <AnimatePresence>
                        {products.map((product, i) => (
                            <ProductCard key={product.id} custom={i} initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: 20 }}>
                                <CardImage src={product.image_url || `https://placehold.co/100`} alt={product.name} />
                                <CardContent>
                                    <CardTitle>{product.name}</CardTitle>
                                    <CardDetail>
                                        <span>Kategori: {product.category_name || '-'}</span>
                                        <ActionButtons>
                                            <ActionButton to={`/products/edit/${product.id}`}><FiEdit size={16} /></ActionButton>
                                            <DeleteButton onClick={() => openDeleteConfirmation(product)}><FiTrash2 size={16} /></DeleteButton>
                                        </ActionButtons>
                                    </CardDetail>
                                    <CardDetail>
                                        <span>Harga: {getPriceRange(product.variants)}</span>
                                        <span>Stok: <CardStock $lowStock={product.stock <= (product.low_stock_threshold || 0)}>{product.stock}</CardStock></span>
                                    </CardDetail>
                                </CardContent>
                            </ProductCard>
                        ))}
                    </AnimatePresence>
                </CardList>
            </ContentContainer>
        );
    };

    return (
        <>
            <PageWrapper loading={loading}>
              <PageContainer>
                <PageHeader>
                    <Title><FiPackage /> Produk</Title>
                    <AddButton to="/products/new">
                        <FiPlus size={18} /> Tambah Produk
                    </AddButton>
                </PageHeader>
                {renderContent()}
              </PageContainer>
            </PageWrapper>

            <ConfirmationModal
                isOpen={isConfirmOpen}
                onClose={() => setIsConfirmOpen(false)}
                onConfirm={confirmDelete}
                title="Konfirmasi Pengarsipan"
                message={`Apakah Anda yakin ingin mengarsipkan produk "${productToDelete?.name}"? Aksi ini akan menyembunyikannya dari kasir.`}
            />
        </>
    );
}

export default ProductsPage;

===== frontend\src\pages\PromotionFormPage.jsx =====
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { getPromotionById, createPromotion, updatePromotion } from '../services/api';
import { toast } from 'react-toastify';
import { FiSave, FiArrowLeft } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';

const PageContainer = styled.div`
    padding: 30px;
    max-width: 900px;
    margin: 0 auto;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
`;

const Title = styled.h1`
    font-size: 1.8rem;
`;

const BackLink = styled(Link)`
    display: inline-flex;
    align-items: center;
    gap: 8px;
    color: var(--text-secondary);
    text-decoration: none;
    margin-bottom: 20px;
    font-weight: 500;
    &:hover { color: var(--text-primary); }
`;

const Form = styled.form`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    padding: 25px;
`;

const FormGrid = styled.div`
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;

    @media (max-width: 768px) {
        grid-template-columns: 1fr;
    }
`;

const InputGroup = styled.div`
    grid-column: ${props => props.$fullWidth ? '1 / -1' : 'auto'};
`;

const Label = styled.label`
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    font-size: 0.9rem;
    color: var(--text-secondary);
`;

const Input = styled.input`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background-color: var(--bg-main);
    color: var(--text-primary);
    font-size: 1rem;
`;

const Select = styled.select`
    width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1rem;
    background-color: var(--bg-main); color: var(--text-primary); appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat; background-position: right 12px center; background-size: 20px;
    &:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2); }
`;

const CheckboxContainer = styled.div`
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 10px;

    input[type="checkbox"] {
        appearance: none; width: 20px; height: 20px; border: 1px solid var(--border-color);
        border-radius: 4px; background-color: var(--bg-main); cursor: pointer; display: flex;
        align-items: center; justify-content: center;
        &:checked { background-color: var(--primary-color); border-color: var(--primary-color); }
        &:checked::before { content: '✔'; font-size: 14px; color: white; display: block; }
    }
    label { margin-bottom: 0; cursor: pointer; color: var(--text-primary); font-weight: 500; }
`;

const FormFooter = styled.div`
    padding-top: 25px;
    margin-top: 25px;
    border-top: 1px solid var(--border-color);
    display: flex;
    justify-content: flex-end;
`;

const SaveButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 25px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover { opacity: 0.9; }
    &:disabled { opacity: 0.5; cursor: not-allowed; }
`;

function PromotionFormPage() {
    const { id } = useParams();
    const navigate = useNavigate();
    const isEditing = Boolean(id);

    const [formData, setFormData] = useState({
        name: '',
        description: '',
        type: 'percentage',
        value: '',
        code: '',
        start_date: '',
        end_date: '',
        is_active: true,
    });
    const [loading, setLoading] = useState(isEditing);
    const [isSubmitting, setIsSubmitting] = useState(false);

    const fetchPromotionData = useCallback(async () => {
        if (!isEditing) return;
        try {
            const res = await getPromotionById(id);
            const promo = res.data;
            setFormData({
                name: promo.name,
                description: promo.description || '',
                type: promo.type,
                value: promo.value,
                code: promo.code || '',
                start_date: promo.start_date ? new Date(promo.start_date).toISOString().slice(0, 16) : '',
                end_date: promo.end_date ? new Date(promo.end_date).toISOString().slice(0, 16) : '',
                is_active: promo.is_active,
            });
        } catch (error) {
            toast.error("Gagal memuat data promosi.");
            navigate('/promotions');
        } finally {
            setLoading(false);
        }
    }, [id, isEditing, navigate]);

    useEffect(() => {
        fetchPromotionData();
    }, [fetchPromotionData]);

    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value,
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        const dataToSave = {
            ...formData,
            value: parseFloat(formData.value),
            start_date: formData.start_date || null,
            end_date: formData.end_date || null,
        };
        const promise = isEditing
            ? updatePromotion(id, dataToSave)
            : createPromotion(dataToSave);
        try {
            await toast.promise(promise, {
                pending: 'Menyimpan promosi...',
                success: 'Promosi berhasil disimpan!',
                error: (err) => err.response?.data?.message || 'Gagal menyimpan promosi.'
            });
            navigate('/promotions');
        } catch (err) {
            console.error(err);
        } finally {
            setIsSubmitting(false);
        }
    };

    if (loading) {
        return <PageContainer><Skeleton height={400} /></PageContainer>;
    }

    return (
        <PageContainer>
            <BackLink to="/promotions"><FiArrowLeft /> Kembali ke Daftar Promosi</BackLink>
            <PageHeader>
                <Title>{isEditing ? 'Edit Promosi' : 'Tambah Promosi Baru'}</Title>
            </PageHeader>
            <Form onSubmit={handleSubmit}>
                <FormGrid>
                    <InputGroup $fullWidth>
                        <Label>Nama Promosi</Label>
                        <Input name="name" value={formData.name} onChange={handleChange} required autoFocus />
                    </InputGroup>
                    <InputGroup $fullWidth>
                        <Label>Deskripsi (Opsional)</Label>
                        <Input as="textarea" rows="3" name="description" value={formData.description} onChange={handleChange} />
                    </InputGroup>
                    <InputGroup>
                        <Label>Tipe Diskon</Label>
                        <Select name="type" value={formData.type} onChange={handleChange} required>
                            <option value="percentage">Persentase (%)</option>
                            <option value="fixed_amount">Potongan Tetap (Rp)</option>
                        </Select>
                    </InputGroup>
                    <InputGroup>
                        <Label>Nilai</Label>
                        <Input
                            name="value"
                            type="number"
                            value={formData.value}
                            onChange={handleChange}
                            required
                            placeholder={formData.type === 'percentage' ? 'Contoh: 10 (untuk 10%)' : 'Contoh: 5000'}
                            min="0"
                            max={formData.type === 'percentage' ? "100" : undefined}
                        />
                    </InputGroup>
                    <InputGroup>
                        <Label>Kode Kupon (Opsional)</Label>
                        <Input name="code" value={formData.code} onChange={handleChange} placeholder="Contoh: RAMADANHEMAT" />
                    </InputGroup>
                    <InputGroup style={{ alignSelf: 'flex-end', paddingBottom: '8px' }}>
                        <Label>Status</Label>
                        <CheckboxContainer>
                            <input type="checkbox" id="is_active" name="is_active" checked={formData.is_active} onChange={handleChange} />
                            <label htmlFor="is_active">Aktifkan Promosi</label>
                        </CheckboxContainer>
                    </InputGroup>
                    <InputGroup>
                        <Label>Tanggal Mulai (Opsional)</Label>
                        <Input name="start_date" type="datetime-local" value={formData.start_date} onChange={handleChange} />
                    </InputGroup>
                    <InputGroup>
                        <Label>Tanggal Berakhir (Opsional)</Label>
                        <Input name="end_date" type="datetime-local" value={formData.end_date} onChange={handleChange} />
                    </InputGroup>
                </FormGrid>
                <FormFooter>
                    <SaveButton type="submit" disabled={isSubmitting}>
                        <FiSave /> {isSubmitting ? 'Menyimpan...' : 'Simpan Promosi'}
                    </SaveButton>
                </FormFooter>
            </Form>
        </PageContainer>
    );
}

export default PromotionFormPage;

===== frontend\src\pages\PromotionsPage.jsx =====
// frontend/src/pages/PromotionsPage.jsx

import React, { useState, useEffect, useCallback } from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { getPromotions, deletePromotion } from '../services/api';
import { toast } from 'react-toastify';
import { FiPlus, FiTrash2, FiTag, FiEdit } from 'react-icons/fi';
import { motion } from 'framer-motion';
import PageWrapper from '../components/PageWrapper';
import ConfirmationModal from '../components/ConfirmationModal'; // <-- Impor Modal

// --- Styled Components (Tidak Ada Perubahan) ---
const PageContainer = styled.div` padding: 30px; height: 100%; display: flex; flex-direction: column; `;
const PageHeader = styled.header` display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; flex-shrink: 0; `;
const Title = styled.h1` font-size: 1.8rem; display: flex; align-items: center; gap: 12px; `;
const AddButton = styled.button` background-color: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 12px 20px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; &:hover { background-color: var(--primary-hover); } `;
const TableContainer = styled.div` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); overflow: hidden; flex-grow: 1; display: flex; flex-direction: column; `;
const TableWrapper = styled.div` overflow-x: auto; flex-grow: 1; `;
const Table = styled.table` width: 100%; border-collapse: collapse; `;
const Th = styled.th` text-align: left; padding: 15px 20px; background-color: var(--bg-main); border-bottom: 1px solid var(--border-color); font-weight: 600; color: var(--text-secondary); font-size: 0.9rem; text-transform: uppercase; white-space: nowrap; `;
const Td = styled.td` padding: 15px 20px; border-bottom: 1px solid var(--border-color); color: var(--text-primary); vertical-align: middle; `;
const Tr = styled(motion.tr)` &:last-child > td { border-bottom: none; } `;
const ActionButton = styled.button` background: none; border: none; cursor: pointer; color: var(--text-secondary); margin-right: 15px; &:hover { color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'}; } `;
const EmptyStateContainer = styled.div` flex-grow: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; color: var(--text-secondary); background-color: var(--bg-surface); border-radius: 16px; border: 1px dashed var(--border-color); margin: 30px; `;
const EmptyStateTitle = styled.h3` font-size: 1.2rem; font-weight: 600; color: var(--text-primary); margin-top: 20px; margin-bottom: 10px; `;

const tableRowVariants = {
    hidden: { opacity: 0, y: -10 },
    visible: (i) => ({
        opacity: 1,
        y: 0,
        transition: { delay: i * 0.05 },
    }),
};

function PromotionsPage() {
    const [promotions, setPromotions] = useState([]);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();
    // ==========================================================
    // ✅ PERBAIKAN: Tambahkan state untuk modal konfirmasi
    // ==========================================================
    const [isConfirmOpen, setIsConfirmOpen] = useState(false);
    const [promotionToDelete, setPromotionToDelete] = useState(null);
    // ==========================================================

    const fetchPromotions = useCallback(async () => {
        setLoading(true);
        try {
            const res = await getPromotions();
            setPromotions(res.data);
        } catch (error) {
            toast.error("Gagal memuat data promosi.");
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchPromotions();
    }, [fetchPromotions]);

    // ==========================================================
    // ✅ PERBAIKAN: Buat fungsi baru untuk membuka modal
    // ==========================================================
    const openDeleteConfirmation = (promotion) => {
        setPromotionToDelete(promotion);
        setIsConfirmOpen(true);
    };

    // ==========================================================
    // ✅ PERBAIKAN: Pindahkan logika hapus ke fungsi konfirmasi
    // ==========================================================
    const confirmDelete = async () => {
        if (!promotionToDelete) return;

        try {
            await toast.promise(deletePromotion(promotionToDelete.id), {
                pending: 'Menghapus promosi...',
                success: 'Promosi berhasil dihapus!',
                error: (err) => err.response?.data?.message || 'Gagal menghapus promosi.'
            });
            fetchPromotions();
        } catch (error) {
            console.error("Delete promotion error:", error);
        } finally {
            setIsConfirmOpen(false);
            setPromotionToDelete(null);
        }
    };

    const renderTableContent = () => {
        if (promotions.length > 0) {
            return (
                <TableContainer>
                    <TableWrapper>
                        <Table>
                            <thead>
                                <tr>
                                    <Th>Nama Promo</Th>
                                    <Th>Kode</Th>
                                    <Th>Tipe</Th>
                                    <Th>Nilai</Th>
                                    <Th>Status</Th>
                                    <Th>Aksi</Th>
                                </tr>
                            </thead>
                            <tbody>
                                {promotions.map((promo, i) => (
                                    <Tr key={promo.id} custom={i} initial="hidden" animate="visible" variants={tableRowVariants}>
                                        <Td>{promo.name}</Td>
                                        <Td>{promo.code || '-'}</Td>
                                        <Td>{promo.type === 'percentage' ? 'Persentase' : 'Potongan Tetap'}</Td>
                                        <Td>
                                            {promo.type === 'percentage'
                                                ? `${promo.value}%`
                                                : `Rp ${new Intl.NumberFormat('id-ID').format(promo.value)}`
                                            }
                                        </Td>
                                        <Td>{promo.is_active ? 'Aktif' : 'Tidak Aktif'}</Td>
                                        <Td>
                                            <ActionButton onClick={() => navigate(`/promotions/edit/${promo.id}`)}><FiEdit size={18} /></ActionButton>
                                            {/* ✅ PERBAIKAN: Ganti onClick ke fungsi baru */}
                                            <ActionButton $danger onClick={() => openDeleteConfirmation(promo)}><FiTrash2 size={18} /></ActionButton>
                                        </Td>
                                    </Tr>
                                ))}
                            </tbody>
                        </Table>
                    </TableWrapper>
                </TableContainer>
            );
        }

        return (
            <EmptyStateContainer>
                <FiTag size={48} />
                <EmptyStateTitle>Belum Ada Promosi</EmptyStateTitle>
                <p>Klik tombol di atas untuk membuat promosi pertama Anda.</p>
            </EmptyStateContainer>
        );
    };

    return (
        <>
            <PageWrapper loading={loading}>
                <PageContainer>
                    <PageHeader>
                        <Title><FiTag /> Manajemen Promosi</Title>
                        <AddButton onClick={() => navigate('/promotions/new')}>
                            <FiPlus /> Tambah Promosi
                        </AddButton>
                    </PageHeader>
                    {renderTableContent()}
                </PageContainer>
            </PageWrapper>

            {/* ✅ PERBAIKAN: Tambahkan komponen modal di sini */}
            <ConfirmationModal
                isOpen={isConfirmOpen}
                onClose={() => setIsConfirmOpen(false)}
                onConfirm={confirmDelete}
                title="Konfirmasi Penghapusan"
                message={`Apakah Anda yakin ingin menghapus promosi "${promotionToDelete?.name}"? Aksi ini tidak dapat dibatalkan.`}
            />
        </>
    );
}

export default PromotionsPage;

===== frontend\src\pages\PurchaseOrderDetailPage.jsx =====
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { getPurchaseOrderById } from '../services/api';
import { toast } from 'react-toastify';
import Skeleton from 'react-loading-skeleton';
import { FiArrowLeft, FiPlusCircle } from 'react-icons/fi';

const PageContainer = styled.div` padding: 30px; max-width: 900px; margin: 0 auto; `;
const PageHeader = styled.header` display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; `;
const Title = styled.h1` font-size: 1.8rem; `;
const HeaderActions = styled.div` display: flex; gap: 15px; `;
const BackButton = styled.button`
    background-color: var(--bg-surface); color: var(--text-primary); border: 1px solid var(--border-color);
    border-radius: 8px; padding: 10px 18px; font-weight: 600; display: flex; align-items: center;
    gap: 8px; cursor: pointer; &:hover { background-color: var(--bg-main); }
`;
const ReceiveButton = styled.button`
    background-color: var(--primary-color); color: white; border: none;
    border-radius: 8px; padding: 10px 20px; font-weight: 600; display: flex;
    align-items: center; gap: 8px; cursor: pointer;
    &:hover { background-color: var(--primary-hover); }
`;
const DetailsGrid = styled.div`
    display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px;
    background-color: var(--bg-surface); border: 1px solid var(--border-color);
    padding: 25px; border-radius: 16px; margin-bottom: 30px;
`;
const DetailItem = styled.div``;
const DetailLabel = styled.p` font-weight: 500; color: var(--text-secondary); margin: 0 0 5px 0; `;
const DetailValue = styled.p` font-weight: 600; color: var(--text-primary); margin: 0; `;
const StatusBadge = styled.span`
    padding: 5px 12px; border-radius: 20px; font-weight: 600; font-size: 0.9rem;
    color: ${props => `var(--${props.$statusColor}-text)`};
    background-color: ${props => `var(--${props.$statusColor}-bg)`};
`;
const TableContainer = styled.div` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); overflow: hidden; `;
const Table = styled.table` width: 100%; border-collapse: collapse; `;
const Th = styled.th` text-align: left; padding: 15px 20px; background-color: var(--bg-main); border-bottom: 1px solid var(--border-color); font-weight: 600; color: var(--text-secondary); `;
const Td = styled.td` padding: 15px 20px; border-bottom: 1px solid var(--border-color); `;
const Tr = styled.tr` &:last-child > td { border-bottom: none; } `;

const getStatusInfo = (status) => {
    switch (status) {
        case 'PENDING': return { text: 'Tertunda', color: 'orange' };
        case 'COMPLETED': return { text: 'Selesai', color: 'green' };
        case 'CANCELLED': return { text: 'Dibatalkan', color: 'red' };
        default: return { text: status, color: 'grey' };
    }
};

function PurchaseOrderDetailPage() {
    const { id } = useParams();
    const navigate = useNavigate();
    const [poDetails, setPoDetails] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchDetails = async () => {
            setLoading(true);
            try {
                const res = await getPurchaseOrderById(id);
                setPoDetails(res.data);
            } catch (error) {
                toast.error("Gagal memuat detail pesanan pembelian.");
                navigate('/purchase-orders');
            } finally {
                setLoading(false);
            }
        };
        fetchDetails();
    }, [id, navigate]);

    const handleReceiveStock = () => {
        navigate('/receive-stock', { state: { poItems: poDetails.items, poId: id, poNumber: poDetails.po_number } });
    };

    if (loading) {
        return <PageContainer><Skeleton height={400} /></PageContainer>;
    }

    if (!poDetails) {
        return <PageContainer><p>Detail tidak ditemukan.</p></PageContainer>;
    }

    const statusInfo = getStatusInfo(poDetails.status);

    return (
        <PageContainer>
            <PageHeader>
                <Title>Detail Pesanan #{poDetails.po_number}</Title>
                <HeaderActions>
                    <BackButton onClick={() => navigate('/purchase-orders')}><FiArrowLeft /> Kembali</BackButton>
                    {poDetails.status === 'PENDING' && (
                        <ReceiveButton onClick={handleReceiveStock}>
                            <FiPlusCircle /> Terima Stok
                        </ReceiveButton>
                    )}
                </HeaderActions>
            </PageHeader>

            <DetailsGrid>
                <DetailItem>
                    <DetailLabel>Nomor PO</DetailLabel>
                    <DetailValue>{poDetails.po_number}</DetailValue>
                </DetailItem>
                <DetailItem>
                    <DetailLabel>Pemasok</DetailLabel>
                    <DetailValue>{poDetails.supplier_name}</DetailValue>
                </DetailItem>
                <DetailItem>
                    <DetailLabel>Status</DetailLabel>
                    <DetailValue>
                        <StatusBadge $statusColor={statusInfo.color}>{statusInfo.text}</StatusBadge>
                    </DetailValue>
                </DetailItem>
                <DetailItem>
                    <DetailLabel>Tanggal Pesan</DetailLabel>
                    <DetailValue>{new Date(poDetails.order_date).toLocaleDateString('id-ID')}</DetailValue>
                </DetailItem>
                 <DetailItem>
                    <DetailLabel>Total Pesanan</DetailLabel>
                    <DetailValue>Rp {new Intl.NumberFormat('id-ID').format(poDetails.total_amount)}</DetailValue>
                </DetailItem>
            </DetailsGrid>

            <TableContainer>
                <Table>
                    <thead>
                        <tr>
                            <Th>Produk</Th>
                            <Th>Jumlah</Th>
                            <Th>Harga Satuan</Th>
                            <Th>Subtotal</Th>
                        </tr>
                    </thead>
                    <tbody>
                        {poDetails.items.map(item => (
                            <Tr key={item.id}>
                                <Td>{item.product_name}</Td>
                                <Td>{item.quantity}</Td>
                                <Td>Rp {new Intl.NumberFormat('id-ID').format(item.price)}</Td>
                                <Td>Rp {new Intl.NumberFormat('id-ID').format(item.quantity * item.price)}</Td>
                            </Tr>
                        ))}
                    </tbody>
                </Table>
            </TableContainer>
        </PageContainer>
    );
}

export default PurchaseOrderDetailPage;

===== frontend\src\pages\PurchaseOrderForm.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\PurchaseOrderForm.jsx

import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useNavigate, Link } from 'react-router-dom';
import { getSuppliers, getProducts, createPurchaseOrder } from '../services/api';
import { toast } from 'react-toastify';
import { FiSave, FiPlus, FiTrash2, FiArrowLeft } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import { formatRupiah, parseRupiah } from '../utils/formatters'; // <-- PERBAIKAN: Impor formatter

// --- Styled Components (Tidak Ada Perubahan) ---
const PageContainer = styled.div` padding: 30px; max-width: 1000px; margin: 0 auto; `;
const PageHeader = styled.header` display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; `;
const Title = styled.h1` font-size: 1.8rem; `;
const BackLink = styled(Link)` display: inline-flex; align-items: center; gap: 8px; color: var(--text-secondary); text-decoration: none; margin-bottom: 20px; font-weight: 500; &:hover { color: var(--text-primary); } `;
const Form = styled.form` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); padding: 25px; `;
const FormGrid = styled.div` display: grid; grid-template-columns: 1fr 2fr; gap: 20px; margin-bottom: 20px; @media (max-width: 768px) { grid-template-columns: 1fr; }`;
const InputGroup = styled.div``;
const Label = styled.label` display: block; margin-bottom: 8px; font-weight: 500; font-size: 0.9rem; color: var(--text-secondary); `;
const Select = styled.select` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; `;
const Input = styled.input` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: var(--bg-main); color: var(--text-primary); font-size: 1rem; `;
const ItemsSection = styled.div` border-top: 1px solid var(--border-color); margin-top: 20px; padding-top: 20px; `;
const AddProductButton = styled.button` display: flex; align-items: center; gap: 8px; background-color: var(--bg-main); border: 1px solid var(--border-color); color: var(--text-primary); padding: 10px 15px; border-radius: 8px; cursor: pointer; font-weight: 500; margin-top: 10px; &:hover { background-color: var(--primary-color); color: white; }`;
const Table = styled.table` width: 100%; border-collapse: collapse; margin-top: 20px; `;
const Th = styled.th` text-align: left; padding: 12px; border-bottom: 1px solid var(--border-color); color: var(--text-secondary); `;
const Td = styled.td` padding: 12px; border-bottom: 1px solid var(--border-color); vertical-align: middle; `;
const FormFooter = styled.div` padding-top: 25px; margin-top: 25px; border-top: 1px solid var(--border-color); display: flex; justify-content: flex-end; `;
const SaveButton = styled.button` background-color: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 12px 25px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; &:hover { opacity: 0.9; } &:disabled { opacity: 0.5; cursor: not-allowed; } `;

// --- Simple Modal for Product Selection ---
const ModalBackdrop = styled.div` position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; display: flex; justify-content: center; align-items: center; `;
const ModalContainer = styled.div` background: var(--bg-surface); padding: 20px; border-radius: 12px; width: 90%; max-width: 600px; max-height: 80vh; display: flex; flex-direction: column; `;
const ProductSearchInput = styled(Input)` margin-bottom: 15px; `;
const ProductSelectionList = styled.ul` list-style: none; padding: 0; overflow-y: auto; `;
const ProductListItem = styled.li` padding: 10px; border-radius: 6px; cursor: pointer; &:hover { background-color: var(--bg-main); } `;

function PurchaseOrderForm() {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({ supplier_id: '', notes: '', items: [] });
    const [suppliers, setSuppliers] = useState([]);
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [isProductModalOpen, setIsProductModalOpen] = useState(false);
    const [productSearchTerm, setProductSearchTerm] = useState('');

    useEffect(() => {
        const fetchData = async () => {
            try {
                const [suppliersRes, productsRes] = await Promise.all([getSuppliers(), getProducts()]);
                setSuppliers(suppliersRes.data);
                setProducts(productsRes.data);
            } catch (error) {
                toast.error("Gagal memuat data pemasok atau produk.");
            } finally {
                setLoading(false);
            }
        };
        fetchData();
    }, []);

    const handleFormChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    // --- PERBAIKAN: Terapkan formatter pada input harga beli ---
    const handleItemChange = (index, field, value) => {
        const newItems = [...formData.items];
        if (field === 'cost_price') {
            newItems[index][field] = parseRupiah(value);
        } else {
            newItems[index][field] = value;
        }
        setFormData({ ...formData, items: newItems });
    };
    // --- AKHIR PERBAIKAN ---

    const addProductToPO = (product) => {
        if (formData.items.some(item => item.product_id === product.id)) {
            toast.warn("Produk sudah ada di dalam daftar.");
            return;
        }
        const defaultVariant = product.variants[0];
        const newItem = {
            product_id: product.id,
            name: product.name,
            quantity: 1,
            cost_price: defaultVariant ? defaultVariant.cost_price : 0,
        };
        setFormData({ ...formData, items: [...formData.items, newItem] });
        setIsProductModalOpen(false);
        setProductSearchTerm('');
    };

    const removeItemFromPO = (index) => {
        const newItems = formData.items.filter((_, i) => i !== index);
        setFormData({ ...formData, items: newItems });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        try {
            await toast.promise(createPurchaseOrder(formData), {
                pending: 'Menyimpan Purchase Order...',
                success: 'Purchase Order berhasil dibuat!',
                error: (err) => err.response?.data?.message || 'Gagal menyimpan PO.',
            });
            navigate('/purchase-orders');
        } catch (error) {
            console.error(error);
        } finally {
            setIsSubmitting(false);
        }
    };

    const filteredProductsForModal = products.filter(p => p.name.toLowerCase().includes(productSearchTerm.toLowerCase()));

    if (loading) return <PageContainer><Skeleton height={400} /></PageContainer>;

    return (
        <>
            <PageContainer>
                <BackLink to="/purchase-orders"><FiArrowLeft /> Kembali ke Daftar PO</BackLink>
                <PageHeader><Title>Buat Purchase Order Baru</Title></PageHeader>
                <Form onSubmit={handleSubmit}>
                    <FormGrid>
                        <InputGroup>
                            <Label>Pilih Pemasok</Label>
                            <Select name="supplier_id" value={formData.supplier_id} onChange={handleFormChange} required>
                                <option value="">-- Pilih Pemasok --</option>
                                {suppliers.map(s => <option key={s.id} value={s.id}>{s.name}</option>)}
                            </Select>
                        </InputGroup>
                        <InputGroup>
                            <Label>Catatan (Opsional)</Label>
                            <Input as="textarea" name="notes" value={formData.notes} onChange={handleFormChange} rows="3" />
                        </InputGroup>
                    </FormGrid>
                    <ItemsSection>
                        <Label style={{ fontSize: '1.1rem', fontWeight: 600 }}>Item Produk</Label>
                        {formData.items.length > 0 && (
                            <Table>
                                <thead>
                                    <tr>
                                        <Th style={{ width: '40%' }}>Produk</Th>
                                        <Th style={{ width: '20%' }}>Kuantitas</Th>
                                        <Th style={{ width: '25%' }}>Harga Beli (Rp)</Th>
                                        <Th style={{ width: '15%' }}>Aksi</Th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {formData.items.map((item, index) => (
                                        <tr key={index}>
                                            <Td>{item.name}</Td>
                                            <Td><Input type="number" min="1" value={item.quantity} onChange={(e) => handleItemChange(index, 'quantity', e.target.value)} /></Td>
                                            {/* --- PERBAIKAN: Terapkan formatter pada input harga beli --- */}
                                            <Td>
                                                <Input
                                                    type="text"
                                                    value={formatRupiah(item.cost_price)}
                                                    onChange={(e) => handleItemChange(index, 'cost_price', e.target.value)}
                                                />
                                            </Td>
                                            {/* --- AKHIR PERBAIKAN --- */}
                                            <Td><button type="button" onClick={() => removeItemFromPO(index)} style={{background: 'none', border: 'none', cursor: 'pointer', color: 'var(--red-color)'}}><FiTrash2 /></button></Td>
                                        </tr>
                                    ))}
                                </tbody>
                            </Table>
                        )}
                        <AddProductButton type="button" onClick={() => setIsProductModalOpen(true)}>
                            <FiPlus /> Tambah Produk
                        </AddProductButton>
                    </ItemsSection>
                    <FormFooter>
                        <SaveButton type="submit" disabled={isSubmitting || formData.items.length === 0 || !formData.supplier_id}>
                            <FiSave /> {isSubmitting ? 'Menyimpan...' : 'Simpan Purchase Order'}
                        </SaveButton>
                    </FormFooter>
                </Form>
            </PageContainer>

            {isProductModalOpen && (
                <ModalBackdrop onClick={() => setIsProductModalOpen(false)}>
                    <ModalContainer onClick={e => e.stopPropagation()}>
                        <h3 style={{marginBottom: '15px'}}>Pilih Produk</h3>
                        <ProductSearchInput placeholder="Cari produk..." value={productSearchTerm} onChange={(e) => setProductSearchTerm(e.target.value)} autoFocus />
                        <ProductSelectionList>
                            {filteredProductsForModal.map(p => (
                                <ProductListItem key={p.id} onClick={() => addProductToPO(p)}>
                                    {p.name}
                                </ProductListItem>
                            ))}
                        </ProductSelectionList>
                    </ModalContainer>
                </ModalBackdrop>
            )}
        </>
    );
}

export default PurchaseOrderForm;

===== frontend\src\pages\PurchaseOrdersPage.jsx =====
import React, { useState, useEffect, useCallback } from 'react';
import styled from 'styled-components';
import { useNavigate, Link } from 'react-router-dom'; // Added Link import
import { getPurchaseOrders, updatePurchaseOrderStatus } from '../services/api';
import { toast } from 'react-toastify';
import { FiPlus, FiEye, FiCheckSquare, FiSend, FiXCircle, FiClipboard } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';

const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;
const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
`;
const Title = styled.h1`
    font-size: 1.8rem;
`;
const AddButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover {
        background-color: var(--primary-hover);
    }
`;
const TableContainer = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
`;
const TableWrapper = styled.div`
    overflow-x: auto;
    flex-grow: 1;
`;
const Table = styled.table`
    width: 100%;
    border-collapse: collapse;
`;
const Th = styled.th`
    text-align: left;
    padding: 15px 20px;
    background-color: var(--bg-main);
    border-bottom: 1px solid var(--border-color);
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.9rem;
    text-transform: uppercase;
    white-space: nowrap;
`;
const Td = styled.td`
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    vertical-align: middle;
`;
const Tr = styled.tr`
    &:last-child > td {
        border-bottom: none;
    }
`;
const ActionButtonGroup = styled.div`
    display: flex;
    gap: 10px;
    align-items: center;
`;
const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 5px;
    border-radius: 5px;
    &:hover {
        color: ${props => props.color || 'var(--primary-color)'};
        background-color: var(--bg-main);
    }
`;
const StatusBadge = styled.span`
    padding: 4px 10px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
    color: white;
    background-color: ${props => {
        switch (props.status) {
            case 'DRAFT': return '#6c757d'; // Gray
            case 'SUBMITTED': return '#0d6efd'; // Blue
            case 'COMPLETED': return 'var(--green-color)'; // Green
            case 'CANCELLED': return 'var(--red-color)'; // Red
            default: return '#6c757d';
        }
    }};
`;
const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
`;

const formatCurrency = (value) => new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(value || 0);
const formatDate = (dateString) => new Date(dateString).toLocaleDateString('id-ID', { day: 'numeric', month: 'long', year: 'numeric' });

function PurchaseOrdersPage() {
    const [purchaseOrders, setPurchaseOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();

    const fetchPurchaseOrders = useCallback(async () => {
        setLoading(true);
        try {
            const res = await getPurchaseOrders();
            setPurchaseOrders(res.data);
        } catch (error) {
            toast.error("Gagal memuat data Purchase Order.");
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchPurchaseOrders();
    }, [fetchPurchaseOrders]);

    const handleStatusUpdate = async (id, newStatus, confirmationMessage) => {
        // IMPORTANT: In a real application, replace window.confirm with a custom modal UI.
        // window.confirm is blocking and not user-friendly in an iframe environment.
        if (window.confirm(confirmationMessage)) {
            try {
                await toast.promise(
                    updatePurchaseOrderStatus(id, newStatus),
                    {
                        pending: 'Memperbarui status...',
                        success: 'Status berhasil diperbarui!',
                        error: 'Gagal memperbarui status.'
                    }
                );
                fetchPurchaseOrders(); // Refresh data
            } catch (error) {
                console.error("Failed to update status:", error);
            }
        }
    };

    return (
        <PageContainer>
            <PageHeader>
                <Title>Purchase Orders</Title>
                <AddButton onClick={() => navigate('/purchase-orders/new')}>
                    <FiPlus /> Buat PO Baru
                </AddButton>
            </PageHeader>
            <TableContainer>
                {loading ? (
                    <div style={{ padding: '20px' }}><Skeleton count={8} height={50} /></div>
                ) : purchaseOrders.length > 0 ? (
                    <TableWrapper>
                        <Table>
                            <thead>
                                <tr>
                                    <Th>Nomor PO</Th>
                                    <Th>Pemasok</Th>
                                    <Th>Tanggal</Th>
                                    <Th>Total</Th>
                                    <Th>Status</Th>
                                    <Th>Aksi</Th>
                                </tr>
                            </thead>
                            <tbody>
                                {purchaseOrders.map(po => (
                                    <Tr key={po.id}>
                                        <Td>
                                            {/* Changed to Link for navigation */}
                                            <Link to={`/purchase-orders/${po.id}`} style={{color: 'var(--primary-color)', fontWeight: '600', textDecoration: 'none'}}>
                                                {po.po_number}
                                            </Link>
                                        </Td>
                                        <Td>{po.supplier_name}</Td>
                                        <Td>{formatDate(po.created_at)}</Td>
                                        <Td>{formatCurrency(po.total_amount)}</Td>
                                        <Td><StatusBadge status={po.status}>{po.status}</StatusBadge></Td>
                                        <Td>
                                            <ActionButtonGroup>
                                                {po.status === 'DRAFT' && (
                                                    <ActionButton color="#0d6efd" onClick={() => handleStatusUpdate(po.id, 'SUBMITTED', 'Kirim PO ini ke pemasok?')}>
                                                        <FiSend size={16} /> Submit
                                                    </ActionButton>
                                                )}
                                                {po.status === 'SUBMITTED' && (
                                                    <ActionButton color="var(--green-color)" onClick={() => handleStatusUpdate(po.id, 'COMPLETED', 'Tandai PO ini sebagai selesai (barang diterima)?')}>
                                                        <FiCheckSquare size={16} /> Tandai Selesai
                                                    </ActionButton>
                                                )}
                                                {(po.status === 'DRAFT' || po.status === 'SUBMITTED') && (
                                                    <ActionButton color="var(--red-color)" onClick={() => handleStatusUpdate(po.id, 'CANCELLED', 'Yakin ingin membatalkan PO ini?')}>
                                                        <FiXCircle size={16} /> Batalkan
                                                    </ActionButton>
                                                )}
                                                {/* Removed FiEye button as PO number is now clickable */}
                                            </ActionButtonGroup>
                                        </Td>
                                    </Tr>
                                ))}
                            </tbody>
                        </Table>
                    </TableWrapper>
                ) : (
                    <EmptyStateContainer>
                        <FiClipboard size={48} />
                        <h3 style={{ marginTop: '20px' }}>Belum Ada Purchase Order</h3>
                        <p>Klik tombol di atas untuk membuat PO pertama Anda.</p>
                    </EmptyStateContainer>
                )}
            </TableContainer>
        </PageContainer>
    );
}

export default PurchaseOrdersPage;


===== frontend\src\pages\QuickActionsPage.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\QuickActionsPage.jsx

import React from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { FiArrowLeft, FiZap, FiShoppingCart, FiDollarSign, FiTarget, FiClock, FiPackage, FiPlusSquare, FiArchive, FiUpload, FiEdit, FiClipboard, FiBox, FiHome, FiUserCheck, FiShield, FiUsers, FiTruck, FiList, FiTag, FiSettings, FiGift } from 'react-icons/fi';

const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
`;

const Title = styled.h1`
    font-size: 1.8rem;
`;

const BackButton = styled.button`
    background-color: var(--bg-surface);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover {
        background-color: var(--bg-main);
    }
`;

const Grid = styled.div`
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    gap: 20px;
    background-color: var(--bg-surface);
    padding: 30px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    justify-content: center;
`;

const GridTitle = styled.h3`
    grid-column: 1 / -1;
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 10px;
    padding-bottom: 15px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 10px;
    justify-content: flex-start;
    text-align: left;
    &:not(:first-child) {
        margin-top: 20px;
    }
`;

const ActionButton = styled.button`
    background: var(--bg-surface);
    border: 1px solid var(--border-color);
    border-radius: 20px;
    padding: 24px 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 12px;
    cursor: pointer;
    font-weight: 600;
    color: var(--text-primary);
    transition: all 0.3s ease;
    
    span { 
        font-size: 0.9rem; 
        text-align: center;
    }
    svg { 
        transition: all 0.3s ease; 
        color: var(--primary-color); 
    }
    &:hover { 
        background-color: var(--primary-color); 
        color: white; 
        transform: translateY(-3px); 
        svg { color: white; } 
    }
`;

function QuickActionsPage() {
    const navigate = useNavigate();
    return (
        <PageContainer>
            <PageHeader>
                <Title>Aksi Cepat & Manajemen</Title>
                <BackButton onClick={() => navigate('/dashboard')}>
                    <FiArrowLeft size={18} />
                    Kembali ke Dashboard
                </BackButton>
            </PageHeader>
            <Grid>
                {/* --- SEKSI 1: OPERASIONAL & TRANSAKSI --- */}
                <GridTitle><FiZap size={22}/> Operasional & Transaksi</GridTitle>
                <ActionButton onClick={() => navigate('/pos')}><FiShoppingCart size={30}/><span>Transaksi Baru</span></ActionButton>
                <ActionButton onClick={() => navigate('/expenses')}><FiDollarSign size={30}/><span>Catat Pengeluaran</span></ActionButton>
                <ActionButton onClick={() => navigate('/targets')}><FiTarget size={30}/><span>Atur Target</span></ActionButton>
                <ActionButton onClick={() => navigate('/shift-history')}><FiClock size={30}/><span>Riwayat Shift</span></ActionButton>

                {/* --- SEKSI 2: MANAJEMEN INVENTARIS --- */}
                <GridTitle><FiPackage size={22}/> Manajemen Inventaris</GridTitle>
                <ActionButton onClick={() => navigate('/products/new')}><FiPlusSquare size={30}/><span>Tambah Produk</span></ActionButton>
                <ActionButton onClick={() => navigate('/products')}><FiArchive size={30}/><span>Daftar Produk</span></ActionButton>
                <ActionButton onClick={() => navigate('/receive-stock')}><FiUpload size={30}/><span>Terima Stok</span></ActionButton>
                <ActionButton onClick={() => navigate('/stock-adjustment')}><FiEdit size={30}/><span>Penyesuaian Stok</span></ActionButton>
                <ActionButton onClick={() => navigate('/purchase-orders')}><FiClipboard size={30}/><span>Purchase Order</span></ActionButton>
                <ActionButton onClick={() => navigate('/raw-materials')}><FiBox size={30}/><span>Bahan Baku</span></ActionButton>


                {/* --- SEKSI 3: PENGELOLAAN TOKO --- */}
                <GridTitle><FiHome size={22}/> Pengelolaan Toko</GridTitle>
                <ActionButton onClick={() => navigate('/users')}><FiUserCheck size={30}/><span>Kelola Pengguna</span></ActionButton>
                <ActionButton onClick={() => navigate('/roles')}><FiShield size={30}/><span>Manajemen Peran</span></ActionButton>
                <ActionButton onClick={() => navigate('/customers')}><FiUsers size={30}/><span>Kelola Pelanggan</span></ActionButton>
                <ActionButton onClick={() => navigate('/suppliers')}><FiTruck size={30}/><span>Kelola Pemasok</span></ActionButton>
                <ActionButton onClick={() => navigate('/categories')}><FiList size={30}/><span>Kelola Kategori</span></ActionButton>
                <ActionButton onClick={() => navigate('/promotions')}><FiTag size={30}/><span>Kelola Promosi</span></ActionButton>
                <ActionButton onClick={() => navigate('/rewards')}><FiGift size={30}/><span>Kelola Hadiah</span></ActionButton>
                <ActionButton onClick={() => navigate('/settings')}><FiSettings size={30}/><span>Semua Pengaturan</span></ActionButton>
            </Grid>
        </PageContainer>
    );
}

export default QuickActionsPage;

===== frontend\src\pages\RawMaterialsPage.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\RawMaterialsPage.jsx

import React, { useState, useEffect, useCallback } from 'react';
import styled from 'styled-components';
import { getRawMaterials, createRawMaterial, updateRawMaterial, deleteRawMaterial } from '../services/api';
import RawMaterialFormModal from '../components/RawMaterialFormModal';
import ConfirmationModal from '../components/ConfirmationModal'; // Import ConfirmationModal
import { toast } from 'react-toastify';
import { FiEdit, FiTrash2, FiPlus, FiBox } from 'react-icons/fi';
import { motion } from 'framer-motion';
import PageWrapper from '../components/PageWrapper';

// --- Styled Components ---
const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
`;

const Title = styled.h1`
    font-size: 1.8rem;
    display: flex;
    align-items: center;
    gap: 12px;
`;

const AddButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover { background-color: var(--primary-hover); }
`;

const TableContainer = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
`;

const TableWrapper = styled.div`
    overflow-x: auto;
    flex-grow: 1;
`;

const Table = styled.table`
    width: 100%;
    border-collapse: collapse;
`;

const Th = styled.th`
    text-align: left;
    padding: 15px 20px;
    background-color: var(--bg-main);
    border-bottom: 1px solid var(--border-color);
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.9rem;
    text-transform: uppercase;
`;

const Td = styled.td`
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    vertical-align: middle;
`;

const Tr = styled(motion.tr)`
    &:last-child > td { border-bottom: none; }
`;

const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    margin-right: 15px;
    &:hover { color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'}; }
`;

const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px dashed var(--border-color);
    margin: 30px;
`;

const EmptyStateTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-top: 20px;
    margin-bottom: 10px;
`;

// --- Animation Variants & Helper Functions ---
const tableRowVariants = {
    hidden: { opacity: 0, y: -10 },
    visible: (i) => ({
        opacity: 1,
        y: 0,
        transition: { delay: i * 0.05 },
    }),
};

const formatCurrency = (value) => new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(value || 0);

// --- Component Logic ---
function RawMaterialsPage() {
    const [materials, setMaterials] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingMaterial, setEditingMaterial] = useState(null);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [isConfirmOpen, setIsConfirmOpen] = useState(false);
    const [materialToDelete, setMaterialToDelete] = useState(null);

    const fetchMaterials = useCallback(async () => {
        setLoading(true);
        try {
            const res = await getRawMaterials();
            setMaterials(res.data);
        } catch (error) {
            toast.error("Gagal memuat data bahan baku.");
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchMaterials();
    }, [fetchMaterials]);

    const handleOpenModal = (material = null) => {
        setEditingMaterial(material);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setEditingMaterial(null);
    };

    const handleSaveMaterial = async (materialData) => {
        setIsSubmitting(true);
        const promise = editingMaterial
            ? updateRawMaterial(editingMaterial.id, materialData)
            : createRawMaterial(materialData);
        try {
            await toast.promise(promise, {
                pending: 'Menyimpan data...',
                success: 'Bahan baku berhasil disimpan!',
                error: (err) => err.response?.data?.message || 'Gagal menyimpan data.'
            });
            fetchMaterials();
            handleCloseModal();
        } catch (error) {
            console.error(error);
        } finally {
            setIsSubmitting(false);
        }
    };

    const openDeleteConfirmation = (material) => {
        setMaterialToDelete(material);
        setIsConfirmOpen(true);
    };

    const confirmDelete = async () => {
        if (!materialToDelete) return;

        try {
            await toast.promise(deleteRawMaterial(materialToDelete.id), {
                pending: 'Menghapus data...',
                success: 'Bahan baku berhasil dihapus!',
                error: (err) => err.response?.data?.message || 'Gagal menghapus bahan baku.'
            });
            fetchMaterials();
        } catch (error) {
            console.error(error);
        } finally {
            setIsConfirmOpen(false);
            setMaterialToDelete(null);
        }
    };
    
    const renderTableContent = () => {
        if (materials.length > 0) {
            return (
                <TableContainer>
                    <TableWrapper>
                        <Table>
                            <thead>
                                <tr>
                                    <Th>Nama Bahan</Th>
                                    <Th>Stok</Th>
                                    <Th>Satuan</Th>
                                    <Th>Harga Beli / Satuan</Th>
                                    <Th>Aksi</Th>
                                </tr>
                            </thead>
                            <tbody>
                                {materials.map((material, i) => (
                                    <Tr key={material.id} custom={i} initial="hidden" animate="visible" variants={tableRowVariants}>
                                        <Td>{material.name}</Td>
                                        <Td>{material.stock_quantity}</Td>
                                        <Td>{material.unit}</Td>
                                        <Td>{formatCurrency(material.cost_per_unit)}</Td>
                                        <Td>
                                            <ActionButton onClick={() => handleOpenModal(material)}><FiEdit size={18} /></ActionButton>
                                            <ActionButton $danger onClick={() => openDeleteConfirmation(material)}><FiTrash2 size={18} /></ActionButton>
                                        </Td>
                                    </Tr>
                                ))}
                            </tbody>
                        </Table>
                    </TableWrapper>
                </TableContainer>
            );
        }
        
        return (
            <EmptyStateContainer>
                <FiBox size={48} />
                <EmptyStateTitle>Belum Ada Bahan Baku</EmptyStateTitle>
                <p>Klik tombol di atas untuk menambahkan bahan baku pertama Anda.</p>
            </EmptyStateContainer>
        );
    };

    return (
        <>
            <PageWrapper loading={loading}>
                <PageContainer>
                    <PageHeader>
                        <Title><FiBox/> Manajemen Bahan Baku</Title>
                        <AddButton onClick={() => handleOpenModal()}>
                            <FiPlus /> Tambah Bahan Baku
                        </AddButton>
                    </PageHeader>
                    {renderTableContent()}
                </PageContainer>
            </PageWrapper>
            
            <RawMaterialFormModal
                isOpen={isModalOpen}
                onClose={handleCloseModal}
                onSave={handleSaveMaterial}
                material={editingMaterial}
                isSubmitting={isSubmitting}
            />

            <ConfirmationModal
                isOpen={isConfirmOpen}
                onClose={() => setIsConfirmOpen(false)}
                onConfirm={confirmDelete}
                title="Konfirmasi Penghapusan"
                message={`Apakah Anda yakin ingin menghapus bahan baku "${materialToDelete?.name}"? Aksi ini tidak dapat dibatalkan.`}
            />
        </>
    );
}

export default RawMaterialsPage;

===== frontend\src\pages\ReceiveStockPage.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\ReceiveStockPage.jsx

import React, { useState, useEffect, useCallback } from 'react';
import styled from 'styled-components';
import { useNavigate, useLocation, Link } from 'react-router-dom';
import { getProducts, receiveStock } from '../services/api';
import { toast } from 'react-toastify';
import { FiSave, FiSearch, FiPlusCircle, FiTrash2, FiArrowLeft } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';

const PageContainer = styled.div` padding: 30px; max-width: 1000px; margin: 0 auto; `;
const PageHeader = styled.header` display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; `;
const Title = styled.h1` font-size: 1.8rem; `;
const BackButton = styled.button` background-color: var(--bg-surface); color: var(--text-primary); border: 1px solid var(--border-color); border-radius: 8px; padding: 10px 18px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; &:hover { background-color: var(--bg-main); } `;
const MainGrid = styled.div` display: grid; grid-template-columns: 1fr 1.5fr; gap: 30px; @media (max-width: 768px) { grid-template-columns: 1fr; }`;
const Panel = styled.div` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); padding: 25px; height: 70vh; display: flex; flex-direction: column; `;
const PanelTitle = styled.h2` font-size: 1.2rem; font-weight: 600; margin: 0 0 20px 0; padding-bottom: 20px; border-bottom: 1px solid var(--border-color); `;
const SearchInput = styled.input` width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; margin-bottom: 15px; background-color: var(--bg-main); color: var(--text-primary); &::placeholder { color: var(--text-placeholder); opacity: 0.8; } &:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2); } `;
const ProductList = styled.ul` list-style: none; padding: 0; overflow-y: auto; flex-grow: 1; `;
const ListItem = styled.li` display: flex; justify-content: space-between; align-items: center; padding: 12px; border-radius: 8px; cursor: pointer; background-color: ${props => props.$isSelected ? 'var(--primary-color)15' : 'transparent'}; &:hover { background-color: var(--bg-main); } `;
const Form = styled.form` display: flex; flex-direction: column; height: 100%; `;
const ReceiveListTable = styled.table` width: 100%; border-collapse: collapse; `;
const Th = styled.th` text-align: left; padding-bottom: 10px; border-bottom: 1px solid var(--border-color); color: var(--text-secondary); `;
const Td = styled.td` padding: 10px 0; vertical-align: middle; `;
const QuantityInput = styled.input` width: 80px; padding: 8px; border-radius: 6px; border: 1px solid var(--border-color); text-align: center; background-color: var(--bg-main); color: var(--text-primary); &:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2); } `;
const SaveButton = styled.button` background-color: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 12px 25px; font-weight: 600; cursor: pointer; align-self: flex-end; margin-top: auto; &:disabled { opacity: 0.5; cursor: not-allowed; } &:hover:not(:disabled) { background-color: var(--primary-hover); transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); } `;

function ReceiveStockPage() {
    const navigate = useNavigate();
    const location = useLocation();
    const [allProducts, setAllProducts] = useState([]);
    const [filteredProducts, setFilteredProducts] = useState([]);
    const [receiveList, setReceiveList] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [poContext, setPoContext] = useState(null);

    useEffect(() => {
        const fetchAndPrepareData = async () => {
            setLoading(true);
            try {
                const res = await getProducts();
                const productsData = res.data;
                setAllProducts(productsData);
                setFilteredProducts(productsData);

                if (location.state?.poItems) {
                    const { poItems, poId, poNumber } = location.state;
                    setPoContext({ id: poId, number: poNumber });

                    const listFromPO = poItems.map(item => {
                        const productDetails = productsData.find(p => p.id === item.product_id);
                        return {
                            ...productDetails,
                            id: item.product_id,
                            name: productDetails ? productDetails.name : `Produk ID ${item.product_id}`,
                            quantityToAdd: item.quantity
                        };
                    });
                    setReceiveList(listFromPO);
                    if (poNumber) {
                        toast.info(`Mengisi item dari PO #${poNumber}`);
                    }
                }
            } catch (error) {
                toast.error("Gagal memuat produk.");
            } finally {
                setLoading(false);
            }
        };
        fetchAndPrepareData();
    }, [location.state]);

    const handleSearch = (e) => {
        const term = e.target.value.toLowerCase();
        setFilteredProducts(allProducts.filter(p => p.name.toLowerCase().includes(term)));
    };

    const addProductToReceiveList = (product) => {
        if (receiveList.some(item => item.id === product.id)) {
            toast.warn("Produk sudah ada di dalam daftar penerimaan.");
            return;
        }
        setReceiveList([...receiveList, { ...product, quantityToAdd: 1 }]);
    };

    const handleQuantityChange = (productId, quantity) => {
        setReceiveList(
            receiveList.map(item =>
                item.id === productId ? { ...item, quantityToAdd: parseInt(quantity, 10) || 0 } : item
            )
        );
    };

    const removeFromReceiveList = (productId) => {
        setReceiveList(receiveList.filter(item => item.id !== productId));
    };
    
    const handleSubmit = async (e) => {
        e.preventDefault();
        const itemsToSubmit = receiveList
            .filter(item => item.quantityToAdd > 0)
            .map(item => ({
                productId: parseInt(item.id, 10),
                quantity: parseInt(item.quantityToAdd, 10)
            }));

        if (itemsToSubmit.length === 0) {
            toast.warn("Tidak ada stok untuk ditambahkan. Isi kuantitas minimal 1.");
            return;
        }

        setIsSubmitting(true);
        
        const submissionData = {
            items: itemsToSubmit,
            purchase_order_id: poContext ? parseInt(poContext.id, 10) : null,
        };

        try {
            await toast.promise(
                receiveStock(submissionData),
                {
                    pending: 'Menyimpan stok...',
                    success: 'Stok berhasil diperbarui!',
                    error: (err) => {
                        const errorData = err.data?.errors?.[0];
                        if (errorData) {
                            return `Validasi Gagal: ${errorData.msg} di kolom '${errorData.path}'`;
                        }
                        return err.data?.message || 'Gagal memperbarui stok.';
                    }
                }
            );

            if (poContext) {
                navigate(`/purchase-orders/${poContext.id}`);
            } else {
                navigate('/products');
            }
        } catch (error) {
            console.error("Submit error in ReceiveStockPage:", error.data || error); 
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <PageContainer>
            <PageHeader>
                <Title>{poContext ? `Terima Stok untuk PO #${poContext.number}` : 'Terima Stok Barang'}</Title>
                <BackButton onClick={() => navigate(poContext ? `/purchase-orders/${poContext.id}` : '/quick-actions')}>
                    <FiArrowLeft size={18} /> Kembali
                </BackButton>
            </PageHeader>
            <MainGrid>
                <Panel>
                    <PanelTitle>Pilih Produk</PanelTitle>
                    <SearchInput placeholder="Cari produk..." onChange={handleSearch} />
                    {loading ? <Skeleton count={10} /> : (
                        <ProductList>
                            {filteredProducts.map(p => (
                                <ListItem key={p.id} onClick={() => addProductToReceiveList(p)} $isSelected={receiveList.some(item => item.id === p.id)}>
                                    <span>{p.name} <small>(Stok: {p.stock})</small></span>
                                    <button style={{background: 'none', border: 'none', cursor: 'pointer', color: 'var(--primary-color)'}}>
                                        <FiPlusCircle size={20} />
                                    </button>
                                </ListItem>
                            ))}
                        </ProductList>
                    )}
                </Panel>
                <Panel>
                    <PanelTitle>Daftar Penerimaan</PanelTitle>
                    <Form onSubmit={handleSubmit}>
                        <div style={{ flexGrow: 1, overflowY: 'auto' }}>
                            <ReceiveListTable>
                                <thead>
                                    <tr>
                                        <Th>Produk</Th>
                                        <Th>Jumlah Tambah</Th>
                                        <Th>Aksi</Th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {receiveList.map(item => (
                                        <tr key={item.id}>
                                            <Td>{item.name}</Td>
                                            <Td>
                                                <QuantityInput
                                                    type="number"
                                                    min="0"
                                                    value={item.quantityToAdd}
                                                    onChange={(e) => handleQuantityChange(item.id, e.target.value)}
                                                />
                                            </Td>
                                            <Td>
                                                <button type="button" onClick={() => removeFromReceiveList(item.id)} style={{background: 'none', border: 'none', cursor: 'pointer', color: 'var(--red-color)'}}>
                                                    <FiTrash2 />
                                                </button>
                                            </Td>
                                        </tr>
                                    ))}
                                </tbody>
                            </ReceiveListTable>
                        </div>
                        {receiveList.length > 0 && (
                            <SaveButton type="submit" disabled={isSubmitting}>
                                <FiSave /> {isSubmitting ? 'Menyimpan...' : 'Simpan Stok Diterima'}
                            </SaveButton>
                        )}
                    </Form>
                </Panel>
            </MainGrid>
        </PageContainer>
    );
}

export default ReceiveStockPage;

===== frontend\src\pages\RegisterPage.jsx =====
import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { registerAdmin } from '../services/api';
import { toast } from 'react-toastify';
import { FiUserPlus } from 'react-icons/fi';

const PageContainer = styled.div`
    display: flex;
    height: 100vh;
    width: 100vw;
    background-color: var(--bg-main);

    @media (max-width: 768px) {
        flex-direction: column;
        height: auto;
        min-height: 100vh;
    }
`;

const BrandingPanel = styled.div`
    flex: 1.2;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    padding: 60px;

    @media (max-width: 768px) {
        padding: 30px;
        align-items: center;
        text-align: center;
    }
`;

const BrandingContent = styled.div`
    max-width: 450px;
`;

const BrandingTitle = styled.h1`
    font-size: 3.5rem;
    font-weight: 700;
    line-height: 1.2;
    margin-bottom: 15px;
    color: var(--primary-color);

    @media (max-width: 768px) {
        font-size: 2.5rem;
    }
`;

const BrandingSubtitle = styled.p`
    font-size: 1.2rem;
    font-weight: 300;
    color: var(--text-secondary);

    @media (max-width: 768px) {
        font-size: 1rem;
    }
`;

const FormPanel = styled.div`
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow-y: auto;
    padding: 20px 0;

    @media (max-width: 768px) {
        padding: 20px;
    }
`;

const FormBox = styled.div`
    width: 100%;
    max-width: 550px;
    padding: 40px;
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);

    @media (max-width: 768px) {
        padding: 30px;
    }
`;

const Title = styled.h2`
    font-size: 2.2rem;
    font-weight: 600;
    margin-bottom: 10px;
    color: var(--text-primary);

    @media (max-width: 768px) {
        font-size: 1.8rem;
    }
`;

const Subtitle = styled.p`
    color: var(--text-secondary);
    margin-bottom: 50px;
    font-size: 1rem;

    @media (max-width: 768px) {
        margin-bottom: 30px;
    }
`;

const Form = styled.form`
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 25px;

    @media (max-width: 768px) {
        grid-template-columns: 1fr;
    }
`;

const InputGroup = styled.div`
    grid-column: ${props => props.fullWidth ? '1 / -1' : 'auto'};
`;

const Label = styled.label`
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--text-secondary);
`;

const Input = styled.input`
    width: 100%;
    padding: 14px 18px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    font-size: 1rem;
    background-color: var(--bg-main);
    color: var(--text-primary);
`;

const Button = styled.button`
    width: 100%;
    padding: 15px;
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    grid-column: 1 / -1;
    &:hover {
        background-color: var(--primary-hover);
    }
`;

const LoginLink = styled.p`
    text-align: center;
    margin-top: 15px;
    color: var(--text-secondary);
    font-size: 0.9rem;
    grid-column: 1 / -1;

    a {
        color: var(--primary-color);
        font-weight: 600;
        text-decoration: none;
        &:hover { text-decoration: underline; }
    }
`;


function RegisterPage() {
    const [formData, setFormData] = useState({ name: '', email: '', password: '', registrationKey: '' });
    const navigate = useNavigate();

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        const promise = registerAdmin(formData);
        
        const toastResult = toast.promise(promise, {
            pending: 'Mendaftarkan admin...',
            success: 'Registrasi Admin berhasil! Silakan login.',
            error: {
                render({data}){
                    return `Gagal: ${data.response?.data?.message || 'Server error'}`;
                }
            }
        });

        try {
            await toastResult;
            navigate('/login');
        } catch (error) {
            console.error("Registration failed:", error);
        }
    };

    return (
        <PageContainer>
            <BrandingPanel>
                <BrandingContent>
                    <BrandingTitle>Registrasi Admin</BrandingTitle>
                    <BrandingSubtitle>Buat akun Administrator baru untuk mengakses sistem.</BrandingSubtitle>
                </BrandingContent>
            </BrandingPanel>
            <FormPanel>
                <FormBox>
                    <Title>Buat Akun Admin</Title>
                    <Subtitle>Isi data di bawah untuk membuat akun.</Subtitle>
                    <Form onSubmit={handleSubmit}>
                        <InputGroup>
                            <Label htmlFor="name">Nama Lengkap</Label>
                            <Input id="name" name="name" type="text" onChange={handleChange} required />
                        </InputGroup>
                        <InputGroup>
                            <Label htmlFor="email">Alamat Email</Label>
                            <Input id="email" name="email" type="email" onChange={handleChange} required />
                        </InputGroup>
                        <InputGroup>
                            <Label htmlFor="password">Password</Label>
                            <Input id="password" name="password" type="password" onChange={handleChange} required />
                        </InputGroup>
                        <InputGroup>
                            <Label htmlFor="registrationKey">Kode Registrasi</Label>
                            <Input id="registrationKey" name="registrationKey" type="password" onChange={handleChange} required />
                        </InputGroup>
                        <Button type="submit"><FiUserPlus style={{ marginRight: '8px' }}/> Buat Akun Admin</Button>
                        <LoginLink>
                            Sudah punya akun? <Link to="/login">Login di sini</Link>
                        </LoginLink>
                    </Form>
                </FormBox>
            </FormPanel>
        </PageContainer>
    );
}

export default RegisterPage;

===== frontend\src\pages\ReportsPage.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\ReportsPage.jsx

import React, { useState } from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { FiFileText, FiTrendingUp, FiDownload, FiCalendar } from 'react-icons/fi';
import { toast } from 'react-toastify';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";
import { exportSalesSummaryPDF as exportReport } from '../services/api';
import PageWrapper from '../components/PageWrapper';

// --- Styled Components ---
const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;

    @media (max-width: 768px) {
        padding: 15px;
    }
`;
const PageHeader = styled.header`
    margin-bottom: 30px;
    flex-shrink: 0;
`;

const Title = styled.h1`
    font-size: 1.8rem;
    display: flex;
    align-items: center;
    gap: 12px;
    color: var(--text-primary); /* Ensure consistent text color */
`;

const ReportGrid = styled.div`
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 25px;

    @media (max-width: 768px) {
        grid-template-columns: 1fr; /* Stack cards on small screens */
    }
`;

const ReportCard = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    padding: 25px;
    display: flex;
    flex-direction: column;
    gap: 15px;
    transition: all 0.2s ease-in-out;

    &:hover {
        transform: translateY(-5px);
        border-color: var(--primary-color);
        box-shadow: 0 8px 24px rgba(0,0,0,0.08);
    }
`;

const CardTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 10px;
    color: var(--text-primary); /* Ensure consistent text color */
`;

const CardDescription = styled.p`
    color: var(--text-secondary);
    font-size: 0.9rem;
    line-height: 1.5;
    flex-grow: 1;
`;

const ActionButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    cursor: pointer;
    margin-top: auto;

    &:hover:not(:disabled) {
        background-color: var(--primary-hover);
    }
    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    @media (max-width: 768px) {
        width: 100%; /* Full width button on small screens */
    }
`;

const DateFilterContainer = styled.div`
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px solid var(--border-color);
    flex-wrap: wrap; /* Allow wrapping on smaller screens */
    justify-content: center; /* Center items on smaller screens */
`;
const DatePickerWrapper = styled.div`
    .react-datepicker-wrapper input {
        padding: 8px 12px;
        border-radius: 6px;
        border: 1px solid var(--border-color);
        background-color: var(--bg-main);
        color: var(--text-primary);
        font-weight: 500;
        width: 120px;
        text-align: center;
    }
`;
// --- End of Styled Components ---

function ReportsPage() {
    const navigate = useNavigate();
    const [reportStartDate, setReportStartDate] = useState(new Date(new Date().setDate(new Date().getDate() - 29)));
    const [reportEndDate, setReportEndDate] = useState(new Date());
    const [isGenerating, setIsGenerating] = useState(false);

    const handleGenerateReport = async () => {
        setIsGenerating(true);
        toast.info("Sedang membuat laporan...");
        try {
            const response = await exportReport(reportStartDate, reportEndDate);
            
            const url = window.URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement('a');
            link.href = url;
            
            const contentDisposition = response.headers['content-disposition'];
            let fileName = `laporan-penjualan.csv`;
            if (contentDisposition) {
                const fileNameMatch = contentDisposition.match(/filename="(.+)"/);
                if (fileNameMatch && fileNameMatch.length === 2) {
                    fileName = fileNameMatch[1];
                }
            }
            
            link.setAttribute('download', fileName);
            document.body.appendChild(link);
            link.click();
            link.remove();
            window.URL.revokeObjectURL(url);

            toast.success("Laporan berhasil diunduh!");
        } catch (error) {
            toast.error(error.response?.data?.message || "Gagal membuat laporan.");
        } finally {
            setIsGenerating(false);
        }
    };

    return (
        <PageWrapper loading={false}>
            <PageContainer>
                <PageHeader>
                    <Title><FiFileText /> Pusat Laporan</Title>
                </PageHeader>
                <ReportGrid>
                    <ReportCard>
                        <CardTitle><FiTrendingUp /> Laporan Profitabilitas Produk</CardTitle>
                        <CardDescription>
                            Analisis mendalam tentang produk mana yang paling menguntungkan. Lihat total pendapatan, modal, laba kotor, dan marjin profit untuk setiap item.
                        </CardDescription>
                        <ActionButton onClick={() => navigate('/reports/product-profitability')}>
                            Lihat Laporan
                        </ActionButton>
                    </ReportCard>

                    <ReportCard>
                        <CardTitle><FiDownload /> Laporan Penjualan (CSV)</CardTitle>
                        <CardDescription>
                            Hasilkan ringkasan penjualan dalam format CSV untuk periode tertentu. Cocok untuk dokumentasi dan arsip.
                        </CardDescription>
                        <DateFilterContainer>
                            <FiCalendar size={18} />
                            <DatePickerWrapper>
                                <DatePicker selected={reportStartDate} onChange={(date) => setReportStartDate(date)} dateFormat="dd/MM/yy" maxDate={reportEndDate} />
                            </DatePickerWrapper>
                            <span>-</span>
                            <DatePickerWrapper>
                                <DatePicker selected={reportEndDate} onChange={(date) => setReportEndDate(date)} dateFormat="dd/MM/yy" minDate={reportStartDate} />
                            </DatePickerWrapper>
                        </DateFilterContainer>
                        <ActionButton onClick={handleGenerateReport} disabled={isGenerating}>
                            {isGenerating ? 'Memproses...' : 'Ekspor Laporan (CSV)'}
                        </ActionButton>
                    </ReportCard>
                </ReportGrid>
            </PageContainer>
        </PageWrapper>
    );
}

export default ReportsPage;

===== frontend\src\pages\ResetPasswordPage.jsx =====
// frontend/src/pages/ResetPasswordPage.jsx

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import styled from 'styled-components';
import { resetPassword } from '../services/api';
import { toast } from 'react-toastify';
import { FiSave } from 'react-icons/fi';
import { jwtDecode } from 'jwt-decode';

// --- Styled Components (Sama seperti LoginPage) ---
const PageContainer = styled.div`
  display: flex;
  height: 100vh;
  width: 100vw;
  background-color: var(--bg-main);
  @media (max-width: 768px) {
    flex-direction: column;
    height: auto;
    min-height: 100vh;
  }
`;

const BrandingPanel = styled.div`
  flex: 1.2;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  padding: 60px;
  @media (max-width: 768px) {
    padding: 30px;
    align-items: center;
    text-align: center;
  }
`;

const BrandingContent = styled.div`
  max-width: 450px;
`;

const BrandingTitle = styled.h1`
  font-size: 3.5rem;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 15px;
  color: var(--primary-color);
  @media (max-width: 768px) {
    font-size: 2.5rem;
  }
`;

const BrandingSubtitle = styled.p`
  font-size: 1.2rem;
  font-weight: 300;
  color: var(--text-secondary);
  @media (max-width: 768px) {
    font-size: 1rem;
  }
`;

const FormPanel = styled.div`
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow-y: auto;
  padding: 20px 0;
  @media (max-width: 768px) {
    padding: 20px;
  }
`;

const FormBox = styled.div`
  width: 100%;
  max-width: 400px;
  padding: 40px;
  background-color: var(--bg-surface);
  border-radius: 16px;
  border: 1px solid var(--border-color);
  @media (max-width: 768px) {
    padding: 30px;
  }
`;

const Title = styled.h2`
  font-size: 2.2rem;
  font-weight: 600;
  margin-bottom: 10px;
  color: var(--text-primary);
`;

const Subtitle = styled.p`
  color: var(--text-secondary);
  margin-bottom: 50px;
  font-size: 1rem;
`;

const Form = styled.form``;
const InputGroup = styled.div` margin-bottom: 25px; `;
const Label = styled.label` display: block; margin-bottom: 8px; font-weight: 500; color: var(--text-secondary); `;
const Input = styled.input` width: 100%; padding: 14px 18px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1rem; background-color: var(--bg-main); color: var(--text-primary); `;
const Button = styled.button` width: 100%; padding: 15px; background-color: var(--primary-color); color: white; border: none; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; &:hover { background-color: var(--primary-hover); } &:disabled { opacity: 0.5; } `;
const ErrorMessage = styled.p` color: var(--red-color); font-weight: 500; `;
const BackLink = styled(Link)` display: block; text-align: center; margin-top: 25px; color: var(--text-secondary); font-size: 0.9rem; text-decoration: none; &:hover { text-decoration: underline; } `;


function ResetPasswordPage() {
  const { token } = useParams();
  const navigate = useNavigate();
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isValidToken, setIsValidToken] = useState(false);
  const [error, setError] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    try {
      const decoded = jwtDecode(token);
      const currentTime = Date.now() / 1000;
      if (decoded.exp < currentTime) {
        setError('Link reset password sudah kedaluwarsa. Silakan minta yang baru.');
        setIsValidToken(false);
      } else {
        setIsValidToken(true);
      }
    } catch (err) {
      setError('Token tidak valid atau salah.');
      setIsValidToken(false);
    }
  }, [token]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (password !== confirmPassword) {
      return toast.error("Password dan konfirmasi password tidak cocok.");
    }
    if (password.length < 6) {
      return toast.error("Password minimal harus 6 karakter.");
    }

    setIsSubmitting(true);
    try {
      const response = await resetPassword(token, { password });
      toast.success(response.data.message);
      navigate('/login');
    } catch (err) {
      toast.error(err.response?.data?.message || 'Gagal mereset password.');
    } finally {
        setIsSubmitting(false);
    }
  };

  return (
    <PageContainer>
        <BrandingPanel>
            <BrandingContent>
                <BrandingTitle>Buat Password Baru</BrandingTitle>
                <BrandingSubtitle>Keamanan akun Anda adalah prioritas kami. Silakan buat password baru yang kuat.</BrandingSubtitle>
            </BrandingContent>
        </BrandingPanel>
        <FormPanel>
            <FormBox>
                <Title>Reset Password</Title>
                {isValidToken ? (
                <>
                    <Subtitle>Masukkan password baru Anda di bawah ini.</Subtitle>
                    <Form onSubmit={handleSubmit}>
                    <InputGroup>
                        <Label htmlFor="password">Password Baru</Label>
                        <Input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required autoFocus />
                    </InputGroup>
                    <InputGroup>
                        <Label htmlFor="confirmPassword">Konfirmasi Password Baru</Label>
                        <Input id="confirmPassword" type="password" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required />
                    </InputGroup>
                    <Button type="submit" disabled={isSubmitting}>
                        <FiSave style={{ marginRight: '8px' }}/> 
                        {isSubmitting ? 'Menyimpan...' : 'Simpan Password Baru'}
                    </Button>
                    </Form>
                </>
                ) : (
                <>
                    <ErrorMessage>{error}</ErrorMessage>
                    <BackLink to="/forgot-password">Minta link baru</BackLink>
                </>
                )}
            </FormBox>
        </FormPanel>
    </PageContainer>
  );
}

export default ResetPasswordPage;

===== frontend\src\pages\RolesPage.jsx =====
import React, { useState, useEffect, useCallback } from 'react';
import styled from 'styled-components';
import { getRoles, getRoleById, createRole, updateRole, deleteRole, getPermissions } from '../services/api';
import RoleFormModal from '../components/RoleFormModal';
import { toast } from 'react-toastify';
import { FiEdit, FiTrash2, FiPlus, FiShield } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';

const PageContainer = styled.div` padding: 30px; height: 100%; display: flex; flex-direction: column; `;
const PageHeader = styled.header` display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; flex-shrink: 0; `;
const Title = styled.h1` font-size: 1.8rem; `;
const AddButton = styled.button` background-color: var(--primary-color); color: white; border: none; border-radius: 8px; padding: 12px 20px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; &:hover { background-color: var(--primary-hover); } `;
const TableContainer = styled.div` background-color: var(--bg-surface); border-radius: 16px; border: 1px solid var(--border-color); overflow: hidden; flex-grow: 1; display: flex; flex-direction: column; `;
const TableWrapper = styled.div` overflow-x: auto; flex-grow: 1; `;
const Table = styled.table` width: 100%; border-collapse: collapse; `;
const Th = styled.th` text-align: left; padding: 15px 20px; background-color: var(--bg-main); border-bottom: 1px solid var(--border-color); font-weight: 600; color: var(--text-secondary); font-size: 0.9rem; text-transform: uppercase; `;
const Td = styled.td` padding: 15px 20px; border-bottom: 1px solid var(--border-color); color: var(--text-primary); vertical-align: middle; `;
const Tr = styled.tr` &:last-child > td { border-bottom: none; } `;
const ActionButton = styled.button` background: none; border: none; cursor: pointer; color: var(--text-secondary); margin-right: 15px; &:hover { color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'}; } `;
const EmptyStateContainer = styled.div` flex-grow: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; color: var(--text-secondary); `;

function RolesPage() {
    const [roles, setRoles] = useState([]);
    const [permissionsList, setPermissionsList] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingRole, setEditingRole] = useState(null);
    const [isSubmitting, setIsSubmitting] = useState(false);

    const fetchData = useCallback(async () => {
        setLoading(true);
        try {
            const [rolesRes, permsRes] = await Promise.all([getRoles(), getPermissions()]);
            setRoles(rolesRes.data);
            setPermissionsList(permsRes.data);
        } catch (error) {
            toast.error("Gagal memuat data peran atau izin.");
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => { fetchData(); }, [fetchData]);

    const handleOpenModal = async (role = null) => {
        if (role) {
            // Jika mengedit, fetch detailnya untuk mendapatkan izin yang terhubung
            const res = await getRoleById(role.id);
            setEditingRole(res.data);
        } else {
            setEditingRole(null);
        }
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setEditingRole(null);
    };

    const handleSaveRole = async (roleData) => {
        setIsSubmitting(true);
        const promise = editingRole ? updateRole(editingRole.id, roleData) : createRole(roleData);
        try {
            await toast.promise(promise, {
                pending: 'Menyimpan peran...',
                success: 'Peran berhasil disimpan!',
                error: (err) => err.response?.data?.message || 'Gagal menyimpan peran.'
            });
            fetchData();
        } catch (error) {
            console.error(error);
        } finally {
            setIsSubmitting(false);
            handleCloseModal();
        }
    };

    const handleDeleteRole = async (id) => {
        if (window.confirm('Yakin ingin menghapus peran ini?')) {
            try {
                await toast.promise(deleteRole(id), {
                    pending: 'Menghapus peran...',
                    success: 'Peran berhasil dihapus!',
                    error: (err) => err.response?.data?.message || 'Gagal menghapus peran.'
                });
                fetchData();
            } catch (error) {
                console.error(error);
            }
        }
    };

    return (
        <>
            <PageContainer>
                <PageHeader>
                    <Title>Manajemen Peran & Izin</Title>
                    <AddButton onClick={() => handleOpenModal()}><FiPlus /> Tambah Peran</AddButton>
                </PageHeader>
                <TableContainer>
                    {loading ? (
                        <div style={{ padding: '20px' }}><Skeleton count={5} height={50} /></div>
                    ) : roles.length > 0 ? (
                        <TableWrapper>
                            <Table>
                                <thead>
                                    <tr>
                                        <Th>Nama Peran</Th>
                                        <Th>Deskripsi</Th>
                                        <Th>Aksi</Th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {roles.map(role => (
                                        <Tr key={role.id}>
                                            <Td>{role.name}</Td>
                                            <Td>{role.description}</Td>
                                            <Td>
                                                <ActionButton onClick={() => handleOpenModal(role)}><FiEdit size={18} /></ActionButton>
                                                <ActionButton $danger onClick={() => handleDeleteRole(role.id)}><FiTrash2 size={18} /></ActionButton>
                                            </Td>
                                        </Tr>
                                    ))}
                                </tbody>
                            </Table>
                        </TableWrapper>
                    ) : (
                        <EmptyStateContainer>
                            <FiShield size={48} />
                            <h3 style={{ marginTop: '20px' }}>Belum Ada Peran</h3>
                            <p>Klik tombol di atas untuk membuat peran pertama Anda.</p>
                        </EmptyStateContainer>
                    )}
                </TableContainer>
            </PageContainer>
            <RoleFormModal
                isOpen={isModalOpen}
                onClose={handleCloseModal}
                onSave={handleSaveRole}
                role={editingRole}
                permissionsList={permissionsList}
                isSubmitting={isSubmitting}
            />
        </>
    );
}

export default RolesPage;

===== frontend\src\pages\SettingsPage.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\SettingsPage.jsx

import React, { useState, useEffect, useContext } from 'react';
import styled from 'styled-components';
import { ThemeContext } from '../context/ThemeContext';
import { BusinessContext } from '../context/BusinessContext';
import { getEmailSettings, saveEmailSettings, saveBusinessSettings } from '../services/api';
import { toast } from 'react-toastify';
import { Link } from 'react-router-dom';
import { FiCheckCircle, FiX } from 'react-icons/fi';
import { formatRupiah, parseRupiah } from '../utils/formatters';

// --- Styled Components ---
const PageContainer = styled.div`
    padding: 30px;
`;
const Title = styled.h1`
    font-size: 1.8rem;
    margin-bottom: 30px;
`;

// ==========================================================
// ✅ PERBAIKAN: Mengubah layout grid agar menjadi 2 kolom
// ==========================================================
const SettingsGrid = styled.div`
    display: grid;
    grid-template-columns: 1fr 1.2fr; /* Creates two columns */
    gap: 30px;
    align-items: flex-start; /* Aligns cards to the top */

    @media (max-width: 1024px) {
        grid-template-columns: 1fr; /* Reverts to a single column on smaller screens */
    }
`;
// ==========================================================

const Column = styled.div`
    display: flex;
    flex-direction: column;
    gap: 30px;
`;
const SettingsCard = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    padding: 25px;
    width: 100%;
`;
const CardTitle = styled.h3`
    font-size: 1.1rem;
    font-weight: 600;
    padding-bottom: 15px;
    margin-bottom: 25px;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    gap: 10px;
`;
const SettingRow = styled.div`
    display: flex;
    justify-content: space-between;
    align-items: center;
`;
const SettingLabel = styled.div`
    p {
        font-size: 1rem;
        font-weight: 500;
        margin: 0;
    }
    small {
        font-size: 0.85rem;
        color: var(--text-secondary);
    }
`;
const ThemeSwitchLabel = styled.label`
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
`;
const ThemeSwitchInput = styled.input`
    opacity: 0;
    width: 0;
    height: 0;
    &:checked + span {
        background-color: var(--primary-color);
    }
    &:checked + span:before {
        transform: translateX(26px);
    }
`;
const ThemeSwitchSlider = styled.span`
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--border-color);
    transition: .4s;
    border-radius: 34px;
    &:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }
`;
const InfoBox = styled.div`
    padding: 20px;
    background-color: var(--bg-main);
    border-radius: 8px;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 15px;
`;
const Form = styled.form`
    display: flex;
    flex-direction: column;
    gap: 20px;
`;
const InputGroup = styled.div``;
const Label = styled.label`
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--text-secondary);
`;
const Input = styled.input`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    font-size: 1rem;
    background-color: var(--bg-main);
    color: var(--text-primary);
    &:focus {
        outline: none;
        border-color: var(--primary-color);
    }
`;
const Button = styled.button`
    padding: 10px 20px;
    border-radius: 8px;
    border: 1px solid ${props => props.$primary ? 'var(--primary-color)' : 'var(--border-color)'};
    font-weight: 600;
    cursor: pointer;
    background-color: ${props => props.$primary ? 'var(--primary-color)' : 'transparent'};
    color: ${props => props.$primary ? 'white' : 'var(--text-primary)'};
    &:hover {
        opacity: 0.9;
    }
`;
const TagsContainer = styled.div`
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    min-height: 48px;
    align-items: center;
`;
const Tag = styled.div`
    background-color: var(--primary-color);
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 0.9rem;
`;
const RemoveTagButton = styled.button`
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 0;
    line-height: 1;
    display: flex;
    align-items: center;
    justify-content: center;
`;
const Select = styled.select`
    width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1rem;
    background-color: var(--bg-main); color: var(--text-primary); appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat; background-position: right 12px center; background-size: 20px;
    &:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2); }
`;

function SettingsPage() {
    const { theme, toggleTheme } = useContext(ThemeContext);
    const { settings, fetchBusinessSettings } = useContext(BusinessContext);
    const [emailSettings, setEmailSettings] = useState({ email: '', appPassword: '', sender_name: '' });
    const [savedEmail, setSavedEmail] = useState('');
    const [formData, setFormData] = useState({
        business_name: '',
        address: '',
        phone: '',
        payment_methods: [],
        receipt_logo_url: '',
        receipt_footer_text: '',
        receipt_template: 'STANDARD_RECEIPT_TEMPLATE',
        tax_rate: 0.00,
        default_starting_cash: '0'
    });
    const [newPaymentMethod, setNewPaymentMethod] = useState('');
    const [isEditingEmail, setIsEditingEmail] = useState(false);

    useEffect(() => {
        const fetchAllSettings = async () => {
            try {
                const emailRes = await getEmailSettings();
                if (emailRes.data && emailRes.data.sender_email) {
                    setSavedEmail(emailRes.data.sender_email);
                    setEmailSettings(prev => ({ ...prev, email: emailRes.data.sender_email, sender_name: emailRes.data.sender_name || '' }));
                    setIsEditingEmail(false);
                } else {
                    setIsEditingEmail(true);
                }
            } catch (error) {
                toast.error("Gagal memuat beberapa setelan.");
            }
        };
        fetchAllSettings();
    }, []);

    useEffect(() => {
        if (settings) {
            const initialCash = String(Math.floor(parseFloat(settings.default_starting_cash || '0')));

            setFormData({
                business_name: settings.business_name || '',
                address: settings.address || '',
                phone: settings.phone_number || '',
                payment_methods: Array.isArray(settings.payment_methods)
                    ? settings.payment_methods
                    : (settings.payment_methods ? JSON.parse(settings.payment_methods) : []),
                receipt_logo_url: settings.receipt_logo_url || '',
                receipt_footer_text: settings.receipt_footer_text || '',
                receipt_template: settings.receipt_template || 'STANDARD_RECEIPT_TEMPLATE',
                tax_rate: (parseFloat(settings.tax_rate) || 0) * 100,
                default_starting_cash: initialCash
            });
        }
    }, [settings]);

    const handleEmailChange = (e) => setEmailSettings({ ...emailSettings, [e.target.name]: e.target.value });
    const handleBusinessChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleEmailSave = async (e) => {
        e.preventDefault();
        await toast.promise(saveEmailSettings(emailSettings), {
            pending: 'Menyimpan...',
            success: 'Setelan email berhasil disimpan!',
            error: (err) => `Gagal menyimpan: ${err.response?.data?.message || err.message}`
        });
        setSavedEmail(emailSettings.email);
        setEmailSettings(prev => ({ ...prev, appPassword: '' }));
        setIsEditingEmail(false);
    };

    const handleBusinessSave = async (e) => {
        e.preventDefault();
        const dataToSave = {
            ...formData,
            tax_rate: (parseFloat(formData.tax_rate) || 0) / 100,
            default_starting_cash: parseFloat(parseRupiah(formData.default_starting_cash)) || 0
        };
        
        await toast.promise(saveBusinessSettings(dataToSave), {
            pending: 'Menyimpan...',
            success: 'Setelan bisnis berhasil diperbarui!',
            error: (err) => `Gagal menyimpan: ${err.response?.data?.message || err.message}`
        });
        fetchBusinessSettings();
    };

    const addPaymentMethod = () => {
        const trimmedMethod = newPaymentMethod.trim();
        if (trimmedMethod && !formData.payment_methods.some(m => m.toLowerCase() === trimmedMethod.toLowerCase())) {
            setFormData(prev => ({ ...prev, payment_methods: [...prev.payment_methods, trimmedMethod] }));
            setNewPaymentMethod('');
        } else if (trimmedMethod) {
            toast.warn('Metode pembayaran ini sudah ada.');
        }
    };

    const removePaymentMethod = (methodToRemove) => {
        setFormData(prev => ({ ...prev, payment_methods: prev.payment_methods.filter(m => m !== methodToRemove) }));
    };

    return (
        <PageContainer>
            <Title>Setelan</Title>
            <SettingsGrid>
                <Column>
                    <SettingsCard>
                        <CardTitle>Profil Bisnis & Kas</CardTitle>
                        <Form onSubmit={handleBusinessSave}>
                            <InputGroup>
                                <Label>Nama Bisnis</Label>
                                <Input name="business_name" value={formData.business_name} onChange={handleBusinessChange} placeholder="Nama Toko Anda" />
                            </InputGroup>
                            <InputGroup>
                                <Label>Telepon</Label>
                                <Input name="phone" value={formData.phone} onChange={handleBusinessChange} placeholder="No. Telepon Toko" />
                            </InputGroup>
                            <InputGroup>
                                <Label>Alamat</Label>
                                <Input as="textarea" rows="3" name="address" value={formData.address} onChange={handleBusinessChange} placeholder="Alamat lengkap toko" />
                            </InputGroup>
                            
                            <InputGroup>
                                <Label>Kas Awal Default untuk Kasir (Rp)</Label>
                                <Input
                                    name="default_starting_cash"
                                    type="text"
                                    value={formatRupiah(formData.default_starting_cash)}
                                    onChange={(e) => setFormData(prev => ({...prev, default_starting_cash: parseRupiah(e.target.value)}))}
                                />
                            </InputGroup>
                            
                            <InputGroup>
                                <Label>Format Struk</Label>
                                <Select name="receipt_template" value={formData.receipt_template} onChange={handleBusinessChange}>
                                    <option value="STANDARD_RECEIPT_TEMPLATE">Struk Standar</option>
                                    <option value="THERMAL_RECEIPT_TEMPLATE">Struk Thermal</option>
                                </Select>
                            </InputGroup>
                            <InputGroup>
                                <Label>URL Logo Struk</Label>
                                <Input name="receipt_logo_url" value={formData.receipt_logo_url} onChange={handleBusinessChange} />
                            </InputGroup>
                            <InputGroup>
                                <Label>Teks Footer Struk</Label>
                                <Input name="receipt_footer_text" value={formData.receipt_footer_text} onChange={handleBusinessChange} />
                            </InputGroup>
                            <InputGroup>
                                <Label>Tarif Pajak Global (%)</Label>
                                <Input type="number" name="tax_rate" value={formData.tax_rate} onChange={handleBusinessChange} step="0.01" min="0" max="100"/>
                            </InputGroup>
                            <InputGroup><Label>Metode Pembayaran</Label><TagsContainer>{formData.payment_methods.map(method => (<Tag key={method}>{method}<RemoveTagButton type="button" onClick={() => removePaymentMethod(method)}><FiX size={16} /></RemoveTagButton></Tag>))}</TagsContainer><div style={{ display: 'flex', gap: '10px', marginTop: '10px' }}><Input value={newPaymentMethod} onChange={(e) => setNewPaymentMethod(e.target.value)} onKeyPress={(e) => { if (e.key === 'Enter') { e.preventDefault(); addPaymentMethod(); } }} placeholder="Tambah metode baru"/><Button type="button" onClick={addPaymentMethod}>Tambah</Button></div></InputGroup>

                            <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
                                <Button type="submit" $primary>Simpan Profil</Button>
                            </div>
                        </Form>
                    </SettingsCard>
                </Column>

                <Column>
                    <SettingsCard>
                        <CardTitle>Tampilan</CardTitle>
                        <SettingRow>
                            <SettingLabel>
                                <p>Mode Tampilan</p>
                                <small>Anda sedang menggunakan mode {theme === 'light' ? 'Terang' : 'Gelap'}</small>
                            </SettingLabel>
                            <ThemeSwitchLabel>
                                <ThemeSwitchInput type="checkbox" onChange={toggleTheme} checked={theme === 'dark'} />
                                <ThemeSwitchSlider />
                            </ThemeSwitchLabel>
                        </SettingRow>
                    </SettingsCard>
                    <SettingsCard>
                        <CardTitle>Konfigurasi Email Pengirim Struk</CardTitle>
                        {!isEditingEmail && savedEmail ? (
                            <div>
                                <InfoBox><FiCheckCircle size={24} color="var(--green-color)" /><div><p style={{ margin: 0, fontWeight: 500 }}>Terhubung: {savedEmail}</p></div></InfoBox>
                                <Button onClick={() => setIsEditingEmail(true)}>Ubah Setelan</Button>
                            </div>
                        ) : (
                            <Form onSubmit={handleEmailSave}>
                                <InputGroup><Label>Email Pengirim (Gmail)</Label><Input type="email" name="email" value={emailSettings.email} onChange={handleEmailChange} required/></InputGroup>
                                <InputGroup><Label>Nama Pengirim</Label><Input type="text" name="sender_name" value={emailSettings.sender_name} onChange={handleEmailChange} placeholder="Nama Bisnis Anda"/></InputGroup>
                                <InputGroup><Label>Sandi Aplikasi</Label><Input type="password" name="appPassword" value={emailSettings.appPassword} onChange={handleEmailChange} required placeholder="16 karakter sandi aplikasi"/><small style={{ color: 'var(--text-secondary)', marginTop: '5px', display: 'block' }}>Tidak tahu? <Link to="/tutorial/app-password" style={{ color: 'var(--primary-color)' }}>Lihat tutorial</Link></small></InputGroup>
                                <div style={{ display: 'flex', gap: '15px', justifyContent: 'flex-end' }}>
                                    {isEditingEmail && savedEmail && <Button type="button" onClick={() => setIsEditingEmail(false)}>Batal</Button>}
                                    <Button type="submit" $primary>Simpan</Button>
                                </div>
                            </Form>
                        )}
                    </SettingsCard>
                </Column>
            </SettingsGrid>
        </PageContainer>
    );
}

export default SettingsPage;

===== frontend\src\pages\ShiftHistoryPage.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\ShiftHistoryPage.jsx

import React, { useState, useEffect, useCallback } from 'react';
import styled from 'styled-components';
import { getShiftHistory, deleteShift, clearShiftHistory, exportShiftHistory } from '../services/api';
import { toast } from 'react-toastify';
import { FiClock, FiTrash2, FiAlertTriangle, FiDownload } from 'react-icons/fi';
import { jwtDecode } from 'jwt-decode';
import ConfirmationModal from '../components/ConfirmationModal';
import { motion } from 'framer-motion';
import PageWrapper from '../components/PageWrapper';

// --- Styled Components dengan Perbaikan Mobile ---
const PageContent = styled.div`
    display: flex;
    flex-direction: column;
    height: 100%;
    width: 100%;
    padding: 30px;

    @media (max-width: 768px) {
        padding: 15px;
    }
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;

    @media (max-width: 768px) {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
    }
`;
const HeaderActions = styled.div`
    display: flex;
    gap: 15px;
`;
const Title = styled.h1`
    font-size: 1.8rem;
    display: flex;
    align-items: center;
    gap: 12px;
`;
const TableContainer = styled.div`
    flex-grow: 1;
    overflow: hidden;
`;

// --- DESKTOP TABLE STYLES ---
const TableWrapper = styled.div`
    display: none;
    @media (min-width: 769px) {
        display: block;
        background-color: var(--bg-surface);
        border-radius: 16px;
        border: 1px solid var(--border-color);
        overflow-x: auto;
    }
`;
const Table = styled.table` width: 100%; border-collapse: collapse; min-width: 800px; `;
const Th = styled.th` text-align: center; padding: 15px 20px; background-color: var(--bg-main); border-bottom: 1px solid var(--border-color); font-weight: 600; color: var(--text-secondary); font-size: 0.9rem; white-space: nowrap; text-transform: uppercase; `;
const Td = styled.td` text-align: center; padding: 15px 20px; border-bottom: 1px solid var(--border-color); color: var(--text-primary); vertical-align: middle; &.nowrap { white-space: nowrap; } &.text-left { text-align: left; } `;
const Tr = styled(motion.tr)` &:last-child > td { border-bottom: none; } `;

// --- MOBILE CARD STYLES ---
const CardList = styled.div`
    display: none;
    @media (max-width: 768px) {
        display: grid;
        gap: 15px;
    }
`;
const ShiftCard = styled(motion.div)`
    background-color: var(--bg-surface);
    border-radius: 12px;
    border: 1px solid var(--border-color);
    padding: 15px;
    display: flex;
    flex-direction: column;
    gap: 12px;
`;
const CardHeader = styled.div`
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 10px;
`;
const CardTitle = styled.div`
    font-weight: 600;
    color: var(--text-primary);
`;
const CardDate = styled.div`
    font-size: 0.8rem;
    color: var(--text-secondary);
`;
const CardBody = styled.div`
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 10px;
`;
const InfoItem = styled.div`
    font-size: 0.9rem;
    & > strong {
        display: block;
        font-weight: 600;
        color: var(--text-primary);
    }
    & > span {
        color: var(--text-secondary);
        font-size: 0.8rem;
    }
`;


// --- SHARED STYLES ---
const ActionButton = styled.button` background: none; border: none; cursor: pointer; color: var(--text-secondary); margin: 0 5px; &:hover { color: var(--red-color); } `;
const TimePeriodCell = styled.div` font-size: 0.85rem; line-height: 1.3; .start-time { font-weight: 600; } .end-time { color: var(--text-secondary); } `;
const SalesDetail = styled.div` font-size: 0.8rem; color: var(--text-secondary); margin-top: 4px; `;
const ExportButton = styled.button` background-color: var(--green-color); color: white; border: none; border-radius: 8px; padding: 10px 20px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; &:hover { opacity: 0.9; } `;
const ClearHistoryButton = styled.button` background-color: var(--red-color); color: white; border: none; border-radius: 8px; padding: 10px 20px; font-weight: 600; display: flex; align-items: center; gap: 8px; cursor: pointer; &:hover { opacity: 0.9; } `;
const EmptyStateContainer = styled.div` flex-grow: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; color: var(--text-secondary); `;

const tableRowVariants = {
    hidden: { opacity: 0, y: -10 },
    visible: (i) => ({ opacity: 1, y: 0, transition: { delay: i * 0.05 }, }),
};

const formatCurrency = (value) => `Rp ${new Intl.NumberFormat('id-ID').format(value || 0)}`;

const formatDateTimeCombined = (start, end) => {
    if (!start || !end) return null;
    const startDate = new Date(start);
    const endDate = new Date(end);
    const dateStr = startDate.toLocaleDateString('id-ID', { day: 'numeric', month: 'short', year: 'numeric' });
    const startTime = startDate.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' });
    const endTime = endDate.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' });
    return (
        <TimePeriodCell>
            <div className="start-time">{dateStr}</div>
            <div className="end-time">{startTime} - {endTime}</div>
        </TimePeriodCell>
    );
};

function ShiftHistoryPage() {
    const [history, setHistory] = useState([]);
    const [loading, setLoading] = useState(true);
    const [userRole, setUserRole] = useState(null);
    const [modalState, setModalState] = useState({ isOpen: false, action: null, id: null, title: '', message: '' });

    const fetchHistory = useCallback(async () => {
        setLoading(true);
        try {
            const res = await getShiftHistory();
            setHistory(res.data);
        } catch (error) {
            toast.error("Gagal memuat riwayat shift.");
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            try {
                const decoded = jwtDecode(token);
                setUserRole(decoded.role ? decoded.role.toLowerCase() : null);
            } catch (error) {
                console.error("Invalid token:", error);
                setUserRole(null);
            }
        }
        fetchHistory();
    }, [fetchHistory]);

    const openConfirmation = (action, id = null) => {
        let title = '';
        let message = '';
        if (action === 'delete') {
            title = 'Hapus Shift';
            message = `Yakin ingin menghapus riwayat shift #${id}?`;
        } else if (action === 'clearAll') {
            title = 'Hapus Semua Riwayat';
            message = 'Yakin ingin menghapus SELURUH riwayat shift? Aksi ini tidak dapat dibatalkan.';
        }
        setModalState({ isOpen: true, action, id, title, message });
    };

    const handleExport = async () => {
        toast.info("Mempersiapkan data untuk diunduh...");
        try {
            const response = await exportShiftHistory();
            const url = window.URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', `riwayat-shift-${new Date().toISOString().slice(0, 10)}.csv`);
            document.body.appendChild(link);
            link.click();
            link.remove();
            toast.success("Laporan berhasil diunduh!");
        } catch (error) {
            toast.error(error.response?.data?.message || "Gagal mengekspor data.");
        }
    };

    const handleConfirm = async () => {
        const { action, id } = modalState;
        setModalState({ isOpen: false, action: null, id: null, title: '', message: '' });
        let promise;
        if (action === 'delete') {
            promise = deleteShift(id);
        } else if (action === 'clearAll') {
            promise = clearShiftHistory();
        }
        if (promise) {
            await toast.promise(promise, {
                pending: 'Memproses...',
                success: 'Aksi berhasil dijalankan!',
                error: (err) => err.response?.data?.message || 'Gagal menjalankan aksi.'
            });
            fetchHistory();
        }
    };
    
    // Perbaikan: Hapus logika loading dari sini, serahkan ke PageWrapper
    const renderContent = () => {
        if (history.length === 0) {
            return (
                <EmptyStateContainer>
                    <FiClock size={48} />
                    <p style={{marginTop: '15px'}}>Belum ada riwayat shift yang ditutup.</p>
                </EmptyStateContainer>
            );
        }
        return (
            <>
                <TableWrapper>
                    <Table>
                        <thead>
                            <tr>
                                <Th>Kasir</Th> 
                                <Th>Waktu Shift</Th>
                                <Th>Kas Awal</Th> 
                                <Th>Total Penjualan</Th>
                                <Th>Kas Akhir Sistem</Th>
                                {userRole === 'admin' && <Th>Aksi</Th>}
                            </tr>
                        </thead>
                        <tbody>
                            {history.map((shift, i) => {
                                const nonCashSales = (parseFloat(shift.card_sales) || 0) + (parseFloat(shift.qris_sales) || 0) + (parseFloat(shift.other_sales) || 0);
                                return (
                                    <Tr key={shift.id} custom={i} initial="hidden" animate="visible" variants={tableRowVariants}>
                                        <Td className="text-left">{shift.user_name}</Td> 
                                        <Td>{formatDateTimeCombined(shift.start_time, shift.end_time)}</Td>
                                        <Td className="nowrap">{formatCurrency(shift.starting_cash)}</Td>
                                        <Td className="nowrap">
                                            <strong>{formatCurrency(shift.total_sales)}</strong>
                                            <SalesDetail>
                                                Tunai: {formatCurrency(shift.cash_sales)} <br/>
                                                Non-Tunai: {formatCurrency(nonCashSales)}
                                            </SalesDetail>
                                        </Td>
                                        <Td className="nowrap">{formatCurrency(shift.expected_cash)}</Td>
                                        {userRole === 'admin' && (
                                            <Td>
                                                <ActionButton onClick={() => openConfirmation('delete', shift.id)}>
                                                    <FiTrash2 size={18} />
                                                </ActionButton>
                                            </Td>
                                        )}
                                    </Tr>
                                );
                            })}
                        </tbody>
                    </Table>
                </TableWrapper>

                <CardList>
                    {history.map((shift, i) => {
                        const nonCashSales = (parseFloat(shift.card_sales) || 0) + (parseFloat(shift.qris_sales) || 0) + (parseFloat(shift.other_sales) || 0);
                        return (
                            <ShiftCard key={shift.id} custom={i} initial="hidden" animate="visible" variants={tableRowVariants}>
                                <CardHeader>
                                    <div>
                                        <CardTitle>{shift.user_name}</CardTitle>
                                        <CardDate>{new Date(shift.start_time).toLocaleDateString('id-ID', { day: 'numeric', month: 'short', year: 'numeric' })}</CardDate>
                                    </div>
                                    {userRole === 'admin' && (
                                        <ActionButton onClick={() => openConfirmation('delete', shift.id)}>
                                            <FiTrash2 size={18} />
                                        </ActionButton>
                                    )}
                                </CardHeader>
                                <CardBody>
                                    <InfoItem><strong>{formatCurrency(shift.starting_cash)}</strong><span>Kas Awal</span></InfoItem>
                                    <InfoItem><strong>{formatCurrency(shift.total_sales)}</strong><span>Total Penjualan</span></InfoItem>
                                    <InfoItem><strong>{formatCurrency(shift.expected_cash)}</strong><span>Kas Akhir Sistem</span></InfoItem>
                                    <InfoItem>
                                        <strong>{formatCurrency(shift.cash_sales)}</strong>
                                        <span>Penjualan Tunai</span>
                                    </InfoItem>
                                    <InfoItem>
                                        <strong>{formatCurrency(nonCashSales)}</strong>
                                        <span>Penjualan Non-Tunai</span>
                                    </InfoItem>
                                </CardBody>
                            </ShiftCard>
                        );
                    })}
                </CardList>
            </>
        );
    };

    return (
        <>
            <PageWrapper loading={loading}>
                <PageContent>
                    <PageHeader>
                        <Title><FiClock /> Riwayat Shift</Title>
                        {userRole === 'admin' && (
                            <HeaderActions>
                                <ExportButton onClick={handleExport}><FiDownload/> Ekspor CSV</ExportButton>
                                <ClearHistoryButton onClick={() => openConfirmation('clearAll')}>
                                    <FiAlertTriangle /> Hapus Semua Riwayat
                                </ClearHistoryButton>
                            </HeaderActions>
                        )}
                    </PageHeader>
                    <TableContainer>
                        {renderContent()}
                    </TableContainer>
                </PageContent>
            </PageWrapper>
            <ConfirmationModal
                isOpen={modalState.isOpen}
                onClose={() => setModalState({ ...modalState, isOpen: false })}
                onConfirm={handleConfirm}
                title={modalState.title}
                message={modalState.message}
            />
        </>
    );
}

export default ShiftHistoryPage;

===== frontend\src\pages\StockAdjustmentPage.jsx =====
// frontend/src/pages/StockAdjustmentPage.jsx
import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { getProducts, adjustStock } from '../services/api';
import { toast } from 'react-toastify';
import { FiArrowLeft, FiSave, FiSearch } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';

// --- Styled Components ---
const PageContainer = styled.div`
    padding: 30px;
    max-width: 1200px;
    margin: 0 auto;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
`;

const Title = styled.h1`
    font-size: 1.8rem;
`;

const BackButton = styled.button`
    background-color: var(--bg-surface);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 10px 18px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover {
        background-color: var(--bg-main);
    }
`;

const MainGrid = styled.div`
    display: grid;
    grid-template-columns: 1fr 1.5fr;
    gap: 30px;
`;

const Panel = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    padding: 25px;
    height: 70vh;
    display: flex;
    flex-direction: column;
`;

const PanelTitle = styled.h2`
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0 0 20px 0;
    padding-bottom: 20px;
    border-bottom: 1px solid var(--border-color);
`;

const SearchInput = styled.input`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: var(--bg-main); /* Sinkron dengan theme */
    color: var(--text-primary); /* Sinkron dengan theme */

    &::placeholder {
        color: var(--text-placeholder); /* Sinkron dengan theme */
        opacity: 0.8; /* Sedikit transparansi untuk placeholder */
    }

    &:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 98, 0, 234), 0.2);
    }
`;

const ProductList = styled.ul`
    list-style: none;
    padding: 0;
    overflow-y: auto;
    flex-grow: 1;
`;

const ListItem = styled.li`
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    border-radius: 8px;
    cursor: pointer;
    background-color: ${props => props.$isSelected ? 'var(--primary-color)15' : 'transparent'};
    &:hover {
        background-color: var(--bg-main);
    }
`;

const Form = styled.form`
    display: flex;
    flex-direction: column;
    gap: 20px;
`;

const InputGroup = styled.div``;

const Label = styled.label`
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    font-size: 0.9rem;
    color: var(--text-secondary);
`;

const Input = styled.input`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background-color: var(--bg-main);
    color: var(--text-primary);
    font-size: 1rem;
`;
const Select = styled.select`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background-color: var(--bg-main);
    color: var(--text-primary);
    font-size: 1rem;
`;

const SaveButton = styled.button`
    padding: 12px 25px;
    border-radius: 8px;
    border: none;
    background-color: var(--primary-color);
    color: white;
    font-weight: 600;
    cursor: pointer;
    align-self: flex-end;
    margin-top: 10px;
    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
`;

function StockAdjustmentPage() {
    const navigate = useNavigate();
    const [products, setProducts] = useState([]);
    const [filteredProducts, setFilteredProducts] = useState([]);
    const [selectedProduct, setSelectedProduct] = useState(null);
    const [formData, setFormData] = useState({ newStockQuantity: '', type: 'adjustment', reason: '' });
    const [loading, setLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);

    useEffect(() => {
        const fetchAllProducts = async () => {
            try {
                const res = await getProducts();
                setProducts(res.data);
                setFilteredProducts(res.data);
            } catch (error) {
                toast.error("Gagal memuat produk.");
            } finally {
                setLoading(false);
            }
        };
        fetchAllProducts();
    }, []);

    const handleSearch = (e) => {
        const term = e.target.value.toLowerCase();
        setFilteredProducts(products.filter(p => p.name.toLowerCase().includes(term)));
    };

    const handleSelectProduct = (product) => {
        setSelectedProduct(product);
        setFormData({ newStockQuantity: product.stock, type: 'adjustment', reason: '' });
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!selectedProduct) return toast.warn("Pilih produk terlebih dahulu.");
        if (formData.newStockQuantity === '' || isNaN(formData.newStockQuantity)) return toast.error("Jumlah stok baru harus berupa angka.");

        setIsSubmitting(true);
        const dataToSend = {
            productId: selectedProduct.id,
            newStockQuantity: parseInt(formData.newStockQuantity, 10),
            type: formData.type,
            reason: formData.reason,
        };

        try {
            await toast.promise(adjustStock(dataToSend), {
                pending: 'Menyimpan penyesuaian stok...',
                success: 'Stok berhasil diperbarui!',
                error: 'Gagal memperbarui stok.'
            });
            // Reset state & refresh data
            setSelectedProduct(null);
            setFormData({ newStockQuantity: '', type: 'adjustment', reason: '' });
            const res = await getProducts();
            setProducts(res.data);
            setFilteredProducts(res.data);
        } catch (error) {
            console.error(error);
        } finally {
            setIsSubmitting(false);
        }
    };
    
    return (
        <PageContainer>
            <PageHeader>
                <Title>Penyesuaian Stok</Title>
                <BackButton onClick={() => navigate('/dashboard')}><FiArrowLeft size={18} /> Kembali</BackButton>
            </PageHeader>
            <MainGrid>
                <Panel>
                    <PanelTitle>Pilih Produk</PanelTitle>
                    <SearchInput placeholder="Cari produk..." onChange={handleSearch} />
                    {loading ? <Skeleton count={10} /> : (
                        <ProductList>
                            {filteredProducts.map(p => (
                                <ListItem key={p.id} onClick={() => handleSelectProduct(p)} $isSelected={selectedProduct?.id === p.id}>
                                    <span>{p.name}</span>
                                    <strong>Stok: {p.stock}</strong>
                                </ListItem>
                            ))}
                        </ProductList>
                    )}
                </Panel>
                <Panel>
                    <PanelTitle>Detail Penyesuaian</PanelTitle>
                    {selectedProduct ? (
                        <Form onSubmit={handleSubmit}>
                            <h3>{selectedProduct.name}</h3>
                            <p>Stok saat ini di sistem: <strong>{selectedProduct.stock}</strong></p>
                            <InputGroup>
                                <Label>Tipe Penyesuaian</Label>
                                <Select name="type" value={formData.type} onChange={handleChange}>
                                    <option value="adjustment">Stok Opname / Penyesuaian</option>
                                    <option value="damage">Barang Rusak</option>
                                    <option value="return">Retur Barang</option>
                                    <option value="other">Lainnya</option>
                                </Select>
                            </InputGroup>
                            <InputGroup>
                                <Label>Jumlah Stok Fisik Baru</Label>
                                <Input type="number" name="newStockQuantity" value={formData.newStockQuantity} onChange={handleChange} required />
                            </InputGroup>
                            <InputGroup>
                                <Label>Alasan/Catatan (Opsional)</Label>
                                <Input as="textarea" rows="3" name="reason" value={formData.reason} onChange={handleChange} />
                            </InputGroup>
                            <SaveButton type="submit" disabled={isSubmitting}>
                                <FiSave /> {isSubmitting ? 'Menyimpan...' : 'Simpan Penyesuaian'}
                            </SaveButton>
                        </Form>
                    ) : (
                        <div style={{ margin: 'auto', textAlign: 'center', color: 'var(--text-secondary)' }}>
                            <p>Silakan pilih produk dari daftar di sebelah kiri untuk melakukan penyesuaian stok.</p>
                        </div>
                    )}
                </Panel>
            </MainGrid>
        </PageContainer>
    );
}

export default StockAdjustmentPage;

===== frontend\src\pages\SupplierPage.jsx =====
import React, { useState } from 'react';
import styled from 'styled-components';
import { getSuppliers, createSupplier, updateSupplier, deleteSupplier } from '../services/api';
import SupplierFormModal from '../components/SupplierFormModal';
import ConfirmationModal from '../components/ConfirmationModal';
import { toast } from 'react-toastify';
import { FiEdit, FiTrash2, FiPlus, FiTruck } from 'react-icons/fi';
import { motion } from 'framer-motion';
import PageWrapper from '../components/PageWrapper';
import { useDataFetching } from '../hooks/useDataFetching';

// --- Styled Components ---
const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;
const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
`;
const Title = styled.h1`
    font-size: 1.8rem;
    display: flex;
    align-items: center;
    gap: 12px;
`;
const AddButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover { background-color: var(--primary-hover); }
`;
const TableContainer = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
`;
const TableWrapper = styled.div`
    flex-grow: 1;
    overflow-y: auto;
`;
const Table = styled.table`
    width: 100%;
    border-collapse: collapse;
`;
const Th = styled.th`
    text-align: left;
    padding: 15px 20px;
    background-color: var(--bg-main);
    border-bottom: 1px solid var(--border-color);
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.9rem;
    text-transform: uppercase;
`;
const Td = styled.td`
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    vertical-align: middle;
`;
const Tr = styled(motion.tr)`
    &:last-child > td {
        border-bottom: none;
    }
`;
const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    margin-right: 15px;
    &:hover { color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'}; }
`;
const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
`;
const EmptyStateTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-top: 20px;
    margin-bottom: 10px;
`;

const tableRowVariants = {
    hidden: { opacity: 0, y: -10 },
    visible: (i) => ({ opacity: 1, y: 0, transition: { delay: i * 0.05 } }),
};

function SupplierPage() {
    const { data: suppliers, loading, refetch: fetchSuppliers } = useDataFetching(getSuppliers, "Gagal memuat data pemasok.");
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingSupplier, setEditingSupplier] = useState(null);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [isConfirmOpen, setIsConfirmOpen] = useState(false);
    const [supplierToDelete, setSupplierToDelete] = useState(null);

    const handleOpenModal = (supplier = null) => {
        setEditingSupplier(supplier);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setEditingSupplier(null);
    };

    const handleSaveSupplier = async (supplierData) => {
        setIsSubmitting(true);
        const promise = editingSupplier
            ? updateSupplier(editingSupplier.id, supplierData)
            : createSupplier(supplierData);
        try {
            await toast.promise(promise, {
                pending: 'Menyimpan data...',
                success: 'Data berhasil disimpan!',
                error: (err) => err.response?.data?.message || 'Gagal menyimpan data.'
            });
            fetchSuppliers();
        } catch (err) {
            console.error(err);
        } finally {
            setIsSubmitting(false);
            handleCloseModal();
        }
    };
    
    const openDeleteConfirmation = (supplier) => {
        setSupplierToDelete(supplier);
        setIsConfirmOpen(true);
    };

    const confirmDelete = async () => {
        if (!supplierToDelete) return;
        try {
            await toast.promise(deleteSupplier(supplierToDelete.id), {
                pending: 'Menghapus data...',
                success: 'Pemasok berhasil diarsipkan!',
                error: (err) => err.response?.data?.message || 'Gagal menghapus data.'
            });
            fetchSuppliers();
        } catch (err) {
            console.error("Delete supplier error:", err);
        } finally {
            setIsConfirmOpen(false);
            setSupplierToDelete(null);
        }
    };

    const renderTableContent = () => {
        if (!loading && suppliers.length === 0) {
            return (
                <EmptyStateContainer>
                    <FiTruck size={48} />
                    <EmptyStateTitle>Belum Ada Pemasok</EmptyStateTitle>
                    <p>Klik tombol di pojok kanan atas untuk menambahkan pemasok pertama Anda.</p>
                </EmptyStateContainer>
            );
        }
        return (
            <TableWrapper>
                <Table>
                    <thead>
                        <tr>
                            <Th>Nama Pemasok</Th>
                            <Th>Narahubung</Th>
                            <Th>Telepon</Th>
                            <Th>Email</Th>
                            <Th>Aksi</Th>
                        </tr>
                    </thead>
                    <tbody>
                        {suppliers.map((supplier, i) => (
                            <Tr key={supplier.id} custom={i} initial="hidden" animate="visible" variants={tableRowVariants}>
                                <Td>{supplier.name}</Td>
                                <Td>{supplier.contact_person || '-'}</Td>
                                <Td>{supplier.phone || '-'}</Td>
                                <Td>{supplier.email || '-'}</Td>
                                <Td>
                                    <ActionButton onClick={() => handleOpenModal(supplier)}><FiEdit size={18} /></ActionButton>
                                    <ActionButton $danger onClick={() => openDeleteConfirmation(supplier)}><FiTrash2 size={18} /></ActionButton>
                                </Td>
                            </Tr>
                        ))}
                    </tbody>
                </Table>
            </TableWrapper>
        );
    };

    return (
        <>
            <PageWrapper loading={loading}>
                <PageContainer>
                    <PageHeader>
                        <Title><FiTruck /> Manajemen Pemasok</Title>
                        <AddButton onClick={() => handleOpenModal()}>
                            <FiPlus /> Tambah Pemasok
                        </AddButton>
                    </PageHeader>
                    <TableContainer>
                        {renderTableContent()}
                    </TableContainer>
                </PageContainer>
            </PageWrapper>

            <SupplierFormModal 
                isOpen={isModalOpen}
                onClose={handleCloseModal}
                onSave={handleSaveSupplier}
                supplier={editingSupplier}
                isSubmitting={isSubmitting}
            />
            <ConfirmationModal
                isOpen={isConfirmOpen}
                onClose={() => setIsConfirmOpen(false)}
                onConfirm={confirmDelete}
                title="Konfirmasi Pengarsipan"
                message={`Apakah Anda yakin ingin mengarsipkan pemasok "${supplierToDelete?.name}"? Aksi ini tidak dapat dibatalkan.`}
            />
        </>
    );
}

export default SupplierPage;

===== frontend\src\pages\TargetPage.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\TargetPage.jsx
import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import { getRevenueTarget, saveRevenueTarget } from '../services/api';
import { toast } from 'react-toastify';
import { FiArrowLeft, FiTarget, FiDollarSign, FiCalendar, FiSun } from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';

// --- Styled Components (Tidak Ada Perubahan) ---
const PageContainer = styled.div`
    padding: 30px;
    max-width: 900px;
    margin: 0 auto;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
`;

const Title = styled.h1`
    font-size: 1.8rem;
    display: flex;
    align-items: center;
    gap: 12px;
`;

const BackButton = styled.button`
    background-color: var(--bg-surface);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 10px 18px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover { background-color: var(--bg-main); }
`;

const Grid = styled.div`
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    @media (max-width: 768px) {
        grid-template-columns: 1fr;
    }
`;

const SettingsCard = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    padding: 25px;
`;

const CardTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    padding-bottom: 15px;
    margin: 0 0 25px 0;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    gap: 10px;
`;

const Form = styled.form`
    display: flex;
    flex-direction: column;
    gap: 20px;
`;

const InputGroup = styled.div``;

const Label = styled.label`
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--text-secondary);
`;

const Input = styled.input`
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    font-size: 1rem;
    background-color: var(--bg-main);
    color: var(--text-primary);
    &:focus { outline: none; border-color: var(--primary-color); }
`;

const Button = styled.button`
    padding: 12px 20px;
    border-radius: 8px;
    border: none;
    background-color: var(--primary-color);
    color: white;
    font-weight: 600;
    cursor: pointer;
    align-self: flex-end;
    &:hover { opacity: 0.9; }
`;

const CalculationResult = styled.div`
    background-color: var(--bg-main);
    border-radius: 8px;
    padding: 15px;
    margin-top: 15px;
    p {
        margin: 0 0 8px 0;
        color: var(--text-secondary);
        strong {
            color: var(--text-primary);
        }
    }
`;

// --- FUNGSI HELPER UNTUK FORMAT ANGKA ---
const formatToCurrency = (value) => {
    if (!value) return '';
    const number = Number(String(value).replace(/[^0-9]/g, ''));
    if (isNaN(number)) return '';
    return new Intl.NumberFormat('id-ID').format(number);
};

const parseFromCurrency = (value) => {
    if (!value) return '';
    return String(value).replace(/[^0-9]/g, '');
};


function TargetPage() {
    const navigate = useNavigate();
    const [monthlyTarget, setMonthlyTarget] = useState('');
    const [calculatorTarget, setCalculatorTarget] = useState('');
    const [loading, setLoading] = useState(true);
    const [calculation, setCalculation] = useState(null);

    useEffect(() => {
        const fetchTarget = async () => {
            try {
                const res = await getRevenueTarget();
                const targetValue = res.data.monthly_revenue_target || '';
                setMonthlyTarget(targetValue);
                setCalculatorTarget(targetValue);
            } catch (error) {
                toast.error("Gagal memuat target pendapatan.");
            } finally {
                setLoading(false);
            }
        };
        fetchTarget();
    }, []);

    const handleTargetSave = async (e) => {
        e.preventDefault();
        const targetValue = parseFloat(monthlyTarget);
        if (isNaN(targetValue) || targetValue < 0) {
            toast.error("Mohon masukkan angka yang valid.");
            return;
        }
        try {
            await toast.promise(saveRevenueTarget({ target: targetValue }), {
                pending: 'Menyimpan target...',
                success: 'Target pendapatan berhasil disimpan!',
                error: 'Gagal menyimpan target.'
            });
        } catch (error) {
            console.error("Error saving target:", error);
        }
    };
    
    useEffect(() => {
        const target = parseFloat(calculatorTarget);
        if (!isNaN(target) && target > 0) {
            const daysInMonth = 30; // Asumsi rata-rata 30 hari
            const weeksInMonth = 4; // Asumsi 4 minggu
            setCalculation({
                daily: target / daysInMonth,
                // ✅ PERBAIKAN: Target mingguan dibagi 4, bukan dikali 7 dari harian
                weekly: target / weeksInMonth,
            });
        } else {
            setCalculation(null);
        }
    }, [calculatorTarget]);
    
    const formatDisplayCurrency = (value) => `Rp ${formatToCurrency(value)}`;
    const formatCalculatedCurrency = (value) => new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR', minimumFractionDigits: 0, maximumFractionDigits: 2 }).format(value);

    return (
        <PageContainer>
            <PageHeader>
                <Title><FiTarget /> Pengaturan Target</Title>
                <BackButton onClick={() => navigate('/dashboard')}>
                    <FiArrowLeft size={18} />
                    Kembali ke Dashboard
                </BackButton>
            </PageHeader>
            
            {loading ? <Skeleton height={300} /> : (
                <Grid>
                    <SettingsCard>
                        <CardTitle><FiCalendar /> Target Pendapatan Bulanan</CardTitle>
                        <Form onSubmit={handleTargetSave}>
                            <InputGroup>
                                <Label htmlFor="monthlyTarget">Masukkan Target (Rp)</Label>
                                <Input
                                    id="monthlyTarget"
                                    type="text"
                                    value={formatDisplayCurrency(monthlyTarget)}
                                    onChange={(e) => setMonthlyTarget(parseFromCurrency(e.target.value))}
                                    placeholder="Contoh: 50.000.000"
                                />
                                <small style={{ color: 'var(--text-secondary)', marginTop: '5px', display: 'block' }}>
                                    Target ini akan digunakan untuk melacak progres di dasbor.
                                </small>
                            </InputGroup>
                            <Button type="submit">Simpan Target</Button>
                        </Form>
                    </SettingsCard>
                    
                    <SettingsCard>
                        <CardTitle><FiDollarSign /> Kalkulator Target</CardTitle>
                        <InputGroup>
                            <Label htmlFor="calculatorTarget">Jika Saya Ingin Pendapatan (Rp)</Label>
                            <Input
                                id="calculatorTarget"
                                type="text"
                                value={formatDisplayCurrency(calculatorTarget)}
                                onChange={(e) => setCalculatorTarget(parseFromCurrency(e.target.value))}
                                placeholder="Masukkan target bulanan..."
                            />
                        </InputGroup>

                        {calculation && (
                            <CalculationResult>
                                <p>Maka, Anda perlu mendapatkan:</p>
                                <p><FiSun /> Target Harian: <strong>{formatCalculatedCurrency(calculation.daily)}</strong></p>
                                <p><FiCalendar /> Target Mingguan: <strong>{formatCalculatedCurrency(calculation.weekly)}</strong></p>
                            </CalculationResult>
                        )}
                    </SettingsCard>
                </Grid>
            )}
        </PageContainer>
    );
}

export default TargetPage;

===== frontend\src\pages\UsersPage.jsx =====
import React, { useState, useEffect, useCallback } from 'react';
import styled from 'styled-components';
import { getUsers, deleteUser, getRoles, createUserByAdmin, updateUser } from '../services/api';
import { toast } from 'react-toastify';
import { FiUserPlus, FiEdit, FiTrash2, FiUsers } from 'react-icons/fi';
import ConfirmationModal from '../components/ConfirmationModal';
import UserFormModal from '../components/UserFormModal';
import { motion } from 'framer-motion';
import PageWrapper from '../components/PageWrapper';

// --- Styled Components ---
const PageContainer = styled.div`
    padding: 30px;
    height: 100%;
    display: flex;
    flex-direction: column;
`;

const PageHeader = styled.header`
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-shrink: 0;
`;

const Title = styled.h1`
    font-size: 1.8rem;
    display: flex;
    align-items: center;
    gap: 12px;
`;

const AddButton = styled.button`
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 10px 20px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    &:hover {
        background-color: var(--primary-hover);
    }
`;

const TableContainer = styled.div`
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
`;

const TableWrapper = styled.div`
    flex-grow: 1;
    overflow-y: auto;
`;

const Table = styled.table`
    width: 100%;
    border-collapse: collapse;
`;

const Th = styled.th`
    text-align: left;
    padding: 15px 20px;
    background-color: var(--bg-main);
    border-bottom: 1px solid var(--border-color);
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.9rem;
    text-transform: uppercase;
    position: sticky;
    top: 0;
`;

const Td = styled.td`
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    vertical-align: middle;
`;

const Tr = styled(motion.tr)`
    &:last-child > td {
        border-bottom: none;
    }
`;

const ActionButton = styled.button`
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    margin: 0 5px;
    &:hover {
        color: ${props => props.$danger ? 'var(--red-color)' : 'var(--primary-color)'};
    }
`;

const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    padding: 20px;
`;

const EmptyStateTitle = styled.h3`
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-top: 20px;
    margin-bottom: 10px;
`;

// Animation variants for table rows
const tableRowVariants = {
    hidden: { opacity: 0, y: -10 },
    visible: (i) => ({
        opacity: 1,
        y: 0,
        transition: { delay: i * 0.05 },
    }),
};

function UsersPage() {
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isConfirmOpen, setIsConfirmOpen] = useState(false);
    const [userToDelete, setUserToDelete] = useState(null);
    const [isFormModalOpen, setIsFormModalOpen] = useState(false);
    const [editingUser, setEditingUser] = useState(null);
    const [roles, setRoles] = useState([]);
    const [isSubmitting, setIsSubmitting] = useState(false);

    const fetchUsersAndRoles = useCallback(async () => {
        setLoading(true);
        try {
            const [usersRes, rolesRes] = await Promise.all([getUsers(), getRoles()]);
            setUsers(usersRes.data);
            setRoles(rolesRes.data);
        } catch (error) {
            toast.error("Gagal memuat data pengguna atau peran.");
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchUsersAndRoles();
    }, [fetchUsersAndRoles]);

    const handleOpenModal = (user = null) => {
        setEditingUser(user);
        setIsFormModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsFormModalOpen(false);
        setEditingUser(null);
    };

    const handleSaveUser = async (userData) => {
        setIsSubmitting(true);
        const isEditing = Boolean(editingUser);
        const promise = isEditing
            ? updateUser(editingUser.id, userData)
            : createUserByAdmin(userData);
        try {
            await toast.promise(promise, {
                pending: isEditing ? 'Menyimpan perubahan...' : 'Menambahkan pengguna...',
                success: 'Pengguna berhasil disimpan!',
                error: (err) => err.response?.data?.message || 'Gagal menyimpan data.'
            });
            fetchUsersAndRoles();
            handleCloseModal();
        } catch (error) {
            // Toast will show the error, console.error is for debugging
            console.error("Save user failed:", error);
        } finally {
            setIsSubmitting(false);
        }
    };

    const openDeleteConfirmation = (user) => {
        setUserToDelete(user);
        setIsConfirmOpen(true);
    };

    const confirmDelete = async () => {
        if (!userToDelete) return;
        const deletePromise = deleteUser(userToDelete.id);
        try {
            await toast.promise(deletePromise, {
                pending: 'Menonaktifkan pengguna...',
                success: 'Pengguna berhasil dinonaktifkan!',
                error: (err) => err.response?.data?.message || 'Gagal menonaktifkan pengguna.'
            });
            fetchUsersAndRoles();
        } catch (error) {
            console.error("Deactivate user error:", error);
        } finally {
            setIsConfirmOpen(false);
            setUserToDelete(null);
        }
    };

    const renderTableContent = () => {
        if (!loading && users.length === 0) {
            return (
                <EmptyStateContainer>
                    <FiUsers size={48} />
                    <EmptyStateTitle>Tidak Ada Pengguna</EmptyStateTitle>
                    <p>Klik tombol "Tambah Pengguna" untuk menambahkan yang pertama.</p>
                </EmptyStateContainer>
            );
        }

        return (
            <TableWrapper>
                <Table>
                    <thead>
                        <tr>
                            <Th>Nama</Th>
                            <Th>Email</Th>
                            <Th>Peran</Th>
                            <Th style={{ textAlign: 'center' }}>Aksi</Th>
                        </tr>
                    </thead>
                    <tbody>
                        {users.map((user, i) => (
                            <Tr key={user.id} custom={i} initial="hidden" animate="visible" variants={tableRowVariants}>
                                <Td>{user.name}</Td>
                                <Td>{user.email}</Td>
                                <Td>{user.role_name}</Td>
                                <Td style={{ textAlign: 'center' }}>
                                    <ActionButton onClick={() => handleOpenModal(user)}>
                                        <FiEdit size={18} />
                                    </ActionButton>
                                    <ActionButton $danger onClick={() => openDeleteConfirmation(user)}>
                                        <FiTrash2 size={18} />
                                    </ActionButton>
                                </Td>
                            </Tr>
                        ))}
                    </tbody>
                </Table>
            </TableWrapper>
        );
    };

    return (
        <>
            <PageWrapper loading={loading}>
                <PageContainer>
                    <PageHeader>
                        <Title><FiUsers /> Manajemen Pengguna</Title>
                        <AddButton onClick={() => handleOpenModal()}>
                            <FiUserPlus size={18} /> Tambah Pengguna
                        </AddButton>
                    </PageHeader>
                    <TableContainer>
                        {renderTableContent()}
                    </TableContainer>
                </PageContainer>
            </PageWrapper>
            
            <ConfirmationModal
                isOpen={isConfirmOpen}
                onClose={() => setIsConfirmOpen(false)}
                onConfirm={confirmDelete}
                title="Konfirmasi Penonaktifan"
                message={`Apakah Anda yakin ingin menonaktifkan pengguna "${userToDelete?.name}"?`}
            />

            <UserFormModal
                isOpen={isFormModalOpen}
                onClose={handleCloseModal}
                onSave={handleSaveUser}
                user={editingUser}
                roles={roles}
                isSubmitting={isSubmitting}
            />
        </>
    );
}

export default UsersPage;

===== frontend\src\pages\Dashboard\DashboardPage.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\DashboardPage.jsx

import React, { useState, useEffect, useRef, useCallback } from 'react';
import styled from 'styled-components';
import { useReactToPrint } from 'react-to-print';
import { jwtDecode } from 'jwt-decode';
import { toast } from 'react-toastify';
import "react-datepicker/dist/react-datepicker.css";
import {
    getStats, getDailyRevenueProfit, getTopProducts,
    getCashierPerformance, getNotifications, getInsights,
    getRevenueTarget, getStockInfo, getStaleProducts, getExpiredProducts,
    getTopCustomers
} from '../../services/api';
import { motion } from 'framer-motion';
import PageWrapper from '../../components/PageWrapper';
import DashboardHeader from './components/DashboardHeader';
import StatCardGrid from './components/StatCardGrid';
import DailyReport from '../../components/DailyReport';
import NotificationsPanel from './components/NotificationsPanel';
import TopProductsChart from './components/TopProductsChart';
import TargetChart from '../../components/TargetChart';
import ProfitRevenueChart from './components/ProfitRevenueChart';
import TopCustomersList from './components/TopCustomersList';
import StockInfoList from './components/StockInfoList';
// ==========================================================
// ✅ PERBAIKAN: Path impor telah diperbaiki di sini
// ==========================================================
import StaleProductsList from "./components/StaleProductsList";
// ==========================================================
import ExpiredProductsList from './components/ExpiredProductsList';
import CashierPerformanceList from './components/CashierPerformanceList';
import { useShift } from '../../context/ShiftContext';
import StartShiftModal from '../../components/StartShiftModal';
import CloseShiftModal from '../../components/CloseShiftModal';

const DashboardGrid = styled(motion.div)`
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    gap: 24px;
    width: 100%;
`;

const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
        y: 0,
        opacity: 1,
        transition: {
            type: "spring",
            stiffness: 100
        }
    }
};

function DashboardPage() {
    const [currentTime, setCurrentTime] = useState(new Date());
    const [userName, setUserName] = useState('Pengguna');
    const [loading, setLoading] = useState(true);
    const [dashboardData, setDashboardData] = useState({
        stats: { current: {}, previous: null },
        dailyRevenueProfit: [],
        topCustomers: [],
        stockInfo: [],
        staleProducts: [],
        expiredProducts: [],
        cashierPerformance: [],
        notifications: [],
        insights: [],
        topProducts: [],
    });
    const [revenueTarget, setRevenueTarget] = useState(0);
    const [dailyReportData, setDailyReportData] = useState(null);
    const reportRef = useRef();
    const { activeShift, refreshShiftStatus } = useShift();
    const [isStartShiftModalOpen, setStartShiftModalOpen] = useState(false);
    const [isCloseShiftModalOpen, setCloseShiftModalOpen] = useState(false);
    const [startDate, setStartDate] = useState(new Date(new Date().setDate(new Date().getDate() - 29)));
    const [endDate, setEndDate] = useState(new Date());

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            try {
                const [
                    statsData, revenueTargetData, dailyRevenueProfitData, topCustomersData, stockInfoData,
                    staleProductsData, expiredProductsData, cashierPerformanceData,
                    notificationsData, insightsData, topProductsData
                ] = await Promise.all([
                    getStats(startDate, endDate),
                    getRevenueTarget(),
                    getDailyRevenueProfit(startDate, endDate),
                    getTopCustomers(startDate, endDate),
                    getStockInfo(),
                    getStaleProducts(),
                    getExpiredProducts(),
                    getCashierPerformance(startDate, endDate),
                    getNotifications(),
                    getInsights(startDate, endDate),
                    getTopProducts(startDate, endDate),
                ]);
                setDashboardData({
                    stats: statsData.data,
                    dailyRevenueProfit: dailyRevenueProfitData.data,
                    topCustomers: topCustomersData.data,
                    stockInfo: stockInfoData.data,
                    staleProducts: staleProductsData.data,
                    expiredProducts: expiredProductsData.data,
                    cashierPerformance: cashierPerformanceData.data,
                    notifications: notificationsData.data,
                    insights: insightsData.data,
                    topProducts: topProductsData.data,
                });
                setRevenueTarget(revenueTargetData.data.monthly_revenue_target);
            } catch (error) {
                toast.error("Gagal memuat data dashboard.");
            } finally {
                setLoading(false);
            }
        };
        
        fetchData();
    }, [startDate, endDate]);

    useEffect(() => {
        const timer = setInterval(() => setCurrentTime(new Date()), 1000);
        const token = localStorage.getItem('token');
        if (token) setUserName(jwtDecode(token).name || 'Kasir');
        return () => clearInterval(timer);
    }, []);

    const handlePrepareDailyReport = useCallback(() => {
        const reportPayload = {
            startDate,
            endDate,
            ...dashboardData.stats.current,
            topProducts: dashboardData.topProducts,
        };
        setDailyReportData(reportPayload);
        toast.info("Laporan harian siap, klik 'Cetak Laporan' untuk mencetak.");
    }, [startDate, endDate, dashboardData]);

    const handleManualPrint = useReactToPrint({ 
        content: () => reportRef.current,
        documentTitle: `Laporan-Harian-${new Date().toISOString().slice(0, 10)}`
    });
    
    useEffect(() => {
        if (dailyReportData) {
            handleManualPrint();
        }
    }, [dailyReportData, handleManualPrint]);


    return (
        <>
            <PageWrapper loading={loading}>
                <DashboardGrid
                    initial="hidden"
                    animate="visible"
                    variants={{
                        hidden: { opacity: 0 },
                        visible: {
                            opacity: 1,
                            transition: {
                                staggerChildren: 0.1
                            }
                        }
                    }}
                >
                    <motion.div variants={itemVariants} style={{ gridColumn: '1 / -1' }}>
                        <DashboardHeader
                            currentTime={currentTime}
                            onRefresh={() => {
                                setStartDate(new Date(startDate));
                                setEndDate(new Date(endDate));
                            }}
                            onPrint={handlePrepareDailyReport}
                            onManualPrint={handleManualPrint}
                            activeShift={activeShift}
                            onStartShift={() => setStartShiftModalOpen(true)}
                            onCloseShift={() => setCloseShiftModalOpen(true)}
                            userName={userName}
                            isRefreshing={loading}
                        />
                    </motion.div>
                    
                    <motion.div variants={itemVariants} style={{ gridColumn: '1 / -1' }}>
                        <StatCardGrid
                            loading={loading}
                            stats={dashboardData.stats.current}
                            previousStats={dashboardData.stats.previous}
                            userName={userName}
                        />
                    </motion.div>

                    <motion.div variants={itemVariants} style={{ gridColumn: '1 / -1' }}>
                        <TargetChart
                            loading={loading}
                            stats={{ ...dashboardData.stats.current, monthly_revenue_target: revenueTarget }}
                        />
                    </motion.div>

                    <motion.div variants={itemVariants} style={{ gridColumn: '1 / -1' }}>
                        <ProfitRevenueChart
                            loading={loading}
                            data={dashboardData.dailyRevenueProfit}
                        />
                    </motion.div>

                    <motion.div variants={itemVariants} style={{ gridColumn: '1 / -1' }}>
                        <TopProductsChart
                            loading={loading}
                            data={dashboardData.topProducts}
                        />
                    </motion.div>
                    
                    <motion.div variants={itemVariants} style={{ gridColumn: '1 / -1' }}>
                        <NotificationsPanel
                            loading={loading}
                            notifications={dashboardData.notifications}
                            insights={dashboardData.insights}
                        />
                    </motion.div>

                    <motion.div variants={itemVariants} style={{ gridColumn: '1 / -1' }}>
                        <TopCustomersList
                            loading={loading}
                            topCustomers={dashboardData.topCustomers}
                        />
                    </motion.div>
                    
                    <motion.div variants={itemVariants} style={{ gridColumn: '1 / -1' }}>
                        <CashierPerformanceList
                            loading={loading}
                            cashierPerformance={dashboardData.cashierPerformance}
                        />
                    </motion.div>

                    <motion.div variants={itemVariants} style={{ gridColumn: '1 / -1' }}>
                        <StockInfoList
                            loading={loading}
                            stockInfo={dashboardData.stockInfo}
                        />
                    </motion.div>

                    <motion.div variants={itemVariants} style={{ gridColumn: '1 / -1' }}>
                        <StaleProductsList
                            loading={loading}
                            staleProducts={dashboardData.staleProducts}
                        />
                    </motion.div>

                    <motion.div variants={itemVariants} style={{ gridColumn: '1 / -1' }}>
                        <ExpiredProductsList
                            loading={loading}
                            expiredProducts={dashboardData.expiredProducts}
                        />
                    </motion.div>
                </DashboardGrid>
            </PageWrapper>
            
            {isStartShiftModalOpen && <StartShiftModal onShiftStarted={() => { refreshShiftStatus(); setStartShiftModalOpen(false); }} />}
            {isCloseShiftModalOpen && activeShift && <CloseShiftModal shiftId={activeShift.id} onShiftClosed={() => { refreshShiftStatus(); setCloseShiftModalOpen(false); }} onClose={() => setCloseShiftModalOpen(false)} />}
            <div style={{ display: 'none' }}><DailyReport ref={reportRef} data={dailyReportData} /></div>
        </>
    );
}

export default DashboardPage;

===== frontend\src\pages\Dashboard\components\CashierPerformanceList.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\CashierPerformanceList.jsx

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Skeleton from 'react-loading-skeleton';
import * as FiIcons from 'react-icons/fi';

const ListContainer = styled.div`
    background-color: var(--bg-surface);
    padding: 30px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    grid-column: 1 / -1;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
    display: flex;
    flex-direction: column;
    min-height: 400px;
`;

const ListTitle = styled.h3`
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 25px;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 10px;
    justify-content: center;
    text-align: center;
`;

// FIXED: Removed max-height and overflow-y to allow the component to grow naturally with its content.
const List = styled.ul`
    list-style: none;
    padding: 0;
    margin: 0;
    flex-grow: 1;
`;

const ListItem = styled.li`
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 20px;
    border-radius: 12px;
    border: 1px solid var(--border-color);
    margin-bottom: 8px;
    background-color: var(--bg-main);
    transition: all 0.2s ease;

    &:hover {
        background-color: var(--bg-hover, rgba(0, 0, 0, 0.02));
        border-color: var(--primary-color, #007bff);
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    &:last-child {
        margin-bottom: 0;
    }
`;

const ProductName = styled.span`
    font-weight: 500;
    color: var(--text-primary);
    font-size: 0.95rem;
    flex: 1;
    min-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
`;

const ItemValue = styled.div`
    color: var(--text-secondary);
    font-weight: 600;
    flex-shrink: 0;
    margin-left: 15px;
    text-align: right;
    font-size: 0.9rem;
    line-height: 1.4;
`;

const SalesAmount = styled.div`
    color: var(--primary-color, #007bff);
    font-weight: 700;
    font-size: 1rem;
`;

const TransactionCount = styled.div`
    color: var(--text-tertiary, #888);
    font-size: 0.8rem;
    margin-top: 2px;
`;

const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    padding: 50px 20px;
    gap: 15px;
`;

const EmptyStateIcon = styled.div`
    color: var(--text-tertiary, #ccc);
    margin-bottom: 10px;
`;

const EmptyStateText = styled.p`
    margin: 0;
    font-size: 1rem;
    color: var(--text-secondary);
`;

const SkeletonContainer = styled.div`
    display: flex;
    flex-direction: column;
    gap: 10px;
`;

function CashierPerformanceList({ loading, cashierPerformance = [] }) {
    const formatCurrency = (amount) => {
        try {
            return new Intl.NumberFormat('id-ID', {
                style: 'currency',
                currency: 'IDR',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(amount || 0);
        } catch (error) {
            return `Rp ${(amount || 0).toLocaleString('id-ID')}`;
        }
    };

    const formatTransactionCount = (count) => {
        return `${count || 0} transaksi`;
    };

    if (loading) {
        return (
            <ListContainer>
                <ListTitle>
                    <FiIcons.FiUserCheck size={22} />
                    Performa Kasir
                </ListTitle>
                <SkeletonContainer>
                    {[...Array(5)].map((_, index) => (
                        <Skeleton
                            key={index}
                            count={1}
                            height={60}
                            style={{
                                marginBottom: '8px',
                                borderRadius: '12px'
                            }}
                        />
                    ))}
                </SkeletonContainer>
            </ListContainer>
        );
    }

    return (
        <ListContainer>
            <ListTitle>
                <FiIcons.FiUserCheck size={22} />
                Performa Kasir
            </ListTitle>
            {cashierPerformance && cashierPerformance.length > 0 ? (
                <List>
                    {cashierPerformance.map((cashier, index) => (
                        <ListItem key={cashier?.id || `cashier-${index}`}>
                            <ProductName title={cashier?.name || 'Nama tidak tersedia'}>
                                {cashier?.name || 'Nama tidak tersedia'}
                            </ProductName>
                            <ItemValue>
                                <SalesAmount>
                                    {formatCurrency(cashier?.totalSales)}
                                </SalesAmount>
                                <TransactionCount>
                                    {formatTransactionCount(cashier?.totalTransactions)}
                                </TransactionCount>
                            </ItemValue>
                        </ListItem>
                    ))}
                </List>
            ) : (
                <EmptyStateContainer>
                    <EmptyStateIcon>
                        <FiIcons.FiUserCheck size={48} />
                    </EmptyStateIcon>
                    <EmptyStateText>
                        Belum ada data performa kasir tersedia.
                    </EmptyStateText>
                </EmptyStateContainer>
            )}
        </ListContainer>
    );
}

CashierPerformanceList.propTypes = {
    loading: PropTypes.bool.isRequired,
    cashierPerformance: PropTypes.arrayOf(
        PropTypes.shape({
            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
            name: PropTypes.string,
            totalSales: PropTypes.number,
            totalTransactions: PropTypes.number,
        })
    ),
};

export default CashierPerformanceList;

===== frontend\src\pages\Dashboard\components\DashboardHeader.jsx =====
// frontend/src/components/DashboardHeader.jsx

import React from 'react';
import PropTypes from 'prop-types';
import styled, { keyframes, css } from 'styled-components';
import { FiRefreshCw, FiPrinter, FiPlayCircle, FiPauseCircle } from 'react-icons/fi';

const HeaderContainer = styled.div`
    grid-column: 1 / -1;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    background-color: var(--bg-surface);
    border-radius: 16px;
    border: 1px solid var(--border-color);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    flex-wrap: wrap;
    gap: 15px;
`;

const InfoGroup = styled.div`
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    flex-grow: 1;
    min-width: 180px;
`;

const Greeting = styled.h2`
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0;
    line-height: 1.2;
`;

const TimeDisplay = styled.div`
    font-size: 1rem;
    font-weight: 500;
    color: var(--text-secondary);
    margin-top: 4px;
`;

const ButtonGroup = styled.div`
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    justify-content: flex-end;
`;

const Button = styled.button`
    padding: 10px 20px;
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
    font-weight: 500;
    transition: background-color 0.2s, transform 0.2s, box-shadow 0.2s;
    position: relative;
    overflow: hidden;

    &:hover {
        background-color: var(--primary-hover);
        transform: translateY(-2px);
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
    }

    &:active {
        transform: translateY(0);
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        background-color: var(--primary-dark);
    }

    &:disabled {
        background-color: var(--disabled-color);
        cursor: not-allowed;
        transform: none;
        opacity: 0.7;
        box-shadow: none;
    }
`;

const ShiftButton = styled(Button)`
    background-color: ${props => props.$activeShift ? 'var(--red-color)' : 'var(--green-color)'};
    &:hover {
        background-color: ${props => props.$activeShift ? 'var(--red-hover)' : 'var(--green-hover)'};
    }
    &:active {
        background-color: ${props => props.$activeShift ? 'var(--red-dark)' : 'var(--green-dark)'};
    }
`;

const rotateDynamic = keyframes`
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
`;

const initialPop = keyframes`
    0% { transform: scale(0.8); opacity: 0; }
    70% { transform: scale(1.1); opacity: 1; }
    100% { transform: scale(1); opacity: 1; }
`;

const RotatingRefreshIcon = styled(FiRefreshCw)`
    display: block;
    width: 20px;
    height: 20px;
    transition: color 0.3s ease-in-out, transform 0.1s;
    color: var(--text-secondary);

    ${props => props.$isRefreshing && css`
        animation: 
            ${rotateDynamic} 1s cubic-bezier(0.25, 0.46, 0.45, 0.94) infinite,
            ${initialPop} 0.3s ease-out forwards;
        color: var(--primary-color);
    `}
`;

const getGreeting = (hour) => {
    if (hour < 12) return 'Selamat Pagi';
    if (hour < 18) return 'Selamat Siang';
    return 'Selamat Malam';
};

// Prop 'onPrint' dihapus karena tidak digunakan lagi
const DashboardHeader = ({ currentTime, onRefresh, onManualPrint, activeShift, onStartShift, onCloseShift, userName, isRefreshing }) => {
    const currentHour = currentTime.getHours();
    const greeting = getGreeting(currentHour);

    return (
        <HeaderContainer>
            <InfoGroup>
                <Greeting>{greeting}, {userName}!</Greeting>
                <TimeDisplay>
                    {currentTime.toLocaleDateString('id-ID', { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' })}
                    {' | '}
                    {currentTime.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit', second: '2-digit' })}
                </TimeDisplay>
            </InfoGroup>
            <ButtonGroup>
                <ShiftButton
                    $activeShift={activeShift}
                    onClick={activeShift ? onCloseShift : onStartShift}
                    disabled={isRefreshing}
                >
                    {activeShift ? <FiPauseCircle /> : <FiPlayCircle />}
                    {activeShift ? 'Tutup Shift' : 'Mulai Shift'}
                </ShiftButton>
                
                <Button onClick={onRefresh} disabled={isRefreshing} aria-live="polite">
                    <RotatingRefreshIcon size={20} $isRefreshing={isRefreshing} />
                    {isRefreshing ? 'Memuat Data...' : 'Refresh Data'}
                </Button>

                {/* Tombol Cetak yang sudah digabung dan diberi logika */}
                <Button 
                    onClick={onManualPrint} 
                    disabled={!!activeShift || isRefreshing}
                    title={activeShift ? "Tutup shift terlebih dahulu untuk mencetak laporan" : "Cetak laporan shift terakhir"}
                >
                    <FiPrinter /> Cetak Laporan Shift
                </Button>
            </ButtonGroup>
        </HeaderContainer>
    );
};

// PropType untuk onPrint juga dihapus
DashboardHeader.propTypes = {
    currentTime: PropTypes.instanceOf(Date).isRequired,
    onRefresh: PropTypes.func.isRequired,
    onManualPrint: PropTypes.func.isRequired,
    activeShift: PropTypes.object,
    onStartShift: PropTypes.func.isRequired,
    onCloseShift: PropTypes.func.isRequired,
    userName: PropTypes.string.isRequired,
    isRefreshing: PropTypes.bool.isRequired,
};

export default DashboardHeader;

===== frontend\src\pages\Dashboard\components\ExpiredProductsList.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\ExpiredProductsList.jsx

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Skeleton from 'react-loading-skeleton';
import * as FiIcons from 'react-icons/fi';

const ListContainer = styled.div`
    background-color: var(--bg-surface);
    padding: 30px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    grid-column: 1 / -1;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
    display: flex;
    flex-direction: column;
    min-height: 400px;
`;

const ListTitle = styled.h3`
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 25px;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 10px;
    justify-content: center;
    text-align: center;
`;

// --- PERBAIKAN DI SINI: Hapus properti scrollbar ---
const List = styled.ul`
    list-style: none;
    padding: 0;
    margin: 0;
    flex-grow: 1;
    /* Menghapus overflow-y dan max-height agar semua item ditampilkan */
`;
// --- AKHIR PERBAIKAN ---

const ListItem = styled.li`
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 20px;
    border-radius: 12px;
    border: 1px solid var(--border-color);
    margin-bottom: 8px;
    background-color: var(--bg-main);
    transition: all 0.2s ease;
    
    &:hover {
        background-color: var(--bg-hover, rgba(0, 0, 0, 0.02));
        border-color: var(--primary-color, #007bff);
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    &:last-child {
        margin-bottom: 0;
    }
`;

const ProductName = styled.span`
    font-weight: 500;
    color: var(--text-primary);
    font-size: 0.95rem;
    flex: 1;
    min-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
`;

const ItemValue = styled.span`
    color: var(--text-secondary);
    font-weight: 600;
    flex-shrink: 0;
    margin-left: 15px;
    font-size: 0.9rem;
`;

const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    padding: 50px 20px;
    gap: 15px;
`;

const EmptyStateIcon = styled.div`
    color: var(--text-tertiary, #ccc);
    margin-bottom: 10px;
`;

const EmptyStateText = styled.p`
    margin: 0;
    font-size: 1rem;
    color: var(--text-secondary);
`;

const SkeletonContainer = styled.div`
    display: flex;
    flex-direction: column;
    gap: 10px;
`;

function ExpiredProductsList({ loading, expiredProducts = [] }) {
    if (loading) {
        return (
            <ListContainer>
                <ListTitle><FiIcons.FiClipboard size={22}/> Produk Kadaluarsa</ListTitle>
                <SkeletonContainer>
                    {[...Array(5)].map((_, index) => (
                        <Skeleton 
                            key={index}
                            count={1} 
                            height={60} 
                            style={{ 
                                marginBottom: '8px',
                                borderRadius: '12px'
                            }} 
                        />
                    ))}
                </SkeletonContainer>
            </ListContainer>
        );
    }
    return (
        <ListContainer>
            <ListTitle><FiIcons.FiClipboard size={22}/> Produk Kadaluarsa</ListTitle>
            {expiredProducts?.length > 0 ? (
                <List>
                    {expiredProducts.map(p => (
                        <ListItem key={p.id}>
                            <ProductName>{p.name}</ProductName>
                            <ItemValue>{`Exp: ${new Date(p.expiration_date).toLocaleDateString('id-ID')}`}</ItemValue>
                        </ListItem>
                    ))}
                </List>
            ) : (
                <EmptyStateContainer>
                    <EmptyStateIcon>
                        <FiIcons.FiClipboard size={48}/>
                    </EmptyStateIcon>
                    <EmptyStateText>
                        Tidak ada produk mendekati kadaluarsa.
                    </EmptyStateText>
                </EmptyStateContainer>
            )}
        </ListContainer>
    );
}

ExpiredProductsList.propTypes = {
    loading: PropTypes.bool.isRequired,
    expiredProducts: PropTypes.array,
};

export default ExpiredProductsList;

===== frontend\src\pages\Dashboard\components\GenericProductList.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\GenericProductList.jsx

import React from 'react';
import PropTypes from 'prop-types';
import { Link } from 'react-router-dom';
import styled from 'styled-components';
import Skeleton from 'react-loading-skeleton';
import * as FiIcons from 'react-icons/fi';

const ListContainer = styled.div`
    background-color: var(--bg-surface);
    padding: 30px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    grid-column: span 1;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
    @media (max-width: 1200px) {
        grid-column: 1 / -1;
    }
`;

const ListTitle = styled.h3`
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 25px;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 10px;
`;

const List = styled.ul`
    list-style: none;
    padding: 0;
    margin: 0;
`;

const ListItem = styled.li`
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 0;
    border-bottom: 1px solid var(--border-color);
    &:last-child {
        border-bottom: none;
    }
`;

const ProductName = styled.span`
    font-weight: 500;
    color: var(--text-primary);
    flex: 1;
    display: flex;
    align-items: center;
    gap: 10px;
`;

const ItemValue = styled.span`
    font-size: 0.9rem;
    color: var(--text-secondary);
    font-weight: 400;
    ${({ $stockColor }) => $stockColor && `color: ${$stockColor};`}
`;

const ProductImage = styled.img`
    width: 40px;
    height: 40px;
    object-fit: cover;
    border-radius: 8px;
`;

const PlaceholderImage = styled.div`
    width: 40px;
    height: 40px;
    background-color: var(--bg-secondary);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-secondary);
    font-size: 0.8rem;
    text-align: center;
    line-height: 1;
    padding: 5px;
`;

const EmptyStateContainer = styled.div`
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    padding: 50px 20px;
    min-height: 250px;
`;

const EmptyStateIcon = styled.div`
    margin-bottom: 20px;
    color: var(--text-secondary);
`;

const EmptyStateText = styled.p`
    font-size: 1rem;
    font-weight: 400;
    margin: 0;
`;

const SkeletonContainer = styled.div`
    > span {
        margin-bottom: 15px;
        &:last-child {
            margin-bottom: 0;
        }
    }
`;

function GenericProductList({
    loading,
    items = [],
    title,
    icon,
    renderItemValue,
    renderItemLink,
    emptyMessage,
    showImage = false,
    getStockColor,
}) {
    if (loading) {
        return (
            <ListContainer>
                <ListTitle>{icon} {title}</ListTitle>
                <SkeletonContainer>
                    {Array.from({ length: 5 }).map((_, i) => (
                        <Skeleton key={i} height={50} style={{ borderRadius: '12px' }} />
                    ))}
                </SkeletonContainer>
            </ListContainer>
        );
    }

    const safeItems = Array.isArray(items) ? items : [];

    return (
        <ListContainer>
            <ListTitle>{icon} {title}</ListTitle>
            {safeItems.length > 0 ? (
                <List>
                    {safeItems.map(item => (
                        <ListItem key={item.id}>
                            {renderItemLink ? (
                                <Link to={renderItemLink(item)} style={{ textDecoration: 'none', flex: 1 }}>
                                    <ProductName>
                                        {showImage && (item.image_url ? <ProductImage src={item.image_url} alt={item.name} /> : <PlaceholderImage>No Img</PlaceholderImage>)}
                                        {item.name}
                                    </ProductName>
                                </Link>
                            ) : (
                                <ProductName>
                                    {showImage && (item.image_url ? <ProductImage src={item.image_url} alt={item.name} /> : <PlaceholderImage>No Img</PlaceholderImage>)}
                                    {item.name}
                                </ProductName>
                            )}
                            <ItemValue $stockColor={getStockColor?.(item.stock)}>
                                {renderItemValue(item)}
                            </ItemValue>
                        </ListItem>
                    ))}
                </List>
            ) : (
                <EmptyStateContainer>
                    <EmptyStateIcon>{icon}</EmptyStateIcon>
                    <EmptyStateText>{emptyMessage}</EmptyStateText>
                </EmptyStateContainer>
            )}
        </ListContainer>
    );
}

GenericProductList.propTypes = {
    loading: PropTypes.bool.isRequired,
    items: PropTypes.arrayOf(
        PropTypes.shape({
            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
            name: PropTypes.string.isRequired,
            stock: PropTypes.number,
            image_url: PropTypes.string,
        })
    ),
    title: PropTypes.string.isRequired,
    icon: PropTypes.node.isRequired,
    renderItemValue: PropTypes.func.isRequired,
    renderItemLink: PropTypes.func,
    emptyMessage: PropTypes.string.isRequired,
    showImage: PropTypes.bool,
    getStockColor: PropTypes.func,
};

export default GenericProductList;

===== frontend\src\pages\Dashboard\components\NotificationsPanel.jsx =====
import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Skeleton from 'react-loading-skeleton';
import * as FiIcons from 'react-icons/fi';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';

const PanelContainer = styled.div`
  background-color: var(--bg-surface);
  padding: 30px;
  border-radius: 24px;
  border: 1px solid var(--border-color);
  grid-column: 1 / -1;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  display: flex;
  flex-direction: column;
`;

const PanelTitle = styled.h3`
  font-size: 1.4rem;
  font-weight: 600;
  margin-bottom: 25px;
  color: var(--text-primary);
  display: flex;
  align-items: center;
  gap: 10px;
  justify-content: center;
  text-align: center;
`;

const NotificationList = styled.div`
  display: flex;
  flex-direction: column;
  gap: 15px;
`;

const NotificationItem = styled.div`
  display: flex;
  align-items: flex-start;
  gap: 15px;
  padding: 15px;
  border-radius: 12px;
  background-color: var(--bg-main);
  border: 1px solid var(--border-color);
  font-size: 0.95rem;
  cursor: ${props => props.$isActionable ? 'pointer' : 'default'};
  transition: all 0.2s ease-in-out;

  &:hover {
    background-color: ${props => props.$isActionable ? 'var(--bg-surface)' : 'var(--bg-main)'};
    border-color: ${props => props.$isActionable ? 'var(--primary-color)' : 'var(--border-color)'};
  }

  svg {
    flex-shrink: 0;
    margin-top: 3px;
    color: var(--text-secondary);
  }

  &.warning {
    border-left: 4px solid #ffa500;
    svg { color: #ffa500; }
  }

  &.danger {
    border-left: 4px solid var(--red-color);
    svg { color: var(--red-color); }
  }

  &.info {
    border-left: 4px solid var(--primary-color);
    svg { color: var(--primary-color); }
  }

  &.success {
    border-left: 4px solid var(--green-color);
    svg { color: var(--green-color); }
  }
`;

const EmptyStateContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  color: var(--text-secondary);
  padding: 40px 20px;
`;

const getFiIconComponent = (iconName) => {
  const IconComponent = FiIcons[iconName] || FiIcons.FiBell;
  return <IconComponent size={20} />;
};

function NotificationsPanel({ loading, notifications, insights }) {
    const navigate = useNavigate();

    const handleNotificationClick = (item) => {
        if (item.type === 'danger' || item.type === 'warning') {
            navigate('/purchase-orders/new');
            toast.info('Buat Purchase Order baru untuk memesan ulang stok.');
        }
    };

    const allItems = [
        ...(Array.isArray(notifications) ? notifications : []).map((item, index) => ({
            id: item.id || `notification-${index}`,
            type: item.type || 'info',
            icon: item.icon || 'FiBell',
            text: item.text || 'No message',
            source: 'notification',
        })),
        ...(Array.isArray(insights) ? insights : []).map((item, index) => ({
            id: item.id || `insight-${index}`,
            type: item.type || 'info',
            icon: item.icon || 'FiInfo',
            text: item.text || 'No description',
            source: 'insight',
        })),
    ];

    if (loading) {
        return (
            <PanelContainer>
                <PanelTitle>
                    <FiIcons.FiZap size={22} /> Notifikasi & Insight
                </PanelTitle>
                <Skeleton count={3} height={60} style={{ borderRadius: '12px', marginBottom: '15px' }} />
            </PanelContainer>
        );
    }

    return (
        <PanelContainer>
            <PanelTitle>
                <FiIcons.FiZap size={22} /> Notifikasi & Insight
            </PanelTitle>
            {allItems.length > 0 ? (
                <NotificationList>
                    {allItems.map((item, index) => {
                        const isActionable = item.source === 'notification' && (item.type === 'danger' || item.type === 'warning');
                        return (
                            <NotificationItem
                                key={`${item.source}-${item.id}-${index}`}
                                className={item.type}
                                $isActionable={isActionable}
                                onClick={() => isActionable && handleNotificationClick(item)}
                            >
                                {getFiIconComponent(item.icon)}
                                <span>{item.text}</span>
                            </NotificationItem>
                        );
                    })}
                </NotificationList>
            ) : (
                <EmptyStateContainer>
                    <FiIcons.FiCheckCircle size={48} />
                    <p style={{ marginTop: '15px' }}>
                        Semua aman. Tidak ada notifikasi penting saat ini.
                    </p>
                </EmptyStateContainer>
            )}
        </PanelContainer>
    );
}

NotificationsPanel.propTypes = {
    loading: PropTypes.bool.isRequired,
    notifications: PropTypes.array,
    insights: PropTypes.array,
};

export default NotificationsPanel;

===== frontend\src\pages\Dashboard\components\ProfitRevenueChart.jsx =====
import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { ComposedChart, Area, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';
import Skeleton from 'react-loading-skeleton';
import { FiTrendingUp } from 'react-icons/fi';

const ChartContainer = styled.div`
  background-color: var(--bg-surface);
  padding: 30px;
  border-radius: 24px;
  border: 1px solid var(--border-color);
  grid-column: 1 / -1;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
`;

const ChartTitle = styled.h3`
  font-size: 1.4rem;
  font-weight: 600;
  margin-bottom: 25px;
  color: var(--text-primary);
  display: flex;
  align-items: center;
  gap: 10px;
  justify-content: center;
  text-align: center;
`;

const EmptyStateContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  color: var(--text-secondary);
  padding: 50px 20px;
  min-height: 250px;
`;

const CustomTooltip = ({ active, payload, label }) => {
  if (active && payload && payload.length) {
    const formatCurrency = (value) => new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR' }).format(value);
    return (
      <div style={{ backgroundColor: 'var(--bg-surface)', border: '1px solid var(--border-color)', borderRadius: '8px', padding: '10px', fontSize: '0.9rem', color: 'var(--text-primary)', boxShadow: '0 2px 10px rgba(0,0,0,0.1)' }}>
        <p style={{ color: 'var(--text-secondary)', marginBottom: '5px', fontWeight: '500' }}>{label}</p>
        <p style={{ color: 'var(--primary-color)', margin: 0 }}>Pendapatan: <span style={{ fontWeight: '600' }}>{formatCurrency(payload[0].value)}</span></p>
        <p style={{ color: 'var(--green-color)', margin: 0 }}>Laba: <span style={{ fontWeight: '600' }}>{formatCurrency(payload[1].value)}</span></p>
      </div>
    );
  }
  return null;
};
CustomTooltip.propTypes = { active: PropTypes.bool, payload: PropTypes.array, label: PropTypes.string };

const formatNumberYAxis = (num) => {
  if (num >= 1000000) return `${(num / 1000000).toFixed(1)}Jt`;
  if (num >= 1000) return `${(num / 1000).toFixed(0)}Rb`;
  return num;
};

function ProfitRevenueChart({ loading, data }) {
  if (loading) {
    return (
      <ChartContainer>
        <ChartTitle><FiTrendingUp size={22}/> Pendapatan vs Laba</ChartTitle>
        <Skeleton height={300} />
      </ChartContainer>
    );
  }
    
  return (
    <ChartContainer>
      <ChartTitle><FiTrendingUp size={22}/> Pendapatan vs Laba Harian</ChartTitle>
      {data && data.length > 0 ? (
        <ResponsiveContainer width="100%" height={300}>
          <ComposedChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }} animationDuration={1000}>
            <defs>
              <linearGradient id="colorRevenue" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="var(--primary-color)" stopOpacity={0.7}/>
                <stop offset="95%" stopColor="var(--primary-color)" stopOpacity={0}/>
              </linearGradient>
            </defs>
            <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
            <XAxis dataKey="date" tick={{ fill: 'var(--text-secondary)', fontSize: 12 }} />
            <YAxis tick={{ fill: 'var(--text-secondary)', fontSize: 12 }} tickFormatter={formatNumberYAxis} />
            <Tooltip content={<CustomTooltip />} />
            <Legend wrapperStyle={{fontSize: "0.9rem"}}/>
            <Area type="monotone" dataKey="revenue" name="Pendapatan" stroke="var(--primary-color)" fillOpacity={1} fill="url(#colorRevenue)" strokeWidth={2} animationDuration={1000}/>
            <Line type="monotone" dataKey="profit" name="Laba" stroke="var(--green-color)" strokeWidth={2} dot={{ r: 4 }} activeDot={{ r: 8 }} animationDuration={1000}/>
          </ComposedChart>
        </ResponsiveContainer>
      ) : ( 
        <EmptyStateContainer>
          <FiTrendingUp size={48}/>
          <p>Belum ada data untuk ditampilkan pada rentang tanggal ini.</p>
        </EmptyStateContainer>
      )}
    </ChartContainer>
  );
}

ProfitRevenueChart.propTypes = { loading: PropTypes.bool.isRequired, data: PropTypes.array };
export default ProfitRevenueChart;


===== frontend\src\pages\Dashboard\components\QuickActionGrids.jsx =====
import React from 'react';
import styled from 'styled-components';
import { useNavigate } from 'react-router-dom';
import * as FiIcons from 'react-icons/fi';

const Grid = styled.div`
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 15px;
    background-color: var(--bg-surface);
    padding: 30px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    justify-content: center;
`;

const GridTitle = styled.h3`
    grid-column: 1 / -1;
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 10px;
    padding-bottom: 15px;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 10px;
    justify-content: flex-start;
    text-align: left;
    &:not(:first-child) {
        margin-top: 20px;
    }
`;

const ActionButton = styled.button`
    background: var(--bg-surface);
    border: 1px solid var(--border-color);
    border-radius: 20px;
    padding: 24px 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 12px;
    cursor: pointer;
    font-weight: 600;
    color: var(--text-primary);
    transition: all 0.3s ease;
    
    span { 
        font-size: 0.9rem; 
    }
    svg { 
        transition: all 0.3s ease; 
        color: var(--primary-color); 
    }
    &:hover { 
        background-color: var(--primary-color); 
        color: white; 
        transform: translateY(-3px); 
        svg { color: white; } 
    }
`;

function QuickActionGrids() {
    const navigate = useNavigate();
    return (
        <Grid>
            {/* --- SEKSI 1: OPERASIONAL & TRANSAKSI --- */}
            <GridTitle><FiIcons.FiZap size={22}/> Operasional & Transaksi</GridTitle>
            <ActionButton onClick={() => navigate('/pos')}><FiIcons.FiShoppingCart size={30}/><span>Transaksi Baru</span></ActionButton>
            <ActionButton onClick={() => navigate('/expenses')}><FiIcons.FiDollarSign size={30}/><span>Catat Pengeluaran</span></ActionButton>
            <ActionButton onClick={() => navigate('/targets')}><FiIcons.FiTarget size={30}/><span>Atur Target</span></ActionButton>
            <ActionButton onClick={() => navigate('/shift-history')}><FiIcons.FiClock size={30}/><span>Riwayat Shift</span></ActionButton>

            {/* --- SEKSI 2: MANAJEMEN INVENTARIS --- */}
            <GridTitle><FiIcons.FiPackage size={22}/> Manajemen Inventaris</GridTitle>
            <ActionButton onClick={() => navigate('/products/new')}><FiIcons.FiPlusSquare size={30}/><span>Tambah Produk</span></ActionButton>
            <ActionButton onClick={() => navigate('/products')}><FiIcons.FiArchive size={30}/><span>Daftar Produk</span></ActionButton>
            <ActionButton onClick={() => navigate('/receive-stock')}><FiIcons.FiUpload size={30}/><span>Terima Stok</span></ActionButton>
            <ActionButton onClick={() => navigate('/stock-adjustment')}><FiIcons.FiEdit size={30}/><span>Penyesuaian Stok</span></ActionButton>
            <ActionButton onClick={() => navigate('/purchase-orders')}><FiIcons.FiClipboard size={30}/><span>Purchase Order</span></ActionButton>
            <ActionButton onClick={() => navigate('/raw-materials')}><FiIcons.FiBox size={30}/><span>Bahan Baku</span></ActionButton>


            {/* --- SEKSI 3: PENGELOLAAN TOKO --- */}
            <GridTitle><FiIcons.FiHome size={22}/> Pengelolaan Toko</GridTitle>
            <ActionButton onClick={() => navigate('/users')}><FiIcons.FiUserCheck size={30}/><span>Kelola Pengguna</span></ActionButton>
            <ActionButton onClick={() => navigate('/roles')}><FiIcons.FiShield size={30}/><span>Manajemen Peran</span></ActionButton>
            <ActionButton onClick={() => navigate('/customers')}><FiIcons.FiUsers size={30}/><span>Kelola Pelanggan</span></ActionButton>
            <ActionButton onClick={() => navigate('/suppliers')}><FiIcons.FiTruck size={30}/><span>Kelola Pemasok</span></ActionButton>
            <ActionButton onClick={() => navigate('/categories')}><FiIcons.FiList size={30}/><span>Kelola Kategori</span></ActionButton>
            <ActionButton onClick={() => navigate('/promotions')}><FiIcons.FiTag size={30}/><span>Kelola Promosi</span></ActionButton>
            <ActionButton onClick={() => navigate('/settings')}><FiIcons.FiSettings size={30}/><span>Semua Pengaturan</span></ActionButton>
        </Grid>
    );
}

export default QuickActionGrids;

===== frontend\src\pages\Dashboard\components\RecentSuppliersList.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\RecentSuppliersList.jsx

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import * as FiIcons from 'react-icons/fi';
import Skeleton from 'react-loading-skeleton';

const ListContainer = styled.div`
    background-color: var(--bg-surface);
    padding: 30px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    grid-column: span 1;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
    @media (max-width: 1200px) {
        grid-column: span 2;
    }
    @media (max-width: 768px) {
        grid-column: 1 / -1;
    }
`;

const ListTitle = styled.h3`
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 25px;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 10px;
`;

const List = styled.ul`
    list-style: none;
    padding: 0;
    margin: 0;
`;

const ListItem = styled.li`
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 20px;
    background: var(--bg-primary);
    border-radius: 12px;
    margin-bottom: 8px;
    font-size: 0.95rem;
    transition: all 0.3s ease;
    &:hover {
        background-color: var(--bg-hover);
    }
`;

const ProductName = styled.span`
    font-weight: 500;
    color: var(--text-primary);
    max-width: 60%;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
`;

const ItemValue = styled.span`
    color: var(--text-secondary);
    font-size: 0.9rem;
`;

const SkeletonContainer = styled.div`
    margin-top: 10px;
`;

const EmptyStateContainer = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 30px 20px;
    color: var(--text-secondary);
`;

const EmptyStateIcon = styled.div`
    margin-bottom: 15px;
`;

const EmptyStateText = styled.p`
    font-size: 1rem;
    margin: 0;
`;

function RecentSuppliersList({ loading, recentSuppliers = [] }) {
    if (loading) {
        return (
            <ListContainer>
                <ListTitle>
                    <FiIcons.FiTruck size={22} /> Pemasok Terbaru
                </ListTitle>
                <SkeletonContainer>
                    {[...Array(5)].map((_, index) => (
                        <Skeleton
                            key={index}
                            count={1}
                            height={60}
                            style={{
                                marginBottom: '8px',
                                borderRadius: '12px',
                            }}
                        />
                    ))}
                </SkeletonContainer>
            </ListContainer>
        );
    }
    return (
        <ListContainer>
            <ListTitle>
                <FiIcons.FiTruck size={22} /> Pemasok Terbaru
            </ListTitle>
            {recentSuppliers.length > 0 ? (
                <List>
                    {recentSuppliers.map((s) => (
                        <ListItem key={s.id}>
                            <ProductName>{s.name}</ProductName>
                            <ItemValue>{new Date(s.created_at).toLocaleDateString('id-ID', { day: '2-digit', month: 'short', year: 'numeric' })}</ItemValue>
                        </ListItem>
                    ))}
                </List>
            ) : (
                <EmptyStateContainer>
                    <EmptyStateIcon>
                        <FiIcons.FiTruck size={48} />
                    </EmptyStateIcon>
                    <EmptyStateText>Belum ada data pemasok.</EmptyStateText>
                </EmptyStateContainer>
            )}
        </ListContainer>
    );
}

RecentSuppliersList.propTypes = {
    loading: PropTypes.bool.isRequired,
    recentSuppliers: PropTypes.arrayOf(
        PropTypes.shape({
            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
            name: PropTypes.string.isRequired,
            created_at: PropTypes.string.isRequired,
        }).isRequired
    ),
};

RecentSuppliersList.defaultProps = {
    recentSuppliers: [],
};

export default React.memo(RecentSuppliersList);

===== frontend\src\pages\Dashboard\components\SalesChart.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\SalesChart.jsx

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import Skeleton from 'react-loading-skeleton';
import { FiDollarSign } from 'react-icons/fi';
import { formatRupiah } from '../../utils/formatters';

const ChartContainer = styled.div`
    background-color: var(--bg-surface);
    padding: 30px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    grid-column: span 2;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
    @media (max-width: 1200px) {
        grid-column: 1 / -1;
    }
`;

const ChartTitle = styled.h3`
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 25px;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 10px;
    justify-content: center;
    text-align: center;
`;

const EmptyStateContainer = styled.div`
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    padding: 50px 20px;
    min-height: 250px;
`;

const getColor = (index) => {
    const colors = ['#007bff', '#28a745', '#FFA500', '#dc3545', '#6f42c4'];
    return colors[index % colors.length];
};

const formatDate = (dateString) => {
    try {
        const date = new Date(dateString);
        if (isNaN(date)) {
            return 'Tanggal Tidak Valid';
        }
        return date.toLocaleDateString('id-ID', {
            day: '2-digit',
            month: 'short',
            year: 'numeric',
        });
    } catch {
        return 'Tanggal Tidak Valid';
    }
};

const CustomTooltip = ({ active, payload, label }) => {
    if (!active || !payload?.length || !label) {
        return null;
    }
    return (
        <div
            style={{
                backgroundColor: 'var(--bg-surface)',
                border: '1px solid var(--border-color)',
                borderRadius: '8px',
                padding: '10px',
                fontSize: '0.9rem',
                color: 'var(--text-primary)',
                boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
            }}
        >
            <p style={{ color: 'var(--text-secondary)', marginBottom: '5px', fontWeight: '500' }}>
                {formatDate(label)}
            </p>
            {payload.map((entry, index) => (
                <p key={index} style={{ color: getColor(index), margin: 0 }}>
                    {entry.name}: <span style={{ fontWeight: '600' }}>{formatRupiah(entry.value || 0)}</span>
                </p>
            ))}
        </div>
    );
};

CustomTooltip.propTypes = {
    active: PropTypes.bool,
    payload: PropTypes.arrayOf(
        PropTypes.shape({
            name: PropTypes.string.isRequired,
            value: PropTypes.number.isRequired,
        })
    ),
    label: PropTypes.string,
};

function SalesChart({ loading, data = [] }) {
    if (loading) {
        return (
            <ChartContainer>
                <ChartTitle>
                    <FiDollarSign size={22} /> Penjualan Harian
                </ChartTitle>
                <Skeleton height={300} />
            </ChartContainer>
        );
    }

    return (
        <ChartContainer>
            <ChartTitle>
                <FiDollarSign size={22} /> Penjualan Harian
            </ChartTitle>
            {data.length > 0 ? (
                <ResponsiveContainer width="100%" height={350}>
                    <AreaChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
                        <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
                        <XAxis dataKey="date" tick={{ fill: 'var(--text-secondary)', fontSize: 12 }} />
                        <YAxis tick={{ fill: 'var(--text-secondary)', fontSize: 12 }} />
                        <Tooltip content={<CustomTooltip />} />
                        <Area
                            type="monotone"
                            dataKey="revenue"
                            name="Pendapatan"
                            stroke={getColor(0)}
                            fill={getColor(0)}
                            fillOpacity={0.2}
                        />
                        <Area
                            type="monotone"
                            dataKey="profit"
                            name="Laba"
                            stroke={getColor(1)}
                            fill={getColor(1)}
                            fillOpacity={0.2}
                        />
                    </AreaChart>
                </ResponsiveContainer>
            ) : (
                <EmptyStateContainer>
                    <FiDollarSign size={48} />
                    <p>Belum ada data penjualan harian untuk rentang tanggal ini.</p>
                </EmptyStateContainer>
            )}
        </ChartContainer>
    );
}

SalesChart.propTypes = {
    loading: PropTypes.bool.isRequired,
    data: PropTypes.arrayOf(
        PropTypes.shape({
            date: PropTypes.string.isRequired,
            revenue: PropTypes.number.isRequired,
            profit: PropTypes.number.isRequired,
        }).isRequired
    ),
};

SalesChart.defaultProps = {
    data: [],
};

export default React.memo(SalesChart);

===== frontend\src\pages\Dashboard\components\StaleProductsList.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\StaleProductsList.jsx

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Skeleton from 'react-loading-skeleton';
import { FiArchive } from 'react-icons/fi';

const ListContainer = styled.div`
    background-color: var(--bg-surface);
    padding: 30px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    grid-column: 1 / -1;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
    display: flex;
    flex-direction: column;
    min-height: 400px;
`;

const ListTitle = styled.h3`
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 25px;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 10px;
    justify-content: center;
    text-align: center;
`;

const List = styled.ul`
    list-style: none;
    padding: 0;
    margin: 0;
    flex-grow: 1;
`;

const ListItem = styled.li`
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 0;
    border-bottom: 1px solid var(--border-color);

    &:last-child {
        border-bottom: none;
    }
`;

const ProductName = styled.div`
    font-weight: 500;
    color: var(--text-primary);
`;

const ProductDetails = styled.div`
    text-align: right;
    font-size: 0.9rem;
    color: var(--text-secondary);
`;

const StockValue = styled.span`
    font-weight: 600;
    color: var(--text-primary);
`;

const EmptyStateContainer = styled.div`
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    padding: 50px 20px;
    gap: 15px;
`;

const EmptyStateIcon = styled.div`
    color: var(--text-secondary);
`;

const EmptyStateText = styled.p`
    margin: 0;
    font-size: 1rem;
`;

const SkeletonContainer = styled.div`
    display: flex;
    flex-direction: column;
    gap: 10px;
`;

function StaleProductsList({ loading, staleProducts = [] }) {
    if (loading) {
        return (
            <ListContainer>
                <ListTitle><FiArchive size={22} /> Produk Kurang Laku</ListTitle>
                <SkeletonContainer>
                    {[...Array(5)].map((_, index) => (
                        <Skeleton key={index} height={50} style={{ borderRadius: '12px' }} />
                    ))}
                </SkeletonContainer>
            </ListContainer>
        );
    }

    return (
        <ListContainer>
            <ListTitle><FiArchive size={22} /> Produk Kurang Laku</ListTitle>
            {staleProducts.length > 0 ? (
                <List>
                    {staleProducts.map((p) => (
                        <ListItem key={p.id}>
                            <ProductName>{p.name}</ProductName>
                            <ProductDetails>
                                <StockValue>{p.stock} unit</StockValue>
                                <div>Terakhir Terjual: {p.lastSoldDate ? new Date(p.lastSoldDate).toLocaleDateString('id-ID') : 'Belum Pernah'}</div>
                            </ProductDetails>
                        </ListItem>
                    ))}
                </List>
            ) : (
                <EmptyStateContainer>
                    <EmptyStateIcon><FiArchive size={48} /></EmptyStateIcon>
                    <EmptyStateText>Tidak ada produk yang kurang laku saat ini.</EmptyStateText>
                </EmptyStateContainer>
            )}
        </ListContainer>
    );
}

StaleProductsList.propTypes = {
  loading: PropTypes.bool,
  staleProducts: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
      name: PropTypes.string.isRequired,
      stock: PropTypes.number.isRequired,
      lastSoldDate: PropTypes.string,
    })
  ),
};

export default StaleProductsList;

===== frontend\src\pages\Dashboard\components\StatCardGrid.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\StatCardGrid.jsx

import React, { useState, useMemo } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import Skeleton from 'react-loading-skeleton';
import { FiTrendingUp, FiDollarSign, FiShoppingBag, FiTag, FiUsers, FiUserCheck, FiList, FiArrowUp, FiArrowDown, FiChevronDown, FiChevronUp, FiArchive } from 'react-icons/fi';

const GridContainer = styled.div`
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    gap: 24px;
    width: 100%;
`;

const ComparisonChip = styled.div`
    display: inline-flex;
    align-items: center;
    gap: 4px;
    font-size: 0.8rem;
    font-weight: 600;
    padding: 2px 8px;
    border-radius: 20px;
    margin-top: 6px;
    color: ${props => props.color};
    background-color: ${props => props.color}20;
`;

const StatIcon = styled.div`
    width: 64px;
    height: 64px;
    border-radius: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: ${props => props.color}15;
    color: ${props => props.color};
    flex-shrink: 0;
`;

const Card = styled.div`
    background: var(--bg-surface);
    padding: 28px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    gap: 24px;
    grid-column: span 3;
    transition: all 0.3s ease-in-out;
    &:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
    }
    @media (max-width: 1600px) { grid-column: span 4; }
    @media (max-width: 1200px) { grid-column: span 6; }
    @media (max-width: 768px) { grid-column: 1 / -1; }
`;

const StatInfo = styled.div`
    flex-grow: 1;
`;
const StatValue = styled.h2`
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0;
`;
const StatLabel = styled.p`
    font-size: 0.95rem;
    color: var(--text-secondary);
    margin: 0;
`;
const ExpandButton = styled.button`
    grid-column: 1 / -1;
    background: var(--bg-surface);
    color: var(--primary-color);
    border: 1px solid var(--border-color);
    border-radius: 16px;
    padding: 12px 20px;
    cursor: pointer;
    font-weight: 600;
    font-size: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    transition: all 0.3s ease;
    &:hover {
        background-color: var(--primary-color);
        color: white;
    }
`;

/**
 * FIXED: Handles division by zero gracefully. If the previous value was 0,
 * any positive current value is considered a 100% increase.
 * @param {number|null|undefined} current - Current value.
 * @param {number|null|undefined} previous - Previous value.
 * @returns {number|null} - Percentage change or null if invalid.
 */
const calculatePercentageChange = (current, previous) => {
    if (
        current === null || current === undefined ||
        previous === null || previous === undefined ||
        typeof current !== 'number' || typeof previous !== 'number'
    ) {
        return null;
    }
    if (previous === 0) {
        return current > 0 ? 100.0 : 0.0;
    }
    return ((current - previous) / previous) * 100;
};


const StatCard = React.memo(({ icon, value, label, color, comparisonChange, positiveIsGood = true }) => {
    const chip = useMemo(() => {
        if (comparisonChange === null || !isFinite(comparisonChange)) {
            return null;
        }
        const isPositive = comparisonChange >= 0;
        const isGood = positiveIsGood ? isPositive : !isPositive;
        const displayValue = `${isPositive ? '+' : ''}${comparisonChange.toFixed(1)}%`;
        const chipColor = isGood ? 'var(--green-color)' : 'var(--red-color)';
        const chipIcon = isPositive ? <FiArrowUp size={12} /> : <FiArrowDown size={12} />;
        return (
            <ComparisonChip color={chipColor}>
                {chipIcon}
                {displayValue}
            </ComparisonChip>
        );
    }, [comparisonChange, positiveIsGood]);

    return (
        <Card>
            <StatIcon color={color}>{icon}</StatIcon>
            <StatInfo>
                <StatValue>{value}</StatValue>
                <StatLabel>{label}</StatLabel>
                {chip}
            </StatInfo>
        </Card>
    );
});

StatCard.propTypes = {
    icon: PropTypes.node.isRequired,
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    label: PropTypes.string.isRequired,
    color: PropTypes.string.isRequired,
    comparisonChange: PropTypes.number,
    positiveIsGood: PropTypes.bool,
};

StatCard.displayName = 'StatCard';

const StatCardSkeleton = () => (
    <Card as="div">
        <Skeleton circle width={60} height={60} />
        <div>
            <Skeleton height={30} width={150} style={{ marginBottom: '5px' }} />
            <Skeleton height={20} width="60%" />
        </div>
    </Card>
);

function StatCardGrid({ loading, stats = {}, previousStats = null, userName = '' }) {
    const [isExpanded, setIsExpanded] = useState(false);
    const handleToggleExpand = () => setIsExpanded(!isExpanded);

    if (loading || !stats) {
        return (
            <GridContainer>
                {Array.from({ length: 8 }).map((_, i) => (
                    <StatCardSkeleton key={i} />
                ))}
            </GridContainer>
        );
    }

    const formatCurrency = (val) => `Rp ${new Intl.NumberFormat('id-ID').format(val || 0)}`;

    const revenueChange = calculatePercentageChange(stats.totalRevenue, previousStats?.totalRevenue);
    const transactionsChange = calculatePercentageChange(stats.totalTransactions, previousStats?.totalTransactions);
    const profitChange = calculatePercentageChange(stats.totalProfit, previousStats?.totalProfit);
    const expensesChange = calculatePercentageChange(stats.totalExpenses, previousStats?.totalExpenses);

    return (
        <GridContainer>
            <StatCard icon={<FiDollarSign size={28} />} value={formatCurrency(stats.totalRevenue)} label="Pendapatan" color="var(--primary-color)" comparisonChange={revenueChange} />
            <StatCard icon={<FiShoppingBag size={28} />} value={stats.totalTransactions || 0} label="Total Transaksi" color="var(--green-color)" comparisonChange={transactionsChange} />
            <StatCard icon={<FiTrendingUp size={28} />} value={formatCurrency(stats.totalProfit)} label="Total Laba" color="#FFA500" comparisonChange={profitChange} />
            <StatCard icon={<FiArchive size={28} />} value={formatCurrency(stats.cashInDrawer)} label="Total Kas di Laci" color="#17a2b8" />
            <StatCard icon={<FiTag size={28} />} value={stats.totalSoldUnits || 0} label="Produk Terjual" color="#007bff" />
            <StatCard icon={<FiUsers size={28} />} value={stats.newCustomers || 0} label="Pelanggan Baru" color="#6f42c4" />
            {isExpanded && (
                <>
                    <StatCard icon={<FiDollarSign size={28} />} value={formatCurrency(stats.totalExpenses)} label="Total Pengeluaran" color="#dc3545" comparisonChange={expensesChange} positiveIsGood={false} />
                    <StatCard icon={<FiList size={28} />} value={`${formatCurrency(stats.totalRevenue / (stats.totalTransactions || 1))} / trx`} label="Rata-rata Transaksi" color="#6c757d" />
                    <StatCard icon={<FiUserCheck size={28} />} value={userName || 'Unknown'} label="Kasir Aktif" color="#20c997" />
                </>
            )}
            <ExpandButton onClick={handleToggleExpand}>
                {isExpanded ? (
                    <>
                        <FiChevronUp size={20} /> Sembunyikan Detail
                    </>
                ) : (
                    <>
                        <FiChevronDown size={20} /> Lihat Detail Lainnya
                    </>
                )}
            </ExpandButton>
        </GridContainer>
    );
}

StatCardGrid.propTypes = {
    loading: PropTypes.bool.isRequired,
    stats: PropTypes.shape({
        totalRevenue: PropTypes.number,
        totalTransactions: PropTypes.number,
        totalProfit: PropTypes.number,
        cashInDrawer: PropTypes.number,
        totalSoldUnits: PropTypes.number,
        newCustomers: PropTypes.number,
        totalExpenses: PropTypes.number,
    }).isRequired,
    previousStats: PropTypes.shape({
        totalRevenue: PropTypes.number,
        totalTransactions: PropTypes.number,
        totalProfit: PropTypes.number,
        totalExpenses: PropTypes.number,
    }),
    userName: PropTypes.string,
};

export default StatCardGrid;

===== frontend\src\pages\Dashboard\components\StockInfoList.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\StockInfoList.jsx

import React from 'react';
import PropTypes from 'prop-types';
import GenericProductList from './GenericProductList'; // PERBAIKAN: Nama file diubah dari GenericList menjadi GenericProductList
import { FiArchive } from 'react-icons/fi';

function StockInfoList({ loading, stockInfo = [] }) {
    const getStockColor = (stock) => {
        if (stock <= 10) return 'var(--red-color)';
        if (stock <= 40) return '#FFA500';
        return 'var(--green-color)';
    };

    return (
        <GenericProductList
            loading={loading}
            items={stockInfo}
            title="Informasi Stok"
            icon={<FiArchive size={22} />}
            renderItemValue={(item) => `${item.stock} unit`}
            emptyMessage="Tidak ada produk untuk ditampilkan."
            showImage
            getStockColor={getStockColor}
        />
    );
}

StockInfoList.propTypes = {
    loading: PropTypes.bool.isRequired,
    stockInfo: PropTypes.arrayOf(
        PropTypes.shape({
            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
            name: PropTypes.string.isRequired,
            stock: PropTypes.number.isRequired,
            image_url: PropTypes.string
        })
    )
};

export default StockInfoList;

===== frontend\src\pages\Dashboard\components\TopCustomersList.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\TopCustomersList.jsx

import React from 'react';
import PropTypes from 'prop-types';
import GenericProductList from './GenericProductList'; // PERBAIKAN: Nama file diubah dari GenericList menjadi GenericProductList
import { FiUsers } from 'react-icons/fi';

function TopCustomersList({ loading, topCustomers = [] }) {
    return (
        <GenericProductList
            loading={loading}
            items={topCustomers}
            title="Pelanggan Teratas"
            icon={<FiUsers size={22} />}
            renderItemValue={(item) => `Rp ${new Intl.NumberFormat('id-ID').format(item.totalSpent)} (${item.totalOrders} order)`}
            renderItemLink={(item) => `/customers/${item.id}`}
            emptyMessage="Belum ada data pelanggan."
        />
    );
}

TopCustomersList.propTypes = {
    loading: PropTypes.bool.isRequired,
    topCustomers: PropTypes.arrayOf(
        PropTypes.shape({
            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
            name: PropTypes.string.isRequired,
            totalSpent: PropTypes.number.isRequired,
            totalOrders: PropTypes.number.isRequired
        })
    )
};

export default React.memo(TopCustomersList);

===== frontend\src\pages\Dashboard\components\TopProductsChart.jsx =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\pages\Dashboard\components\TopProductsChart.jsx

import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, Cell, CartesianGrid } from 'recharts';
import Skeleton from 'react-loading-skeleton';
import { FiTrendingUp } from 'react-icons/fi';

const ChartContainer = styled.div`
    background-color: var(--bg-surface);
    padding: 30px;
    border-radius: 24px;
    border: 1px solid var(--border-color);
    grid-column: 1 / -1;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
`;

const ChartTitle = styled.h3`
    font-size: 1.4rem;
    font-weight: 600;
    margin-bottom: 25px;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 10px;
    justify-content: center;
    text-align: center;
`;

const EmptyStateContainer = styled.div`
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: var(--text-secondary);
    padding: 50px 20px;
    min-height: 250px;
`;

const getColor = (index) => {
    const colors = ['#9D4EDD', '#A968E3', '#B583E8', '#C19DEC', '#CDA7F1', '#007bff', '#28a745', '#FFA500', '#dc3545', '#6f42c4'];
    return colors[index % colors.length];
};

const CustomTooltip = React.memo(({ active, payload, label }) => {
    if (!active || !payload?.length || !label || !payload[0]?.value) {
        return null;
    }
    return (
        <div
            style={{
                backgroundColor: 'var(--bg-surface)',
                border: '1px solid var(--border-color)',
                borderRadius: '8px',
                padding: '10px',
                fontSize: '0.9rem',
                color: 'var(--text-primary)',
                boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
            }}
        >
            <p style={{ color: 'var(--text-secondary)', marginBottom: '5px', fontWeight: '500' }}>{label}</p>
            <p style={{ color: 'var(--primary-color)', margin: 0 }}>
                Terjual: <span style={{ fontWeight: '600' }}>{payload[0].value} unit</span>
            </p>
        </div>
    );
});

CustomTooltip.propTypes = {
    active: PropTypes.bool,
    payload: PropTypes.arrayOf(
        PropTypes.shape({
            value: PropTypes.number.isRequired,
        })
    ),
    label: PropTypes.string,
};
CustomTooltip.displayName = 'CustomTooltip';

function TopProductsChart({ loading, data = [] }) {
    if (loading) {
        return (
            <ChartContainer>
                <ChartTitle>
                    <FiTrendingUp size={22} /> Performa Penjualan Produk
                </ChartTitle>
                <Skeleton height={300} />
            </ChartContainer>
        );
    }

    const formattedData = useMemo(() => {
        return data.map(item => ({
            ...item,
            shortName: item.name || 'Produk Tidak Diketahui',
        }));
    }, [data]);

    const top10Data = formattedData.slice(0, 10);

    return (
        <ChartContainer>
            <ChartTitle>
                <FiTrendingUp size={22} /> Performa Penjualan Produk (Unit Terjual)
            </ChartTitle>
            {top10Data.length > 0 ? (
                <ResponsiveContainer width="100%" height={350}>
                    <BarChart data={top10Data} layout="vertical" margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                        <CartesianGrid strokeDasharray="3 3" stroke="var(--border-color)" />
                        <XAxis type="number" tick={{ fill: 'var(--text-secondary)', fontSize: 12 }} />
                        <YAxis
                            dataKey="shortName"
                            type="category"
                            width={200}
                            tickLine={false}
                            axisLine={false}
                            tick={{ fill: 'var(--text-primary)', fontSize: 12 }}
                        />
                        <Tooltip content={<CustomTooltip />} cursor={{ fill: 'rgba(204, 204, 204, 0.2)' }} />
                        <Bar dataKey="totalSold" name="Unit Terjual" barSize={20} radius={[0, 10, 10, 0]}>
                            {top10Data.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={getColor(index)} />
                            ))}
                        </Bar>
                    </BarChart>
                </ResponsiveContainer>
            ) : (
                <EmptyStateContainer>
                    <FiTrendingUp size={48} />
                    <p>Belum ada data penjualan produk untuk ditampilkan pada periode ini.</p>
                </EmptyStateContainer>
            )}
        </ChartContainer>
    );
}

TopProductsChart.propTypes = {
    loading: PropTypes.bool.isRequired,
    data: PropTypes.arrayOf(
        PropTypes.shape({
            name: PropTypes.string,
            totalSold: PropTypes.number.isRequired,
        })
    ),
};

export default React.memo(TopProductsChart);

===== frontend\src\services\api.js =====
import axios from 'axios';

const API = axios.create({
    baseURL: 'http://localhost:5000/api',
    timeout: 30000,
    // Tambahkan ini jika Anda menggunakan otentikasi berbasis cookie/session.
    // Backend harus mengonfigurasi header 'Access-Control-Allow-Credentials' menjadi 'true'.
    withCredentials: true, 
});

// Request Interceptor
API.interceptors.request.use(
    (config) => {
        // NOTE: Menggunakan localStorage nyaman tetapi rentan terhadap serangan XSS.
        // Untuk aplikasi produksi dengan keamanan tinggi, pertimbangkan menggunakan
        // HTTP-Only cookies yang dikelola oleh backend.
        const token = localStorage.getItem('token');
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }

        if (import.meta.env.DEV && import.meta.env.VITE_LOG_LEVEL === 'debug') {
            console.log(`Request: ${config.method.toUpperCase()} ${config.url}`);
        }
        return config;
    },
    (error) => {
        if (import.meta.env.DEV && import.meta.env.VITE_LOG_LEVEL === 'debug') {
            console.error(`Request error: ${error.config?.method.toUpperCase()} ${error.config?.url} - ${error.message}`);
        }
        return Promise.reject({ message: error.message, code: 'REQUEST_ERROR', status: null });
    }
);

// Response Interceptor
API.interceptors.response.use(
    (response) => {
        if (import.meta.env.DEV && import.meta.env.VITE_LOG_LEVEL === 'debug') {
            console.log(`Response: ${response.config.method.toUpperCase()} ${response.config.url} - ${response.status}`);
        }
        return response;
    },
    async (error) => {
        if (import.meta.env.DEV && import.meta.env.VITE_LOG_LEVEL === 'debug') {
            const status = error.response?.status || 'No status';
            const url = error.response?.config?.url || error.config?.url;
            const method = error.response?.config?.method.toUpperCase() || error.config?.method.toUpperCase();
            console.error(`Response error: ${method} ${url} - ${status} - ${error.message}`);
        }

        const originalRequest = error.config;
        const errorResponse = {
            message: 'An unexpected error occurred.',
            code: 'UNKNOWN',
            status: null,
        };

        if (axios.isCancel(error)) {
            errorResponse.message = 'Request was canceled.';
            errorResponse.code = 'CANCELLED';
        } else if (error.code === 'ECONNABORTED') {
            errorResponse.message = 'Connection timeout. Please ensure the backend is running and connected.';
            errorResponse.code = 'TIMEOUT';
        } else if (error.response) {
            errorResponse.status = error.response.status;
            switch (error.response.status) {
                case 401:
                    errorResponse.message = 'Unauthorized access. Please log in again.';
                    errorResponse.code = 'UNAUTHORIZED';
                    localStorage.removeItem('token');
                    if (typeof window !== 'undefined') {
                        window.location.href = '/login';
                    }
                    break;
                case 403:
                    errorResponse.message = 'Access forbidden. You lack the necessary permissions.';
                    errorResponse.code = 'FORBIDDEN';
                    break;
                case 429:
                    errorResponse.message = 'Too many requests. Please try again later.';
                    errorResponse.code = 'RATE_LIMIT';
                    break;
                default:
                    errorResponse.message = error.response.data?.message || 'Server error occurred.';
                    errorResponse.code = 'SERVER_ERROR';
            }
        } else if (error.request) {
            errorResponse.message = 'No response from server. The server may not be running.';
            errorResponse.code = 'NO_RESPONSE';
        }

        // Logika retry sederhana untuk error server (5xx), hanya coba sekali.
        if (errorResponse.status && errorResponse.status >= 500 && !originalRequest._retry) {
            originalRequest._retry = true;
            console.warn('Server error detected, retrying request...');
            return API(originalRequest);
        }

        return Promise.reject(errorResponse);
    }
);

/**
 * Creates query parameters from an object, handling circular references.
 * @param {Object} params - Parameters to convert to query string.
 * @returns {string} - URL-encoded query string.
 */
const createQueryParams = (params = {}) => {
    const searchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(params)) {
        if (value === null || value === undefined) continue;

        if (Array.isArray(value)) {
            value.forEach((item) => searchParams.append(key, String(item)));
        } else if (value instanceof Date && !isNaN(value)) {
            searchParams.append(key, value.toISOString());
        } else if (typeof value === 'object') {
            try {
                searchParams.append(key, JSON.stringify(value));
            } catch (e) {
                console.error(`Could not stringify object for param '${key}' due to circular reference.`, value);
            }
        } else {
            searchParams.append(key, String(value));
        }
    }
    return searchParams.toString();
};


// --- API Services ---
// (Semua fungsi API dari kode asli Anda ditempatkan di sini)

// User & Auth
export const login = (userData) => API.post('/users/login', userData);
export const registerAdmin = (userData) => API.post('/users/register', userData);
export const createUserByAdmin = (userData) => API.post('/users', userData);
export const getUsers = () => API.get('/users');
export const updateUser = (id, userData) => API.put(`/users/${id}`, userData);
export const deleteUser = (id) => API.delete(`/users/${id}`);
export const forgotPassword = (data) => API.post('/users/forgot-password', data);
export const resetPassword = (token, data) => API.post(`/users/reset-password/${token}`, data);

// Roles & Permissions
export const getRoles = () => API.get('/roles');
export const getRoleById = (id) => API.get(`/roles/${id}`);
export const createRole = (roleData) => API.post('/roles', roleData);
export const updateRole = (id, roleData) => API.put(`/roles/${id}`, roleData);
export const deleteRole = (id) => API.delete(`/roles/${id}`);
export const getPermissions = () => API.get('/roles/permissions');

// Products
export const getProducts = (params = {}) => API.get(`/products?${createQueryParams(params)}`);
export const getProductById = (id) => API.get(`/products/${id}`);
export const createProduct = (productData) => API.post('/products', productData);
export const updateProduct = (id, productData) => API.put(`/products/${id}`, productData);
export const deleteProduct = (id) => API.delete(`/products/${id}`);
export const receiveStock = (submissionData) => API.post('/products/receive-stock', submissionData);
export const adjustStock = (adjustmentData) => API.post('/stock/adjust', adjustmentData);

// Orders
export const createOrder = (orderData) => API.post('/orders', orderData);
export const getOrders = (startDate, endDate) => API.get(`/orders?${createQueryParams({ startDate, endDate })}`);
export const getOrderById = (id) => API.get(`/orders/${id}`);
export const deleteOrder = (id) => API.delete(`/orders/${id}`);
export const sendReceipt = (orderId, email) => API.post(`/orders/${orderId}/send-receipt`, { email });
export const clearOrderHistory = () => API.delete('/orders/clear-history');
export const exportOrders = (startDate, endDate) => API.get(`/orders/export?${createQueryParams({ startDate, endDate })}`, { responseType: 'blob' });

// Analytics
export const getStats = (startDate, endDate, compareStartDate, compareEndDate) => API.get(`/analytics/stats?${createQueryParams({ startDate, endDate, compareStartDate, compareEndDate })}`);
export const getDailySales = (startDate, endDate) => API.get(`/analytics/daily-sales?${createQueryParams({ startDate, endDate })}`);
export const getTopProducts = (startDate, endDate) => API.get(`/analytics/top-products?${createQueryParams({ startDate, endDate })}`);
export const getProductSalesPerformance = (startDate, endDate) => API.get(`/analytics/product-sales-performance?${createQueryParams({ startDate, endDate })}`);
export const getTopCustomers = (startDate, endDate) => API.get(`/analytics/top-customers?${createQueryParams({ startDate, endDate })}`);
export const getCashierPerformance = (startDate, endDate) => API.get(`/analytics/cashier-performance?${createQueryParams({ startDate, endDate })}`);
export const getRecentSuppliers = (limit = 5) => API.get(`/analytics/recent-suppliers?limit=${limit}`);
export const getInsights = (startDate, endDate) => API.get(`/analytics/insights?${createQueryParams({ startDate, endDate })}`);
export const getNotifications = () => API.get('/analytics/notifications');
export const getStockInfo = () => API.get('/analytics/stock-info');
export const getStaleProducts = (days = 30) => API.get(`/analytics/stale-products?days=${days}`);
export const getExpiredProducts = (days = 30) => API.get(`/analytics/expired-products?days=${days}`);
export const getDailyRevenueProfit = (startDate, endDate) => API.get(`/analytics/daily-revenue-profit?${createQueryParams({ startDate, endDate })}`);
export const getProductProfitabilityReport = (params) => API.get('/analytics/product-profitability', { params });

// Reports
export const exportSalesSummaryPDF = (startDate, endDate) => API.get(`/reports/sales-summary?${createQueryParams({ startDate, endDate })}`, {
    responseType: 'blob',
});

// Settings
export const getEmailSettings = () => API.get('/settings/email');
export const saveEmailSettings = (settingsData) => API.post('/settings/email', settingsData);
export const getRevenueTarget = () => API.get('/settings/revenue-target');
export const saveRevenueTarget = (targetData) => API.post('/settings/revenue-target', targetData);
export const getBusinessSettings = () => API.get('/settings/business');
export const saveBusinessSettings = (settingsData) => API.post('/settings/business', settingsData);

// Categories & Subcategories
export const getCategories = () => API.get('/categories');
export const createCategory = (name) => API.post('/categories', { name });
export const deleteCategory = (id) => API.delete(`/categories/${id}`);
export const getSubCategories = (categoryId) => API.get(`/categories/${categoryId}/subcategories`);
export const createSubCategory = (categoryId, subCategoryData) => API.post(`/categories/${categoryId}/subcategories`, subCategoryData);
export const deleteSubCategory = (id) => API.delete(`/categories/subcategories/${id}`);

// Suppliers
export const getSuppliers = () => API.get('/suppliers');
export const createSupplier = (supplierData) => API.post('/suppliers', supplierData);
export const updateSupplier = (id, supplierData) => API.put(`/suppliers/${id}`, supplierData);
export const deleteSupplier = (id) => API.delete(`/suppliers/${id}`);

// Customers
export const getCustomers = (searchTerm = '') => API.get(`/customers?search=${searchTerm}`);
export const getCustomerById = (id) => API.get(`/customers/${id}`);
export const getCustomerHistory = (id) => API.get(`/customers/${id}/history`);
export const getCustomerStats = (id) => API.get(`/customers/${id}/stats`);
export const redeemCustomerPoints = (id, data) => API.post(`/customers/${id}/redeem`, data);
export const createCustomer = (customerData) => API.post('/customers', customerData);
export const updateCustomer = (id, customerData) => API.put(`/customers/${id}`, customerData);
export const deleteCustomer = (id) => API.delete(`/customers/${id}`);

// Expenses
export const getExpenses = () => API.get('/expenses');
export const createExpense = (expenseData) => API.post('/expenses', expenseData);
export const updateExpense = (id, expenseData) => API.put(`/expenses/${id}`, expenseData);
export const deleteExpense = (id) => API.delete(`/expenses/${id}`);

// Promotions
export const getPromotions = () => API.get('/promotions');
export const getPromotionById = (id) => API.get(`/promotions/${id}`);
export const createPromotion = (promoData) => API.post('/promotions', promoData);
export const updatePromotion = (id, promoData) => API.put(`/promotions/${id}`, promoData);
export const deletePromotion = (id) => API.delete(`/promotions/${id}`);
export const validateCoupon = (code) => API.get(`/promotions/validate/${code}`);

// Shifts
export const getCurrentShift = () => API.get('/shifts/current');
export const startShift = (data = {}) => API.post('/shifts/start', data);
export const closeShift = (id, data) => API.post(`/shifts/close/${id}`, data);
export const getShiftHistory = () => API.get('/shifts/history');
export const deleteShift = (id) => API.delete(`/shifts/${id}`);
export const clearShiftHistory = () => API.delete('/shifts/clear-history');
export const exportShiftHistory = () => API.get('/shifts/export', { responseType: 'blob' });

// Purchase Orders
export const getPurchaseOrders = () => API.get('/purchase-orders');
export const createPurchaseOrder = (poData) => API.post('/purchase-orders', poData);
export const updatePurchaseOrderStatus = (id, status) => API.patch(`/purchase-orders/${id}/status`, { status });
export const getPurchaseOrderById = (id) => API.get(`/purchase-orders/${id}`);

// Raw Materials
export const getRawMaterials = () => API.get('/raw-materials');
export const createRawMaterial = (materialData) => API.post('/raw-materials', materialData);
export const updateRawMaterial = (id, materialData) => API.put(`/raw-materials/${id}`, materialData);
export const deleteRawMaterial = (id) => API.delete(`/raw-materials/${id}`);

// Upload
export const uploadImage = (formData) => API.post('/upload/image', formData, {
    headers: { 'Content-Type': 'multipart/form-data' },
});

// Rewards
export const getRewards = () => API.get('/rewards');
export const createReward = (rewardData) => API.post('/rewards', rewardData);
export const updateReward = (id, rewardData) => API.put(`/rewards/${id}`, rewardData);
export const deleteReward = (id) => API.delete(`/rewards/${id}`);
export const redeemRewardForCustomer = (customerId, rewardId) => API.post(`/customers/${customerId}/redeem-reward`, { reward_id: rewardId });

export default API;

===== frontend\src\utils\formatters.js =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\utils\formatters.js

export const parseRupiah = (value) => {
    // FIXED: Added robust validation for various invalid inputs.
    if (value === null || value === undefined || (typeof value !== 'string' && typeof value !== 'number')) {
        return '';
    }
    return String(value).replace(/[^0-9]/g, '');
};

export const formatRupiah = (value) => {
    try {
        const cleanValue = parseRupiah(value);
        // FIXED: Return empty string if parsed value is empty
        if (cleanValue === '') {
            return '';
        }
        const number = Number(cleanValue);
        // FIXED: Check for NaN to prevent crashes
        if (isNaN(number)) {
            return '';
        }
        return new Intl.NumberFormat('id-ID', {
            style: 'currency', currency: 'IDR', minimumFractionDigits: 0, maximumFractionDigits: 0,
        }).format(number);
    } catch (error) {
        console.error('Format Rupiah error:', error.message);
        return ''; // Return empty string to prevent app crashes.
    }
};

===== frontend\src\utils\formatters.test.js =====
import { describe, it, expect } from 'vitest';
import { formatRupiah, parseRupiah } from './formatters.js';

describe('formatters', () => {
    // Tes untuk fungsi formatRupiah
    describe('formatRupiah', () => {
        it('should format a number into a Rupiah string correctly', () => {
            expect(formatRupiah(50000)).toBe('Rp 50.000');
        });

        it('should handle large numbers with correct separators', () => {
            expect(formatRupiah(1234567)).toBe('Rp 1.234.567');
        });

        it('should handle zero correctly', () => {
            expect(formatRupiah(0)).toBe('Rp 0');
        });

        it('should return an empty string for null or undefined input', () => {
            expect(formatRupiah(null)).toBe('');
            expect(formatRupiah(undefined)).toBe('');
        });
    });

    // Tes untuk fungsi parseRupiah
    describe('parseRupiah', () => {
        it('should parse a Rupiah string into a raw number string', () => {
            expect(parseRupiah('Rp 50.000')).toBe('50000');
        });

        it('should remove all separators and Rp prefix', () => {
            expect(parseRupiah('Rp 1.234.567')).toBe('1234567');
        });

        it('should handle input without prefix or separators', () => {
            expect(parseRupiah('75000')).toBe('75000');
        });
    });
});

===== frontend\src\utils\offlineDb.js =====
// C:\Users\Ibnu\Project\smart-pos\frontend\src\utils\offlineDb.js

import Dexie from 'dexie';

export const db = new Dexie('SmartPOSDatabase');

db.version(1).stores({
    offlineOrders: '++id, orderData.createdAt',
});

/**
 * Adds an offline order to the Dexie database.
 * @param {Object} orderData - Order data with required fields: createdAt, items, total_amount.
 * @returns {Promise<{success: boolean, id?: number, error?: string}>} - Result of the operation.
 */
export async function addOfflineOrder(orderData) {
    try {
        if (!orderData || typeof orderData !== 'object') {
            return { success: false, error: 'Order data must be a valid object' };
        }
        if (!orderData.createdAt) {
            return { success: false, error: 'Missing required field: createdAt' };
        }
        if (!Array.isArray(orderData.items) || orderData.items.length === 0) {
            return { success: false, error: 'Missing or invalid required field: items' };
        }
        // --- PERBAIKAN: Mengganti validasi dari 'total' menjadi 'total_amount' ---
        if (typeof orderData.total_amount !== 'number' || orderData.total_amount < 0) {
            return { success: false, error: 'Missing or invalid required field: total_amount' };
        }
        const id = await db.offlineOrders.add({ orderData });
        return { success: true, id };
    } catch (error) {
        console.error('Failed to save offline order:', error);
        return { success: false, error: `Failed to save offline order: ${error.message}` };
    }
}

/**
 * Retrieves all offline orders from the Dexie database.
 * @returns {Promise<{success: boolean, data?: Array, error?: string}>} - Array of offline orders or error.
 */
export async function getAllOfflineOrders() {
    try {
        const data = await db.offlineOrders.toArray();
        return { success: true, data };
    } catch (error) {
        console.error('Failed to retrieve offline orders:', error);
        return { success: false, error: `Failed to retrieve offline orders: ${error.message}` };
    }
}

/**
 * Deletes an offline order by ID.
 * @param {number} id - ID of the order to delete.
 * @returns {Promise<{success: boolean, error?: string}>} - Result of the operation.
 */
export async function deleteOfflineOrder(id) {
    try {
        if (typeof id !== 'number' || id <= 0) {
            return { success: false, error: 'Invalid order ID: Must be a positive number' };
        }
        await db.offlineOrders.delete(id);
        return { success: true };
    } catch (error) {
        console.error(`Failed to delete offline order ID ${id}:`, error);
        return { success: false, error: `Failed to delete offline order: ${error.message}` };
    }
}

